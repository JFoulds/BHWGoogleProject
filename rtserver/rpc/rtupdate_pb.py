# This file automatically generated by protocol-compiler from rtserver/rpc/rtupdate.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

from google3.crawler.contentconverter.linkrecord_pb import LinkRecord
from google3.urlhistory.rpc.urlhistory_pb import UrlHistoryTag
from google3.indexer.globaldata_pb import GAnchors
from google3.indexer.perdocdata.perdocdata_pb import PremiumPerDocData
from google3.indexer.perdocdata.perdocdata_pb import MobilePerDocData
from google3.rtserver.rpc.rtduploghistory_pb import RTDupLogHistory
from google3.repository.updater.indexselection_pb import IndexSelectionSiteStats
from google3.repository.updater.indexselection_pb import IndexSelectionHostStats
from google3.repository.updater.indexselection_pb import IndexSelectionURLStats
from google3.repository.updater.indexselection_pb import SelectionFactors
from google3.repository.updater.indexselection_pb import HistoricalFactors
from google3.repository.updater.pipelineinfo_pb import MicroRepmap
from google3.net.proto.message_set import MessageSet
from google3.repository.updater.indexselection_pb import IndexSelectionOutput
from google3.quality.prose.indexing.proto.url_info_pb import CSEUrlInfo
from google3.quality.richsnippets.proto.richsnippets_pb import PageMap
class LogicalTarget(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.targettype_ = 0
    self.targetstring_ = ""
    self.isundesirablesource_ = 0
    self.targetrepid_ = ""
    self.has_targettype_ = 0
    self.has_targetstring_ = 0
    self.has_isundesirablesource_ = 0
    self.has_targetrepid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def targettype(self): return self.targettype_

  def set_targettype(self, x):
    self.has_targettype_ = 1
    self.targettype_ = x

  def clear_targettype(self):
    self.has_targettype_ = 0
    self.targettype_ = 0

  def has_targettype(self): return self.has_targettype_

  def targetstring(self): return self.targetstring_

  def set_targetstring(self, x):
    self.has_targetstring_ = 1
    self.targetstring_ = x

  def clear_targetstring(self):
    self.has_targetstring_ = 0
    self.targetstring_ = ""

  def has_targetstring(self): return self.has_targetstring_

  def isundesirablesource(self): return self.isundesirablesource_

  def set_isundesirablesource(self, x):
    self.has_isundesirablesource_ = 1
    self.isundesirablesource_ = x

  def clear_isundesirablesource(self):
    self.has_isundesirablesource_ = 0
    self.isundesirablesource_ = 0

  def has_isundesirablesource(self): return self.has_isundesirablesource_

  def targetrepid(self): return self.targetrepid_

  def set_targetrepid(self, x):
    self.has_targetrepid_ = 1
    self.targetrepid_ = x

  def clear_targetrepid(self):
    self.has_targetrepid_ = 0
    self.targetrepid_ = ""

  def has_targetrepid(self): return self.has_targetrepid_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_targettype()): self.set_targettype(x.targettype())
    if (x.has_targetstring()): self.set_targetstring(x.targetstring())
    if (x.has_isundesirablesource()): self.set_isundesirablesource(x.isundesirablesource())
    if (x.has_targetrepid()): self.set_targetrepid(x.targetrepid())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'LogicalTarget', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'LogicalTarget')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'LogicalTarget', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'LogicalTarget', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'LogicalTarget', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_targettype_ != x.has_targettype_: return 0
    if self.has_targettype_ and self.targettype_ != x.targettype_: return 0
    if self.has_targetstring_ != x.has_targetstring_: return 0
    if self.has_targetstring_ and self.targetstring_ != x.targetstring_: return 0
    if self.has_isundesirablesource_ != x.has_isundesirablesource_: return 0
    if self.has_isundesirablesource_ and self.isundesirablesource_ != x.isundesirablesource_: return 0
    if self.has_targetrepid_ != x.has_targetrepid_: return 0
    if self.has_targetrepid_ and self.targetrepid_ != x.targetrepid_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_targettype_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: targettype not set.')
    if (not self.has_targetstring_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: targetstring not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.targettype_)
    n += self.lengthString(len(self.targetstring_))
    if (self.has_isundesirablesource_): n += 2
    if (self.has_targetrepid_): n += 1 + self.lengthString(len(self.targetrepid_))
    return n + 2

  def Clear(self):
    self.clear_targettype()
    self.clear_targetstring()
    self.clear_isundesirablesource()
    self.clear_targetrepid()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.targettype_)
    out.putVarInt32(18)
    out.putPrefixedString(self.targetstring_)
    if (self.has_isundesirablesource_):
      out.putVarInt32(24)
      out.putBoolean(self.isundesirablesource_)
    if (self.has_targetrepid_):
      out.putVarInt32(34)
      out.putPrefixedString(self.targetrepid_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_targettype(d.getVarInt32())
        continue
      if tt == 18:
        self.set_targetstring(d.getPrefixedString())
        continue
      if tt == 24:
        self.set_isundesirablesource(d.getBoolean())
        continue
      if tt == 34:
        self.set_targetrepid(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_targettype_: res+=prefix+("TargetType: %s\n" % self.DebugFormatInt32(self.targettype_))
    if self.has_targetstring_: res+=prefix+("TargetString: %s\n" % self.DebugFormatString(self.targetstring_))
    if self.has_isundesirablesource_: res+=prefix+("IsUndesirableSource: %s\n" % self.DebugFormatBool(self.isundesirablesource_))
    if self.has_targetrepid_: res+=prefix+("TargetRepid: %s\n" % self.DebugFormatString(self.targetrepid_))
    return res

  kTargetType = 1
  kTargetString = 2
  kIsUndesirableSource = 3
  kTargetRepid = 4

  _TEXT = (
   "ErrorCode",  #   0
   "TargetType",  #   1
   "TargetString",  #   2
   "IsUndesirableSource",  #   3
   "TargetRepid",  #   4
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x1b,
    0x72,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x72,
    0x74,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0d,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x13,
    0x1a,
    0x0a,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x49,
    0x73,
    0x55,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x69,
    0x72,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x52,
    0x65,
    0x70,
    0x69,
    0x64,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class MobileData(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.mobileperdocdata_ = None
    self.xhtmlwmltimestamp_ = 0
    self.chtmltimestamp_ = 0
    self.has_mobileperdocdata_ = 0
    self.has_xhtmlwmltimestamp_ = 0
    self.has_chtmltimestamp_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def mobileperdocdata(self):
    if self.mobileperdocdata_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.mobileperdocdata_ is None: self.mobileperdocdata_ = MobilePerDocData()
      finally:
        self.lazy_init_lock_.release()
    return self.mobileperdocdata_

  def mutable_mobileperdocdata(self): self.has_mobileperdocdata_ = 1; return self.mobileperdocdata()

  def clear_mobileperdocdata(self):
    #Warning: this method does not acquire the lock.
    self.has_mobileperdocdata_ = 0;
    if self.mobileperdocdata_ is not None: self.mobileperdocdata_.Clear()

  def has_mobileperdocdata(self): return self.has_mobileperdocdata_

  def xhtmlwmltimestamp(self): return self.xhtmlwmltimestamp_

  def set_xhtmlwmltimestamp(self, x):
    self.has_xhtmlwmltimestamp_ = 1
    self.xhtmlwmltimestamp_ = x

  def clear_xhtmlwmltimestamp(self):
    self.has_xhtmlwmltimestamp_ = 0
    self.xhtmlwmltimestamp_ = 0

  def has_xhtmlwmltimestamp(self): return self.has_xhtmlwmltimestamp_

  def chtmltimestamp(self): return self.chtmltimestamp_

  def set_chtmltimestamp(self, x):
    self.has_chtmltimestamp_ = 1
    self.chtmltimestamp_ = x

  def clear_chtmltimestamp(self):
    self.has_chtmltimestamp_ = 0
    self.chtmltimestamp_ = 0

  def has_chtmltimestamp(self): return self.has_chtmltimestamp_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_mobileperdocdata()): self.mutable_mobileperdocdata().MergeFrom(x.mobileperdocdata())
    if (x.has_xhtmlwmltimestamp()): self.set_xhtmlwmltimestamp(x.xhtmlwmltimestamp())
    if (x.has_chtmltimestamp()): self.set_chtmltimestamp(x.chtmltimestamp())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'MobileData', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'MobileData')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'MobileData', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'MobileData', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'MobileData', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_mobileperdocdata_ != x.has_mobileperdocdata_: return 0
    if self.has_mobileperdocdata_ and self.mobileperdocdata_ != x.mobileperdocdata_: return 0
    if self.has_xhtmlwmltimestamp_ != x.has_xhtmlwmltimestamp_: return 0
    if self.has_xhtmlwmltimestamp_ and self.xhtmlwmltimestamp_ != x.xhtmlwmltimestamp_: return 0
    if self.has_chtmltimestamp_ != x.has_chtmltimestamp_: return 0
    if self.has_chtmltimestamp_ and self.chtmltimestamp_ != x.chtmltimestamp_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (self.has_mobileperdocdata_ and not self.mobileperdocdata_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_mobileperdocdata_): n += 1 + self.lengthString(self.mobileperdocdata_.ByteSize())
    if (self.has_xhtmlwmltimestamp_): n += 1 + self.lengthVarInt64(self.xhtmlwmltimestamp_)
    if (self.has_chtmltimestamp_): n += 1 + self.lengthVarInt64(self.chtmltimestamp_)
    return n + 0

  def Clear(self):
    self.clear_mobileperdocdata()
    self.clear_xhtmlwmltimestamp()
    self.clear_chtmltimestamp()

  def OutputUnchecked(self, out):
    if (self.has_mobileperdocdata_):
      out.putVarInt32(10)
      out.putVarInt32(self.mobileperdocdata_.ByteSize())
      self.mobileperdocdata_.OutputUnchecked(out)
    if (self.has_xhtmlwmltimestamp_):
      out.putVarInt32(16)
      out.putVarInt32(self.xhtmlwmltimestamp_)
    if (self.has_chtmltimestamp_):
      out.putVarInt32(24)
      out.putVarInt32(self.chtmltimestamp_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_mobileperdocdata().TryMerge(tmp)
        continue
      if tt == 16:
        self.set_xhtmlwmltimestamp(d.getVarInt32())
        continue
      if tt == 24:
        self.set_chtmltimestamp(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_mobileperdocdata_:
      res+=prefix+"MobilePerDocData <\n"
      res+=self.mobileperdocdata_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_xhtmlwmltimestamp_: res+=prefix+("XhtmlWmlTimestamp: %s\n" % self.DebugFormatInt32(self.xhtmlwmltimestamp_))
    if self.has_chtmltimestamp_: res+=prefix+("ChtmlTimestamp: %s\n" % self.DebugFormatInt32(self.chtmltimestamp_))
    return res

  kMobilePerDocData = 1
  kXhtmlWmlTimestamp = 2
  kChtmlTimestamp = 3

  _TEXT = (
   "ErrorCode",  #   0
   "MobilePerDocData",  #   1
   "XhtmlWmlTimestamp",  #   2
   "ChtmlTimestamp",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x1b,
    0x72,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x72,
    0x74,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0a,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x13,
    0x1a,
    0x10,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x50,
    0x65,
    0x72,
    0x44,
    0x6f,
    0x63,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x10,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x50,
    0x65,
    0x72,
    0x44,
    0x6f,
    0x63,
    0x44,
    0x61,
    0x74,
    0x61,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x58,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x57,
    0x6d,
    0x6c,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x43,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class RTDocReference_AdditionalChecksums(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.simhash_ = 0
    self.simhashistrusted_ = 1
    self.has_simhash_ = 0
    self.has_simhashistrusted_ = 0
    if contents is not None: self.MergeFromString(contents)

  def simhash(self): return self.simhash_

  def set_simhash(self, x):
    self.has_simhash_ = 1
    self.simhash_ = x

  def clear_simhash(self):
    self.has_simhash_ = 0
    self.simhash_ = 0

  def has_simhash(self): return self.has_simhash_

  def simhashistrusted(self): return self.simhashistrusted_

  def set_simhashistrusted(self, x):
    self.has_simhashistrusted_ = 1
    self.simhashistrusted_ = x

  def clear_simhashistrusted(self):
    self.has_simhashistrusted_ = 0
    self.simhashistrusted_ = 1

  def has_simhashistrusted(self): return self.has_simhashistrusted_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_simhash()): self.set_simhash(x.simhash())
    if (x.has_simhashistrusted()): self.set_simhashistrusted(x.simhashistrusted())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDocReference', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDocReference')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDocReference', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDocReference', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDocReference', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_simhash_ != x.has_simhash_: return 0
    if self.has_simhash_ and self.simhash_ != x.simhash_: return 0
    if self.has_simhashistrusted_ != x.has_simhashistrusted_: return 0
    if self.has_simhashistrusted_ and self.simhashistrusted_ != x.simhashistrusted_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_simhash_): n += 2 + self.lengthVarInt64(self.simhash_)
    if (self.has_simhashistrusted_): n += 3
    return n + 0

  def Clear(self):
    self.clear_simhash()
    self.clear_simhashistrusted()

  def OutputUnchecked(self, out):
    if (self.has_simhash_):
      out.putVarInt32(208)
      out.putVarUint64(self.simhash_)
    if (self.has_simhashistrusted_):
      out.putVarInt32(216)
      out.putBoolean(self.simhashistrusted_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 204: break
      if tt == 208:
        self.set_simhash(d.getVarUint64())
        continue
      if tt == 216:
        self.set_simhashistrusted(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_simhash_: res+=prefix+("SimHash: %s\n" % self.DebugFormatInt64(self.simhash_))
    if self.has_simhashistrusted_: res+=prefix+("SimHashIsTrusted: %s\n" % self.DebugFormatBool(self.simhashistrusted_))
    return res

class RTDocReference(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.queue_ = 0
    self.segid_ = 0
    self.filenum_ = 0
    self.fileposoffset_ = 0
    self.microrepmapfilenum_ = 0
    self.microrepmapfileposoffset_ = 0
    self.linkrecordfilenum_ = 0
    self.linkrecordfileposoffset_ = 0
    self.representativeid_ = ""
    self.pagerank_ = 0
    self.pagerank_ns_ = 0
    self.urlstats_ = None
    self.targetfromtoolbar_ = ""
    self.timestamp_ = 0
    self.contentchecksum_ = 0
    self.reused_from_repository_ = 0
    self.webmirrorsource_ = 0
    self.crawllooptimestamp_ = 0
    self.additionalchecksums_ = None
    self.url_ = ""
    self.urlmatchings_ = 0
    self.trawlerfetchstate_ = 0
    self.responsecode_ = 0
    self.isnotserving_ = 0
    self.noindexreason_ = 0
    self.isextranavboostdup_deprecated_ = 0
    self.isextraduptokeep_deprecated_ = 0
    self.forwardingpurposes_ = 0
    self.forwardingtype_ = 0
    self.repidafterredirects_ = ""
    self.finalrepidafterredirects_ = ""
    self.logicaltargetchoices_ = []
    self.ipaddr_ = 0
    self.mobiledata_ = None
    self.summary_doc_attachments_ = None
    self.has_queue_ = 0
    self.has_segid_ = 0
    self.has_filenum_ = 0
    self.has_fileposoffset_ = 0
    self.has_microrepmapfilenum_ = 0
    self.has_microrepmapfileposoffset_ = 0
    self.has_linkrecordfilenum_ = 0
    self.has_linkrecordfileposoffset_ = 0
    self.has_representativeid_ = 0
    self.has_pagerank_ = 0
    self.has_pagerank_ns_ = 0
    self.has_urlstats_ = 0
    self.has_targetfromtoolbar_ = 0
    self.has_timestamp_ = 0
    self.has_contentchecksum_ = 0
    self.has_reused_from_repository_ = 0
    self.has_webmirrorsource_ = 0
    self.has_crawllooptimestamp_ = 0
    self.has_additionalchecksums_ = 0
    self.has_url_ = 0
    self.has_urlmatchings_ = 0
    self.has_trawlerfetchstate_ = 0
    self.has_responsecode_ = 0
    self.has_isnotserving_ = 0
    self.has_noindexreason_ = 0
    self.has_isextranavboostdup_deprecated_ = 0
    self.has_isextraduptokeep_deprecated_ = 0
    self.has_forwardingpurposes_ = 0
    self.has_forwardingtype_ = 0
    self.has_repidafterredirects_ = 0
    self.has_finalrepidafterredirects_ = 0
    self.has_ipaddr_ = 0
    self.has_mobiledata_ = 0
    self.has_summary_doc_attachments_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def queue(self): return self.queue_

  def set_queue(self, x):
    self.has_queue_ = 1
    self.queue_ = x

  def clear_queue(self):
    self.has_queue_ = 0
    self.queue_ = 0

  def has_queue(self): return self.has_queue_

  def segid(self): return self.segid_

  def set_segid(self, x):
    self.has_segid_ = 1
    self.segid_ = x

  def clear_segid(self):
    self.has_segid_ = 0
    self.segid_ = 0

  def has_segid(self): return self.has_segid_

  def filenum(self): return self.filenum_

  def set_filenum(self, x):
    self.has_filenum_ = 1
    self.filenum_ = x

  def clear_filenum(self):
    self.has_filenum_ = 0
    self.filenum_ = 0

  def has_filenum(self): return self.has_filenum_

  def fileposoffset(self): return self.fileposoffset_

  def set_fileposoffset(self, x):
    self.has_fileposoffset_ = 1
    self.fileposoffset_ = x

  def clear_fileposoffset(self):
    self.has_fileposoffset_ = 0
    self.fileposoffset_ = 0

  def has_fileposoffset(self): return self.has_fileposoffset_

  def microrepmapfilenum(self): return self.microrepmapfilenum_

  def set_microrepmapfilenum(self, x):
    self.has_microrepmapfilenum_ = 1
    self.microrepmapfilenum_ = x

  def clear_microrepmapfilenum(self):
    self.has_microrepmapfilenum_ = 0
    self.microrepmapfilenum_ = 0

  def has_microrepmapfilenum(self): return self.has_microrepmapfilenum_

  def microrepmapfileposoffset(self): return self.microrepmapfileposoffset_

  def set_microrepmapfileposoffset(self, x):
    self.has_microrepmapfileposoffset_ = 1
    self.microrepmapfileposoffset_ = x

  def clear_microrepmapfileposoffset(self):
    self.has_microrepmapfileposoffset_ = 0
    self.microrepmapfileposoffset_ = 0

  def has_microrepmapfileposoffset(self): return self.has_microrepmapfileposoffset_

  def linkrecordfilenum(self): return self.linkrecordfilenum_

  def set_linkrecordfilenum(self, x):
    self.has_linkrecordfilenum_ = 1
    self.linkrecordfilenum_ = x

  def clear_linkrecordfilenum(self):
    self.has_linkrecordfilenum_ = 0
    self.linkrecordfilenum_ = 0

  def has_linkrecordfilenum(self): return self.has_linkrecordfilenum_

  def linkrecordfileposoffset(self): return self.linkrecordfileposoffset_

  def set_linkrecordfileposoffset(self, x):
    self.has_linkrecordfileposoffset_ = 1
    self.linkrecordfileposoffset_ = x

  def clear_linkrecordfileposoffset(self):
    self.has_linkrecordfileposoffset_ = 0
    self.linkrecordfileposoffset_ = 0

  def has_linkrecordfileposoffset(self): return self.has_linkrecordfileposoffset_

  def representativeid(self): return self.representativeid_

  def set_representativeid(self, x):
    self.has_representativeid_ = 1
    self.representativeid_ = x

  def clear_representativeid(self):
    self.has_representativeid_ = 0
    self.representativeid_ = ""

  def has_representativeid(self): return self.has_representativeid_

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 0

  def has_pagerank(self): return self.has_pagerank_

  def pagerank_ns(self): return self.pagerank_ns_

  def set_pagerank_ns(self, x):
    self.has_pagerank_ns_ = 1
    self.pagerank_ns_ = x

  def clear_pagerank_ns(self):
    self.has_pagerank_ns_ = 0
    self.pagerank_ns_ = 0

  def has_pagerank_ns(self): return self.has_pagerank_ns_

  def urlstats(self):
    if self.urlstats_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.urlstats_ is None: self.urlstats_ = IndexSelectionURLStats()
      finally:
        self.lazy_init_lock_.release()
    return self.urlstats_

  def mutable_urlstats(self): self.has_urlstats_ = 1; return self.urlstats()

  def clear_urlstats(self):
    #Warning: this method does not acquire the lock.
    self.has_urlstats_ = 0;
    if self.urlstats_ is not None: self.urlstats_.Clear()

  def has_urlstats(self): return self.has_urlstats_

  def targetfromtoolbar(self): return self.targetfromtoolbar_

  def set_targetfromtoolbar(self, x):
    self.has_targetfromtoolbar_ = 1
    self.targetfromtoolbar_ = x

  def clear_targetfromtoolbar(self):
    self.has_targetfromtoolbar_ = 0
    self.targetfromtoolbar_ = ""

  def has_targetfromtoolbar(self): return self.has_targetfromtoolbar_

  def timestamp(self): return self.timestamp_

  def set_timestamp(self, x):
    self.has_timestamp_ = 1
    self.timestamp_ = x

  def clear_timestamp(self):
    self.has_timestamp_ = 0
    self.timestamp_ = 0

  def has_timestamp(self): return self.has_timestamp_

  def contentchecksum(self): return self.contentchecksum_

  def set_contentchecksum(self, x):
    self.has_contentchecksum_ = 1
    self.contentchecksum_ = x

  def clear_contentchecksum(self):
    self.has_contentchecksum_ = 0
    self.contentchecksum_ = 0

  def has_contentchecksum(self): return self.has_contentchecksum_

  def reused_from_repository(self): return self.reused_from_repository_

  def set_reused_from_repository(self, x):
    self.has_reused_from_repository_ = 1
    self.reused_from_repository_ = x

  def clear_reused_from_repository(self):
    self.has_reused_from_repository_ = 0
    self.reused_from_repository_ = 0

  def has_reused_from_repository(self): return self.has_reused_from_repository_

  def webmirrorsource(self): return self.webmirrorsource_

  def set_webmirrorsource(self, x):
    self.has_webmirrorsource_ = 1
    self.webmirrorsource_ = x

  def clear_webmirrorsource(self):
    self.has_webmirrorsource_ = 0
    self.webmirrorsource_ = 0

  def has_webmirrorsource(self): return self.has_webmirrorsource_

  def crawllooptimestamp(self): return self.crawllooptimestamp_

  def set_crawllooptimestamp(self, x):
    self.has_crawllooptimestamp_ = 1
    self.crawllooptimestamp_ = x

  def clear_crawllooptimestamp(self):
    self.has_crawllooptimestamp_ = 0
    self.crawllooptimestamp_ = 0

  def has_crawllooptimestamp(self): return self.has_crawllooptimestamp_

  def additionalchecksums(self):
    if self.additionalchecksums_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.additionalchecksums_ is None: self.additionalchecksums_ = RTDocReference_AdditionalChecksums()
      finally:
        self.lazy_init_lock_.release()
    return self.additionalchecksums_

  def mutable_additionalchecksums(self): self.has_additionalchecksums_ = 1; return self.additionalchecksums()

  def clear_additionalchecksums(self):
    #Warning: this method does not acquire the lock.
    self.has_additionalchecksums_ = 0;
    if self.additionalchecksums_ is not None: self.additionalchecksums_.Clear()

  def has_additionalchecksums(self): return self.has_additionalchecksums_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def urlmatchings(self): return self.urlmatchings_

  def set_urlmatchings(self, x):
    self.has_urlmatchings_ = 1
    self.urlmatchings_ = x

  def clear_urlmatchings(self):
    self.has_urlmatchings_ = 0
    self.urlmatchings_ = 0

  def has_urlmatchings(self): return self.has_urlmatchings_

  def trawlerfetchstate(self): return self.trawlerfetchstate_

  def set_trawlerfetchstate(self, x):
    self.has_trawlerfetchstate_ = 1
    self.trawlerfetchstate_ = x

  def clear_trawlerfetchstate(self):
    self.has_trawlerfetchstate_ = 0
    self.trawlerfetchstate_ = 0

  def has_trawlerfetchstate(self): return self.has_trawlerfetchstate_

  def responsecode(self): return self.responsecode_

  def set_responsecode(self, x):
    self.has_responsecode_ = 1
    self.responsecode_ = x

  def clear_responsecode(self):
    self.has_responsecode_ = 0
    self.responsecode_ = 0

  def has_responsecode(self): return self.has_responsecode_

  def isnotserving(self): return self.isnotserving_

  def set_isnotserving(self, x):
    self.has_isnotserving_ = 1
    self.isnotserving_ = x

  def clear_isnotserving(self):
    self.has_isnotserving_ = 0
    self.isnotserving_ = 0

  def has_isnotserving(self): return self.has_isnotserving_

  def noindexreason(self): return self.noindexreason_

  def set_noindexreason(self, x):
    self.has_noindexreason_ = 1
    self.noindexreason_ = x

  def clear_noindexreason(self):
    self.has_noindexreason_ = 0
    self.noindexreason_ = 0

  def has_noindexreason(self): return self.has_noindexreason_

  def isextranavboostdup_deprecated(self): return self.isextranavboostdup_deprecated_

  def set_isextranavboostdup_deprecated(self, x):
    self.has_isextranavboostdup_deprecated_ = 1
    self.isextranavboostdup_deprecated_ = x

  def clear_isextranavboostdup_deprecated(self):
    self.has_isextranavboostdup_deprecated_ = 0
    self.isextranavboostdup_deprecated_ = 0

  def has_isextranavboostdup_deprecated(self): return self.has_isextranavboostdup_deprecated_

  def isextraduptokeep_deprecated(self): return self.isextraduptokeep_deprecated_

  def set_isextraduptokeep_deprecated(self, x):
    self.has_isextraduptokeep_deprecated_ = 1
    self.isextraduptokeep_deprecated_ = x

  def clear_isextraduptokeep_deprecated(self):
    self.has_isextraduptokeep_deprecated_ = 0
    self.isextraduptokeep_deprecated_ = 0

  def has_isextraduptokeep_deprecated(self): return self.has_isextraduptokeep_deprecated_

  def forwardingpurposes(self): return self.forwardingpurposes_

  def set_forwardingpurposes(self, x):
    self.has_forwardingpurposes_ = 1
    self.forwardingpurposes_ = x

  def clear_forwardingpurposes(self):
    self.has_forwardingpurposes_ = 0
    self.forwardingpurposes_ = 0

  def has_forwardingpurposes(self): return self.has_forwardingpurposes_

  def forwardingtype(self): return self.forwardingtype_

  def set_forwardingtype(self, x):
    self.has_forwardingtype_ = 1
    self.forwardingtype_ = x

  def clear_forwardingtype(self):
    self.has_forwardingtype_ = 0
    self.forwardingtype_ = 0

  def has_forwardingtype(self): return self.has_forwardingtype_

  def repidafterredirects(self): return self.repidafterredirects_

  def set_repidafterredirects(self, x):
    self.has_repidafterredirects_ = 1
    self.repidafterredirects_ = x

  def clear_repidafterredirects(self):
    self.has_repidafterredirects_ = 0
    self.repidafterredirects_ = ""

  def has_repidafterredirects(self): return self.has_repidafterredirects_

  def finalrepidafterredirects(self): return self.finalrepidafterredirects_

  def set_finalrepidafterredirects(self, x):
    self.has_finalrepidafterredirects_ = 1
    self.finalrepidafterredirects_ = x

  def clear_finalrepidafterredirects(self):
    self.has_finalrepidafterredirects_ = 0
    self.finalrepidafterredirects_ = ""

  def has_finalrepidafterredirects(self): return self.has_finalrepidafterredirects_

  def logicaltargetchoices_size(self): return len(self.logicaltargetchoices_)
  def logicaltargetchoices_list(self): return self.logicaltargetchoices_

  def logicaltargetchoices(self, i):
    return self.logicaltargetchoices_[i]

  def mutable_logicaltargetchoices(self, i):
    return self.logicaltargetchoices_[i]

  def add_logicaltargetchoices(self):
    x = LogicalTarget()
    self.logicaltargetchoices_.append(x)
    return x

  def clear_logicaltargetchoices(self):
    self.logicaltargetchoices_ = []
  def ipaddr(self): return self.ipaddr_

  def set_ipaddr(self, x):
    self.has_ipaddr_ = 1
    self.ipaddr_ = x

  def clear_ipaddr(self):
    self.has_ipaddr_ = 0
    self.ipaddr_ = 0

  def has_ipaddr(self): return self.has_ipaddr_

  def mobiledata(self):
    if self.mobiledata_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.mobiledata_ is None: self.mobiledata_ = MobileData()
      finally:
        self.lazy_init_lock_.release()
    return self.mobiledata_

  def mutable_mobiledata(self): self.has_mobiledata_ = 1; return self.mobiledata()

  def clear_mobiledata(self):
    #Warning: this method does not acquire the lock.
    self.has_mobiledata_ = 0;
    if self.mobiledata_ is not None: self.mobiledata_.Clear()

  def has_mobiledata(self): return self.has_mobiledata_

  def summary_doc_attachments(self):
    if self.summary_doc_attachments_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.summary_doc_attachments_ is None: self.summary_doc_attachments_ = MessageSet()
      finally:
        self.lazy_init_lock_.release()
    return self.summary_doc_attachments_

  def mutable_summary_doc_attachments(self): self.has_summary_doc_attachments_ = 1; return self.summary_doc_attachments()

  def clear_summary_doc_attachments(self):
    #Warning: this method does not acquire the lock.
    self.has_summary_doc_attachments_ = 0;
    if self.summary_doc_attachments_ is not None: self.summary_doc_attachments_.Clear()

  def has_summary_doc_attachments(self): return self.has_summary_doc_attachments_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_queue()): self.set_queue(x.queue())
    if (x.has_segid()): self.set_segid(x.segid())
    if (x.has_filenum()): self.set_filenum(x.filenum())
    if (x.has_fileposoffset()): self.set_fileposoffset(x.fileposoffset())
    if (x.has_microrepmapfilenum()): self.set_microrepmapfilenum(x.microrepmapfilenum())
    if (x.has_microrepmapfileposoffset()): self.set_microrepmapfileposoffset(x.microrepmapfileposoffset())
    if (x.has_linkrecordfilenum()): self.set_linkrecordfilenum(x.linkrecordfilenum())
    if (x.has_linkrecordfileposoffset()): self.set_linkrecordfileposoffset(x.linkrecordfileposoffset())
    if (x.has_representativeid()): self.set_representativeid(x.representativeid())
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())
    if (x.has_pagerank_ns()): self.set_pagerank_ns(x.pagerank_ns())
    if (x.has_urlstats()): self.mutable_urlstats().MergeFrom(x.urlstats())
    if (x.has_targetfromtoolbar()): self.set_targetfromtoolbar(x.targetfromtoolbar())
    if (x.has_timestamp()): self.set_timestamp(x.timestamp())
    if (x.has_contentchecksum()): self.set_contentchecksum(x.contentchecksum())
    if (x.has_reused_from_repository()): self.set_reused_from_repository(x.reused_from_repository())
    if (x.has_webmirrorsource()): self.set_webmirrorsource(x.webmirrorsource())
    if (x.has_crawllooptimestamp()): self.set_crawllooptimestamp(x.crawllooptimestamp())
    if (x.has_additionalchecksums()): self.mutable_additionalchecksums().MergeFrom(x.additionalchecksums())
    if (x.has_url()): self.set_url(x.url())
    if (x.has_urlmatchings()): self.set_urlmatchings(x.urlmatchings())
    if (x.has_trawlerfetchstate()): self.set_trawlerfetchstate(x.trawlerfetchstate())
    if (x.has_responsecode()): self.set_responsecode(x.responsecode())
    if (x.has_isnotserving()): self.set_isnotserving(x.isnotserving())
    if (x.has_noindexreason()): self.set_noindexreason(x.noindexreason())
    if (x.has_isextranavboostdup_deprecated()): self.set_isextranavboostdup_deprecated(x.isextranavboostdup_deprecated())
    if (x.has_isextraduptokeep_deprecated()): self.set_isextraduptokeep_deprecated(x.isextraduptokeep_deprecated())
    if (x.has_forwardingpurposes()): self.set_forwardingpurposes(x.forwardingpurposes())
    if (x.has_forwardingtype()): self.set_forwardingtype(x.forwardingtype())
    if (x.has_repidafterredirects()): self.set_repidafterredirects(x.repidafterredirects())
    if (x.has_finalrepidafterredirects()): self.set_finalrepidafterredirects(x.finalrepidafterredirects())
    for i in xrange(x.logicaltargetchoices_size()): self.add_logicaltargetchoices().CopyFrom(x.logicaltargetchoices(i))
    if (x.has_ipaddr()): self.set_ipaddr(x.ipaddr())
    if (x.has_mobiledata()): self.mutable_mobiledata().MergeFrom(x.mobiledata())
    if (x.has_summary_doc_attachments()): self.mutable_summary_doc_attachments().MergeFrom(x.summary_doc_attachments())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDocReference', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDocReference')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDocReference', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDocReference', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDocReference', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_queue_ != x.has_queue_: return 0
    if self.has_queue_ and self.queue_ != x.queue_: return 0
    if self.has_segid_ != x.has_segid_: return 0
    if self.has_segid_ and self.segid_ != x.segid_: return 0
    if self.has_filenum_ != x.has_filenum_: return 0
    if self.has_filenum_ and self.filenum_ != x.filenum_: return 0
    if self.has_fileposoffset_ != x.has_fileposoffset_: return 0
    if self.has_fileposoffset_ and self.fileposoffset_ != x.fileposoffset_: return 0
    if self.has_microrepmapfilenum_ != x.has_microrepmapfilenum_: return 0
    if self.has_microrepmapfilenum_ and self.microrepmapfilenum_ != x.microrepmapfilenum_: return 0
    if self.has_microrepmapfileposoffset_ != x.has_microrepmapfileposoffset_: return 0
    if self.has_microrepmapfileposoffset_ and self.microrepmapfileposoffset_ != x.microrepmapfileposoffset_: return 0
    if self.has_linkrecordfilenum_ != x.has_linkrecordfilenum_: return 0
    if self.has_linkrecordfilenum_ and self.linkrecordfilenum_ != x.linkrecordfilenum_: return 0
    if self.has_linkrecordfileposoffset_ != x.has_linkrecordfileposoffset_: return 0
    if self.has_linkrecordfileposoffset_ and self.linkrecordfileposoffset_ != x.linkrecordfileposoffset_: return 0
    if self.has_representativeid_ != x.has_representativeid_: return 0
    if self.has_representativeid_ and self.representativeid_ != x.representativeid_: return 0
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    if self.has_pagerank_ns_ != x.has_pagerank_ns_: return 0
    if self.has_pagerank_ns_ and self.pagerank_ns_ != x.pagerank_ns_: return 0
    if self.has_urlstats_ != x.has_urlstats_: return 0
    if self.has_urlstats_ and self.urlstats_ != x.urlstats_: return 0
    if self.has_targetfromtoolbar_ != x.has_targetfromtoolbar_: return 0
    if self.has_targetfromtoolbar_ and self.targetfromtoolbar_ != x.targetfromtoolbar_: return 0
    if self.has_timestamp_ != x.has_timestamp_: return 0
    if self.has_timestamp_ and self.timestamp_ != x.timestamp_: return 0
    if self.has_contentchecksum_ != x.has_contentchecksum_: return 0
    if self.has_contentchecksum_ and self.contentchecksum_ != x.contentchecksum_: return 0
    if self.has_reused_from_repository_ != x.has_reused_from_repository_: return 0
    if self.has_reused_from_repository_ and self.reused_from_repository_ != x.reused_from_repository_: return 0
    if self.has_webmirrorsource_ != x.has_webmirrorsource_: return 0
    if self.has_webmirrorsource_ and self.webmirrorsource_ != x.webmirrorsource_: return 0
    if self.has_crawllooptimestamp_ != x.has_crawllooptimestamp_: return 0
    if self.has_crawllooptimestamp_ and self.crawllooptimestamp_ != x.crawllooptimestamp_: return 0
    if self.has_additionalchecksums_ != x.has_additionalchecksums_: return 0
    if self.has_additionalchecksums_ and self.additionalchecksums_ != x.additionalchecksums_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_urlmatchings_ != x.has_urlmatchings_: return 0
    if self.has_urlmatchings_ and self.urlmatchings_ != x.urlmatchings_: return 0
    if self.has_trawlerfetchstate_ != x.has_trawlerfetchstate_: return 0
    if self.has_trawlerfetchstate_ and self.trawlerfetchstate_ != x.trawlerfetchstate_: return 0
    if self.has_responsecode_ != x.has_responsecode_: return 0
    if self.has_responsecode_ and self.responsecode_ != x.responsecode_: return 0
    if self.has_isnotserving_ != x.has_isnotserving_: return 0
    if self.has_isnotserving_ and self.isnotserving_ != x.isnotserving_: return 0
    if self.has_noindexreason_ != x.has_noindexreason_: return 0
    if self.has_noindexreason_ and self.noindexreason_ != x.noindexreason_: return 0
    if self.has_isextranavboostdup_deprecated_ != x.has_isextranavboostdup_deprecated_: return 0
    if self.has_isextranavboostdup_deprecated_ and self.isextranavboostdup_deprecated_ != x.isextranavboostdup_deprecated_: return 0
    if self.has_isextraduptokeep_deprecated_ != x.has_isextraduptokeep_deprecated_: return 0
    if self.has_isextraduptokeep_deprecated_ and self.isextraduptokeep_deprecated_ != x.isextraduptokeep_deprecated_: return 0
    if self.has_forwardingpurposes_ != x.has_forwardingpurposes_: return 0
    if self.has_forwardingpurposes_ and self.forwardingpurposes_ != x.forwardingpurposes_: return 0
    if self.has_forwardingtype_ != x.has_forwardingtype_: return 0
    if self.has_forwardingtype_ and self.forwardingtype_ != x.forwardingtype_: return 0
    if self.has_repidafterredirects_ != x.has_repidafterredirects_: return 0
    if self.has_repidafterredirects_ and self.repidafterredirects_ != x.repidafterredirects_: return 0
    if self.has_finalrepidafterredirects_ != x.has_finalrepidafterredirects_: return 0
    if self.has_finalrepidafterredirects_ and self.finalrepidafterredirects_ != x.finalrepidafterredirects_: return 0
    if len(self.logicaltargetchoices_) != len(x.logicaltargetchoices_): return 0
    for e1, e2 in zip(self.logicaltargetchoices_, x.logicaltargetchoices_):
      if e1 != e2: return 0
    if self.has_ipaddr_ != x.has_ipaddr_: return 0
    if self.has_ipaddr_ and self.ipaddr_ != x.ipaddr_: return 0
    if self.has_mobiledata_ != x.has_mobiledata_: return 0
    if self.has_mobiledata_ and self.mobiledata_ != x.mobiledata_: return 0
    if self.has_summary_doc_attachments_ != x.has_summary_doc_attachments_: return 0
    if self.has_summary_doc_attachments_ and self.summary_doc_attachments_ != x.summary_doc_attachments_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (self.has_urlstats_ and not self.urlstats_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_additionalchecksums_ and not self.additionalchecksums_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.logicaltargetchoices_)):
      if (not self.logicaltargetchoices_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_mobiledata_ and not self.mobiledata_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_summary_doc_attachments_ and not self.summary_doc_attachments_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_queue_): n += 1 + self.lengthVarInt64(self.queue_)
    if (self.has_segid_): n += 1 + self.lengthVarInt64(self.segid_)
    if (self.has_filenum_): n += 1 + self.lengthVarInt64(self.filenum_)
    if (self.has_fileposoffset_): n += 1 + self.lengthVarInt64(self.fileposoffset_)
    if (self.has_microrepmapfilenum_): n += 1 + self.lengthVarInt64(self.microrepmapfilenum_)
    if (self.has_microrepmapfileposoffset_): n += 1 + self.lengthVarInt64(self.microrepmapfileposoffset_)
    if (self.has_linkrecordfilenum_): n += 2 + self.lengthVarInt64(self.linkrecordfilenum_)
    if (self.has_linkrecordfileposoffset_): n += 2 + self.lengthVarInt64(self.linkrecordfileposoffset_)
    if (self.has_representativeid_): n += 2 + self.lengthString(len(self.representativeid_))
    if (self.has_pagerank_): n += 2 + self.lengthVarInt64(self.pagerank_)
    if (self.has_pagerank_ns_): n += 2 + self.lengthVarInt64(self.pagerank_ns_)
    if (self.has_urlstats_): n += 2 + self.lengthString(self.urlstats_.ByteSize())
    if (self.has_targetfromtoolbar_): n += 2 + self.lengthString(len(self.targetfromtoolbar_))
    if (self.has_timestamp_): n += 1 + self.lengthVarInt64(self.timestamp_)
    if (self.has_contentchecksum_): n += 1 + self.lengthVarInt64(self.contentchecksum_)
    if (self.has_reused_from_repository_): n += 2
    if (self.has_webmirrorsource_): n += 1 + self.lengthVarInt64(self.webmirrorsource_)
    if (self.has_crawllooptimestamp_): n += 1 + self.lengthVarInt64(self.crawllooptimestamp_)
    if (self.has_additionalchecksums_): n += 4 + self.additionalchecksums_.ByteSize()
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    if (self.has_urlmatchings_): n += 2 + self.lengthVarInt64(self.urlmatchings_)
    if (self.has_trawlerfetchstate_): n += 1 + self.lengthVarInt64(self.trawlerfetchstate_)
    if (self.has_responsecode_): n += 1 + self.lengthVarInt64(self.responsecode_)
    if (self.has_isnotserving_): n += 2
    if (self.has_noindexreason_): n += 2 + self.lengthVarInt64(self.noindexreason_)
    if (self.has_isextranavboostdup_deprecated_): n += 3
    if (self.has_isextraduptokeep_deprecated_): n += 3
    if (self.has_forwardingpurposes_): n += 6
    if (self.has_forwardingtype_): n += 6
    if (self.has_repidafterredirects_): n += 2 + self.lengthString(len(self.repidafterredirects_))
    if (self.has_finalrepidafterredirects_): n += 2 + self.lengthString(len(self.finalrepidafterredirects_))
    n += 2 * len(self.logicaltargetchoices_)
    for i in xrange(len(self.logicaltargetchoices_)): n += self.lengthString(self.logicaltargetchoices_[i].ByteSize())
    if (self.has_ipaddr_): n += 2 + self.lengthVarInt64(self.ipaddr_)
    if (self.has_mobiledata_): n += 2 + self.lengthString(self.mobiledata_.ByteSize())
    if (self.has_summary_doc_attachments_): n += 2 + self.lengthString(self.summary_doc_attachments_.ByteSize())
    return n + 0

  def Clear(self):
    self.clear_queue()
    self.clear_segid()
    self.clear_filenum()
    self.clear_fileposoffset()
    self.clear_microrepmapfilenum()
    self.clear_microrepmapfileposoffset()
    self.clear_linkrecordfilenum()
    self.clear_linkrecordfileposoffset()
    self.clear_representativeid()
    self.clear_pagerank()
    self.clear_pagerank_ns()
    self.clear_urlstats()
    self.clear_targetfromtoolbar()
    self.clear_timestamp()
    self.clear_contentchecksum()
    self.clear_reused_from_repository()
    self.clear_webmirrorsource()
    self.clear_crawllooptimestamp()
    self.clear_additionalchecksums()
    self.clear_url()
    self.clear_urlmatchings()
    self.clear_trawlerfetchstate()
    self.clear_responsecode()
    self.clear_isnotserving()
    self.clear_noindexreason()
    self.clear_isextranavboostdup_deprecated()
    self.clear_isextraduptokeep_deprecated()
    self.clear_forwardingpurposes()
    self.clear_forwardingtype()
    self.clear_repidafterredirects()
    self.clear_finalrepidafterredirects()
    self.clear_logicaltargetchoices()
    self.clear_ipaddr()
    self.clear_mobiledata()
    self.clear_summary_doc_attachments()

  def OutputUnchecked(self, out):
    if (self.has_queue_):
      out.putVarInt32(8)
      out.putVarInt32(self.queue_)
    if (self.has_segid_):
      out.putVarInt32(16)
      out.putVarInt32(self.segid_)
    if (self.has_filenum_):
      out.putVarInt32(24)
      out.putVarInt32(self.filenum_)
    if (self.has_fileposoffset_):
      out.putVarInt32(32)
      out.putVarInt64(self.fileposoffset_)
    if (self.has_timestamp_):
      out.putVarInt32(40)
      out.putVarInt32(self.timestamp_)
    if (self.has_contentchecksum_):
      out.putVarInt32(48)
      out.putVarInt64(self.contentchecksum_)
    if (self.has_reused_from_repository_):
      out.putVarInt32(56)
      out.putBoolean(self.reused_from_repository_)
    if (self.has_webmirrorsource_):
      out.putVarInt32(64)
      out.putVarInt32(self.webmirrorsource_)
    if (self.has_crawllooptimestamp_):
      out.putVarInt32(72)
      out.putVarUint64(self.crawllooptimestamp_)
    if (self.has_url_):
      out.putVarInt32(82)
      out.putPrefixedString(self.url_)
    if (self.has_trawlerfetchstate_):
      out.putVarInt32(88)
      out.putVarInt32(self.trawlerfetchstate_)
    if (self.has_responsecode_):
      out.putVarInt32(96)
      out.putVarInt32(self.responsecode_)
    if (self.has_isnotserving_):
      out.putVarInt32(104)
      out.putBoolean(self.isnotserving_)
    if (self.has_microrepmapfilenum_):
      out.putVarInt32(112)
      out.putVarInt32(self.microrepmapfilenum_)
    if (self.has_microrepmapfileposoffset_):
      out.putVarInt32(120)
      out.putVarInt64(self.microrepmapfileposoffset_)
    if (self.has_representativeid_):
      out.putVarInt32(130)
      out.putPrefixedString(self.representativeid_)
    if (self.has_pagerank_):
      out.putVarInt32(136)
      out.putVarInt32(self.pagerank_)
    if (self.has_noindexreason_):
      out.putVarInt32(144)
      out.putVarInt32(self.noindexreason_)
    if (self.has_isextranavboostdup_deprecated_):
      out.putVarInt32(152)
      out.putBoolean(self.isextranavboostdup_deprecated_)
    if (self.has_isextraduptokeep_deprecated_):
      out.putVarInt32(160)
      out.putBoolean(self.isextraduptokeep_deprecated_)
    if (self.has_forwardingpurposes_):
      out.putVarInt32(173)
      out.put32(self.forwardingpurposes_)
    if (self.has_forwardingtype_):
      out.putVarInt32(181)
      out.put32(self.forwardingtype_)
    if (self.has_urlmatchings_):
      out.putVarInt32(184)
      out.putVarInt32(self.urlmatchings_)
    if (self.has_urlstats_):
      out.putVarInt32(194)
      out.putVarInt32(self.urlstats_.ByteSize())
      self.urlstats_.OutputUnchecked(out)
    if (self.has_additionalchecksums_):
      out.putVarInt32(203)
      self.additionalchecksums_.OutputUnchecked(out)
      out.putVarInt32(204)
    if (self.has_linkrecordfilenum_):
      out.putVarInt32(224)
      out.putVarInt32(self.linkrecordfilenum_)
    if (self.has_linkrecordfileposoffset_):
      out.putVarInt32(232)
      out.putVarInt64(self.linkrecordfileposoffset_)
    if (self.has_repidafterredirects_):
      out.putVarInt32(242)
      out.putPrefixedString(self.repidafterredirects_)
    if (self.has_finalrepidafterredirects_):
      out.putVarInt32(250)
      out.putPrefixedString(self.finalrepidafterredirects_)
    for i in xrange(len(self.logicaltargetchoices_)):
      out.putVarInt32(258)
      out.putVarInt32(self.logicaltargetchoices_[i].ByteSize())
      self.logicaltargetchoices_[i].OutputUnchecked(out)
    if (self.has_ipaddr_):
      out.putVarInt32(264)
      out.putVarInt64(self.ipaddr_)
    if (self.has_mobiledata_):
      out.putVarInt32(274)
      out.putVarInt32(self.mobiledata_.ByteSize())
      self.mobiledata_.OutputUnchecked(out)
    if (self.has_summary_doc_attachments_):
      out.putVarInt32(282)
      out.putVarInt32(self.summary_doc_attachments_.ByteSize())
      self.summary_doc_attachments_.OutputUnchecked(out)
    if (self.has_targetfromtoolbar_):
      out.putVarInt32(290)
      out.putPrefixedString(self.targetfromtoolbar_)
    if (self.has_pagerank_ns_):
      out.putVarInt32(296)
      out.putVarInt32(self.pagerank_ns_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_queue(d.getVarInt32())
        continue
      if tt == 16:
        self.set_segid(d.getVarInt32())
        continue
      if tt == 24:
        self.set_filenum(d.getVarInt32())
        continue
      if tt == 32:
        self.set_fileposoffset(d.getVarInt64())
        continue
      if tt == 40:
        self.set_timestamp(d.getVarInt32())
        continue
      if tt == 48:
        self.set_contentchecksum(d.getVarInt64())
        continue
      if tt == 56:
        self.set_reused_from_repository(d.getBoolean())
        continue
      if tt == 64:
        self.set_webmirrorsource(d.getVarInt32())
        continue
      if tt == 72:
        self.set_crawllooptimestamp(d.getVarUint64())
        continue
      if tt == 82:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 88:
        self.set_trawlerfetchstate(d.getVarInt32())
        continue
      if tt == 96:
        self.set_responsecode(d.getVarInt32())
        continue
      if tt == 104:
        self.set_isnotserving(d.getBoolean())
        continue
      if tt == 112:
        self.set_microrepmapfilenum(d.getVarInt32())
        continue
      if tt == 120:
        self.set_microrepmapfileposoffset(d.getVarInt64())
        continue
      if tt == 130:
        self.set_representativeid(d.getPrefixedString())
        continue
      if tt == 136:
        self.set_pagerank(d.getVarInt32())
        continue
      if tt == 144:
        self.set_noindexreason(d.getVarInt32())
        continue
      if tt == 152:
        self.set_isextranavboostdup_deprecated(d.getBoolean())
        continue
      if tt == 160:
        self.set_isextraduptokeep_deprecated(d.getBoolean())
        continue
      if tt == 173:
        self.set_forwardingpurposes(d.get32())
        continue
      if tt == 181:
        self.set_forwardingtype(d.get32())
        continue
      if tt == 184:
        self.set_urlmatchings(d.getVarInt32())
        continue
      if tt == 194:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_urlstats().TryMerge(tmp)
        continue
      if tt == 203:
        self.mutable_additionalchecksums().TryMerge(d)
        continue
      if tt == 224:
        self.set_linkrecordfilenum(d.getVarInt32())
        continue
      if tt == 232:
        self.set_linkrecordfileposoffset(d.getVarInt64())
        continue
      if tt == 242:
        self.set_repidafterredirects(d.getPrefixedString())
        continue
      if tt == 250:
        self.set_finalrepidafterredirects(d.getPrefixedString())
        continue
      if tt == 258:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_logicaltargetchoices().TryMerge(tmp)
        continue
      if tt == 264:
        self.set_ipaddr(d.getVarInt64())
        continue
      if tt == 274:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_mobiledata().TryMerge(tmp)
        continue
      if tt == 282:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_summary_doc_attachments().TryMerge(tmp)
        continue
      if tt == 290:
        self.set_targetfromtoolbar(d.getPrefixedString())
        continue
      if tt == 296:
        self.set_pagerank_ns(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_queue_: res+=prefix+("Queue: %s\n" % self.DebugFormatInt32(self.queue_))
    if self.has_segid_: res+=prefix+("SegId: %s\n" % self.DebugFormatInt32(self.segid_))
    if self.has_filenum_: res+=prefix+("FileNum: %s\n" % self.DebugFormatInt32(self.filenum_))
    if self.has_fileposoffset_: res+=prefix+("FilePosOffset: %s\n" % self.DebugFormatInt64(self.fileposoffset_))
    if self.has_microrepmapfilenum_: res+=prefix+("MicroRepmapFileNum: %s\n" % self.DebugFormatInt32(self.microrepmapfilenum_))
    if self.has_microrepmapfileposoffset_: res+=prefix+("MicroRepmapFilePosOffset: %s\n" % self.DebugFormatInt64(self.microrepmapfileposoffset_))
    if self.has_linkrecordfilenum_: res+=prefix+("LinkRecordFileNum: %s\n" % self.DebugFormatInt32(self.linkrecordfilenum_))
    if self.has_linkrecordfileposoffset_: res+=prefix+("LinkRecordFilePosOffset: %s\n" % self.DebugFormatInt64(self.linkrecordfileposoffset_))
    if self.has_representativeid_: res+=prefix+("RepresentativeId: %s\n" % self.DebugFormatString(self.representativeid_))
    if self.has_pagerank_: res+=prefix+("Pagerank: %s\n" % self.DebugFormatInt32(self.pagerank_))
    if self.has_pagerank_ns_: res+=prefix+("Pagerank_NS: %s\n" % self.DebugFormatInt32(self.pagerank_ns_))
    if self.has_urlstats_:
      res+=prefix+"URLStats <\n"
      res+=self.urlstats_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_targetfromtoolbar_: res+=prefix+("TargetFromToolbar: %s\n" % self.DebugFormatString(self.targetfromtoolbar_))
    if self.has_timestamp_: res+=prefix+("Timestamp: %s\n" % self.DebugFormatInt32(self.timestamp_))
    if self.has_contentchecksum_: res+=prefix+("ContentChecksum: %s\n" % self.DebugFormatInt64(self.contentchecksum_))
    if self.has_reused_from_repository_: res+=prefix+("Reused_From_Repository: %s\n" % self.DebugFormatBool(self.reused_from_repository_))
    if self.has_webmirrorsource_: res+=prefix+("WebMirrorSource: %s\n" % self.DebugFormatInt32(self.webmirrorsource_))
    if self.has_crawllooptimestamp_: res+=prefix+("CrawlLoopTimeStamp: %s\n" % self.DebugFormatInt64(self.crawllooptimestamp_))
    if self.has_additionalchecksums_:
      res+=prefix+"AdditionalChecksums {\n"
      res+=self.additionalchecksums_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_url_: res+=prefix+("Url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_urlmatchings_: res+=prefix+("UrlMatchings: %s\n" % self.DebugFormatInt32(self.urlmatchings_))
    if self.has_trawlerfetchstate_: res+=prefix+("TrawlerFetchState: %s\n" % self.DebugFormatInt32(self.trawlerfetchstate_))
    if self.has_responsecode_: res+=prefix+("ResponseCode: %s\n" % self.DebugFormatInt32(self.responsecode_))
    if self.has_isnotserving_: res+=prefix+("IsNotServing: %s\n" % self.DebugFormatBool(self.isnotserving_))
    if self.has_noindexreason_: res+=prefix+("NoIndexReason: %s\n" % self.DebugFormatInt32(self.noindexreason_))
    if self.has_isextranavboostdup_deprecated_: res+=prefix+("IsExtraNavboostDup_DEPRECATED: %s\n" % self.DebugFormatBool(self.isextranavboostdup_deprecated_))
    if self.has_isextraduptokeep_deprecated_: res+=prefix+("IsExtraDupToKeep_DEPRECATED: %s\n" % self.DebugFormatBool(self.isextraduptokeep_deprecated_))
    if self.has_forwardingpurposes_: res+=prefix+("ForwardingPurposes: %s\n" % self.DebugFormatFixed32(self.forwardingpurposes_))
    if self.has_forwardingtype_: res+=prefix+("ForwardingType: %s\n" % self.DebugFormatFixed32(self.forwardingtype_))
    if self.has_repidafterredirects_: res+=prefix+("RepIdAfterRedirects: %s\n" % self.DebugFormatString(self.repidafterredirects_))
    if self.has_finalrepidafterredirects_: res+=prefix+("FinalRepIdAfterRedirects: %s\n" % self.DebugFormatString(self.finalrepidafterredirects_))
    cnt=0
    for e in self.logicaltargetchoices_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("LogicalTargetChoices%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_ipaddr_: res+=prefix+("IpAddr: %s\n" % self.DebugFormatInt64(self.ipaddr_))
    if self.has_mobiledata_:
      res+=prefix+"MobileData <\n"
      res+=self.mobiledata_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_summary_doc_attachments_:
      res+=prefix+"summary_doc_attachments <\n"
      res+=self.summary_doc_attachments_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

  kQueue = 1
  kSegId = 2
  kFileNum = 3
  kFilePosOffset = 4
  kMicroRepmapFileNum = 14
  kMicroRepmapFilePosOffset = 15
  kLinkRecordFileNum = 28
  kLinkRecordFilePosOffset = 29
  kRepresentativeId = 16
  kPagerank = 17
  kPagerank_NS = 37
  kURLStats = 24
  kTargetFromToolbar = 36
  kTimestamp = 5
  kContentChecksum = 6
  kReused_From_Repository = 7
  kWebMirrorSource = 8
  kCrawlLoopTimeStamp = 9
  kAdditionalChecksumsGroup = 25
  kAdditionalChecksumsSimHash = 26
  kAdditionalChecksumsSimHashIsTrusted = 27
  kUrl = 10
  kUrlMatchings = 23
  kTrawlerFetchState = 11
  kResponseCode = 12
  kIsNotServing = 13
  kNoIndexReason = 18
  kIsExtraNavboostDup_DEPRECATED = 19
  kIsExtraDupToKeep_DEPRECATED = 20
  kForwardingPurposes = 21
  kForwardingType = 22
  kRepIdAfterRedirects = 30
  kFinalRepIdAfterRedirects = 31
  kLogicalTargetChoices = 32
  kIpAddr = 33
  kMobileData = 34
  ksummary_doc_attachments = 35

  _TEXT = (
   "ErrorCode",  #   0
   "Queue",  #   1
   "SegId",  #   2
   "FileNum",  #   3
   "FilePosOffset",  #   4
   "Timestamp",  #   5
   "ContentChecksum",  #   6
   "Reused_From_Repository",  #   7
   "WebMirrorSource",  #   8
   "CrawlLoopTimeStamp",  #   9
   "Url",  #  10
   "TrawlerFetchState",  #  11
   "ResponseCode",  #  12
   "IsNotServing",  #  13
   "MicroRepmapFileNum",  #  14
   "MicroRepmapFilePosOffset",  #  15
   "RepresentativeId",  #  16
   "Pagerank",  #  17
   "NoIndexReason",  #  18
   "IsExtraNavboostDup_DEPRECATED",  #  19
   "IsExtraDupToKeep_DEPRECATED",  #  20
   "ForwardingPurposes",  #  21
   "ForwardingType",  #  22
   "UrlMatchings",  #  23
   "URLStats",  #  24
   "AdditionalChecksums",  #  25
   "SimHash",  #  26
   "SimHashIsTrusted",  #  27
   "LinkRecordFileNum",  #  28
   "LinkRecordFilePosOffset",  #  29
   "RepIdAfterRedirects",  #  30
   "FinalRepIdAfterRedirects",  #  31
   "LogicalTargetChoices",  #  32
   "IpAddr",  #  33
   "MobileData",  #  34
   "summary_doc_attachments",  #  35
   "TargetFromToolbar",  #  36
   "Pagerank_NS",  #  37
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.STRING,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.NUMERIC,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.STRING,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.NUMERIC,  #  18

   ProtocolBuffer.Encoder.NUMERIC,  #  19

   ProtocolBuffer.Encoder.NUMERIC,  #  20

   ProtocolBuffer.Encoder.FLOAT,  #  21

   ProtocolBuffer.Encoder.FLOAT,  #  22

   ProtocolBuffer.Encoder.NUMERIC,  #  23

   ProtocolBuffer.Encoder.STRING,  #  24

   ProtocolBuffer.Encoder.STARTGROUP,  #  25

   ProtocolBuffer.Encoder.NUMERIC,  #  26

   ProtocolBuffer.Encoder.NUMERIC,  #  27

   ProtocolBuffer.Encoder.NUMERIC,  #  28

   ProtocolBuffer.Encoder.NUMERIC,  #  29

   ProtocolBuffer.Encoder.STRING,  #  30

   ProtocolBuffer.Encoder.STRING,  #  31

   ProtocolBuffer.Encoder.STRING,  #  32

   ProtocolBuffer.Encoder.NUMERIC,  #  33

   ProtocolBuffer.Encoder.STRING,  #  34

   ProtocolBuffer.Encoder.STRING,  #  35

   ProtocolBuffer.Encoder.STRING,  #  36

   ProtocolBuffer.Encoder.NUMERIC,  #  37

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x1b,
    0x72,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x72,
    0x74,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x13,
    0x1a,
    0x05,
    0x51,
    0x75,
    0x65,
    0x75,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x53,
    0x65,
    0x67,
    0x49,
    0x64,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x4e,
    0x75,
    0x6d,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x50,
    0x6f,
    0x73,
    0x4f,
    0x66,
    0x66,
    0x73,
    0x65,
    0x74,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x4d,
    0x69,
    0x63,
    0x72,
    0x6f,
    0x52,
    0x65,
    0x70,
    0x6d,
    0x61,
    0x70,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x4e,
    0x75,
    0x6d,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x4d,
    0x69,
    0x63,
    0x72,
    0x6f,
    0x52,
    0x65,
    0x70,
    0x6d,
    0x61,
    0x70,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x50,
    0x6f,
    0x73,
    0x4f,
    0x66,
    0x66,
    0x73,
    0x65,
    0x74,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x4e,
    0x75,
    0x6d,
    0x20,
    0x1c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x50,
    0x6f,
    0x73,
    0x4f,
    0x66,
    0x66,
    0x73,
    0x65,
    0x74,
    0x20,
    0x1d,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x52,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x49,
    0x64,
    0x20,
    0x10,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x4e,
    0x53,
    0x20,
    0x25,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x20,
    0x18,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x29,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x46,
    0x72,
    0x6f,
    0x6d,
    0x54,
    0x6f,
    0x6f,
    0x6c,
    0x62,
    0x61,
    0x72,
    0x20,
    0x24,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x75,
    0x73,
    0x65,
    0x64,
    0x5f,
    0x46,
    0x72,
    0x6f,
    0x6d,
    0x5f,
    0x52,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x57,
    0x65,
    0x62,
    0x4d,
    0x69,
    0x72,
    0x72,
    0x6f,
    0x72,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x43,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x4c,
    0x6f,
    0x6f,
    0x70,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x53,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x20,
    0x19,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x53,
    0x69,
    0x6d,
    0x48,
    0x61,
    0x73,
    0x68,
    0x20,
    0x1a,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x12,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x53,
    0x69,
    0x6d,
    0x48,
    0x61,
    0x73,
    0x68,
    0x49,
    0x73,
    0x54,
    0x72,
    0x75,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x1b,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0x60,
    0x12,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x0a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x55,
    0x72,
    0x6c,
    0x4d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x17,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x54,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x65,
    0x72,
    0x46,
    0x65,
    0x74,
    0x63,
    0x68,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x52,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x49,
    0x73,
    0x4e,
    0x6f,
    0x74,
    0x53,
    0x65,
    0x72,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x0d,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4e,
    0x6f,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x12,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x49,
    0x73,
    0x45,
    0x78,
    0x74,
    0x72,
    0x61,
    0x4e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x44,
    0x75,
    0x70,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0x13,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x49,
    0x73,
    0x45,
    0x78,
    0x74,
    0x72,
    0x61,
    0x44,
    0x75,
    0x70,
    0x54,
    0x6f,
    0x4b,
    0x65,
    0x65,
    0x70,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0x14,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x50,
    0x75,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x73,
    0x20,
    0x15,
    0x28,
    0x05,
    0x30,
    0x07,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x16,
    0x28,
    0x05,
    0x30,
    0x07,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x1e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x46,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x1f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x43,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x20,
    0x20,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0d,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x49,
    0x70,
    0x41,
    0x64,
    0x64,
    0x72,
    0x20,
    0x21,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x22,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0a,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x73,
    0x75,
    0x6d,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x23,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0a,
    0x4d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x53,
    0x65,
    0x74,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class RTDocEmbedding_Parent(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.urlfp_deprecated_ = ""
    self.url_ = ""
    self.has_urlfp_deprecated_ = 0
    self.has_url_ = 0
    if contents is not None: self.MergeFromString(contents)

  def urlfp_deprecated(self): return self.urlfp_deprecated_

  def set_urlfp_deprecated(self, x):
    self.has_urlfp_deprecated_ = 1
    self.urlfp_deprecated_ = x

  def clear_urlfp_deprecated(self):
    self.has_urlfp_deprecated_ = 0
    self.urlfp_deprecated_ = ""

  def has_urlfp_deprecated(self): return self.has_urlfp_deprecated_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_urlfp_deprecated()): self.set_urlfp_deprecated(x.urlfp_deprecated())
    if (x.has_url()): self.set_url(x.url())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDocEmbedding', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDocEmbedding')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDocEmbedding', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDocEmbedding', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDocEmbedding', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_urlfp_deprecated_ != x.has_urlfp_deprecated_: return 0
    if self.has_urlfp_deprecated_ and self.urlfp_deprecated_ != x.urlfp_deprecated_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_url_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: url not set.')
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_urlfp_deprecated_): n += 1 + self.lengthString(len(self.urlfp_deprecated_))
    n += self.lengthString(len(self.url_))
    return n + 1

  def Clear(self):
    self.clear_urlfp_deprecated()
    self.clear_url()

  def OutputUnchecked(self, out):
    if (self.has_urlfp_deprecated_):
      out.putVarInt32(18)
      out.putPrefixedString(self.urlfp_deprecated_)
    out.putVarInt32(26)
    out.putPrefixedString(self.url_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 18:
        self.set_urlfp_deprecated(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_url(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_urlfp_deprecated_: res+=prefix+("urlfp_DEPRECATED: %s\n" % self.DebugFormatString(self.urlfp_deprecated_))
    if self.has_url_: res+=prefix+("url: %s\n" % self.DebugFormatString(self.url_))
    return res

class RTDocEmbedding_Target(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.urlfp_deprecated_ = ""
    self.location_ = []
    self.embed_type_ = 0
    self.url_ = ""
    self.originalurl_ = ""
    self.repid_ = ""
    self.has_urlfp_deprecated_ = 0
    self.has_embed_type_ = 0
    self.has_url_ = 0
    self.has_originalurl_ = 0
    self.has_repid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def urlfp_deprecated(self): return self.urlfp_deprecated_

  def set_urlfp_deprecated(self, x):
    self.has_urlfp_deprecated_ = 1
    self.urlfp_deprecated_ = x

  def clear_urlfp_deprecated(self):
    self.has_urlfp_deprecated_ = 0
    self.urlfp_deprecated_ = ""

  def has_urlfp_deprecated(self): return self.has_urlfp_deprecated_

  def location_size(self): return len(self.location_)
  def location_list(self): return self.location_

  def location(self, i):
    return self.location_[i]

  def mutable_location(self, i):
    return self.location_[i]

  def add_location(self):
    x = RTDocReference()
    self.location_.append(x)
    return x

  def clear_location(self):
    self.location_ = []
  def embed_type(self): return self.embed_type_

  def set_embed_type(self, x):
    self.has_embed_type_ = 1
    self.embed_type_ = x

  def clear_embed_type(self):
    self.has_embed_type_ = 0
    self.embed_type_ = 0

  def has_embed_type(self): return self.has_embed_type_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def originalurl(self): return self.originalurl_

  def set_originalurl(self, x):
    self.has_originalurl_ = 1
    self.originalurl_ = x

  def clear_originalurl(self):
    self.has_originalurl_ = 0
    self.originalurl_ = ""

  def has_originalurl(self): return self.has_originalurl_

  def repid(self): return self.repid_

  def set_repid(self, x):
    self.has_repid_ = 1
    self.repid_ = x

  def clear_repid(self):
    self.has_repid_ = 0
    self.repid_ = ""

  def has_repid(self): return self.has_repid_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_urlfp_deprecated()): self.set_urlfp_deprecated(x.urlfp_deprecated())
    for i in xrange(x.location_size()): self.add_location().CopyFrom(x.location(i))
    if (x.has_embed_type()): self.set_embed_type(x.embed_type())
    if (x.has_url()): self.set_url(x.url())
    if (x.has_originalurl()): self.set_originalurl(x.originalurl())
    if (x.has_repid()): self.set_repid(x.repid())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDocEmbedding', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDocEmbedding')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDocEmbedding', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDocEmbedding', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDocEmbedding', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_urlfp_deprecated_ != x.has_urlfp_deprecated_: return 0
    if self.has_urlfp_deprecated_ and self.urlfp_deprecated_ != x.urlfp_deprecated_: return 0
    if len(self.location_) != len(x.location_): return 0
    for e1, e2 in zip(self.location_, x.location_):
      if e1 != e2: return 0
    if self.has_embed_type_ != x.has_embed_type_: return 0
    if self.has_embed_type_ and self.embed_type_ != x.embed_type_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_originalurl_ != x.has_originalurl_: return 0
    if self.has_originalurl_ and self.originalurl_ != x.originalurl_: return 0
    if self.has_repid_ != x.has_repid_: return 0
    if self.has_repid_ and self.repid_ != x.repid_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.location_)):
      if (not self.location_[i].IsInitialized(debug_strs)): initialized=0
    if (not self.has_url_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: url not set.')
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_urlfp_deprecated_): n += 1 + self.lengthString(len(self.urlfp_deprecated_))
    n += 1 * len(self.location_)
    for i in xrange(len(self.location_)): n += self.lengthString(self.location_[i].ByteSize())
    if (self.has_embed_type_): n += 1 + self.lengthVarInt64(self.embed_type_)
    n += self.lengthString(len(self.url_))
    if (self.has_originalurl_): n += 1 + self.lengthString(len(self.originalurl_))
    if (self.has_repid_): n += 1 + self.lengthString(len(self.repid_))
    return n + 1

  def Clear(self):
    self.clear_urlfp_deprecated()
    self.clear_location()
    self.clear_embed_type()
    self.clear_url()
    self.clear_originalurl()
    self.clear_repid()

  def OutputUnchecked(self, out):
    if (self.has_urlfp_deprecated_):
      out.putVarInt32(42)
      out.putPrefixedString(self.urlfp_deprecated_)
    for i in xrange(len(self.location_)):
      out.putVarInt32(50)
      out.putVarInt32(self.location_[i].ByteSize())
      self.location_[i].OutputUnchecked(out)
    if (self.has_embed_type_):
      out.putVarInt32(56)
      out.putVarInt32(self.embed_type_)
    out.putVarInt32(66)
    out.putPrefixedString(self.url_)
    if (self.has_originalurl_):
      out.putVarInt32(74)
      out.putPrefixedString(self.originalurl_)
    if (self.has_repid_):
      out.putVarInt32(82)
      out.putPrefixedString(self.repid_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 36: break
      if tt == 42:
        self.set_urlfp_deprecated(d.getPrefixedString())
        continue
      if tt == 50:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_location().TryMerge(tmp)
        continue
      if tt == 56:
        self.set_embed_type(d.getVarInt32())
        continue
      if tt == 66:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 74:
        self.set_originalurl(d.getPrefixedString())
        continue
      if tt == 82:
        self.set_repid(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_urlfp_deprecated_: res+=prefix+("urlfp_DEPRECATED: %s\n" % self.DebugFormatString(self.urlfp_deprecated_))
    cnt=0
    for e in self.location_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Location%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_embed_type_: res+=prefix+("embed_type: %s\n" % self.DebugFormatInt32(self.embed_type_))
    if self.has_url_: res+=prefix+("url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_originalurl_: res+=prefix+("OriginalUrl: %s\n" % self.DebugFormatString(self.originalurl_))
    if self.has_repid_: res+=prefix+("Repid: %s\n" % self.DebugFormatString(self.repid_))
    return res

class RTDocEmbedding(ProtocolBuffer.ProtocolMessage):

  TYPE_FRAME   =    0 
  TYPE_IFRAME  =    1 
  TYPE_OBJECT  =    2 
  NUM_EMBED_TYPES =    3 

  _EmbedType_NAMES = {
    0: "TYPE_FRAME",
    1: "TYPE_IFRAME",
    2: "TYPE_OBJECT",
    3: "NUM_EMBED_TYPES",
  }

  def EmbedType_Name(cls, x): return cls._EmbedType_NAMES.get(x, "")
  EmbedType_Name = classmethod(EmbedType_Name)

  def __init__(self, contents=None):
    self.parent_ = RTDocEmbedding_Parent()
    self.target_ = []
    self.has_parent_ = 0
    if contents is not None: self.MergeFromString(contents)

  def parent(self): return self.parent_

  def mutable_parent(self): self.has_parent_ = 1; return self.parent_

  def clear_parent(self):self.has_parent_ = 0; self.parent_.Clear()

  def has_parent(self): return self.has_parent_

  def target_size(self): return len(self.target_)
  def target_list(self): return self.target_

  def target(self, i):
    return self.target_[i]

  def mutable_target(self, i):
    return self.target_[i]

  def add_target(self):
    x = RTDocEmbedding_Target()
    self.target_.append(x)
    return x

  def clear_target(self):
    self.target_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_parent()): self.mutable_parent().MergeFrom(x.parent())
    for i in xrange(x.target_size()): self.add_target().CopyFrom(x.target(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDocEmbedding', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDocEmbedding')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDocEmbedding', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDocEmbedding', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDocEmbedding', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_parent_ != x.has_parent_: return 0
    if self.has_parent_ and self.parent_ != x.parent_: return 0
    if len(self.target_) != len(x.target_): return 0
    for e1, e2 in zip(self.target_, x.target_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_parent_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: parent not set.')
    elif not self.parent_.IsInitialized(debug_strs): initialized = 0
    for i in xrange(len(self.target_)):
      if (not self.target_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.parent_.ByteSize()
    n += 2 * len(self.target_)
    for i in xrange(len(self.target_)): n += self.target_[i].ByteSize()
    return n + 2

  def Clear(self):
    self.clear_parent()
    self.clear_target()

  def OutputUnchecked(self, out):
    out.putVarInt32(11)
    self.parent_.OutputUnchecked(out)
    out.putVarInt32(12)
    for i in xrange(len(self.target_)):
      out.putVarInt32(35)
      self.target_[i].OutputUnchecked(out)
      out.putVarInt32(36)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.mutable_parent().TryMerge(d)
        continue
      if tt == 35:
        self.add_target().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_parent_:
      res+=prefix+"Parent {\n"
      res+=self.parent_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    cnt=0
    for e in self.target_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Target%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kParentGroup = 1
  kParenturlfp_DEPRECATED = 2
  kParenturl = 3
  kTargetGroup = 4
  kTargeturlfp_DEPRECATED = 5
  kTargetLocation = 6
  kTargetembed_type = 7
  kTargeturl = 8
  kTargetOriginalUrl = 9
  kTargetRepid = 10

  _TEXT = (
   "ErrorCode",  #   0
   "Parent",  #   1
   "urlfp_DEPRECATED",  #   2
   "url",  #   3
   "Target",  #   4
   "urlfp_DEPRECATED",  #   5
   "Location",  #   6
   "embed_type",  #   7
   "url",  #   8
   "OriginalUrl",  #   9
   "Repid",  #  10
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.STARTGROUP,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.STRING,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.STRING,  #  10

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x1b,
    0x72,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x72,
    0x74,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x45,
    0x6d,
    0x62,
    0x65,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x13,
    0x1a,
    0x06,
    0x50,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x50,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x75,
    0x72,
    0x6c,
    0x66,
    0x70,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x50,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x20,
    0x04,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x75,
    0x72,
    0x6c,
    0x66,
    0x70,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x64,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x03,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x08,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x4f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x69,
    0x64,
    0x20,
    0x0a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x03,
    0x14,
    0x73,
    0x7a,
    0x09,
    0x45,
    0x6d,
    0x62,
    0x65,
    0x64,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x46,
    0x52,
    0x41,
    0x4d,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x46,
    0x52,
    0x41,
    0x4d,
    0x45,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x4f,
    0x42,
    0x4a,
    0x45,
    0x43,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4e,
    0x55,
    0x4d,
    0x5f,
    0x45,
    0x4d,
    0x42,
    0x45,
    0x44,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x53,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class RTUpdate_PipelineInfoIndexSpecificFactors_DEPRECATEDSubIndexFactors(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.subindex_ = 0
    self.isselected_ = 0
    self.factors_ = []
    self.has_subindex_ = 0
    self.has_isselected_ = 0
    if contents is not None: self.MergeFromString(contents)

  def subindex(self): return self.subindex_

  def set_subindex(self, x):
    self.has_subindex_ = 1
    self.subindex_ = x

  def clear_subindex(self):
    self.has_subindex_ = 0
    self.subindex_ = 0

  def has_subindex(self): return self.has_subindex_

  def isselected(self): return self.isselected_

  def set_isselected(self, x):
    self.has_isselected_ = 1
    self.isselected_ = x

  def clear_isselected(self):
    self.has_isselected_ = 0
    self.isselected_ = 0

  def has_isselected(self): return self.has_isselected_

  def factors_size(self): return len(self.factors_)
  def factors_list(self): return self.factors_

  def factors(self, i):
    return self.factors_[i]

  def mutable_factors(self, i):
    return self.factors_[i]

  def add_factors(self):
    x = SelectionFactors()
    self.factors_.append(x)
    return x

  def clear_factors(self):
    self.factors_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_subindex()): self.set_subindex(x.subindex())
    if (x.has_isselected()): self.set_isselected(x.isselected())
    for i in xrange(x.factors_size()): self.add_factors().CopyFrom(x.factors(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_subindex_ != x.has_subindex_: return 0
    if self.has_subindex_ and self.subindex_ != x.subindex_: return 0
    if self.has_isselected_ != x.has_isselected_: return 0
    if self.has_isselected_ and self.isselected_ != x.isselected_: return 0
    if len(self.factors_) != len(x.factors_): return 0
    for e1, e2 in zip(self.factors_, x.factors_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_subindex_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: subindex not set.')
    if (not self.has_isselected_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: isselected not set.')
    for i in xrange(len(self.factors_)):
      if (not self.factors_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.subindex_)
    n += 2 * len(self.factors_)
    for i in xrange(len(self.factors_)): n += self.lengthString(self.factors_[i].ByteSize())
    return n + 5

  def Clear(self):
    self.clear_subindex()
    self.clear_isselected()
    self.clear_factors()

  def OutputUnchecked(self, out):
    out.putVarInt32(2240)
    out.putVarInt32(self.subindex_)
    out.putVarInt32(2248)
    out.putBoolean(self.isselected_)
    for i in xrange(len(self.factors_)):
      out.putVarInt32(2258)
      out.putVarInt32(self.factors_[i].ByteSize())
      self.factors_[i].OutputUnchecked(out)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 2236: break
      if tt == 2240:
        self.set_subindex(d.getVarInt32())
        continue
      if tt == 2248:
        self.set_isselected(d.getBoolean())
        continue
      if tt == 2258:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_factors().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_subindex_: res+=prefix+("SubIndex: %s\n" % self.DebugFormatInt32(self.subindex_))
    if self.has_isselected_: res+=prefix+("IsSelected: %s\n" % self.DebugFormatBool(self.isselected_))
    cnt=0
    for e in self.factors_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Factors%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    return res

class RTUpdate_LinkAnchor(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.targetid_ = 0
    self.targethostid_ = 0
    self.linktext_ = ""
    self.linkfontsize_ = 0
    self.linkweight_ = 1.0
    self.linkdemotionreason_ = 0
    self.ondomain_ = 0
    self.has_targetid_ = 0
    self.has_targethostid_ = 0
    self.has_linktext_ = 0
    self.has_linkfontsize_ = 0
    self.has_linkweight_ = 0
    self.has_linkdemotionreason_ = 0
    self.has_ondomain_ = 0
    if contents is not None: self.MergeFromString(contents)

  def targetid(self): return self.targetid_

  def set_targetid(self, x):
    self.has_targetid_ = 1
    self.targetid_ = x

  def clear_targetid(self):
    self.has_targetid_ = 0
    self.targetid_ = 0

  def has_targetid(self): return self.has_targetid_

  def targethostid(self): return self.targethostid_

  def set_targethostid(self, x):
    self.has_targethostid_ = 1
    self.targethostid_ = x

  def clear_targethostid(self):
    self.has_targethostid_ = 0
    self.targethostid_ = 0

  def has_targethostid(self): return self.has_targethostid_

  def linktext(self): return self.linktext_

  def set_linktext(self, x):
    self.has_linktext_ = 1
    self.linktext_ = x

  def clear_linktext(self):
    self.has_linktext_ = 0
    self.linktext_ = ""

  def has_linktext(self): return self.has_linktext_

  def linkfontsize(self): return self.linkfontsize_

  def set_linkfontsize(self, x):
    self.has_linkfontsize_ = 1
    self.linkfontsize_ = x

  def clear_linkfontsize(self):
    self.has_linkfontsize_ = 0
    self.linkfontsize_ = 0

  def has_linkfontsize(self): return self.has_linkfontsize_

  def linkweight(self): return self.linkweight_

  def set_linkweight(self, x):
    self.has_linkweight_ = 1
    self.linkweight_ = x

  def clear_linkweight(self):
    self.has_linkweight_ = 0
    self.linkweight_ = 1.0

  def has_linkweight(self): return self.has_linkweight_

  def linkdemotionreason(self): return self.linkdemotionreason_

  def set_linkdemotionreason(self, x):
    self.has_linkdemotionreason_ = 1
    self.linkdemotionreason_ = x

  def clear_linkdemotionreason(self):
    self.has_linkdemotionreason_ = 0
    self.linkdemotionreason_ = 0

  def has_linkdemotionreason(self): return self.has_linkdemotionreason_

  def ondomain(self): return self.ondomain_

  def set_ondomain(self, x):
    self.has_ondomain_ = 1
    self.ondomain_ = x

  def clear_ondomain(self):
    self.has_ondomain_ = 0
    self.ondomain_ = 0

  def has_ondomain(self): return self.has_ondomain_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_targetid()): self.set_targetid(x.targetid())
    if (x.has_targethostid()): self.set_targethostid(x.targethostid())
    if (x.has_linktext()): self.set_linktext(x.linktext())
    if (x.has_linkfontsize()): self.set_linkfontsize(x.linkfontsize())
    if (x.has_linkweight()): self.set_linkweight(x.linkweight())
    if (x.has_linkdemotionreason()): self.set_linkdemotionreason(x.linkdemotionreason())
    if (x.has_ondomain()): self.set_ondomain(x.ondomain())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_targetid_ != x.has_targetid_: return 0
    if self.has_targetid_ and self.targetid_ != x.targetid_: return 0
    if self.has_targethostid_ != x.has_targethostid_: return 0
    if self.has_targethostid_ and self.targethostid_ != x.targethostid_: return 0
    if self.has_linktext_ != x.has_linktext_: return 0
    if self.has_linktext_ and self.linktext_ != x.linktext_: return 0
    if self.has_linkfontsize_ != x.has_linkfontsize_: return 0
    if self.has_linkfontsize_ and self.linkfontsize_ != x.linkfontsize_: return 0
    if self.has_linkweight_ != x.has_linkweight_: return 0
    if self.has_linkweight_ and self.linkweight_ != x.linkweight_: return 0
    if self.has_linkdemotionreason_ != x.has_linkdemotionreason_: return 0
    if self.has_linkdemotionreason_ and self.linkdemotionreason_ != x.linkdemotionreason_: return 0
    if self.has_ondomain_ != x.has_ondomain_: return 0
    if self.has_ondomain_ and self.ondomain_ != x.ondomain_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_targetid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: targetid not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.targetid_)
    if (self.has_targethostid_): n += 2 + self.lengthVarInt64(self.targethostid_)
    if (self.has_linktext_): n += 2 + self.lengthString(len(self.linktext_))
    if (self.has_linkfontsize_): n += 2 + self.lengthVarInt64(self.linkfontsize_)
    if (self.has_linkweight_): n += 6
    if (self.has_linkdemotionreason_): n += 2 + self.lengthVarInt64(self.linkdemotionreason_)
    if (self.has_ondomain_): n += 3
    return n + 2

  def Clear(self):
    self.clear_targetid()
    self.clear_targethostid()
    self.clear_linktext()
    self.clear_linkfontsize()
    self.clear_linkweight()
    self.clear_linkdemotionreason()
    self.clear_ondomain()

  def OutputUnchecked(self, out):
    out.putVarInt32(456)
    out.putVarUint64(self.targetid_)
    if (self.has_linktext_):
      out.putVarInt32(466)
      out.putPrefixedString(self.linktext_)
    if (self.has_linkfontsize_):
      out.putVarInt32(472)
      out.putVarInt32(self.linkfontsize_)
    if (self.has_linkweight_):
      out.putVarInt32(517)
      out.putFloat(self.linkweight_)
    if (self.has_linkdemotionreason_):
      out.putVarInt32(544)
      out.putVarInt32(self.linkdemotionreason_)
    if (self.has_ondomain_):
      out.putVarInt32(896)
      out.putBoolean(self.ondomain_)
    if (self.has_targethostid_):
      out.putVarInt32(992)
      out.putVarUint64(self.targethostid_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 452: break
      if tt == 456:
        self.set_targetid(d.getVarUint64())
        continue
      if tt == 466:
        self.set_linktext(d.getPrefixedString())
        continue
      if tt == 472:
        self.set_linkfontsize(d.getVarInt32())
        continue
      if tt == 517:
        self.set_linkweight(d.getFloat())
        continue
      if tt == 544:
        self.set_linkdemotionreason(d.getVarInt32())
        continue
      if tt == 896:
        self.set_ondomain(d.getBoolean())
        continue
      if tt == 992:
        self.set_targethostid(d.getVarUint64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_targetid_: res+=prefix+("TargetID: %s\n" % self.DebugFormatInt64(self.targetid_))
    if self.has_targethostid_: res+=prefix+("TargetHostID: %s\n" % self.DebugFormatInt64(self.targethostid_))
    if self.has_linktext_: res+=prefix+("LinkText: %s\n" % self.DebugFormatString(self.linktext_))
    if self.has_linkfontsize_: res+=prefix+("LinkFontSize: %s\n" % self.DebugFormatInt32(self.linkfontsize_))
    if self.has_linkweight_: res+=prefix+("LinkWeight: %s\n" % self.DebugFormatFloat(self.linkweight_))
    if self.has_linkdemotionreason_: res+=prefix+("LinkDemotionReason: %s\n" % self.DebugFormatInt32(self.linkdemotionreason_))
    if self.has_ondomain_: res+=prefix+("OnDomain: %s\n" % self.DebugFormatBool(self.ondomain_))
    return res

class RTUpdate_DocIndexData(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.termfp_ = 0
    self.position_ = 0
    self.attribute_ = 0
    self.termfordebug_ = ""
    self.has_termfp_ = 0
    self.has_position_ = 0
    self.has_attribute_ = 0
    self.has_termfordebug_ = 0
    if contents is not None: self.MergeFromString(contents)

  def termfp(self): return self.termfp_

  def set_termfp(self, x):
    self.has_termfp_ = 1
    self.termfp_ = x

  def clear_termfp(self):
    self.has_termfp_ = 0
    self.termfp_ = 0

  def has_termfp(self): return self.has_termfp_

  def position(self): return self.position_

  def set_position(self, x):
    self.has_position_ = 1
    self.position_ = x

  def clear_position(self):
    self.has_position_ = 0
    self.position_ = 0

  def has_position(self): return self.has_position_

  def attribute(self): return self.attribute_

  def set_attribute(self, x):
    self.has_attribute_ = 1
    self.attribute_ = x

  def clear_attribute(self):
    self.has_attribute_ = 0
    self.attribute_ = 0

  def has_attribute(self): return self.has_attribute_

  def termfordebug(self): return self.termfordebug_

  def set_termfordebug(self, x):
    self.has_termfordebug_ = 1
    self.termfordebug_ = x

  def clear_termfordebug(self):
    self.has_termfordebug_ = 0
    self.termfordebug_ = ""

  def has_termfordebug(self): return self.has_termfordebug_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_termfp()): self.set_termfp(x.termfp())
    if (x.has_position()): self.set_position(x.position())
    if (x.has_attribute()): self.set_attribute(x.attribute())
    if (x.has_termfordebug()): self.set_termfordebug(x.termfordebug())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_termfp_ != x.has_termfp_: return 0
    if self.has_termfp_ and self.termfp_ != x.termfp_: return 0
    if self.has_position_ != x.has_position_: return 0
    if self.has_position_ and self.position_ != x.position_: return 0
    if self.has_attribute_ != x.has_attribute_: return 0
    if self.has_attribute_ and self.attribute_ != x.attribute_: return 0
    if self.has_termfordebug_ != x.has_termfordebug_: return 0
    if self.has_termfordebug_ and self.termfordebug_ != x.termfordebug_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_termfp_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: termfp not set.')
    if (not self.has_position_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: position not set.')
    if (not self.has_attribute_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: attribute not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.termfp_)
    n += self.lengthVarInt64(self.position_)
    n += self.lengthVarInt64(self.attribute_)
    if (self.has_termfordebug_): n += 2 + self.lengthString(len(self.termfordebug_))
    return n + 6

  def Clear(self):
    self.clear_termfp()
    self.clear_position()
    self.clear_attribute()
    self.clear_termfordebug()

  def OutputUnchecked(self, out):
    out.putVarInt32(568)
    out.putVarInt64(self.termfp_)
    out.putVarInt32(576)
    out.putVarInt64(self.position_)
    out.putVarInt32(584)
    out.putVarInt64(self.attribute_)
    if (self.has_termfordebug_):
      out.putVarInt32(1482)
      out.putPrefixedString(self.termfordebug_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 564: break
      if tt == 568:
        self.set_termfp(d.getVarInt64())
        continue
      if tt == 576:
        self.set_position(d.getVarInt64())
        continue
      if tt == 584:
        self.set_attribute(d.getVarInt64())
        continue
      if tt == 1482:
        self.set_termfordebug(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_termfp_: res+=prefix+("TermFP: %s\n" % self.DebugFormatInt64(self.termfp_))
    if self.has_position_: res+=prefix+("Position: %s\n" % self.DebugFormatInt64(self.position_))
    if self.has_attribute_: res+=prefix+("Attribute: %s\n" % self.DebugFormatInt64(self.attribute_))
    if self.has_termfordebug_: res+=prefix+("TermForDebug: %s\n" % self.DebugFormatString(self.termfordebug_))
    return res

class RTUpdate_DocDirectory(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.identifier_ = ""
    self.category_ = ""
    self.title_ = ""
    self.description_ = ""
    self.has_identifier_ = 0
    self.has_category_ = 0
    self.has_title_ = 0
    self.has_description_ = 0
    if contents is not None: self.MergeFromString(contents)

  def identifier(self): return self.identifier_

  def set_identifier(self, x):
    self.has_identifier_ = 1
    self.identifier_ = x

  def clear_identifier(self):
    self.has_identifier_ = 0
    self.identifier_ = ""

  def has_identifier(self): return self.has_identifier_

  def category(self): return self.category_

  def set_category(self, x):
    self.has_category_ = 1
    self.category_ = x

  def clear_category(self):
    self.has_category_ = 0
    self.category_ = ""

  def has_category(self): return self.has_category_

  def title(self): return self.title_

  def set_title(self, x):
    self.has_title_ = 1
    self.title_ = x

  def clear_title(self):
    self.has_title_ = 0
    self.title_ = ""

  def has_title(self): return self.has_title_

  def description(self): return self.description_

  def set_description(self, x):
    self.has_description_ = 1
    self.description_ = x

  def clear_description(self):
    self.has_description_ = 0
    self.description_ = ""

  def has_description(self): return self.has_description_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_identifier()): self.set_identifier(x.identifier())
    if (x.has_category()): self.set_category(x.category())
    if (x.has_title()): self.set_title(x.title())
    if (x.has_description()): self.set_description(x.description())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_identifier_ != x.has_identifier_: return 0
    if self.has_identifier_ and self.identifier_ != x.identifier_: return 0
    if self.has_category_ != x.has_category_: return 0
    if self.has_category_ and self.category_ != x.category_: return 0
    if self.has_title_ != x.has_title_: return 0
    if self.has_title_ and self.title_ != x.title_: return 0
    if self.has_description_ != x.has_description_: return 0
    if self.has_description_ and self.description_ != x.description_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_identifier_): n += 2 + self.lengthString(len(self.identifier_))
    if (self.has_category_): n += 2 + self.lengthString(len(self.category_))
    if (self.has_title_): n += 2 + self.lengthString(len(self.title_))
    if (self.has_description_): n += 2 + self.lengthString(len(self.description_))
    return n + 0

  def Clear(self):
    self.clear_identifier()
    self.clear_category()
    self.clear_title()
    self.clear_description()

  def OutputUnchecked(self, out):
    if (self.has_identifier_):
      out.putVarInt32(610)
      out.putPrefixedString(self.identifier_)
    if (self.has_category_):
      out.putVarInt32(618)
      out.putPrefixedString(self.category_)
    if (self.has_title_):
      out.putVarInt32(626)
      out.putPrefixedString(self.title_)
    if (self.has_description_):
      out.putVarInt32(634)
      out.putPrefixedString(self.description_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 604: break
      if tt == 610:
        self.set_identifier(d.getPrefixedString())
        continue
      if tt == 618:
        self.set_category(d.getPrefixedString())
        continue
      if tt == 626:
        self.set_title(d.getPrefixedString())
        continue
      if tt == 634:
        self.set_description(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_identifier_: res+=prefix+("Identifier: %s\n" % self.DebugFormatString(self.identifier_))
    if self.has_category_: res+=prefix+("Category: %s\n" % self.DebugFormatString(self.category_))
    if self.has_title_: res+=prefix+("Title: %s\n" % self.DebugFormatString(self.title_))
    if self.has_description_: res+=prefix+("Description: %s\n" % self.DebugFormatString(self.description_))
    return res

class RTUpdate_PipelineInfoFresherRepId(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.representativeid_ = ""
    self.mangledrepid_ = ""
    self.has_representativeid_ = 0
    self.has_mangledrepid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def representativeid(self): return self.representativeid_

  def set_representativeid(self, x):
    self.has_representativeid_ = 1
    self.representativeid_ = x

  def clear_representativeid(self):
    self.has_representativeid_ = 0
    self.representativeid_ = ""

  def has_representativeid(self): return self.has_representativeid_

  def mangledrepid(self): return self.mangledrepid_

  def set_mangledrepid(self, x):
    self.has_mangledrepid_ = 1
    self.mangledrepid_ = x

  def clear_mangledrepid(self):
    self.has_mangledrepid_ = 0
    self.mangledrepid_ = ""

  def has_mangledrepid(self): return self.has_mangledrepid_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_representativeid()): self.set_representativeid(x.representativeid())
    if (x.has_mangledrepid()): self.set_mangledrepid(x.mangledrepid())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_representativeid_ != x.has_representativeid_: return 0
    if self.has_representativeid_ and self.representativeid_ != x.representativeid_: return 0
    if self.has_mangledrepid_ != x.has_mangledrepid_: return 0
    if self.has_mangledrepid_ and self.mangledrepid_ != x.mangledrepid_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_representativeid_): n += 2 + self.lengthString(len(self.representativeid_))
    if (self.has_mangledrepid_): n += 2 + self.lengthString(len(self.mangledrepid_))
    return n + 0

  def Clear(self):
    self.clear_representativeid()
    self.clear_mangledrepid()

  def OutputUnchecked(self, out):
    if (self.has_representativeid_):
      out.putVarInt32(842)
      out.putPrefixedString(self.representativeid_)
    if (self.has_mangledrepid_):
      out.putVarInt32(850)
      out.putPrefixedString(self.mangledrepid_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 836: break
      if tt == 842:
        self.set_representativeid(d.getPrefixedString())
        continue
      if tt == 850:
        self.set_mangledrepid(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_representativeid_: res+=prefix+("RepresentativeId: %s\n" % self.DebugFormatString(self.representativeid_))
    if self.has_mangledrepid_: res+=prefix+("MangledRepId: %s\n" % self.DebugFormatString(self.mangledrepid_))
    return res

class RTUpdate_DataRequestAnchorIndexData(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.anchorid_ = 0
    self.lookupid_ = 0
    self.pagerank_ = 0
    self.respdatatype_ = 0
    self.targetorg_ = ""
    self.has_anchorid_ = 0
    self.has_lookupid_ = 0
    self.has_pagerank_ = 0
    self.has_respdatatype_ = 0
    self.has_targetorg_ = 0
    if contents is not None: self.MergeFromString(contents)

  def anchorid(self): return self.anchorid_

  def set_anchorid(self, x):
    self.has_anchorid_ = 1
    self.anchorid_ = x

  def clear_anchorid(self):
    self.has_anchorid_ = 0
    self.anchorid_ = 0

  def has_anchorid(self): return self.has_anchorid_

  def lookupid(self): return self.lookupid_

  def set_lookupid(self, x):
    self.has_lookupid_ = 1
    self.lookupid_ = x

  def clear_lookupid(self):
    self.has_lookupid_ = 0
    self.lookupid_ = 0

  def has_lookupid(self): return self.has_lookupid_

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 0

  def has_pagerank(self): return self.has_pagerank_

  def respdatatype(self): return self.respdatatype_

  def set_respdatatype(self, x):
    self.has_respdatatype_ = 1
    self.respdatatype_ = x

  def clear_respdatatype(self):
    self.has_respdatatype_ = 0
    self.respdatatype_ = 0

  def has_respdatatype(self): return self.has_respdatatype_

  def targetorg(self): return self.targetorg_

  def set_targetorg(self, x):
    self.has_targetorg_ = 1
    self.targetorg_ = x

  def clear_targetorg(self):
    self.has_targetorg_ = 0
    self.targetorg_ = ""

  def has_targetorg(self): return self.has_targetorg_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_anchorid()): self.set_anchorid(x.anchorid())
    if (x.has_lookupid()): self.set_lookupid(x.lookupid())
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())
    if (x.has_respdatatype()): self.set_respdatatype(x.respdatatype())
    if (x.has_targetorg()): self.set_targetorg(x.targetorg())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_anchorid_ != x.has_anchorid_: return 0
    if self.has_anchorid_ and self.anchorid_ != x.anchorid_: return 0
    if self.has_lookupid_ != x.has_lookupid_: return 0
    if self.has_lookupid_ and self.lookupid_ != x.lookupid_: return 0
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    if self.has_respdatatype_ != x.has_respdatatype_: return 0
    if self.has_respdatatype_ and self.respdatatype_ != x.respdatatype_: return 0
    if self.has_targetorg_ != x.has_targetorg_: return 0
    if self.has_targetorg_ and self.targetorg_ != x.targetorg_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_anchorid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: anchorid not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.anchorid_)
    if (self.has_lookupid_): n += 2 + self.lengthVarInt64(self.lookupid_)
    if (self.has_pagerank_): n += 2 + self.lengthVarInt64(self.pagerank_)
    if (self.has_respdatatype_): n += 2 + self.lengthVarInt64(self.respdatatype_)
    if (self.has_targetorg_): n += 2 + self.lengthString(len(self.targetorg_))
    return n + 2

  def Clear(self):
    self.clear_anchorid()
    self.clear_lookupid()
    self.clear_pagerank()
    self.clear_respdatatype()
    self.clear_targetorg()

  def OutputUnchecked(self, out):
    out.putVarInt32(888)
    out.putVarUint64(self.anchorid_)
    if (self.has_lookupid_):
      out.putVarInt32(944)
      out.putVarUint64(self.lookupid_)
    if (self.has_pagerank_):
      out.putVarInt32(1000)
      out.putVarInt32(self.pagerank_)
    if (self.has_respdatatype_):
      out.putVarInt32(1112)
      out.putVarInt32(self.respdatatype_)
    if (self.has_targetorg_):
      out.putVarInt32(1154)
      out.putPrefixedString(self.targetorg_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 884: break
      if tt == 888:
        self.set_anchorid(d.getVarUint64())
        continue
      if tt == 944:
        self.set_lookupid(d.getVarUint64())
        continue
      if tt == 1000:
        self.set_pagerank(d.getVarInt32())
        continue
      if tt == 1112:
        self.set_respdatatype(d.getVarInt32())
        continue
      if tt == 1154:
        self.set_targetorg(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_anchorid_: res+=prefix+("AnchorID: %s\n" % self.DebugFormatInt64(self.anchorid_))
    if self.has_lookupid_: res+=prefix+("LookupID: %s\n" % self.DebugFormatInt64(self.lookupid_))
    if self.has_pagerank_: res+=prefix+("Pagerank: %s\n" % self.DebugFormatInt32(self.pagerank_))
    if self.has_respdatatype_: res+=prefix+("RespDataType: %s\n" % self.DebugFormatInt32(self.respdatatype_))
    if self.has_targetorg_: res+=prefix+("TargetOrg: %s\n" % self.DebugFormatString(self.targetorg_))
    return res

class RTUpdate_DocRawAnchorData(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.lookupid_ = 0
    self.rawanchors_ = GAnchors()
    self.fragmentid_ = 0
    self.numfragments_ = 0
    self.has_lookupid_ = 0
    self.has_rawanchors_ = 0
    self.has_fragmentid_ = 0
    self.has_numfragments_ = 0
    if contents is not None: self.MergeFromString(contents)

  def lookupid(self): return self.lookupid_

  def set_lookupid(self, x):
    self.has_lookupid_ = 1
    self.lookupid_ = x

  def clear_lookupid(self):
    self.has_lookupid_ = 0
    self.lookupid_ = 0

  def has_lookupid(self): return self.has_lookupid_

  def rawanchors(self): return self.rawanchors_

  def mutable_rawanchors(self): self.has_rawanchors_ = 1; return self.rawanchors_

  def clear_rawanchors(self):self.has_rawanchors_ = 0; self.rawanchors_.Clear()

  def has_rawanchors(self): return self.has_rawanchors_

  def fragmentid(self): return self.fragmentid_

  def set_fragmentid(self, x):
    self.has_fragmentid_ = 1
    self.fragmentid_ = x

  def clear_fragmentid(self):
    self.has_fragmentid_ = 0
    self.fragmentid_ = 0

  def has_fragmentid(self): return self.has_fragmentid_

  def numfragments(self): return self.numfragments_

  def set_numfragments(self, x):
    self.has_numfragments_ = 1
    self.numfragments_ = x

  def clear_numfragments(self):
    self.has_numfragments_ = 0
    self.numfragments_ = 0

  def has_numfragments(self): return self.has_numfragments_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_lookupid()): self.set_lookupid(x.lookupid())
    if (x.has_rawanchors()): self.mutable_rawanchors().MergeFrom(x.rawanchors())
    if (x.has_fragmentid()): self.set_fragmentid(x.fragmentid())
    if (x.has_numfragments()): self.set_numfragments(x.numfragments())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_lookupid_ != x.has_lookupid_: return 0
    if self.has_lookupid_ and self.lookupid_ != x.lookupid_: return 0
    if self.has_rawanchors_ != x.has_rawanchors_: return 0
    if self.has_rawanchors_ and self.rawanchors_ != x.rawanchors_: return 0
    if self.has_fragmentid_ != x.has_fragmentid_: return 0
    if self.has_fragmentid_ and self.fragmentid_ != x.fragmentid_: return 0
    if self.has_numfragments_ != x.has_numfragments_: return 0
    if self.has_numfragments_ and self.numfragments_ != x.numfragments_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_lookupid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: lookupid not set.')
    if (not self.has_rawanchors_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: rawanchors not set.')
    elif not self.rawanchors_.IsInitialized(debug_strs): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.lookupid_)
    n += self.lengthString(self.rawanchors_.ByteSize())
    if (self.has_fragmentid_): n += 2 + self.lengthVarInt64(self.fragmentid_)
    if (self.has_numfragments_): n += 2 + self.lengthVarInt64(self.numfragments_)
    return n + 4

  def Clear(self):
    self.clear_lookupid()
    self.clear_rawanchors()
    self.clear_fragmentid()
    self.clear_numfragments()

  def OutputUnchecked(self, out):
    out.putVarInt32(1120)
    out.putVarInt64(self.lookupid_)
    out.putVarInt32(1130)
    out.putVarInt32(self.rawanchors_.ByteSize())
    self.rawanchors_.OutputUnchecked(out)
    if (self.has_fragmentid_):
      out.putVarInt32(1136)
      out.putVarInt32(self.fragmentid_)
    if (self.has_numfragments_):
      out.putVarInt32(1144)
      out.putVarInt32(self.numfragments_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1108: break
      if tt == 1120:
        self.set_lookupid(d.getVarInt64())
        continue
      if tt == 1130:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_rawanchors().TryMerge(tmp)
        continue
      if tt == 1136:
        self.set_fragmentid(d.getVarInt32())
        continue
      if tt == 1144:
        self.set_numfragments(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_lookupid_: res+=prefix+("LookupID: %s\n" % self.DebugFormatInt64(self.lookupid_))
    if self.has_rawanchors_:
      res+=prefix+"RawAnchors <\n"
      res+=self.rawanchors_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_fragmentid_: res+=prefix+("FragmentID: %s\n" % self.DebugFormatInt32(self.fragmentid_))
    if self.has_numfragments_: res+=prefix+("NumFragments: %s\n" % self.DebugFormatInt32(self.numfragments_))
    return res

class RTUpdate_DocRedirects(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.type_ = 0
    self.targeturl_ = ""
    self.rawtargeturl_ = ""
    self.refreshtime_ = 0
    self.ipaddress_ = 0
    self.downloadtime_ = 0
    self.has_type_ = 0
    self.has_targeturl_ = 0
    self.has_rawtargeturl_ = 0
    self.has_refreshtime_ = 0
    self.has_ipaddress_ = 0
    self.has_downloadtime_ = 0
    if contents is not None: self.MergeFromString(contents)

  def type(self): return self.type_

  def set_type(self, x):
    self.has_type_ = 1
    self.type_ = x

  def clear_type(self):
    self.has_type_ = 0
    self.type_ = 0

  def has_type(self): return self.has_type_

  def targeturl(self): return self.targeturl_

  def set_targeturl(self, x):
    self.has_targeturl_ = 1
    self.targeturl_ = x

  def clear_targeturl(self):
    self.has_targeturl_ = 0
    self.targeturl_ = ""

  def has_targeturl(self): return self.has_targeturl_

  def rawtargeturl(self): return self.rawtargeturl_

  def set_rawtargeturl(self, x):
    self.has_rawtargeturl_ = 1
    self.rawtargeturl_ = x

  def clear_rawtargeturl(self):
    self.has_rawtargeturl_ = 0
    self.rawtargeturl_ = ""

  def has_rawtargeturl(self): return self.has_rawtargeturl_

  def refreshtime(self): return self.refreshtime_

  def set_refreshtime(self, x):
    self.has_refreshtime_ = 1
    self.refreshtime_ = x

  def clear_refreshtime(self):
    self.has_refreshtime_ = 0
    self.refreshtime_ = 0

  def has_refreshtime(self): return self.has_refreshtime_

  def ipaddress(self): return self.ipaddress_

  def set_ipaddress(self, x):
    self.has_ipaddress_ = 1
    self.ipaddress_ = x

  def clear_ipaddress(self):
    self.has_ipaddress_ = 0
    self.ipaddress_ = 0

  def has_ipaddress(self): return self.has_ipaddress_

  def downloadtime(self): return self.downloadtime_

  def set_downloadtime(self, x):
    self.has_downloadtime_ = 1
    self.downloadtime_ = x

  def clear_downloadtime(self):
    self.has_downloadtime_ = 0
    self.downloadtime_ = 0

  def has_downloadtime(self): return self.has_downloadtime_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_type()): self.set_type(x.type())
    if (x.has_targeturl()): self.set_targeturl(x.targeturl())
    if (x.has_rawtargeturl()): self.set_rawtargeturl(x.rawtargeturl())
    if (x.has_refreshtime()): self.set_refreshtime(x.refreshtime())
    if (x.has_ipaddress()): self.set_ipaddress(x.ipaddress())
    if (x.has_downloadtime()): self.set_downloadtime(x.downloadtime())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_type_ != x.has_type_: return 0
    if self.has_type_ and self.type_ != x.type_: return 0
    if self.has_targeturl_ != x.has_targeturl_: return 0
    if self.has_targeturl_ and self.targeturl_ != x.targeturl_: return 0
    if self.has_rawtargeturl_ != x.has_rawtargeturl_: return 0
    if self.has_rawtargeturl_ and self.rawtargeturl_ != x.rawtargeturl_: return 0
    if self.has_refreshtime_ != x.has_refreshtime_: return 0
    if self.has_refreshtime_ and self.refreshtime_ != x.refreshtime_: return 0
    if self.has_ipaddress_ != x.has_ipaddress_: return 0
    if self.has_ipaddress_ and self.ipaddress_ != x.ipaddress_: return 0
    if self.has_downloadtime_ != x.has_downloadtime_: return 0
    if self.has_downloadtime_ and self.downloadtime_ != x.downloadtime_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_type_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: type not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.type_)
    if (self.has_targeturl_): n += 2 + self.lengthString(len(self.targeturl_))
    if (self.has_rawtargeturl_): n += 2 + self.lengthString(len(self.rawtargeturl_))
    if (self.has_refreshtime_): n += 2 + self.lengthVarInt64(self.refreshtime_)
    if (self.has_ipaddress_): n += 2 + self.lengthVarInt64(self.ipaddress_)
    if (self.has_downloadtime_): n += 2 + self.lengthVarInt64(self.downloadtime_)
    return n + 2

  def Clear(self):
    self.clear_type()
    self.clear_targeturl()
    self.clear_rawtargeturl()
    self.clear_refreshtime()
    self.clear_ipaddress()
    self.clear_downloadtime()

  def OutputUnchecked(self, out):
    out.putVarInt32(1200)
    out.putVarInt32(self.type_)
    if (self.has_targeturl_):
      out.putVarInt32(1210)
      out.putPrefixedString(self.targeturl_)
    if (self.has_rawtargeturl_):
      out.putVarInt32(1218)
      out.putPrefixedString(self.rawtargeturl_)
    if (self.has_refreshtime_):
      out.putVarInt32(1224)
      out.putVarInt32(self.refreshtime_)
    if (self.has_ipaddress_):
      out.putVarInt32(1232)
      out.putVarInt32(self.ipaddress_)
    if (self.has_downloadtime_):
      out.putVarInt32(1240)
      out.putVarInt32(self.downloadtime_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1196: break
      if tt == 1200:
        self.set_type(d.getVarInt32())
        continue
      if tt == 1210:
        self.set_targeturl(d.getPrefixedString())
        continue
      if tt == 1218:
        self.set_rawtargeturl(d.getPrefixedString())
        continue
      if tt == 1224:
        self.set_refreshtime(d.getVarInt32())
        continue
      if tt == 1232:
        self.set_ipaddress(d.getVarInt32())
        continue
      if tt == 1240:
        self.set_downloadtime(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_type_: res+=prefix+("Type: %s\n" % self.DebugFormatInt32(self.type_))
    if self.has_targeturl_: res+=prefix+("TargetUrl: %s\n" % self.DebugFormatString(self.targeturl_))
    if self.has_rawtargeturl_: res+=prefix+("RawTargetUrl: %s\n" % self.DebugFormatString(self.rawtargeturl_))
    if self.has_refreshtime_: res+=prefix+("RefreshTime: %s\n" % self.DebugFormatInt32(self.refreshtime_))
    if self.has_ipaddress_: res+=prefix+("IPAddress: %s\n" % self.DebugFormatInt32(self.ipaddress_))
    if self.has_downloadtime_: res+=prefix+("DownloadTime: %s\n" % self.DebugFormatInt32(self.downloadtime_))
    return res

class RTUpdate_DocOriginalDoc(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.contents_ = ""
    self.uncompressedlength_ = 0
    self.usehtmlcompressdictionary_ = 0
    self.has_contents_ = 0
    self.has_uncompressedlength_ = 0
    self.has_usehtmlcompressdictionary_ = 0
    if contents is not None: self.MergeFromString(contents)

  def contents(self): return self.contents_

  def set_contents(self, x):
    self.has_contents_ = 1
    self.contents_ = x

  def clear_contents(self):
    self.has_contents_ = 0
    self.contents_ = ""

  def has_contents(self): return self.has_contents_

  def uncompressedlength(self): return self.uncompressedlength_

  def set_uncompressedlength(self, x):
    self.has_uncompressedlength_ = 1
    self.uncompressedlength_ = x

  def clear_uncompressedlength(self):
    self.has_uncompressedlength_ = 0
    self.uncompressedlength_ = 0

  def has_uncompressedlength(self): return self.has_uncompressedlength_

  def usehtmlcompressdictionary(self): return self.usehtmlcompressdictionary_

  def set_usehtmlcompressdictionary(self, x):
    self.has_usehtmlcompressdictionary_ = 1
    self.usehtmlcompressdictionary_ = x

  def clear_usehtmlcompressdictionary(self):
    self.has_usehtmlcompressdictionary_ = 0
    self.usehtmlcompressdictionary_ = 0

  def has_usehtmlcompressdictionary(self): return self.has_usehtmlcompressdictionary_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_contents()): self.set_contents(x.contents())
    if (x.has_uncompressedlength()): self.set_uncompressedlength(x.uncompressedlength())
    if (x.has_usehtmlcompressdictionary()): self.set_usehtmlcompressdictionary(x.usehtmlcompressdictionary())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_contents_ != x.has_contents_: return 0
    if self.has_contents_ and self.contents_ != x.contents_: return 0
    if self.has_uncompressedlength_ != x.has_uncompressedlength_: return 0
    if self.has_uncompressedlength_ and self.uncompressedlength_ != x.uncompressedlength_: return 0
    if self.has_usehtmlcompressdictionary_ != x.has_usehtmlcompressdictionary_: return 0
    if self.has_usehtmlcompressdictionary_ and self.usehtmlcompressdictionary_ != x.usehtmlcompressdictionary_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_contents_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: contents not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.contents_))
    if (self.has_uncompressedlength_): n += 2 + self.lengthVarInt64(self.uncompressedlength_)
    if (self.has_usehtmlcompressdictionary_): n += 3
    return n + 2

  def Clear(self):
    self.clear_contents()
    self.clear_uncompressedlength()
    self.clear_usehtmlcompressdictionary()

  def OutputUnchecked(self, out):
    out.putVarInt32(1282)
    out.putPrefixedString(self.contents_)
    if (self.has_uncompressedlength_):
      out.putVarInt32(1288)
      out.putVarInt64(self.uncompressedlength_)
    if (self.has_usehtmlcompressdictionary_):
      out.putVarInt32(1296)
      out.putBoolean(self.usehtmlcompressdictionary_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1276: break
      if tt == 1282:
        self.set_contents(d.getPrefixedString())
        continue
      if tt == 1288:
        self.set_uncompressedlength(d.getVarInt64())
        continue
      if tt == 1296:
        self.set_usehtmlcompressdictionary(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_contents_: res+=prefix+("Contents: %s\n" % self.DebugFormatString(self.contents_))
    if self.has_uncompressedlength_: res+=prefix+("UncompressedLength: %s\n" % self.DebugFormatInt64(self.uncompressedlength_))
    if self.has_usehtmlcompressdictionary_: res+=prefix+("UseHtmlCompressDictionary: %s\n" % self.DebugFormatBool(self.usehtmlcompressdictionary_))
    return res

class RTUpdate_PipelineInfoDupForwarding_DEPRECATED(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.url_ = ""
    self.representativeid_ = ""
    self.pagerank_ = 0
    self.location_ = None
    self.has_url_ = 0
    self.has_representativeid_ = 0
    self.has_pagerank_ = 0
    self.has_location_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def representativeid(self): return self.representativeid_

  def set_representativeid(self, x):
    self.has_representativeid_ = 1
    self.representativeid_ = x

  def clear_representativeid(self):
    self.has_representativeid_ = 0
    self.representativeid_ = ""

  def has_representativeid(self): return self.has_representativeid_

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 0

  def has_pagerank(self): return self.has_pagerank_

  def location(self):
    if self.location_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.location_ is None: self.location_ = RTDocReference()
      finally:
        self.lazy_init_lock_.release()
    return self.location_

  def mutable_location(self): self.has_location_ = 1; return self.location()

  def clear_location(self):
    #Warning: this method does not acquire the lock.
    self.has_location_ = 0;
    if self.location_ is not None: self.location_.Clear()

  def has_location(self): return self.has_location_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_url()): self.set_url(x.url())
    if (x.has_representativeid()): self.set_representativeid(x.representativeid())
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())
    if (x.has_location()): self.mutable_location().MergeFrom(x.location())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_representativeid_ != x.has_representativeid_: return 0
    if self.has_representativeid_ and self.representativeid_ != x.representativeid_: return 0
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    if self.has_location_ != x.has_location_: return 0
    if self.has_location_ and self.location_ != x.location_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_url_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: url not set.')
    if (self.has_location_ and not self.location_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.url_))
    if (self.has_representativeid_): n += 2 + self.lengthString(len(self.representativeid_))
    if (self.has_pagerank_): n += 2 + self.lengthVarInt64(self.pagerank_)
    if (self.has_location_): n += 2 + self.lengthString(self.location_.ByteSize())
    return n + 2

  def Clear(self):
    self.clear_url()
    self.clear_representativeid()
    self.clear_pagerank()
    self.clear_location()

  def OutputUnchecked(self, out):
    out.putVarInt32(1458)
    out.putPrefixedString(self.url_)
    if (self.has_representativeid_):
      out.putVarInt32(1466)
      out.putPrefixedString(self.representativeid_)
    if (self.has_pagerank_):
      out.putVarInt32(1488)
      out.putVarInt32(self.pagerank_)
    if (self.has_location_):
      out.putVarInt32(1602)
      out.putVarInt32(self.location_.ByteSize())
      self.location_.OutputUnchecked(out)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1452: break
      if tt == 1458:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 1466:
        self.set_representativeid(d.getPrefixedString())
        continue
      if tt == 1488:
        self.set_pagerank(d.getVarInt32())
        continue
      if tt == 1602:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_location().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_url_: res+=prefix+("Url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_representativeid_: res+=prefix+("RepresentativeId: %s\n" % self.DebugFormatString(self.representativeid_))
    if self.has_pagerank_: res+=prefix+("Pagerank: %s\n" % self.DebugFormatInt32(self.pagerank_))
    if self.has_location_:
      res+=prefix+"Location <\n"
      res+=self.location_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

class RTUpdate_PipelineInfoIndexSpecificFactors_DEPRECATED(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.index_ = 0
    self.isselected_ = 0
    self.factors_ = []
    self.subindexfactors_ = []
    self.rank_ = 0
    self.has_index_ = 0
    self.has_isselected_ = 0
    self.has_rank_ = 0
    if contents is not None: self.MergeFromString(contents)

  def index(self): return self.index_

  def set_index(self, x):
    self.has_index_ = 1
    self.index_ = x

  def clear_index(self):
    self.has_index_ = 0
    self.index_ = 0

  def has_index(self): return self.has_index_

  def isselected(self): return self.isselected_

  def set_isselected(self, x):
    self.has_isselected_ = 1
    self.isselected_ = x

  def clear_isselected(self):
    self.has_isselected_ = 0
    self.isselected_ = 0

  def has_isselected(self): return self.has_isselected_

  def factors_size(self): return len(self.factors_)
  def factors_list(self): return self.factors_

  def factors(self, i):
    return self.factors_[i]

  def mutable_factors(self, i):
    return self.factors_[i]

  def add_factors(self):
    x = SelectionFactors()
    self.factors_.append(x)
    return x

  def clear_factors(self):
    self.factors_ = []
  def subindexfactors_size(self): return len(self.subindexfactors_)
  def subindexfactors_list(self): return self.subindexfactors_

  def subindexfactors(self, i):
    return self.subindexfactors_[i]

  def mutable_subindexfactors(self, i):
    return self.subindexfactors_[i]

  def add_subindexfactors(self):
    x = RTUpdate_PipelineInfoIndexSpecificFactors_DEPRECATEDSubIndexFactors()
    self.subindexfactors_.append(x)
    return x

  def clear_subindexfactors(self):
    self.subindexfactors_ = []
  def rank(self): return self.rank_

  def set_rank(self, x):
    self.has_rank_ = 1
    self.rank_ = x

  def clear_rank(self):
    self.has_rank_ = 0
    self.rank_ = 0

  def has_rank(self): return self.has_rank_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_index()): self.set_index(x.index())
    if (x.has_isselected()): self.set_isselected(x.isselected())
    for i in xrange(x.factors_size()): self.add_factors().CopyFrom(x.factors(i))
    for i in xrange(x.subindexfactors_size()): self.add_subindexfactors().CopyFrom(x.subindexfactors(i))
    if (x.has_rank()): self.set_rank(x.rank())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_index_ != x.has_index_: return 0
    if self.has_index_ and self.index_ != x.index_: return 0
    if self.has_isselected_ != x.has_isselected_: return 0
    if self.has_isselected_ and self.isselected_ != x.isselected_: return 0
    if len(self.factors_) != len(x.factors_): return 0
    for e1, e2 in zip(self.factors_, x.factors_):
      if e1 != e2: return 0
    if len(self.subindexfactors_) != len(x.subindexfactors_): return 0
    for e1, e2 in zip(self.subindexfactors_, x.subindexfactors_):
      if e1 != e2: return 0
    if self.has_rank_ != x.has_rank_: return 0
    if self.has_rank_ and self.rank_ != x.rank_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_index_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: index not set.')
    if (not self.has_isselected_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: isselected not set.')
    for i in xrange(len(self.factors_)):
      if (not self.factors_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.subindexfactors_)):
      if (not self.subindexfactors_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.index_)
    n += 2 * len(self.factors_)
    for i in xrange(len(self.factors_)): n += self.lengthString(self.factors_[i].ByteSize())
    n += 4 * len(self.subindexfactors_)
    for i in xrange(len(self.subindexfactors_)): n += self.subindexfactors_[i].ByteSize()
    if (self.has_rank_): n += 2 + self.lengthVarInt64(self.rank_)
    return n + 5

  def Clear(self):
    self.clear_index()
    self.clear_isselected()
    self.clear_factors()
    self.clear_subindexfactors()
    self.clear_rank()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.factors_)):
      out.putVarInt32(1610)
      out.putVarInt32(self.factors_[i].ByteSize())
      self.factors_[i].OutputUnchecked(out)
    out.putVarInt32(1648)
    out.putVarInt32(self.index_)
    out.putVarInt32(1656)
    out.putBoolean(self.isselected_)
    for i in xrange(len(self.subindexfactors_)):
      out.putVarInt32(2235)
      self.subindexfactors_[i].OutputUnchecked(out)
      out.putVarInt32(2236)
    if (self.has_rank_):
      out.putVarInt32(2304)
      out.putVarInt64(self.rank_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1644: break
      if tt == 1610:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_factors().TryMerge(tmp)
        continue
      if tt == 1648:
        self.set_index(d.getVarInt32())
        continue
      if tt == 1656:
        self.set_isselected(d.getBoolean())
        continue
      if tt == 2235:
        self.add_subindexfactors().TryMerge(d)
        continue
      if tt == 2304:
        self.set_rank(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_index_: res+=prefix+("Index: %s\n" % self.DebugFormatInt32(self.index_))
    if self.has_isselected_: res+=prefix+("IsSelected: %s\n" % self.DebugFormatBool(self.isselected_))
    cnt=0
    for e in self.factors_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Factors%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.subindexfactors_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("SubIndexFactors%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_rank_: res+=prefix+("Rank: %s\n" % self.DebugFormatInt64(self.rank_))
    return res

class RTUpdate_PipelineInfoAlternateName_DEPRECATED(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.url_ = ""
    self.location_ = None
    self.has_url_ = 0
    self.has_location_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def location(self):
    if self.location_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.location_ is None: self.location_ = RTDocReference()
      finally:
        self.lazy_init_lock_.release()
    return self.location_

  def mutable_location(self): self.has_location_ = 1; return self.location()

  def clear_location(self):
    #Warning: this method does not acquire the lock.
    self.has_location_ = 0;
    if self.location_ is not None: self.location_.Clear()

  def has_location(self): return self.has_location_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_url()): self.set_url(x.url())
    if (x.has_location()): self.mutable_location().MergeFrom(x.location())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_location_ != x.has_location_: return 0
    if self.has_location_ and self.location_ != x.location_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_url_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: url not set.')
    if (self.has_location_ and not self.location_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.url_))
    if (self.has_location_): n += 2 + self.lengthString(self.location_.ByteSize())
    return n + 2

  def Clear(self):
    self.clear_url()
    self.clear_location()

  def OutputUnchecked(self, out):
    out.putVarInt32(1706)
    out.putPrefixedString(self.url_)
    if (self.has_location_):
      out.putVarInt32(1714)
      out.putVarInt32(self.location_.ByteSize())
      self.location_.OutputUnchecked(out)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1700: break
      if tt == 1706:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 1714:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_location().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_url_: res+=prefix+("Url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_location_:
      res+=prefix+"Location <\n"
      res+=self.location_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

class RTUpdate_DocPremiumData(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.premiumperdocdata_ = None
    self.pagerank_ = 0
    self.metadata_ = ""
    self.has_premiumperdocdata_ = 0
    self.has_pagerank_ = 0
    self.has_metadata_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def premiumperdocdata(self):
    if self.premiumperdocdata_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.premiumperdocdata_ is None: self.premiumperdocdata_ = PremiumPerDocData()
      finally:
        self.lazy_init_lock_.release()
    return self.premiumperdocdata_

  def mutable_premiumperdocdata(self): self.has_premiumperdocdata_ = 1; return self.premiumperdocdata()

  def clear_premiumperdocdata(self):
    #Warning: this method does not acquire the lock.
    self.has_premiumperdocdata_ = 0;
    if self.premiumperdocdata_ is not None: self.premiumperdocdata_.Clear()

  def has_premiumperdocdata(self): return self.has_premiumperdocdata_

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 0

  def has_pagerank(self): return self.has_pagerank_

  def metadata(self): return self.metadata_

  def set_metadata(self, x):
    self.has_metadata_ = 1
    self.metadata_ = x

  def clear_metadata(self):
    self.has_metadata_ = 0
    self.metadata_ = ""

  def has_metadata(self): return self.has_metadata_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_premiumperdocdata()): self.mutable_premiumperdocdata().MergeFrom(x.premiumperdocdata())
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())
    if (x.has_metadata()): self.set_metadata(x.metadata())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_premiumperdocdata_ != x.has_premiumperdocdata_: return 0
    if self.has_premiumperdocdata_ and self.premiumperdocdata_ != x.premiumperdocdata_: return 0
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    if self.has_metadata_ != x.has_metadata_: return 0
    if self.has_metadata_ and self.metadata_ != x.metadata_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (self.has_premiumperdocdata_ and not self.premiumperdocdata_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_premiumperdocdata_): n += 2 + self.lengthString(self.premiumperdocdata_.ByteSize())
    if (self.has_pagerank_): n += 2 + self.lengthVarInt64(self.pagerank_)
    if (self.has_metadata_): n += 2 + self.lengthString(len(self.metadata_))
    return n + 0

  def Clear(self):
    self.clear_premiumperdocdata()
    self.clear_pagerank()
    self.clear_metadata()

  def OutputUnchecked(self, out):
    if (self.has_premiumperdocdata_):
      out.putVarInt32(1770)
      out.putVarInt32(self.premiumperdocdata_.ByteSize())
      self.premiumperdocdata_.OutputUnchecked(out)
    if (self.has_pagerank_):
      out.putVarInt32(1776)
      out.putVarInt32(self.pagerank_)
    if (self.has_metadata_):
      out.putVarInt32(1786)
      out.putPrefixedString(self.metadata_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1764: break
      if tt == 1770:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_premiumperdocdata().TryMerge(tmp)
        continue
      if tt == 1776:
        self.set_pagerank(d.getVarInt32())
        continue
      if tt == 1786:
        self.set_metadata(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_premiumperdocdata_:
      res+=prefix+"PremiumPerDocData <\n"
      res+=self.premiumperdocdata_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_pagerank_: res+=prefix+("PageRank: %s\n" % self.DebugFormatInt32(self.pagerank_))
    if self.has_metadata_: res+=prefix+("Metadata: %s\n" % self.DebugFormatString(self.metadata_))
    return res

class RTUpdate_DocLogicalTargetChoices(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.targettype_ = 0
    self.targetstring_ = ""
    self.isundesirablesource_ = 0
    self.targetrepid_ = ""
    self.has_targettype_ = 0
    self.has_targetstring_ = 0
    self.has_isundesirablesource_ = 0
    self.has_targetrepid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def targettype(self): return self.targettype_

  def set_targettype(self, x):
    self.has_targettype_ = 1
    self.targettype_ = x

  def clear_targettype(self):
    self.has_targettype_ = 0
    self.targettype_ = 0

  def has_targettype(self): return self.has_targettype_

  def targetstring(self): return self.targetstring_

  def set_targetstring(self, x):
    self.has_targetstring_ = 1
    self.targetstring_ = x

  def clear_targetstring(self):
    self.has_targetstring_ = 0
    self.targetstring_ = ""

  def has_targetstring(self): return self.has_targetstring_

  def isundesirablesource(self): return self.isundesirablesource_

  def set_isundesirablesource(self, x):
    self.has_isundesirablesource_ = 1
    self.isundesirablesource_ = x

  def clear_isundesirablesource(self):
    self.has_isundesirablesource_ = 0
    self.isundesirablesource_ = 0

  def has_isundesirablesource(self): return self.has_isundesirablesource_

  def targetrepid(self): return self.targetrepid_

  def set_targetrepid(self, x):
    self.has_targetrepid_ = 1
    self.targetrepid_ = x

  def clear_targetrepid(self):
    self.has_targetrepid_ = 0
    self.targetrepid_ = ""

  def has_targetrepid(self): return self.has_targetrepid_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_targettype()): self.set_targettype(x.targettype())
    if (x.has_targetstring()): self.set_targetstring(x.targetstring())
    if (x.has_isundesirablesource()): self.set_isundesirablesource(x.isundesirablesource())
    if (x.has_targetrepid()): self.set_targetrepid(x.targetrepid())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_targettype_ != x.has_targettype_: return 0
    if self.has_targettype_ and self.targettype_ != x.targettype_: return 0
    if self.has_targetstring_ != x.has_targetstring_: return 0
    if self.has_targetstring_ and self.targetstring_ != x.targetstring_: return 0
    if self.has_isundesirablesource_ != x.has_isundesirablesource_: return 0
    if self.has_isundesirablesource_ and self.isundesirablesource_ != x.isundesirablesource_: return 0
    if self.has_targetrepid_ != x.has_targetrepid_: return 0
    if self.has_targetrepid_ and self.targetrepid_ != x.targetrepid_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_targettype_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: targettype not set.')
    if (not self.has_targetstring_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: targetstring not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.targettype_)
    n += self.lengthString(len(self.targetstring_))
    if (self.has_isundesirablesource_): n += 3
    if (self.has_targetrepid_): n += 2 + self.lengthString(len(self.targetrepid_))
    return n + 4

  def Clear(self):
    self.clear_targettype()
    self.clear_targetstring()
    self.clear_isundesirablesource()
    self.clear_targetrepid()

  def OutputUnchecked(self, out):
    out.putVarInt32(1896)
    out.putVarInt32(self.targettype_)
    out.putVarInt32(1906)
    out.putPrefixedString(self.targetstring_)
    if (self.has_isundesirablesource_):
      out.putVarInt32(2368)
      out.putBoolean(self.isundesirablesource_)
    if (self.has_targetrepid_):
      out.putVarInt32(2378)
      out.putPrefixedString(self.targetrepid_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1892: break
      if tt == 1896:
        self.set_targettype(d.getVarInt32())
        continue
      if tt == 1906:
        self.set_targetstring(d.getPrefixedString())
        continue
      if tt == 2368:
        self.set_isundesirablesource(d.getBoolean())
        continue
      if tt == 2378:
        self.set_targetrepid(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_targettype_: res+=prefix+("TargetType: %s\n" % self.DebugFormatInt32(self.targettype_))
    if self.has_targetstring_: res+=prefix+("TargetString: %s\n" % self.DebugFormatString(self.targetstring_))
    if self.has_isundesirablesource_: res+=prefix+("IsUndesirableSource: %s\n" % self.DebugFormatBool(self.isundesirablesource_))
    if self.has_targetrepid_: res+=prefix+("TargetRepid: %s\n" % self.DebugFormatString(self.targetrepid_))
    return res

class RTUpdate_PipelineInfoTrace(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.tracer_queue_ = 0
    self.tracer_segid_ = 0
    self.tracer_timestamp_ = 0
    self.tracer_score_ = 0.0
    self.has_tracer_queue_ = 0
    self.has_tracer_segid_ = 0
    self.has_tracer_timestamp_ = 0
    self.has_tracer_score_ = 0
    if contents is not None: self.MergeFromString(contents)

  def tracer_queue(self): return self.tracer_queue_

  def set_tracer_queue(self, x):
    self.has_tracer_queue_ = 1
    self.tracer_queue_ = x

  def clear_tracer_queue(self):
    self.has_tracer_queue_ = 0
    self.tracer_queue_ = 0

  def has_tracer_queue(self): return self.has_tracer_queue_

  def tracer_segid(self): return self.tracer_segid_

  def set_tracer_segid(self, x):
    self.has_tracer_segid_ = 1
    self.tracer_segid_ = x

  def clear_tracer_segid(self):
    self.has_tracer_segid_ = 0
    self.tracer_segid_ = 0

  def has_tracer_segid(self): return self.has_tracer_segid_

  def tracer_timestamp(self): return self.tracer_timestamp_

  def set_tracer_timestamp(self, x):
    self.has_tracer_timestamp_ = 1
    self.tracer_timestamp_ = x

  def clear_tracer_timestamp(self):
    self.has_tracer_timestamp_ = 0
    self.tracer_timestamp_ = 0

  def has_tracer_timestamp(self): return self.has_tracer_timestamp_

  def tracer_score(self): return self.tracer_score_

  def set_tracer_score(self, x):
    self.has_tracer_score_ = 1
    self.tracer_score_ = x

  def clear_tracer_score(self):
    self.has_tracer_score_ = 0
    self.tracer_score_ = 0.0

  def has_tracer_score(self): return self.has_tracer_score_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_tracer_queue()): self.set_tracer_queue(x.tracer_queue())
    if (x.has_tracer_segid()): self.set_tracer_segid(x.tracer_segid())
    if (x.has_tracer_timestamp()): self.set_tracer_timestamp(x.tracer_timestamp())
    if (x.has_tracer_score()): self.set_tracer_score(x.tracer_score())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_tracer_queue_ != x.has_tracer_queue_: return 0
    if self.has_tracer_queue_ and self.tracer_queue_ != x.tracer_queue_: return 0
    if self.has_tracer_segid_ != x.has_tracer_segid_: return 0
    if self.has_tracer_segid_ and self.tracer_segid_ != x.tracer_segid_: return 0
    if self.has_tracer_timestamp_ != x.has_tracer_timestamp_: return 0
    if self.has_tracer_timestamp_ and self.tracer_timestamp_ != x.tracer_timestamp_: return 0
    if self.has_tracer_score_ != x.has_tracer_score_: return 0
    if self.has_tracer_score_ and self.tracer_score_ != x.tracer_score_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_tracer_queue_): n += 2 + self.lengthVarInt64(self.tracer_queue_)
    if (self.has_tracer_segid_): n += 2 + self.lengthVarInt64(self.tracer_segid_)
    if (self.has_tracer_timestamp_): n += 2 + self.lengthVarInt64(self.tracer_timestamp_)
    if (self.has_tracer_score_): n += 10
    return n + 0

  def Clear(self):
    self.clear_tracer_queue()
    self.clear_tracer_segid()
    self.clear_tracer_timestamp()
    self.clear_tracer_score()

  def OutputUnchecked(self, out):
    if (self.has_tracer_queue_):
      out.putVarInt32(1928)
      out.putVarInt32(self.tracer_queue_)
    if (self.has_tracer_segid_):
      out.putVarInt32(1936)
      out.putVarInt32(self.tracer_segid_)
    if (self.has_tracer_timestamp_):
      out.putVarInt32(1944)
      out.putVarInt32(self.tracer_timestamp_)
    if (self.has_tracer_score_):
      out.putVarInt32(1953)
      out.putDouble(self.tracer_score_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1924: break
      if tt == 1928:
        self.set_tracer_queue(d.getVarInt32())
        continue
      if tt == 1936:
        self.set_tracer_segid(d.getVarInt32())
        continue
      if tt == 1944:
        self.set_tracer_timestamp(d.getVarInt32())
        continue
      if tt == 1953:
        self.set_tracer_score(d.getDouble())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_tracer_queue_: res+=prefix+("Tracer_Queue: %s\n" % self.DebugFormatInt32(self.tracer_queue_))
    if self.has_tracer_segid_: res+=prefix+("Tracer_SegId: %s\n" % self.DebugFormatInt32(self.tracer_segid_))
    if self.has_tracer_timestamp_: res+=prefix+("Tracer_Timestamp: %s\n" % self.DebugFormatInt32(self.tracer_timestamp_))
    if self.has_tracer_score_: res+=prefix+("Tracer_Score: %s\n" % self.DebugFormat(self.tracer_score_))
    return res

class RTUpdate_DocAdditionalChecksums(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.experimentalchecksum_ = 0
    self.relaxedchecksum_ = 0
    self.neardupchecksum_ = 0
    self.simhash_ = 0
    self.simhashistrusted_ = 1
    self.notransientchecksum_ = 0
    self.has_experimentalchecksum_ = 0
    self.has_relaxedchecksum_ = 0
    self.has_neardupchecksum_ = 0
    self.has_simhash_ = 0
    self.has_simhashistrusted_ = 0
    self.has_notransientchecksum_ = 0
    if contents is not None: self.MergeFromString(contents)

  def experimentalchecksum(self): return self.experimentalchecksum_

  def set_experimentalchecksum(self, x):
    self.has_experimentalchecksum_ = 1
    self.experimentalchecksum_ = x

  def clear_experimentalchecksum(self):
    self.has_experimentalchecksum_ = 0
    self.experimentalchecksum_ = 0

  def has_experimentalchecksum(self): return self.has_experimentalchecksum_

  def relaxedchecksum(self): return self.relaxedchecksum_

  def set_relaxedchecksum(self, x):
    self.has_relaxedchecksum_ = 1
    self.relaxedchecksum_ = x

  def clear_relaxedchecksum(self):
    self.has_relaxedchecksum_ = 0
    self.relaxedchecksum_ = 0

  def has_relaxedchecksum(self): return self.has_relaxedchecksum_

  def neardupchecksum(self): return self.neardupchecksum_

  def set_neardupchecksum(self, x):
    self.has_neardupchecksum_ = 1
    self.neardupchecksum_ = x

  def clear_neardupchecksum(self):
    self.has_neardupchecksum_ = 0
    self.neardupchecksum_ = 0

  def has_neardupchecksum(self): return self.has_neardupchecksum_

  def simhash(self): return self.simhash_

  def set_simhash(self, x):
    self.has_simhash_ = 1
    self.simhash_ = x

  def clear_simhash(self):
    self.has_simhash_ = 0
    self.simhash_ = 0

  def has_simhash(self): return self.has_simhash_

  def simhashistrusted(self): return self.simhashistrusted_

  def set_simhashistrusted(self, x):
    self.has_simhashistrusted_ = 1
    self.simhashistrusted_ = x

  def clear_simhashistrusted(self):
    self.has_simhashistrusted_ = 0
    self.simhashistrusted_ = 1

  def has_simhashistrusted(self): return self.has_simhashistrusted_

  def notransientchecksum(self): return self.notransientchecksum_

  def set_notransientchecksum(self, x):
    self.has_notransientchecksum_ = 1
    self.notransientchecksum_ = x

  def clear_notransientchecksum(self):
    self.has_notransientchecksum_ = 0
    self.notransientchecksum_ = 0

  def has_notransientchecksum(self): return self.has_notransientchecksum_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_experimentalchecksum()): self.set_experimentalchecksum(x.experimentalchecksum())
    if (x.has_relaxedchecksum()): self.set_relaxedchecksum(x.relaxedchecksum())
    if (x.has_neardupchecksum()): self.set_neardupchecksum(x.neardupchecksum())
    if (x.has_simhash()): self.set_simhash(x.simhash())
    if (x.has_simhashistrusted()): self.set_simhashistrusted(x.simhashistrusted())
    if (x.has_notransientchecksum()): self.set_notransientchecksum(x.notransientchecksum())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_experimentalchecksum_ != x.has_experimentalchecksum_: return 0
    if self.has_experimentalchecksum_ and self.experimentalchecksum_ != x.experimentalchecksum_: return 0
    if self.has_relaxedchecksum_ != x.has_relaxedchecksum_: return 0
    if self.has_relaxedchecksum_ and self.relaxedchecksum_ != x.relaxedchecksum_: return 0
    if self.has_neardupchecksum_ != x.has_neardupchecksum_: return 0
    if self.has_neardupchecksum_ and self.neardupchecksum_ != x.neardupchecksum_: return 0
    if self.has_simhash_ != x.has_simhash_: return 0
    if self.has_simhash_ and self.simhash_ != x.simhash_: return 0
    if self.has_simhashistrusted_ != x.has_simhashistrusted_: return 0
    if self.has_simhashistrusted_ and self.simhashistrusted_ != x.simhashistrusted_: return 0
    if self.has_notransientchecksum_ != x.has_notransientchecksum_: return 0
    if self.has_notransientchecksum_ and self.notransientchecksum_ != x.notransientchecksum_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_experimentalchecksum_): n += 2 + self.lengthVarInt64(self.experimentalchecksum_)
    if (self.has_relaxedchecksum_): n += 2 + self.lengthVarInt64(self.relaxedchecksum_)
    if (self.has_neardupchecksum_): n += 2 + self.lengthVarInt64(self.neardupchecksum_)
    if (self.has_simhash_): n += 2 + self.lengthVarInt64(self.simhash_)
    if (self.has_simhashistrusted_): n += 3
    if (self.has_notransientchecksum_): n += 2 + self.lengthVarInt64(self.notransientchecksum_)
    return n + 0

  def Clear(self):
    self.clear_experimentalchecksum()
    self.clear_relaxedchecksum()
    self.clear_neardupchecksum()
    self.clear_simhash()
    self.clear_simhashistrusted()
    self.clear_notransientchecksum()

  def OutputUnchecked(self, out):
    if (self.has_experimentalchecksum_):
      out.putVarInt32(1976)
      out.putVarUint64(self.experimentalchecksum_)
    if (self.has_relaxedchecksum_):
      out.putVarInt32(1984)
      out.putVarUint64(self.relaxedchecksum_)
    if (self.has_neardupchecksum_):
      out.putVarInt32(2120)
      out.putVarUint64(self.neardupchecksum_)
    if (self.has_simhash_):
      out.putVarInt32(2296)
      out.putVarUint64(self.simhash_)
    if (self.has_simhashistrusted_):
      out.putVarInt32(2320)
      out.putBoolean(self.simhashistrusted_)
    if (self.has_notransientchecksum_):
      out.putVarInt32(2608)
      out.putVarUint64(self.notransientchecksum_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1972: break
      if tt == 1976:
        self.set_experimentalchecksum(d.getVarUint64())
        continue
      if tt == 1984:
        self.set_relaxedchecksum(d.getVarUint64())
        continue
      if tt == 2120:
        self.set_neardupchecksum(d.getVarUint64())
        continue
      if tt == 2296:
        self.set_simhash(d.getVarUint64())
        continue
      if tt == 2320:
        self.set_simhashistrusted(d.getBoolean())
        continue
      if tt == 2608:
        self.set_notransientchecksum(d.getVarUint64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_experimentalchecksum_: res+=prefix+("ExperimentalChecksum: %s\n" % self.DebugFormatInt64(self.experimentalchecksum_))
    if self.has_relaxedchecksum_: res+=prefix+("RelaxedChecksum: %s\n" % self.DebugFormatInt64(self.relaxedchecksum_))
    if self.has_neardupchecksum_: res+=prefix+("NearDupChecksum: %s\n" % self.DebugFormatInt64(self.neardupchecksum_))
    if self.has_simhash_: res+=prefix+("SimHash: %s\n" % self.DebugFormatInt64(self.simhash_))
    if self.has_simhashistrusted_: res+=prefix+("SimHashIsTrusted: %s\n" % self.DebugFormatBool(self.simhashistrusted_))
    if self.has_notransientchecksum_: res+=prefix+("NoTransientChecksum: %s\n" % self.DebugFormatInt64(self.notransientchecksum_))
    return res

class RTUpdate_DocDebugInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.fetchlogfile_ = ""
    self.offset_ = 0
    self.url_ = ""
    self.has_fetchlogfile_ = 0
    self.has_offset_ = 0
    self.has_url_ = 0
    if contents is not None: self.MergeFromString(contents)

  def fetchlogfile(self): return self.fetchlogfile_

  def set_fetchlogfile(self, x):
    self.has_fetchlogfile_ = 1
    self.fetchlogfile_ = x

  def clear_fetchlogfile(self):
    self.has_fetchlogfile_ = 0
    self.fetchlogfile_ = ""

  def has_fetchlogfile(self): return self.has_fetchlogfile_

  def offset(self): return self.offset_

  def set_offset(self, x):
    self.has_offset_ = 1
    self.offset_ = x

  def clear_offset(self):
    self.has_offset_ = 0
    self.offset_ = 0

  def has_offset(self): return self.has_offset_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_fetchlogfile()): self.set_fetchlogfile(x.fetchlogfile())
    if (x.has_offset()): self.set_offset(x.offset())
    if (x.has_url()): self.set_url(x.url())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_fetchlogfile_ != x.has_fetchlogfile_: return 0
    if self.has_fetchlogfile_ and self.fetchlogfile_ != x.fetchlogfile_: return 0
    if self.has_offset_ != x.has_offset_: return 0
    if self.has_offset_ and self.offset_ != x.offset_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_fetchlogfile_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: fetchlogfile not set.')
    if (not self.has_offset_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: offset not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.fetchlogfile_))
    n += self.lengthVarInt64(self.offset_)
    if (self.has_url_): n += 2 + self.lengthString(len(self.url_))
    return n + 4

  def Clear(self):
    self.clear_fetchlogfile()
    self.clear_offset()
    self.clear_url()

  def OutputUnchecked(self, out):
    out.putVarInt32(2082)
    out.putPrefixedString(self.fetchlogfile_)
    out.putVarInt32(2088)
    out.putVarUint64(self.offset_)
    if (self.has_url_):
      out.putVarInt32(2098)
      out.putPrefixedString(self.url_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 2076: break
      if tt == 2082:
        self.set_fetchlogfile(d.getPrefixedString())
        continue
      if tt == 2088:
        self.set_offset(d.getVarUint64())
        continue
      if tt == 2098:
        self.set_url(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_fetchlogfile_: res+=prefix+("FetchlogFile: %s\n" % self.DebugFormatString(self.fetchlogfile_))
    if self.has_offset_: res+=prefix+("Offset: %s\n" % self.DebugFormatInt64(self.offset_))
    if self.has_url_: res+=prefix+("Url: %s\n" % self.DebugFormatString(self.url_))
    return res

class RTUpdate_DocHourlyInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.requestorid_ = ""
    self.seedfiles_ = []
    self.has_requestorid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def requestorid(self): return self.requestorid_

  def set_requestorid(self, x):
    self.has_requestorid_ = 1
    self.requestorid_ = x

  def clear_requestorid(self):
    self.has_requestorid_ = 0
    self.requestorid_ = ""

  def has_requestorid(self): return self.has_requestorid_

  def seedfiles_size(self): return len(self.seedfiles_)
  def seedfiles_list(self): return self.seedfiles_

  def seedfiles(self, i):
    return self.seedfiles_[i]

  def set_seedfiles(self, i, x):
    self.seedfiles_[i] = x

  def add_seedfiles(self, x):
    self.seedfiles_.append(x)

  def clear_seedfiles(self):
    self.seedfiles_ = []


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_requestorid()): self.set_requestorid(x.requestorid())
    for i in xrange(x.seedfiles_size()): self.add_seedfiles(x.seedfiles(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_requestorid_ != x.has_requestorid_: return 0
    if self.has_requestorid_ and self.requestorid_ != x.requestorid_: return 0
    if len(self.seedfiles_) != len(x.seedfiles_): return 0
    for e1, e2 in zip(self.seedfiles_, x.seedfiles_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_requestorid_): n += 2 + self.lengthString(len(self.requestorid_))
    n += 2 * len(self.seedfiles_)
    for i in xrange(len(self.seedfiles_)): n += self.lengthString(len(self.seedfiles_[i]))
    return n + 0

  def Clear(self):
    self.clear_requestorid()
    self.clear_seedfiles()

  def OutputUnchecked(self, out):
    if (self.has_requestorid_):
      out.putVarInt32(2154)
      out.putPrefixedString(self.requestorid_)
    for i in xrange(len(self.seedfiles_)):
      out.putVarInt32(2162)
      out.putPrefixedString(self.seedfiles_[i])

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 2148: break
      if tt == 2154:
        self.set_requestorid(d.getPrefixedString())
        continue
      if tt == 2162:
        self.add_seedfiles(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_requestorid_: res+=prefix+("RequestorID: %s\n" % self.DebugFormatString(self.requestorid_))
    cnt=0
    for e in self.seedfiles_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("SeedFiles%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    return res

class RTUpdate_DocIncludedContent(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.content_ = ""
    self.uncompressedlength_ = 0
    self.sourcetypebitfield_ = 0
    self.position_ = 0
    self.has_content_ = 0
    self.has_uncompressedlength_ = 0
    self.has_sourcetypebitfield_ = 0
    self.has_position_ = 0
    if contents is not None: self.MergeFromString(contents)

  def content(self): return self.content_

  def set_content(self, x):
    self.has_content_ = 1
    self.content_ = x

  def clear_content(self):
    self.has_content_ = 0
    self.content_ = ""

  def has_content(self): return self.has_content_

  def uncompressedlength(self): return self.uncompressedlength_

  def set_uncompressedlength(self, x):
    self.has_uncompressedlength_ = 1
    self.uncompressedlength_ = x

  def clear_uncompressedlength(self):
    self.has_uncompressedlength_ = 0
    self.uncompressedlength_ = 0

  def has_uncompressedlength(self): return self.has_uncompressedlength_

  def sourcetypebitfield(self): return self.sourcetypebitfield_

  def set_sourcetypebitfield(self, x):
    self.has_sourcetypebitfield_ = 1
    self.sourcetypebitfield_ = x

  def clear_sourcetypebitfield(self):
    self.has_sourcetypebitfield_ = 0
    self.sourcetypebitfield_ = 0

  def has_sourcetypebitfield(self): return self.has_sourcetypebitfield_

  def position(self): return self.position_

  def set_position(self, x):
    self.has_position_ = 1
    self.position_ = x

  def clear_position(self):
    self.has_position_ = 0
    self.position_ = 0

  def has_position(self): return self.has_position_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_content()): self.set_content(x.content())
    if (x.has_uncompressedlength()): self.set_uncompressedlength(x.uncompressedlength())
    if (x.has_sourcetypebitfield()): self.set_sourcetypebitfield(x.sourcetypebitfield())
    if (x.has_position()): self.set_position(x.position())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_content_ != x.has_content_: return 0
    if self.has_content_ and self.content_ != x.content_: return 0
    if self.has_uncompressedlength_ != x.has_uncompressedlength_: return 0
    if self.has_uncompressedlength_ and self.uncompressedlength_ != x.uncompressedlength_: return 0
    if self.has_sourcetypebitfield_ != x.has_sourcetypebitfield_: return 0
    if self.has_sourcetypebitfield_ and self.sourcetypebitfield_ != x.sourcetypebitfield_: return 0
    if self.has_position_ != x.has_position_: return 0
    if self.has_position_ and self.position_ != x.position_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_content_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: content not set.')
    if (not self.has_sourcetypebitfield_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: sourcetypebitfield not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.content_))
    if (self.has_uncompressedlength_): n += 2 + self.lengthVarInt64(self.uncompressedlength_)
    n += self.lengthVarInt64(self.sourcetypebitfield_)
    if (self.has_position_): n += 2 + self.lengthVarInt64(self.position_)
    return n + 4

  def Clear(self):
    self.clear_content()
    self.clear_uncompressedlength()
    self.clear_sourcetypebitfield()
    self.clear_position()

  def OutputUnchecked(self, out):
    out.putVarInt32(2178)
    out.putPrefixedString(self.content_)
    if (self.has_uncompressedlength_):
      out.putVarInt32(2184)
      out.putVarInt64(self.uncompressedlength_)
    out.putVarInt32(2192)
    out.putVarInt64(self.sourcetypebitfield_)
    if (self.has_position_):
      out.putVarInt32(2424)
      out.putVarInt32(self.position_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 2172: break
      if tt == 2178:
        self.set_content(d.getPrefixedString())
        continue
      if tt == 2184:
        self.set_uncompressedlength(d.getVarInt64())
        continue
      if tt == 2192:
        self.set_sourcetypebitfield(d.getVarInt64())
        continue
      if tt == 2424:
        self.set_position(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_content_: res+=prefix+("Content: %s\n" % self.DebugFormatString(self.content_))
    if self.has_uncompressedlength_: res+=prefix+("UncompressedLength: %s\n" % self.DebugFormatInt64(self.uncompressedlength_))
    if self.has_sourcetypebitfield_: res+=prefix+("SourceTypeBitfield: %s\n" % self.DebugFormatInt64(self.sourcetypebitfield_))
    if self.has_position_: res+=prefix+("Position: %s\n" % self.DebugFormatInt32(self.position_))
    return res

class RTUpdate_PipelineInfoIndexCoverageStats(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.impressions_ = 0
    self.chances_ = 0
    self.clicks_ = 0
    self.has_impressions_ = 0
    self.has_chances_ = 0
    self.has_clicks_ = 0
    if contents is not None: self.MergeFromString(contents)

  def impressions(self): return self.impressions_

  def set_impressions(self, x):
    self.has_impressions_ = 1
    self.impressions_ = x

  def clear_impressions(self):
    self.has_impressions_ = 0
    self.impressions_ = 0

  def has_impressions(self): return self.has_impressions_

  def chances(self): return self.chances_

  def set_chances(self, x):
    self.has_chances_ = 1
    self.chances_ = x

  def clear_chances(self):
    self.has_chances_ = 0
    self.chances_ = 0

  def has_chances(self): return self.has_chances_

  def clicks(self): return self.clicks_

  def set_clicks(self, x):
    self.has_clicks_ = 1
    self.clicks_ = x

  def clear_clicks(self):
    self.has_clicks_ = 0
    self.clicks_ = 0

  def has_clicks(self): return self.has_clicks_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_impressions()): self.set_impressions(x.impressions())
    if (x.has_chances()): self.set_chances(x.chances())
    if (x.has_clicks()): self.set_clicks(x.clicks())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_impressions_ != x.has_impressions_: return 0
    if self.has_impressions_ and self.impressions_ != x.impressions_: return 0
    if self.has_chances_ != x.has_chances_: return 0
    if self.has_chances_ and self.chances_ != x.chances_: return 0
    if self.has_clicks_ != x.has_clicks_: return 0
    if self.has_clicks_ and self.clicks_ != x.clicks_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_impressions_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: impressions not set.')
    if (not self.has_chances_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: chances not set.')
    if (not self.has_clicks_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: clicks not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.impressions_)
    n += self.lengthVarInt64(self.chances_)
    n += self.lengthVarInt64(self.clicks_)
    return n + 6

  def Clear(self):
    self.clear_impressions()
    self.clear_chances()
    self.clear_clicks()

  def OutputUnchecked(self, out):
    out.putVarInt32(2208)
    out.putVarInt64(self.impressions_)
    out.putVarInt32(2216)
    out.putVarInt64(self.chances_)
    out.putVarInt32(2224)
    out.putVarInt64(self.clicks_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 2204: break
      if tt == 2208:
        self.set_impressions(d.getVarInt64())
        continue
      if tt == 2216:
        self.set_chances(d.getVarInt64())
        continue
      if tt == 2224:
        self.set_clicks(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_impressions_: res+=prefix+("impressions: %s\n" % self.DebugFormatInt64(self.impressions_))
    if self.has_chances_: res+=prefix+("chances: %s\n" % self.DebugFormatInt64(self.chances_))
    if self.has_clicks_: res+=prefix+("clicks: %s\n" % self.DebugFormatInt64(self.clicks_))
    return res

class RTUpdate_Doc(ProtocolBuffer.ProtocolMessage):

  BADURLS_CONVERTER =    1 
  BADURLS_DEMOTEPAT =    2 
  REPID_MANGLE_WHITELIST =    4 
  FINALTARGET_BADURLS_CONVERTER =    8 
  FINALTARGET_BADURLS_DEMOTEPAT =   16 

  _UrlMatchingsFiles_NAMES = {
    1: "BADURLS_CONVERTER",
    2: "BADURLS_DEMOTEPAT",
    4: "REPID_MANGLE_WHITELIST",
    8: "FINALTARGET_BADURLS_CONVERTER",
    16: "FINALTARGET_BADURLS_DEMOTEPAT",
  }

  def UrlMatchingsFiles_Name(cls, x): return cls._UrlMatchingsFiles_NAMES.get(x, "")
  UrlMatchingsFiles_Name = classmethod(UrlMatchingsFiles_Name)


  NO_REASON    =    0 
  META_TAG     =    1 
  ROBOTS_TXT   =    2 
  BADURLS_FILE =    4 
  ROBOTS_HTTP_HEADER =    8 
  OTHER_ROBOTS_POLICY =   16 

  _RobotedReasonEnum_NAMES = {
    0: "NO_REASON",
    1: "META_TAG",
    2: "ROBOTS_TXT",
    4: "BADURLS_FILE",
    8: "ROBOTS_HTTP_HEADER",
    16: "OTHER_ROBOTS_POLICY",
  }

  def RobotedReasonEnum_Name(cls, x): return cls._RobotedReasonEnum_NAMES.get(x, "")
  RobotedReasonEnum_Name = classmethod(RobotedReasonEnum_Name)


  WIKIPEDIA_REDIRECT =    0 
  JAVASCRIPT_REDIRECT =    1 
  SINGLE_FRAME_REDIRECT =    2 
  META_REFRESH =    3 
  RSS_ATOM_REDIRECT =    4 
  CRYPTO301    =    5 

  _LogicalTargetType_NAMES = {
    0: "WIKIPEDIA_REDIRECT",
    1: "JAVASCRIPT_REDIRECT",
    2: "SINGLE_FRAME_REDIRECT",
    3: "META_REFRESH",
    4: "RSS_ATOM_REDIRECT",
    5: "CRYPTO301",
  }

  def LogicalTargetType_Name(cls, x): return cls._LogicalTargetType_NAMES.get(x, "")
  LogicalTargetType_Name = classmethod(LogicalTargetType_Name)

  def __init__(self, contents=None):
    self.docid_ = 0
    self.representativeid_ = ""
    self.timestamp_ = 0
    self.url_ = ""
    self.urlmatchings_ = 0
    self.ispagerankdemoted_deprecated_ = 0
    self.displayurl_ = ""
    self.pagerank_ = 0
    self.pagerank_ns_ = 0
    self.langnormalizedpagerank_ = 0
    self.duplicatedocids_ = []
    self.redirects_ = []
    self.urlafterredirects_ = ""
    self.contents_ = ""
    self.istruncated_ = 0
    self.uncompressedlength_ = 0
    self.ipaddr_ = 0
    self.contenttype_ = 0
    self.language_ = 0
    self.encoding_ = 0
    self.countrycode_ = 0
    self.replacebody_ = 0
    self.replaceanchors_ = 0
    self.locale_ = 0
    self.authmethod_ = 0
    self.contentchecksum_ = 0
    self.ispermanentredirect_ = 0
    self.isduphint_ = 0
    self.titlefp_deprecated_ = 0
    self.numtokens_ = 0
    self.noindexreason_ = 0
    self.noarchivereason_ = 0
    self.nofollowreason_ = 0
    self.nosnippetreason_ = 0
    self.indexdata_ = []
    self.rawanchordata_ = []
    self.directory_ = []
    self.originaldoc_ = None
    self.visualtype_ = 0
    self.trawlerfetchstate_ = 0
    self.trawlerfetchreason_ = 0
    self.trawlerconversionfailed_ = 0
    self.trawlerrobotsstate_ = 0
    self.trawlerrobotsreason_ = 0
    self.webmirrorsource_ = 0
    self.crawllooptimestamp_ = 0
    self.responsecode_ = 0
    self.finalurlafterredirects_ = ""
    self.repidafterredirects_ = ""
    self.finalrepidafterredirects_ = ""
    self.debuginfo_ = None
    self.hourlyinfo_ = None
    self.converterranclassifiers_ = 0
    self.linkextractorranclassifiers_ = 0
    self.logicaltargetindex_ = 0
    self.logicaltargetchoices_ = []
    self.logicaltargetlocation_ = None
    self.wikipediatitle_ = ""
    self.isadditionaldoc_ = 0
    self.islink_ = 0
    self.istracer_ = 0
    self.premiumdata_ = None
    self.embedding_ = []
    self.isembedding_ = 0
    self.isflashprocessed_ = 0
    self.flashprocessingtimestamp_ = 0
    self.flashskipintrourl_ = ""
    self.additionalchecksums_ = None
    self.bouncepad302convertedto301_ = 0
    self.converter_doc_attachments_ = None
    self.summary_doc_attachments_ = None
    self.doc_attachments_ = None
    self.contentexpirytime_ = 0
    self.nosearchresultspage_ = 0
    self.includedcontent_ = []
    self.mobiledata_ = None
    self.required_for_cse_ = 0
    self.cse_id_ = []
    self.richsnippet_ = None
    self.has_docid_ = 0
    self.has_representativeid_ = 0
    self.has_timestamp_ = 0
    self.has_url_ = 0
    self.has_urlmatchings_ = 0
    self.has_ispagerankdemoted_deprecated_ = 0
    self.has_displayurl_ = 0
    self.has_pagerank_ = 0
    self.has_pagerank_ns_ = 0
    self.has_langnormalizedpagerank_ = 0
    self.has_urlafterredirects_ = 0
    self.has_contents_ = 0
    self.has_istruncated_ = 0
    self.has_uncompressedlength_ = 0
    self.has_ipaddr_ = 0
    self.has_contenttype_ = 0
    self.has_language_ = 0
    self.has_encoding_ = 0
    self.has_countrycode_ = 0
    self.has_replacebody_ = 0
    self.has_replaceanchors_ = 0
    self.has_locale_ = 0
    self.has_authmethod_ = 0
    self.has_contentchecksum_ = 0
    self.has_ispermanentredirect_ = 0
    self.has_isduphint_ = 0
    self.has_titlefp_deprecated_ = 0
    self.has_numtokens_ = 0
    self.has_noindexreason_ = 0
    self.has_noarchivereason_ = 0
    self.has_nofollowreason_ = 0
    self.has_nosnippetreason_ = 0
    self.has_originaldoc_ = 0
    self.has_visualtype_ = 0
    self.has_trawlerfetchstate_ = 0
    self.has_trawlerfetchreason_ = 0
    self.has_trawlerconversionfailed_ = 0
    self.has_trawlerrobotsstate_ = 0
    self.has_trawlerrobotsreason_ = 0
    self.has_webmirrorsource_ = 0
    self.has_crawllooptimestamp_ = 0
    self.has_responsecode_ = 0
    self.has_finalurlafterredirects_ = 0
    self.has_repidafterredirects_ = 0
    self.has_finalrepidafterredirects_ = 0
    self.has_debuginfo_ = 0
    self.has_hourlyinfo_ = 0
    self.has_converterranclassifiers_ = 0
    self.has_linkextractorranclassifiers_ = 0
    self.has_logicaltargetindex_ = 0
    self.has_logicaltargetlocation_ = 0
    self.has_wikipediatitle_ = 0
    self.has_isadditionaldoc_ = 0
    self.has_islink_ = 0
    self.has_istracer_ = 0
    self.has_premiumdata_ = 0
    self.has_isembedding_ = 0
    self.has_isflashprocessed_ = 0
    self.has_flashprocessingtimestamp_ = 0
    self.has_flashskipintrourl_ = 0
    self.has_additionalchecksums_ = 0
    self.has_bouncepad302convertedto301_ = 0
    self.has_converter_doc_attachments_ = 0
    self.has_summary_doc_attachments_ = 0
    self.has_doc_attachments_ = 0
    self.has_contentexpirytime_ = 0
    self.has_nosearchresultspage_ = 0
    self.has_mobiledata_ = 0
    self.has_required_for_cse_ = 0
    self.has_richsnippet_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def docid(self): return self.docid_

  def set_docid(self, x):
    self.has_docid_ = 1
    self.docid_ = x

  def clear_docid(self):
    self.has_docid_ = 0
    self.docid_ = 0

  def has_docid(self): return self.has_docid_

  def representativeid(self): return self.representativeid_

  def set_representativeid(self, x):
    self.has_representativeid_ = 1
    self.representativeid_ = x

  def clear_representativeid(self):
    self.has_representativeid_ = 0
    self.representativeid_ = ""

  def has_representativeid(self): return self.has_representativeid_

  def timestamp(self): return self.timestamp_

  def set_timestamp(self, x):
    self.has_timestamp_ = 1
    self.timestamp_ = x

  def clear_timestamp(self):
    self.has_timestamp_ = 0
    self.timestamp_ = 0

  def has_timestamp(self): return self.has_timestamp_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def urlmatchings(self): return self.urlmatchings_

  def set_urlmatchings(self, x):
    self.has_urlmatchings_ = 1
    self.urlmatchings_ = x

  def clear_urlmatchings(self):
    self.has_urlmatchings_ = 0
    self.urlmatchings_ = 0

  def has_urlmatchings(self): return self.has_urlmatchings_

  def ispagerankdemoted_deprecated(self): return self.ispagerankdemoted_deprecated_

  def set_ispagerankdemoted_deprecated(self, x):
    self.has_ispagerankdemoted_deprecated_ = 1
    self.ispagerankdemoted_deprecated_ = x

  def clear_ispagerankdemoted_deprecated(self):
    self.has_ispagerankdemoted_deprecated_ = 0
    self.ispagerankdemoted_deprecated_ = 0

  def has_ispagerankdemoted_deprecated(self): return self.has_ispagerankdemoted_deprecated_

  def displayurl(self): return self.displayurl_

  def set_displayurl(self, x):
    self.has_displayurl_ = 1
    self.displayurl_ = x

  def clear_displayurl(self):
    self.has_displayurl_ = 0
    self.displayurl_ = ""

  def has_displayurl(self): return self.has_displayurl_

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 0

  def has_pagerank(self): return self.has_pagerank_

  def pagerank_ns(self): return self.pagerank_ns_

  def set_pagerank_ns(self, x):
    self.has_pagerank_ns_ = 1
    self.pagerank_ns_ = x

  def clear_pagerank_ns(self):
    self.has_pagerank_ns_ = 0
    self.pagerank_ns_ = 0

  def has_pagerank_ns(self): return self.has_pagerank_ns_

  def langnormalizedpagerank(self): return self.langnormalizedpagerank_

  def set_langnormalizedpagerank(self, x):
    self.has_langnormalizedpagerank_ = 1
    self.langnormalizedpagerank_ = x

  def clear_langnormalizedpagerank(self):
    self.has_langnormalizedpagerank_ = 0
    self.langnormalizedpagerank_ = 0

  def has_langnormalizedpagerank(self): return self.has_langnormalizedpagerank_

  def duplicatedocids_size(self): return len(self.duplicatedocids_)
  def duplicatedocids_list(self): return self.duplicatedocids_

  def duplicatedocids(self, i):
    return self.duplicatedocids_[i]

  def set_duplicatedocids(self, i, x):
    self.duplicatedocids_[i] = x

  def add_duplicatedocids(self, x):
    self.duplicatedocids_.append(x)

  def clear_duplicatedocids(self):
    self.duplicatedocids_ = []

  def redirects_size(self): return len(self.redirects_)
  def redirects_list(self): return self.redirects_

  def redirects(self, i):
    return self.redirects_[i]

  def mutable_redirects(self, i):
    return self.redirects_[i]

  def add_redirects(self):
    x = RTUpdate_DocRedirects()
    self.redirects_.append(x)
    return x

  def clear_redirects(self):
    self.redirects_ = []
  def urlafterredirects(self): return self.urlafterredirects_

  def set_urlafterredirects(self, x):
    self.has_urlafterredirects_ = 1
    self.urlafterredirects_ = x

  def clear_urlafterredirects(self):
    self.has_urlafterredirects_ = 0
    self.urlafterredirects_ = ""

  def has_urlafterredirects(self): return self.has_urlafterredirects_

  def contents(self): return self.contents_

  def set_contents(self, x):
    self.has_contents_ = 1
    self.contents_ = x

  def clear_contents(self):
    self.has_contents_ = 0
    self.contents_ = ""

  def has_contents(self): return self.has_contents_

  def istruncated(self): return self.istruncated_

  def set_istruncated(self, x):
    self.has_istruncated_ = 1
    self.istruncated_ = x

  def clear_istruncated(self):
    self.has_istruncated_ = 0
    self.istruncated_ = 0

  def has_istruncated(self): return self.has_istruncated_

  def uncompressedlength(self): return self.uncompressedlength_

  def set_uncompressedlength(self, x):
    self.has_uncompressedlength_ = 1
    self.uncompressedlength_ = x

  def clear_uncompressedlength(self):
    self.has_uncompressedlength_ = 0
    self.uncompressedlength_ = 0

  def has_uncompressedlength(self): return self.has_uncompressedlength_

  def ipaddr(self): return self.ipaddr_

  def set_ipaddr(self, x):
    self.has_ipaddr_ = 1
    self.ipaddr_ = x

  def clear_ipaddr(self):
    self.has_ipaddr_ = 0
    self.ipaddr_ = 0

  def has_ipaddr(self): return self.has_ipaddr_

  def contenttype(self): return self.contenttype_

  def set_contenttype(self, x):
    self.has_contenttype_ = 1
    self.contenttype_ = x

  def clear_contenttype(self):
    self.has_contenttype_ = 0
    self.contenttype_ = 0

  def has_contenttype(self): return self.has_contenttype_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = 0

  def has_language(self): return self.has_language_

  def encoding(self): return self.encoding_

  def set_encoding(self, x):
    self.has_encoding_ = 1
    self.encoding_ = x

  def clear_encoding(self):
    self.has_encoding_ = 0
    self.encoding_ = 0

  def has_encoding(self): return self.has_encoding_

  def countrycode(self): return self.countrycode_

  def set_countrycode(self, x):
    self.has_countrycode_ = 1
    self.countrycode_ = x

  def clear_countrycode(self):
    self.has_countrycode_ = 0
    self.countrycode_ = 0

  def has_countrycode(self): return self.has_countrycode_

  def replacebody(self): return self.replacebody_

  def set_replacebody(self, x):
    self.has_replacebody_ = 1
    self.replacebody_ = x

  def clear_replacebody(self):
    self.has_replacebody_ = 0
    self.replacebody_ = 0

  def has_replacebody(self): return self.has_replacebody_

  def replaceanchors(self): return self.replaceanchors_

  def set_replaceanchors(self, x):
    self.has_replaceanchors_ = 1
    self.replaceanchors_ = x

  def clear_replaceanchors(self):
    self.has_replaceanchors_ = 0
    self.replaceanchors_ = 0

  def has_replaceanchors(self): return self.has_replaceanchors_

  def locale(self): return self.locale_

  def set_locale(self, x):
    self.has_locale_ = 1
    self.locale_ = x

  def clear_locale(self):
    self.has_locale_ = 0
    self.locale_ = 0

  def has_locale(self): return self.has_locale_

  def authmethod(self): return self.authmethod_

  def set_authmethod(self, x):
    self.has_authmethod_ = 1
    self.authmethod_ = x

  def clear_authmethod(self):
    self.has_authmethod_ = 0
    self.authmethod_ = 0

  def has_authmethod(self): return self.has_authmethod_

  def contentchecksum(self): return self.contentchecksum_

  def set_contentchecksum(self, x):
    self.has_contentchecksum_ = 1
    self.contentchecksum_ = x

  def clear_contentchecksum(self):
    self.has_contentchecksum_ = 0
    self.contentchecksum_ = 0

  def has_contentchecksum(self): return self.has_contentchecksum_

  def ispermanentredirect(self): return self.ispermanentredirect_

  def set_ispermanentredirect(self, x):
    self.has_ispermanentredirect_ = 1
    self.ispermanentredirect_ = x

  def clear_ispermanentredirect(self):
    self.has_ispermanentredirect_ = 0
    self.ispermanentredirect_ = 0

  def has_ispermanentredirect(self): return self.has_ispermanentredirect_

  def isduphint(self): return self.isduphint_

  def set_isduphint(self, x):
    self.has_isduphint_ = 1
    self.isduphint_ = x

  def clear_isduphint(self):
    self.has_isduphint_ = 0
    self.isduphint_ = 0

  def has_isduphint(self): return self.has_isduphint_

  def titlefp_deprecated(self): return self.titlefp_deprecated_

  def set_titlefp_deprecated(self, x):
    self.has_titlefp_deprecated_ = 1
    self.titlefp_deprecated_ = x

  def clear_titlefp_deprecated(self):
    self.has_titlefp_deprecated_ = 0
    self.titlefp_deprecated_ = 0

  def has_titlefp_deprecated(self): return self.has_titlefp_deprecated_

  def numtokens(self): return self.numtokens_

  def set_numtokens(self, x):
    self.has_numtokens_ = 1
    self.numtokens_ = x

  def clear_numtokens(self):
    self.has_numtokens_ = 0
    self.numtokens_ = 0

  def has_numtokens(self): return self.has_numtokens_

  def noindexreason(self): return self.noindexreason_

  def set_noindexreason(self, x):
    self.has_noindexreason_ = 1
    self.noindexreason_ = x

  def clear_noindexreason(self):
    self.has_noindexreason_ = 0
    self.noindexreason_ = 0

  def has_noindexreason(self): return self.has_noindexreason_

  def noarchivereason(self): return self.noarchivereason_

  def set_noarchivereason(self, x):
    self.has_noarchivereason_ = 1
    self.noarchivereason_ = x

  def clear_noarchivereason(self):
    self.has_noarchivereason_ = 0
    self.noarchivereason_ = 0

  def has_noarchivereason(self): return self.has_noarchivereason_

  def nofollowreason(self): return self.nofollowreason_

  def set_nofollowreason(self, x):
    self.has_nofollowreason_ = 1
    self.nofollowreason_ = x

  def clear_nofollowreason(self):
    self.has_nofollowreason_ = 0
    self.nofollowreason_ = 0

  def has_nofollowreason(self): return self.has_nofollowreason_

  def nosnippetreason(self): return self.nosnippetreason_

  def set_nosnippetreason(self, x):
    self.has_nosnippetreason_ = 1
    self.nosnippetreason_ = x

  def clear_nosnippetreason(self):
    self.has_nosnippetreason_ = 0
    self.nosnippetreason_ = 0

  def has_nosnippetreason(self): return self.has_nosnippetreason_

  def indexdata_size(self): return len(self.indexdata_)
  def indexdata_list(self): return self.indexdata_

  def indexdata(self, i):
    return self.indexdata_[i]

  def mutable_indexdata(self, i):
    return self.indexdata_[i]

  def add_indexdata(self):
    x = RTUpdate_DocIndexData()
    self.indexdata_.append(x)
    return x

  def clear_indexdata(self):
    self.indexdata_ = []
  def rawanchordata_size(self): return len(self.rawanchordata_)
  def rawanchordata_list(self): return self.rawanchordata_

  def rawanchordata(self, i):
    return self.rawanchordata_[i]

  def mutable_rawanchordata(self, i):
    return self.rawanchordata_[i]

  def add_rawanchordata(self):
    x = RTUpdate_DocRawAnchorData()
    self.rawanchordata_.append(x)
    return x

  def clear_rawanchordata(self):
    self.rawanchordata_ = []
  def directory_size(self): return len(self.directory_)
  def directory_list(self): return self.directory_

  def directory(self, i):
    return self.directory_[i]

  def mutable_directory(self, i):
    return self.directory_[i]

  def add_directory(self):
    x = RTUpdate_DocDirectory()
    self.directory_.append(x)
    return x

  def clear_directory(self):
    self.directory_ = []
  def originaldoc(self):
    if self.originaldoc_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.originaldoc_ is None: self.originaldoc_ = RTUpdate_DocOriginalDoc()
      finally:
        self.lazy_init_lock_.release()
    return self.originaldoc_

  def mutable_originaldoc(self): self.has_originaldoc_ = 1; return self.originaldoc()

  def clear_originaldoc(self):
    #Warning: this method does not acquire the lock.
    self.has_originaldoc_ = 0;
    if self.originaldoc_ is not None: self.originaldoc_.Clear()

  def has_originaldoc(self): return self.has_originaldoc_

  def visualtype(self): return self.visualtype_

  def set_visualtype(self, x):
    self.has_visualtype_ = 1
    self.visualtype_ = x

  def clear_visualtype(self):
    self.has_visualtype_ = 0
    self.visualtype_ = 0

  def has_visualtype(self): return self.has_visualtype_

  def trawlerfetchstate(self): return self.trawlerfetchstate_

  def set_trawlerfetchstate(self, x):
    self.has_trawlerfetchstate_ = 1
    self.trawlerfetchstate_ = x

  def clear_trawlerfetchstate(self):
    self.has_trawlerfetchstate_ = 0
    self.trawlerfetchstate_ = 0

  def has_trawlerfetchstate(self): return self.has_trawlerfetchstate_

  def trawlerfetchreason(self): return self.trawlerfetchreason_

  def set_trawlerfetchreason(self, x):
    self.has_trawlerfetchreason_ = 1
    self.trawlerfetchreason_ = x

  def clear_trawlerfetchreason(self):
    self.has_trawlerfetchreason_ = 0
    self.trawlerfetchreason_ = 0

  def has_trawlerfetchreason(self): return self.has_trawlerfetchreason_

  def trawlerconversionfailed(self): return self.trawlerconversionfailed_

  def set_trawlerconversionfailed(self, x):
    self.has_trawlerconversionfailed_ = 1
    self.trawlerconversionfailed_ = x

  def clear_trawlerconversionfailed(self):
    self.has_trawlerconversionfailed_ = 0
    self.trawlerconversionfailed_ = 0

  def has_trawlerconversionfailed(self): return self.has_trawlerconversionfailed_

  def trawlerrobotsstate(self): return self.trawlerrobotsstate_

  def set_trawlerrobotsstate(self, x):
    self.has_trawlerrobotsstate_ = 1
    self.trawlerrobotsstate_ = x

  def clear_trawlerrobotsstate(self):
    self.has_trawlerrobotsstate_ = 0
    self.trawlerrobotsstate_ = 0

  def has_trawlerrobotsstate(self): return self.has_trawlerrobotsstate_

  def trawlerrobotsreason(self): return self.trawlerrobotsreason_

  def set_trawlerrobotsreason(self, x):
    self.has_trawlerrobotsreason_ = 1
    self.trawlerrobotsreason_ = x

  def clear_trawlerrobotsreason(self):
    self.has_trawlerrobotsreason_ = 0
    self.trawlerrobotsreason_ = 0

  def has_trawlerrobotsreason(self): return self.has_trawlerrobotsreason_

  def webmirrorsource(self): return self.webmirrorsource_

  def set_webmirrorsource(self, x):
    self.has_webmirrorsource_ = 1
    self.webmirrorsource_ = x

  def clear_webmirrorsource(self):
    self.has_webmirrorsource_ = 0
    self.webmirrorsource_ = 0

  def has_webmirrorsource(self): return self.has_webmirrorsource_

  def crawllooptimestamp(self): return self.crawllooptimestamp_

  def set_crawllooptimestamp(self, x):
    self.has_crawllooptimestamp_ = 1
    self.crawllooptimestamp_ = x

  def clear_crawllooptimestamp(self):
    self.has_crawllooptimestamp_ = 0
    self.crawllooptimestamp_ = 0

  def has_crawllooptimestamp(self): return self.has_crawllooptimestamp_

  def responsecode(self): return self.responsecode_

  def set_responsecode(self, x):
    self.has_responsecode_ = 1
    self.responsecode_ = x

  def clear_responsecode(self):
    self.has_responsecode_ = 0
    self.responsecode_ = 0

  def has_responsecode(self): return self.has_responsecode_

  def finalurlafterredirects(self): return self.finalurlafterredirects_

  def set_finalurlafterredirects(self, x):
    self.has_finalurlafterredirects_ = 1
    self.finalurlafterredirects_ = x

  def clear_finalurlafterredirects(self):
    self.has_finalurlafterredirects_ = 0
    self.finalurlafterredirects_ = ""

  def has_finalurlafterredirects(self): return self.has_finalurlafterredirects_

  def repidafterredirects(self): return self.repidafterredirects_

  def set_repidafterredirects(self, x):
    self.has_repidafterredirects_ = 1
    self.repidafterredirects_ = x

  def clear_repidafterredirects(self):
    self.has_repidafterredirects_ = 0
    self.repidafterredirects_ = ""

  def has_repidafterredirects(self): return self.has_repidafterredirects_

  def finalrepidafterredirects(self): return self.finalrepidafterredirects_

  def set_finalrepidafterredirects(self, x):
    self.has_finalrepidafterredirects_ = 1
    self.finalrepidafterredirects_ = x

  def clear_finalrepidafterredirects(self):
    self.has_finalrepidafterredirects_ = 0
    self.finalrepidafterredirects_ = ""

  def has_finalrepidafterredirects(self): return self.has_finalrepidafterredirects_

  def debuginfo(self):
    if self.debuginfo_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.debuginfo_ is None: self.debuginfo_ = RTUpdate_DocDebugInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.debuginfo_

  def mutable_debuginfo(self): self.has_debuginfo_ = 1; return self.debuginfo()

  def clear_debuginfo(self):
    #Warning: this method does not acquire the lock.
    self.has_debuginfo_ = 0;
    if self.debuginfo_ is not None: self.debuginfo_.Clear()

  def has_debuginfo(self): return self.has_debuginfo_

  def hourlyinfo(self):
    if self.hourlyinfo_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.hourlyinfo_ is None: self.hourlyinfo_ = RTUpdate_DocHourlyInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.hourlyinfo_

  def mutable_hourlyinfo(self): self.has_hourlyinfo_ = 1; return self.hourlyinfo()

  def clear_hourlyinfo(self):
    #Warning: this method does not acquire the lock.
    self.has_hourlyinfo_ = 0;
    if self.hourlyinfo_ is not None: self.hourlyinfo_.Clear()

  def has_hourlyinfo(self): return self.has_hourlyinfo_

  def converterranclassifiers(self): return self.converterranclassifiers_

  def set_converterranclassifiers(self, x):
    self.has_converterranclassifiers_ = 1
    self.converterranclassifiers_ = x

  def clear_converterranclassifiers(self):
    self.has_converterranclassifiers_ = 0
    self.converterranclassifiers_ = 0

  def has_converterranclassifiers(self): return self.has_converterranclassifiers_

  def linkextractorranclassifiers(self): return self.linkextractorranclassifiers_

  def set_linkextractorranclassifiers(self, x):
    self.has_linkextractorranclassifiers_ = 1
    self.linkextractorranclassifiers_ = x

  def clear_linkextractorranclassifiers(self):
    self.has_linkextractorranclassifiers_ = 0
    self.linkextractorranclassifiers_ = 0

  def has_linkextractorranclassifiers(self): return self.has_linkextractorranclassifiers_

  def logicaltargetindex(self): return self.logicaltargetindex_

  def set_logicaltargetindex(self, x):
    self.has_logicaltargetindex_ = 1
    self.logicaltargetindex_ = x

  def clear_logicaltargetindex(self):
    self.has_logicaltargetindex_ = 0
    self.logicaltargetindex_ = 0

  def has_logicaltargetindex(self): return self.has_logicaltargetindex_

  def logicaltargetchoices_size(self): return len(self.logicaltargetchoices_)
  def logicaltargetchoices_list(self): return self.logicaltargetchoices_

  def logicaltargetchoices(self, i):
    return self.logicaltargetchoices_[i]

  def mutable_logicaltargetchoices(self, i):
    return self.logicaltargetchoices_[i]

  def add_logicaltargetchoices(self):
    x = RTUpdate_DocLogicalTargetChoices()
    self.logicaltargetchoices_.append(x)
    return x

  def clear_logicaltargetchoices(self):
    self.logicaltargetchoices_ = []
  def logicaltargetlocation(self):
    if self.logicaltargetlocation_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.logicaltargetlocation_ is None: self.logicaltargetlocation_ = RTDocReference()
      finally:
        self.lazy_init_lock_.release()
    return self.logicaltargetlocation_

  def mutable_logicaltargetlocation(self): self.has_logicaltargetlocation_ = 1; return self.logicaltargetlocation()

  def clear_logicaltargetlocation(self):
    #Warning: this method does not acquire the lock.
    self.has_logicaltargetlocation_ = 0;
    if self.logicaltargetlocation_ is not None: self.logicaltargetlocation_.Clear()

  def has_logicaltargetlocation(self): return self.has_logicaltargetlocation_

  def wikipediatitle(self): return self.wikipediatitle_

  def set_wikipediatitle(self, x):
    self.has_wikipediatitle_ = 1
    self.wikipediatitle_ = x

  def clear_wikipediatitle(self):
    self.has_wikipediatitle_ = 0
    self.wikipediatitle_ = ""

  def has_wikipediatitle(self): return self.has_wikipediatitle_

  def isadditionaldoc(self): return self.isadditionaldoc_

  def set_isadditionaldoc(self, x):
    self.has_isadditionaldoc_ = 1
    self.isadditionaldoc_ = x

  def clear_isadditionaldoc(self):
    self.has_isadditionaldoc_ = 0
    self.isadditionaldoc_ = 0

  def has_isadditionaldoc(self): return self.has_isadditionaldoc_

  def islink(self): return self.islink_

  def set_islink(self, x):
    self.has_islink_ = 1
    self.islink_ = x

  def clear_islink(self):
    self.has_islink_ = 0
    self.islink_ = 0

  def has_islink(self): return self.has_islink_

  def istracer(self): return self.istracer_

  def set_istracer(self, x):
    self.has_istracer_ = 1
    self.istracer_ = x

  def clear_istracer(self):
    self.has_istracer_ = 0
    self.istracer_ = 0

  def has_istracer(self): return self.has_istracer_

  def premiumdata(self):
    if self.premiumdata_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.premiumdata_ is None: self.premiumdata_ = RTUpdate_DocPremiumData()
      finally:
        self.lazy_init_lock_.release()
    return self.premiumdata_

  def mutable_premiumdata(self): self.has_premiumdata_ = 1; return self.premiumdata()

  def clear_premiumdata(self):
    #Warning: this method does not acquire the lock.
    self.has_premiumdata_ = 0;
    if self.premiumdata_ is not None: self.premiumdata_.Clear()

  def has_premiumdata(self): return self.has_premiumdata_

  def embedding_size(self): return len(self.embedding_)
  def embedding_list(self): return self.embedding_

  def embedding(self, i):
    return self.embedding_[i]

  def mutable_embedding(self, i):
    return self.embedding_[i]

  def add_embedding(self):
    x = RTDocEmbedding()
    self.embedding_.append(x)
    return x

  def clear_embedding(self):
    self.embedding_ = []
  def isembedding(self): return self.isembedding_

  def set_isembedding(self, x):
    self.has_isembedding_ = 1
    self.isembedding_ = x

  def clear_isembedding(self):
    self.has_isembedding_ = 0
    self.isembedding_ = 0

  def has_isembedding(self): return self.has_isembedding_

  def isflashprocessed(self): return self.isflashprocessed_

  def set_isflashprocessed(self, x):
    self.has_isflashprocessed_ = 1
    self.isflashprocessed_ = x

  def clear_isflashprocessed(self):
    self.has_isflashprocessed_ = 0
    self.isflashprocessed_ = 0

  def has_isflashprocessed(self): return self.has_isflashprocessed_

  def flashprocessingtimestamp(self): return self.flashprocessingtimestamp_

  def set_flashprocessingtimestamp(self, x):
    self.has_flashprocessingtimestamp_ = 1
    self.flashprocessingtimestamp_ = x

  def clear_flashprocessingtimestamp(self):
    self.has_flashprocessingtimestamp_ = 0
    self.flashprocessingtimestamp_ = 0

  def has_flashprocessingtimestamp(self): return self.has_flashprocessingtimestamp_

  def flashskipintrourl(self): return self.flashskipintrourl_

  def set_flashskipintrourl(self, x):
    self.has_flashskipintrourl_ = 1
    self.flashskipintrourl_ = x

  def clear_flashskipintrourl(self):
    self.has_flashskipintrourl_ = 0
    self.flashskipintrourl_ = ""

  def has_flashskipintrourl(self): return self.has_flashskipintrourl_

  def additionalchecksums(self):
    if self.additionalchecksums_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.additionalchecksums_ is None: self.additionalchecksums_ = RTUpdate_DocAdditionalChecksums()
      finally:
        self.lazy_init_lock_.release()
    return self.additionalchecksums_

  def mutable_additionalchecksums(self): self.has_additionalchecksums_ = 1; return self.additionalchecksums()

  def clear_additionalchecksums(self):
    #Warning: this method does not acquire the lock.
    self.has_additionalchecksums_ = 0;
    if self.additionalchecksums_ is not None: self.additionalchecksums_.Clear()

  def has_additionalchecksums(self): return self.has_additionalchecksums_

  def bouncepad302convertedto301(self): return self.bouncepad302convertedto301_

  def set_bouncepad302convertedto301(self, x):
    self.has_bouncepad302convertedto301_ = 1
    self.bouncepad302convertedto301_ = x

  def clear_bouncepad302convertedto301(self):
    self.has_bouncepad302convertedto301_ = 0
    self.bouncepad302convertedto301_ = 0

  def has_bouncepad302convertedto301(self): return self.has_bouncepad302convertedto301_

  def converter_doc_attachments(self):
    if self.converter_doc_attachments_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.converter_doc_attachments_ is None: self.converter_doc_attachments_ = MessageSet()
      finally:
        self.lazy_init_lock_.release()
    return self.converter_doc_attachments_

  def mutable_converter_doc_attachments(self): self.has_converter_doc_attachments_ = 1; return self.converter_doc_attachments()

  def clear_converter_doc_attachments(self):
    #Warning: this method does not acquire the lock.
    self.has_converter_doc_attachments_ = 0;
    if self.converter_doc_attachments_ is not None: self.converter_doc_attachments_.Clear()

  def has_converter_doc_attachments(self): return self.has_converter_doc_attachments_

  def summary_doc_attachments(self):
    if self.summary_doc_attachments_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.summary_doc_attachments_ is None: self.summary_doc_attachments_ = MessageSet()
      finally:
        self.lazy_init_lock_.release()
    return self.summary_doc_attachments_

  def mutable_summary_doc_attachments(self): self.has_summary_doc_attachments_ = 1; return self.summary_doc_attachments()

  def clear_summary_doc_attachments(self):
    #Warning: this method does not acquire the lock.
    self.has_summary_doc_attachments_ = 0;
    if self.summary_doc_attachments_ is not None: self.summary_doc_attachments_.Clear()

  def has_summary_doc_attachments(self): return self.has_summary_doc_attachments_

  def doc_attachments(self):
    if self.doc_attachments_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.doc_attachments_ is None: self.doc_attachments_ = MessageSet()
      finally:
        self.lazy_init_lock_.release()
    return self.doc_attachments_

  def mutable_doc_attachments(self): self.has_doc_attachments_ = 1; return self.doc_attachments()

  def clear_doc_attachments(self):
    #Warning: this method does not acquire the lock.
    self.has_doc_attachments_ = 0;
    if self.doc_attachments_ is not None: self.doc_attachments_.Clear()

  def has_doc_attachments(self): return self.has_doc_attachments_

  def contentexpirytime(self): return self.contentexpirytime_

  def set_contentexpirytime(self, x):
    self.has_contentexpirytime_ = 1
    self.contentexpirytime_ = x

  def clear_contentexpirytime(self):
    self.has_contentexpirytime_ = 0
    self.contentexpirytime_ = 0

  def has_contentexpirytime(self): return self.has_contentexpirytime_

  def nosearchresultspage(self): return self.nosearchresultspage_

  def set_nosearchresultspage(self, x):
    self.has_nosearchresultspage_ = 1
    self.nosearchresultspage_ = x

  def clear_nosearchresultspage(self):
    self.has_nosearchresultspage_ = 0
    self.nosearchresultspage_ = 0

  def has_nosearchresultspage(self): return self.has_nosearchresultspage_

  def includedcontent_size(self): return len(self.includedcontent_)
  def includedcontent_list(self): return self.includedcontent_

  def includedcontent(self, i):
    return self.includedcontent_[i]

  def mutable_includedcontent(self, i):
    return self.includedcontent_[i]

  def add_includedcontent(self):
    x = RTUpdate_DocIncludedContent()
    self.includedcontent_.append(x)
    return x

  def clear_includedcontent(self):
    self.includedcontent_ = []
  def mobiledata(self):
    if self.mobiledata_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.mobiledata_ is None: self.mobiledata_ = MobileData()
      finally:
        self.lazy_init_lock_.release()
    return self.mobiledata_

  def mutable_mobiledata(self): self.has_mobiledata_ = 1; return self.mobiledata()

  def clear_mobiledata(self):
    #Warning: this method does not acquire the lock.
    self.has_mobiledata_ = 0;
    if self.mobiledata_ is not None: self.mobiledata_.Clear()

  def has_mobiledata(self): return self.has_mobiledata_

  def required_for_cse(self): return self.required_for_cse_

  def set_required_for_cse(self, x):
    self.has_required_for_cse_ = 1
    self.required_for_cse_ = x

  def clear_required_for_cse(self):
    self.has_required_for_cse_ = 0
    self.required_for_cse_ = 0

  def has_required_for_cse(self): return self.has_required_for_cse_

  def cse_id_size(self): return len(self.cse_id_)
  def cse_id_list(self): return self.cse_id_

  def cse_id(self, i):
    return self.cse_id_[i]

  def mutable_cse_id(self, i):
    return self.cse_id_[i]

  def add_cse_id(self):
    x = CSEUrlInfo()
    self.cse_id_.append(x)
    return x

  def clear_cse_id(self):
    self.cse_id_ = []
  def richsnippet(self):
    if self.richsnippet_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.richsnippet_ is None: self.richsnippet_ = PageMap()
      finally:
        self.lazy_init_lock_.release()
    return self.richsnippet_

  def mutable_richsnippet(self): self.has_richsnippet_ = 1; return self.richsnippet()

  def clear_richsnippet(self):
    #Warning: this method does not acquire the lock.
    self.has_richsnippet_ = 0;
    if self.richsnippet_ is not None: self.richsnippet_.Clear()

  def has_richsnippet(self): return self.has_richsnippet_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_docid()): self.set_docid(x.docid())
    if (x.has_representativeid()): self.set_representativeid(x.representativeid())
    if (x.has_timestamp()): self.set_timestamp(x.timestamp())
    if (x.has_url()): self.set_url(x.url())
    if (x.has_urlmatchings()): self.set_urlmatchings(x.urlmatchings())
    if (x.has_ispagerankdemoted_deprecated()): self.set_ispagerankdemoted_deprecated(x.ispagerankdemoted_deprecated())
    if (x.has_displayurl()): self.set_displayurl(x.displayurl())
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())
    if (x.has_pagerank_ns()): self.set_pagerank_ns(x.pagerank_ns())
    if (x.has_langnormalizedpagerank()): self.set_langnormalizedpagerank(x.langnormalizedpagerank())
    for i in xrange(x.duplicatedocids_size()): self.add_duplicatedocids(x.duplicatedocids(i))
    for i in xrange(x.redirects_size()): self.add_redirects().CopyFrom(x.redirects(i))
    if (x.has_urlafterredirects()): self.set_urlafterredirects(x.urlafterredirects())
    if (x.has_contents()): self.set_contents(x.contents())
    if (x.has_istruncated()): self.set_istruncated(x.istruncated())
    if (x.has_uncompressedlength()): self.set_uncompressedlength(x.uncompressedlength())
    if (x.has_ipaddr()): self.set_ipaddr(x.ipaddr())
    if (x.has_contenttype()): self.set_contenttype(x.contenttype())
    if (x.has_language()): self.set_language(x.language())
    if (x.has_encoding()): self.set_encoding(x.encoding())
    if (x.has_countrycode()): self.set_countrycode(x.countrycode())
    if (x.has_replacebody()): self.set_replacebody(x.replacebody())
    if (x.has_replaceanchors()): self.set_replaceanchors(x.replaceanchors())
    if (x.has_locale()): self.set_locale(x.locale())
    if (x.has_authmethod()): self.set_authmethod(x.authmethod())
    if (x.has_contentchecksum()): self.set_contentchecksum(x.contentchecksum())
    if (x.has_ispermanentredirect()): self.set_ispermanentredirect(x.ispermanentredirect())
    if (x.has_isduphint()): self.set_isduphint(x.isduphint())
    if (x.has_titlefp_deprecated()): self.set_titlefp_deprecated(x.titlefp_deprecated())
    if (x.has_numtokens()): self.set_numtokens(x.numtokens())
    if (x.has_noindexreason()): self.set_noindexreason(x.noindexreason())
    if (x.has_noarchivereason()): self.set_noarchivereason(x.noarchivereason())
    if (x.has_nofollowreason()): self.set_nofollowreason(x.nofollowreason())
    if (x.has_nosnippetreason()): self.set_nosnippetreason(x.nosnippetreason())
    for i in xrange(x.indexdata_size()): self.add_indexdata().CopyFrom(x.indexdata(i))
    for i in xrange(x.rawanchordata_size()): self.add_rawanchordata().CopyFrom(x.rawanchordata(i))
    for i in xrange(x.directory_size()): self.add_directory().CopyFrom(x.directory(i))
    if (x.has_originaldoc()): self.mutable_originaldoc().MergeFrom(x.originaldoc())
    if (x.has_visualtype()): self.set_visualtype(x.visualtype())
    if (x.has_trawlerfetchstate()): self.set_trawlerfetchstate(x.trawlerfetchstate())
    if (x.has_trawlerfetchreason()): self.set_trawlerfetchreason(x.trawlerfetchreason())
    if (x.has_trawlerconversionfailed()): self.set_trawlerconversionfailed(x.trawlerconversionfailed())
    if (x.has_trawlerrobotsstate()): self.set_trawlerrobotsstate(x.trawlerrobotsstate())
    if (x.has_trawlerrobotsreason()): self.set_trawlerrobotsreason(x.trawlerrobotsreason())
    if (x.has_webmirrorsource()): self.set_webmirrorsource(x.webmirrorsource())
    if (x.has_crawllooptimestamp()): self.set_crawllooptimestamp(x.crawllooptimestamp())
    if (x.has_responsecode()): self.set_responsecode(x.responsecode())
    if (x.has_finalurlafterredirects()): self.set_finalurlafterredirects(x.finalurlafterredirects())
    if (x.has_repidafterredirects()): self.set_repidafterredirects(x.repidafterredirects())
    if (x.has_finalrepidafterredirects()): self.set_finalrepidafterredirects(x.finalrepidafterredirects())
    if (x.has_debuginfo()): self.mutable_debuginfo().MergeFrom(x.debuginfo())
    if (x.has_hourlyinfo()): self.mutable_hourlyinfo().MergeFrom(x.hourlyinfo())
    if (x.has_converterranclassifiers()): self.set_converterranclassifiers(x.converterranclassifiers())
    if (x.has_linkextractorranclassifiers()): self.set_linkextractorranclassifiers(x.linkextractorranclassifiers())
    if (x.has_logicaltargetindex()): self.set_logicaltargetindex(x.logicaltargetindex())
    for i in xrange(x.logicaltargetchoices_size()): self.add_logicaltargetchoices().CopyFrom(x.logicaltargetchoices(i))
    if (x.has_logicaltargetlocation()): self.mutable_logicaltargetlocation().MergeFrom(x.logicaltargetlocation())
    if (x.has_wikipediatitle()): self.set_wikipediatitle(x.wikipediatitle())
    if (x.has_isadditionaldoc()): self.set_isadditionaldoc(x.isadditionaldoc())
    if (x.has_islink()): self.set_islink(x.islink())
    if (x.has_istracer()): self.set_istracer(x.istracer())
    if (x.has_premiumdata()): self.mutable_premiumdata().MergeFrom(x.premiumdata())
    for i in xrange(x.embedding_size()): self.add_embedding().CopyFrom(x.embedding(i))
    if (x.has_isembedding()): self.set_isembedding(x.isembedding())
    if (x.has_isflashprocessed()): self.set_isflashprocessed(x.isflashprocessed())
    if (x.has_flashprocessingtimestamp()): self.set_flashprocessingtimestamp(x.flashprocessingtimestamp())
    if (x.has_flashskipintrourl()): self.set_flashskipintrourl(x.flashskipintrourl())
    if (x.has_additionalchecksums()): self.mutable_additionalchecksums().MergeFrom(x.additionalchecksums())
    if (x.has_bouncepad302convertedto301()): self.set_bouncepad302convertedto301(x.bouncepad302convertedto301())
    if (x.has_converter_doc_attachments()): self.mutable_converter_doc_attachments().MergeFrom(x.converter_doc_attachments())
    if (x.has_summary_doc_attachments()): self.mutable_summary_doc_attachments().MergeFrom(x.summary_doc_attachments())
    if (x.has_doc_attachments()): self.mutable_doc_attachments().MergeFrom(x.doc_attachments())
    if (x.has_contentexpirytime()): self.set_contentexpirytime(x.contentexpirytime())
    if (x.has_nosearchresultspage()): self.set_nosearchresultspage(x.nosearchresultspage())
    for i in xrange(x.includedcontent_size()): self.add_includedcontent().CopyFrom(x.includedcontent(i))
    if (x.has_mobiledata()): self.mutable_mobiledata().MergeFrom(x.mobiledata())
    if (x.has_required_for_cse()): self.set_required_for_cse(x.required_for_cse())
    for i in xrange(x.cse_id_size()): self.add_cse_id().CopyFrom(x.cse_id(i))
    if (x.has_richsnippet()): self.mutable_richsnippet().MergeFrom(x.richsnippet())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_docid_ != x.has_docid_: return 0
    if self.has_docid_ and self.docid_ != x.docid_: return 0
    if self.has_representativeid_ != x.has_representativeid_: return 0
    if self.has_representativeid_ and self.representativeid_ != x.representativeid_: return 0
    if self.has_timestamp_ != x.has_timestamp_: return 0
    if self.has_timestamp_ and self.timestamp_ != x.timestamp_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_urlmatchings_ != x.has_urlmatchings_: return 0
    if self.has_urlmatchings_ and self.urlmatchings_ != x.urlmatchings_: return 0
    if self.has_ispagerankdemoted_deprecated_ != x.has_ispagerankdemoted_deprecated_: return 0
    if self.has_ispagerankdemoted_deprecated_ and self.ispagerankdemoted_deprecated_ != x.ispagerankdemoted_deprecated_: return 0
    if self.has_displayurl_ != x.has_displayurl_: return 0
    if self.has_displayurl_ and self.displayurl_ != x.displayurl_: return 0
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    if self.has_pagerank_ns_ != x.has_pagerank_ns_: return 0
    if self.has_pagerank_ns_ and self.pagerank_ns_ != x.pagerank_ns_: return 0
    if self.has_langnormalizedpagerank_ != x.has_langnormalizedpagerank_: return 0
    if self.has_langnormalizedpagerank_ and self.langnormalizedpagerank_ != x.langnormalizedpagerank_: return 0
    if len(self.duplicatedocids_) != len(x.duplicatedocids_): return 0
    for e1, e2 in zip(self.duplicatedocids_, x.duplicatedocids_):
      if e1 != e2: return 0
    if len(self.redirects_) != len(x.redirects_): return 0
    for e1, e2 in zip(self.redirects_, x.redirects_):
      if e1 != e2: return 0
    if self.has_urlafterredirects_ != x.has_urlafterredirects_: return 0
    if self.has_urlafterredirects_ and self.urlafterredirects_ != x.urlafterredirects_: return 0
    if self.has_contents_ != x.has_contents_: return 0
    if self.has_contents_ and self.contents_ != x.contents_: return 0
    if self.has_istruncated_ != x.has_istruncated_: return 0
    if self.has_istruncated_ and self.istruncated_ != x.istruncated_: return 0
    if self.has_uncompressedlength_ != x.has_uncompressedlength_: return 0
    if self.has_uncompressedlength_ and self.uncompressedlength_ != x.uncompressedlength_: return 0
    if self.has_ipaddr_ != x.has_ipaddr_: return 0
    if self.has_ipaddr_ and self.ipaddr_ != x.ipaddr_: return 0
    if self.has_contenttype_ != x.has_contenttype_: return 0
    if self.has_contenttype_ and self.contenttype_ != x.contenttype_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_encoding_ != x.has_encoding_: return 0
    if self.has_encoding_ and self.encoding_ != x.encoding_: return 0
    if self.has_countrycode_ != x.has_countrycode_: return 0
    if self.has_countrycode_ and self.countrycode_ != x.countrycode_: return 0
    if self.has_replacebody_ != x.has_replacebody_: return 0
    if self.has_replacebody_ and self.replacebody_ != x.replacebody_: return 0
    if self.has_replaceanchors_ != x.has_replaceanchors_: return 0
    if self.has_replaceanchors_ and self.replaceanchors_ != x.replaceanchors_: return 0
    if self.has_locale_ != x.has_locale_: return 0
    if self.has_locale_ and self.locale_ != x.locale_: return 0
    if self.has_authmethod_ != x.has_authmethod_: return 0
    if self.has_authmethod_ and self.authmethod_ != x.authmethod_: return 0
    if self.has_contentchecksum_ != x.has_contentchecksum_: return 0
    if self.has_contentchecksum_ and self.contentchecksum_ != x.contentchecksum_: return 0
    if self.has_ispermanentredirect_ != x.has_ispermanentredirect_: return 0
    if self.has_ispermanentredirect_ and self.ispermanentredirect_ != x.ispermanentredirect_: return 0
    if self.has_isduphint_ != x.has_isduphint_: return 0
    if self.has_isduphint_ and self.isduphint_ != x.isduphint_: return 0
    if self.has_titlefp_deprecated_ != x.has_titlefp_deprecated_: return 0
    if self.has_titlefp_deprecated_ and self.titlefp_deprecated_ != x.titlefp_deprecated_: return 0
    if self.has_numtokens_ != x.has_numtokens_: return 0
    if self.has_numtokens_ and self.numtokens_ != x.numtokens_: return 0
    if self.has_noindexreason_ != x.has_noindexreason_: return 0
    if self.has_noindexreason_ and self.noindexreason_ != x.noindexreason_: return 0
    if self.has_noarchivereason_ != x.has_noarchivereason_: return 0
    if self.has_noarchivereason_ and self.noarchivereason_ != x.noarchivereason_: return 0
    if self.has_nofollowreason_ != x.has_nofollowreason_: return 0
    if self.has_nofollowreason_ and self.nofollowreason_ != x.nofollowreason_: return 0
    if self.has_nosnippetreason_ != x.has_nosnippetreason_: return 0
    if self.has_nosnippetreason_ and self.nosnippetreason_ != x.nosnippetreason_: return 0
    if len(self.indexdata_) != len(x.indexdata_): return 0
    for e1, e2 in zip(self.indexdata_, x.indexdata_):
      if e1 != e2: return 0
    if len(self.rawanchordata_) != len(x.rawanchordata_): return 0
    for e1, e2 in zip(self.rawanchordata_, x.rawanchordata_):
      if e1 != e2: return 0
    if len(self.directory_) != len(x.directory_): return 0
    for e1, e2 in zip(self.directory_, x.directory_):
      if e1 != e2: return 0
    if self.has_originaldoc_ != x.has_originaldoc_: return 0
    if self.has_originaldoc_ and self.originaldoc_ != x.originaldoc_: return 0
    if self.has_visualtype_ != x.has_visualtype_: return 0
    if self.has_visualtype_ and self.visualtype_ != x.visualtype_: return 0
    if self.has_trawlerfetchstate_ != x.has_trawlerfetchstate_: return 0
    if self.has_trawlerfetchstate_ and self.trawlerfetchstate_ != x.trawlerfetchstate_: return 0
    if self.has_trawlerfetchreason_ != x.has_trawlerfetchreason_: return 0
    if self.has_trawlerfetchreason_ and self.trawlerfetchreason_ != x.trawlerfetchreason_: return 0
    if self.has_trawlerconversionfailed_ != x.has_trawlerconversionfailed_: return 0
    if self.has_trawlerconversionfailed_ and self.trawlerconversionfailed_ != x.trawlerconversionfailed_: return 0
    if self.has_trawlerrobotsstate_ != x.has_trawlerrobotsstate_: return 0
    if self.has_trawlerrobotsstate_ and self.trawlerrobotsstate_ != x.trawlerrobotsstate_: return 0
    if self.has_trawlerrobotsreason_ != x.has_trawlerrobotsreason_: return 0
    if self.has_trawlerrobotsreason_ and self.trawlerrobotsreason_ != x.trawlerrobotsreason_: return 0
    if self.has_webmirrorsource_ != x.has_webmirrorsource_: return 0
    if self.has_webmirrorsource_ and self.webmirrorsource_ != x.webmirrorsource_: return 0
    if self.has_crawllooptimestamp_ != x.has_crawllooptimestamp_: return 0
    if self.has_crawllooptimestamp_ and self.crawllooptimestamp_ != x.crawllooptimestamp_: return 0
    if self.has_responsecode_ != x.has_responsecode_: return 0
    if self.has_responsecode_ and self.responsecode_ != x.responsecode_: return 0
    if self.has_finalurlafterredirects_ != x.has_finalurlafterredirects_: return 0
    if self.has_finalurlafterredirects_ and self.finalurlafterredirects_ != x.finalurlafterredirects_: return 0
    if self.has_repidafterredirects_ != x.has_repidafterredirects_: return 0
    if self.has_repidafterredirects_ and self.repidafterredirects_ != x.repidafterredirects_: return 0
    if self.has_finalrepidafterredirects_ != x.has_finalrepidafterredirects_: return 0
    if self.has_finalrepidafterredirects_ and self.finalrepidafterredirects_ != x.finalrepidafterredirects_: return 0
    if self.has_debuginfo_ != x.has_debuginfo_: return 0
    if self.has_debuginfo_ and self.debuginfo_ != x.debuginfo_: return 0
    if self.has_hourlyinfo_ != x.has_hourlyinfo_: return 0
    if self.has_hourlyinfo_ and self.hourlyinfo_ != x.hourlyinfo_: return 0
    if self.has_converterranclassifiers_ != x.has_converterranclassifiers_: return 0
    if self.has_converterranclassifiers_ and self.converterranclassifiers_ != x.converterranclassifiers_: return 0
    if self.has_linkextractorranclassifiers_ != x.has_linkextractorranclassifiers_: return 0
    if self.has_linkextractorranclassifiers_ and self.linkextractorranclassifiers_ != x.linkextractorranclassifiers_: return 0
    if self.has_logicaltargetindex_ != x.has_logicaltargetindex_: return 0
    if self.has_logicaltargetindex_ and self.logicaltargetindex_ != x.logicaltargetindex_: return 0
    if len(self.logicaltargetchoices_) != len(x.logicaltargetchoices_): return 0
    for e1, e2 in zip(self.logicaltargetchoices_, x.logicaltargetchoices_):
      if e1 != e2: return 0
    if self.has_logicaltargetlocation_ != x.has_logicaltargetlocation_: return 0
    if self.has_logicaltargetlocation_ and self.logicaltargetlocation_ != x.logicaltargetlocation_: return 0
    if self.has_wikipediatitle_ != x.has_wikipediatitle_: return 0
    if self.has_wikipediatitle_ and self.wikipediatitle_ != x.wikipediatitle_: return 0
    if self.has_isadditionaldoc_ != x.has_isadditionaldoc_: return 0
    if self.has_isadditionaldoc_ and self.isadditionaldoc_ != x.isadditionaldoc_: return 0
    if self.has_islink_ != x.has_islink_: return 0
    if self.has_islink_ and self.islink_ != x.islink_: return 0
    if self.has_istracer_ != x.has_istracer_: return 0
    if self.has_istracer_ and self.istracer_ != x.istracer_: return 0
    if self.has_premiumdata_ != x.has_premiumdata_: return 0
    if self.has_premiumdata_ and self.premiumdata_ != x.premiumdata_: return 0
    if len(self.embedding_) != len(x.embedding_): return 0
    for e1, e2 in zip(self.embedding_, x.embedding_):
      if e1 != e2: return 0
    if self.has_isembedding_ != x.has_isembedding_: return 0
    if self.has_isembedding_ and self.isembedding_ != x.isembedding_: return 0
    if self.has_isflashprocessed_ != x.has_isflashprocessed_: return 0
    if self.has_isflashprocessed_ and self.isflashprocessed_ != x.isflashprocessed_: return 0
    if self.has_flashprocessingtimestamp_ != x.has_flashprocessingtimestamp_: return 0
    if self.has_flashprocessingtimestamp_ and self.flashprocessingtimestamp_ != x.flashprocessingtimestamp_: return 0
    if self.has_flashskipintrourl_ != x.has_flashskipintrourl_: return 0
    if self.has_flashskipintrourl_ and self.flashskipintrourl_ != x.flashskipintrourl_: return 0
    if self.has_additionalchecksums_ != x.has_additionalchecksums_: return 0
    if self.has_additionalchecksums_ and self.additionalchecksums_ != x.additionalchecksums_: return 0
    if self.has_bouncepad302convertedto301_ != x.has_bouncepad302convertedto301_: return 0
    if self.has_bouncepad302convertedto301_ and self.bouncepad302convertedto301_ != x.bouncepad302convertedto301_: return 0
    if self.has_converter_doc_attachments_ != x.has_converter_doc_attachments_: return 0
    if self.has_converter_doc_attachments_ and self.converter_doc_attachments_ != x.converter_doc_attachments_: return 0
    if self.has_summary_doc_attachments_ != x.has_summary_doc_attachments_: return 0
    if self.has_summary_doc_attachments_ and self.summary_doc_attachments_ != x.summary_doc_attachments_: return 0
    if self.has_doc_attachments_ != x.has_doc_attachments_: return 0
    if self.has_doc_attachments_ and self.doc_attachments_ != x.doc_attachments_: return 0
    if self.has_contentexpirytime_ != x.has_contentexpirytime_: return 0
    if self.has_contentexpirytime_ and self.contentexpirytime_ != x.contentexpirytime_: return 0
    if self.has_nosearchresultspage_ != x.has_nosearchresultspage_: return 0
    if self.has_nosearchresultspage_ and self.nosearchresultspage_ != x.nosearchresultspage_: return 0
    if len(self.includedcontent_) != len(x.includedcontent_): return 0
    for e1, e2 in zip(self.includedcontent_, x.includedcontent_):
      if e1 != e2: return 0
    if self.has_mobiledata_ != x.has_mobiledata_: return 0
    if self.has_mobiledata_ and self.mobiledata_ != x.mobiledata_: return 0
    if self.has_required_for_cse_ != x.has_required_for_cse_: return 0
    if self.has_required_for_cse_ and self.required_for_cse_ != x.required_for_cse_: return 0
    if len(self.cse_id_) != len(x.cse_id_): return 0
    for e1, e2 in zip(self.cse_id_, x.cse_id_):
      if e1 != e2: return 0
    if self.has_richsnippet_ != x.has_richsnippet_: return 0
    if self.has_richsnippet_ and self.richsnippet_ != x.richsnippet_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_docid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: docid not set.')
    for i in xrange(len(self.redirects_)):
      if (not self.redirects_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.indexdata_)):
      if (not self.indexdata_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.rawanchordata_)):
      if (not self.rawanchordata_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.directory_)):
      if (not self.directory_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_originaldoc_ and not self.originaldoc_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_debuginfo_ and not self.debuginfo_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_hourlyinfo_ and not self.hourlyinfo_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.logicaltargetchoices_)):
      if (not self.logicaltargetchoices_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_logicaltargetlocation_ and not self.logicaltargetlocation_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_premiumdata_ and not self.premiumdata_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.embedding_)):
      if (not self.embedding_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_additionalchecksums_ and not self.additionalchecksums_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_converter_doc_attachments_ and not self.converter_doc_attachments_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_summary_doc_attachments_ and not self.summary_doc_attachments_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_doc_attachments_ and not self.doc_attachments_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.includedcontent_)):
      if (not self.includedcontent_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_mobiledata_ and not self.mobiledata_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.cse_id_)):
      if (not self.cse_id_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_richsnippet_ and not self.richsnippet_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.docid_)
    if (self.has_representativeid_): n += 2 + self.lengthString(len(self.representativeid_))
    if (self.has_timestamp_): n += 2 + self.lengthVarInt64(self.timestamp_)
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    if (self.has_urlmatchings_): n += 2 + self.lengthVarInt64(self.urlmatchings_)
    if (self.has_ispagerankdemoted_deprecated_): n += 3
    if (self.has_displayurl_): n += 2 + self.lengthString(len(self.displayurl_))
    if (self.has_pagerank_): n += 1 + self.lengthVarInt64(self.pagerank_)
    if (self.has_pagerank_ns_): n += 2 + self.lengthVarInt64(self.pagerank_ns_)
    if (self.has_langnormalizedpagerank_): n += 2 + self.lengthVarInt64(self.langnormalizedpagerank_)
    n += 2 * len(self.duplicatedocids_)
    for i in xrange(len(self.duplicatedocids_)): n += self.lengthVarInt64(self.duplicatedocids_[i])
    n += 4 * len(self.redirects_)
    for i in xrange(len(self.redirects_)): n += self.redirects_[i].ByteSize()
    if (self.has_urlafterredirects_): n += 1 + self.lengthString(len(self.urlafterredirects_))
    if (self.has_contents_): n += 1 + self.lengthString(len(self.contents_))
    if (self.has_istruncated_): n += 3
    if (self.has_uncompressedlength_): n += 1 + self.lengthVarInt64(self.uncompressedlength_)
    if (self.has_ipaddr_): n += 1 + self.lengthVarInt64(self.ipaddr_)
    if (self.has_contenttype_): n += 1 + self.lengthVarInt64(self.contenttype_)
    if (self.has_language_): n += 1 + self.lengthVarInt64(self.language_)
    if (self.has_encoding_): n += 1 + self.lengthVarInt64(self.encoding_)
    if (self.has_countrycode_): n += 2 + self.lengthVarInt64(self.countrycode_)
    if (self.has_replacebody_): n += 2
    if (self.has_replaceanchors_): n += 2
    if (self.has_locale_): n += 1 + self.lengthVarInt64(self.locale_)
    if (self.has_authmethod_): n += 2 + self.lengthVarInt64(self.authmethod_)
    if (self.has_contentchecksum_): n += 2 + self.lengthVarInt64(self.contentchecksum_)
    if (self.has_ispermanentredirect_): n += 3
    if (self.has_isduphint_): n += 3
    if (self.has_titlefp_deprecated_): n += 2 + self.lengthVarInt64(self.titlefp_deprecated_)
    if (self.has_numtokens_): n += 2 + self.lengthVarInt64(self.numtokens_)
    if (self.has_noindexreason_): n += 2 + self.lengthVarInt64(self.noindexreason_)
    if (self.has_noarchivereason_): n += 2 + self.lengthVarInt64(self.noarchivereason_)
    if (self.has_nofollowreason_): n += 2 + self.lengthVarInt64(self.nofollowreason_)
    if (self.has_nosnippetreason_): n += 2 + self.lengthVarInt64(self.nosnippetreason_)
    n += 4 * len(self.indexdata_)
    for i in xrange(len(self.indexdata_)): n += self.indexdata_[i].ByteSize()
    n += 4 * len(self.rawanchordata_)
    for i in xrange(len(self.rawanchordata_)): n += self.rawanchordata_[i].ByteSize()
    n += 4 * len(self.directory_)
    for i in xrange(len(self.directory_)): n += self.directory_[i].ByteSize()
    if (self.has_originaldoc_): n += 4 + self.originaldoc_.ByteSize()
    if (self.has_visualtype_): n += 2 + self.lengthVarInt64(self.visualtype_)
    if (self.has_trawlerfetchstate_): n += 2 + self.lengthVarInt64(self.trawlerfetchstate_)
    if (self.has_trawlerfetchreason_): n += 2 + self.lengthVarInt64(self.trawlerfetchreason_)
    if (self.has_trawlerconversionfailed_): n += 3
    if (self.has_trawlerrobotsstate_): n += 2 + self.lengthVarInt64(self.trawlerrobotsstate_)
    if (self.has_trawlerrobotsreason_): n += 2 + self.lengthVarInt64(self.trawlerrobotsreason_)
    if (self.has_webmirrorsource_): n += 2 + self.lengthVarInt64(self.webmirrorsource_)
    if (self.has_crawllooptimestamp_): n += 2 + self.lengthVarInt64(self.crawllooptimestamp_)
    if (self.has_responsecode_): n += 2 + self.lengthVarInt64(self.responsecode_)
    if (self.has_finalurlafterredirects_): n += 2 + self.lengthString(len(self.finalurlafterredirects_))
    if (self.has_repidafterredirects_): n += 2 + self.lengthString(len(self.repidafterredirects_))
    if (self.has_finalrepidafterredirects_): n += 2 + self.lengthString(len(self.finalrepidafterredirects_))
    if (self.has_debuginfo_): n += 4 + self.debuginfo_.ByteSize()
    if (self.has_hourlyinfo_): n += 4 + self.hourlyinfo_.ByteSize()
    if (self.has_converterranclassifiers_): n += 3
    if (self.has_linkextractorranclassifiers_): n += 3
    if (self.has_logicaltargetindex_): n += 2 + self.lengthVarInt64(self.logicaltargetindex_)
    n += 4 * len(self.logicaltargetchoices_)
    for i in xrange(len(self.logicaltargetchoices_)): n += self.logicaltargetchoices_[i].ByteSize()
    if (self.has_logicaltargetlocation_): n += 2 + self.lengthString(self.logicaltargetlocation_.ByteSize())
    if (self.has_wikipediatitle_): n += 2 + self.lengthString(len(self.wikipediatitle_))
    if (self.has_isadditionaldoc_): n += 3
    if (self.has_islink_): n += 3
    if (self.has_istracer_): n += 3
    if (self.has_premiumdata_): n += 4 + self.premiumdata_.ByteSize()
    n += 2 * len(self.embedding_)
    for i in xrange(len(self.embedding_)): n += self.lengthString(self.embedding_[i].ByteSize())
    if (self.has_isembedding_): n += 3
    if (self.has_isflashprocessed_): n += 3
    if (self.has_flashprocessingtimestamp_): n += 2 + self.lengthVarInt64(self.flashprocessingtimestamp_)
    if (self.has_flashskipintrourl_): n += 2 + self.lengthString(len(self.flashskipintrourl_))
    if (self.has_additionalchecksums_): n += 4 + self.additionalchecksums_.ByteSize()
    if (self.has_bouncepad302convertedto301_): n += 3
    if (self.has_converter_doc_attachments_): n += 2 + self.lengthString(self.converter_doc_attachments_.ByteSize())
    if (self.has_summary_doc_attachments_): n += 2 + self.lengthString(self.summary_doc_attachments_.ByteSize())
    if (self.has_doc_attachments_): n += 2 + self.lengthString(self.doc_attachments_.ByteSize())
    if (self.has_contentexpirytime_): n += 2 + self.lengthVarInt64(self.contentexpirytime_)
    if (self.has_nosearchresultspage_): n += 3
    n += 4 * len(self.includedcontent_)
    for i in xrange(len(self.includedcontent_)): n += self.includedcontent_[i].ByteSize()
    if (self.has_mobiledata_): n += 2 + self.lengthString(self.mobiledata_.ByteSize())
    if (self.has_required_for_cse_): n += 3
    n += 2 * len(self.cse_id_)
    for i in xrange(len(self.cse_id_)): n += self.lengthString(self.cse_id_[i].ByteSize())
    if (self.has_richsnippet_): n += 2 + self.lengthString(self.richsnippet_.ByteSize())
    return n + 1

  def Clear(self):
    self.clear_docid()
    self.clear_representativeid()
    self.clear_timestamp()
    self.clear_url()
    self.clear_urlmatchings()
    self.clear_ispagerankdemoted_deprecated()
    self.clear_displayurl()
    self.clear_pagerank()
    self.clear_pagerank_ns()
    self.clear_langnormalizedpagerank()
    self.clear_duplicatedocids()
    self.clear_redirects()
    self.clear_urlafterredirects()
    self.clear_contents()
    self.clear_istruncated()
    self.clear_uncompressedlength()
    self.clear_ipaddr()
    self.clear_contenttype()
    self.clear_language()
    self.clear_encoding()
    self.clear_countrycode()
    self.clear_replacebody()
    self.clear_replaceanchors()
    self.clear_locale()
    self.clear_authmethod()
    self.clear_contentchecksum()
    self.clear_ispermanentredirect()
    self.clear_isduphint()
    self.clear_titlefp_deprecated()
    self.clear_numtokens()
    self.clear_noindexreason()
    self.clear_noarchivereason()
    self.clear_nofollowreason()
    self.clear_nosnippetreason()
    self.clear_indexdata()
    self.clear_rawanchordata()
    self.clear_directory()
    self.clear_originaldoc()
    self.clear_visualtype()
    self.clear_trawlerfetchstate()
    self.clear_trawlerfetchreason()
    self.clear_trawlerconversionfailed()
    self.clear_trawlerrobotsstate()
    self.clear_trawlerrobotsreason()
    self.clear_webmirrorsource()
    self.clear_crawllooptimestamp()
    self.clear_responsecode()
    self.clear_finalurlafterredirects()
    self.clear_repidafterredirects()
    self.clear_finalrepidafterredirects()
    self.clear_debuginfo()
    self.clear_hourlyinfo()
    self.clear_converterranclassifiers()
    self.clear_linkextractorranclassifiers()
    self.clear_logicaltargetindex()
    self.clear_logicaltargetchoices()
    self.clear_logicaltargetlocation()
    self.clear_wikipediatitle()
    self.clear_isadditionaldoc()
    self.clear_islink()
    self.clear_istracer()
    self.clear_premiumdata()
    self.clear_embedding()
    self.clear_isembedding()
    self.clear_isflashprocessed()
    self.clear_flashprocessingtimestamp()
    self.clear_flashskipintrourl()
    self.clear_additionalchecksums()
    self.clear_bouncepad302convertedto301()
    self.clear_converter_doc_attachments()
    self.clear_summary_doc_attachments()
    self.clear_doc_attachments()
    self.clear_contentexpirytime()
    self.clear_nosearchresultspage()
    self.clear_includedcontent()
    self.clear_mobiledata()
    self.clear_required_for_cse()
    self.clear_cse_id()
    self.clear_richsnippet()

  def OutputUnchecked(self, out):
    out.putVarInt32(24)
    out.putVarUint64(self.docid_)
    if (self.has_url_):
      out.putVarInt32(34)
      out.putPrefixedString(self.url_)
    if (self.has_urlafterredirects_):
      out.putVarInt32(42)
      out.putPrefixedString(self.urlafterredirects_)
    if (self.has_contents_):
      out.putVarInt32(50)
      out.putPrefixedString(self.contents_)
    if (self.has_uncompressedlength_):
      out.putVarInt32(56)
      out.putVarInt64(self.uncompressedlength_)
    if (self.has_ipaddr_):
      out.putVarInt32(64)
      out.putVarInt64(self.ipaddr_)
    if (self.has_contenttype_):
      out.putVarInt32(72)
      out.putVarInt64(self.contenttype_)
    if (self.has_language_):
      out.putVarInt32(80)
      out.putVarInt64(self.language_)
    if (self.has_encoding_):
      out.putVarInt32(88)
      out.putVarInt64(self.encoding_)
    if (self.has_replacebody_):
      out.putVarInt32(96)
      out.putBoolean(self.replacebody_)
    if (self.has_replaceanchors_):
      out.putVarInt32(104)
      out.putBoolean(self.replaceanchors_)
    if (self.has_pagerank_):
      out.putVarInt32(112)
      out.putVarInt32(self.pagerank_)
    if (self.has_locale_):
      out.putVarInt32(120)
      out.putVarInt64(self.locale_)
    if (self.has_titlefp_deprecated_):
      out.putVarInt32(128)
      out.putVarInt64(self.titlefp_deprecated_)
    if (self.has_pagerank_ns_):
      out.putVarInt32(136)
      out.putVarInt32(self.pagerank_ns_)
    if (self.has_countrycode_):
      out.putVarInt32(144)
      out.putVarInt64(self.countrycode_)
    if (self.has_urlmatchings_):
      out.putVarInt32(184)
      out.putVarInt32(self.urlmatchings_)
    for i in xrange(len(self.indexdata_)):
      out.putVarInt32(563)
      self.indexdata_[i].OutputUnchecked(out)
      out.putVarInt32(564)
    if (self.has_timestamp_):
      out.putVarInt32(592)
      out.putVarInt32(self.timestamp_)
    for i in xrange(len(self.directory_)):
      out.putVarInt32(603)
      self.directory_[i].OutputUnchecked(out)
      out.putVarInt32(604)
    for i in xrange(len(self.duplicatedocids_)):
      out.putVarInt32(1088)
      out.putVarUint64(self.duplicatedocids_[i])
    if (self.has_authmethod_):
      out.putVarInt32(1096)
      out.putVarInt32(self.authmethod_)
    for i in xrange(len(self.rawanchordata_)):
      out.putVarInt32(1107)
      self.rawanchordata_[i].OutputUnchecked(out)
      out.putVarInt32(1108)
    if (self.has_contentchecksum_):
      out.putVarInt32(1160)
      out.putVarUint64(self.contentchecksum_)
    if (self.has_ispermanentredirect_):
      out.putVarInt32(1176)
      out.putBoolean(self.ispermanentredirect_)
    if (self.has_isduphint_):
      out.putVarInt32(1184)
      out.putBoolean(self.isduphint_)
    for i in xrange(len(self.redirects_)):
      out.putVarInt32(1195)
      self.redirects_[i].OutputUnchecked(out)
      out.putVarInt32(1196)
    if (self.has_originaldoc_):
      out.putVarInt32(1275)
      self.originaldoc_.OutputUnchecked(out)
      out.putVarInt32(1276)
    if (self.has_representativeid_):
      out.putVarInt32(1322)
      out.putPrefixedString(self.representativeid_)
    if (self.has_trawlerfetchstate_):
      out.putVarInt32(1336)
      out.putVarInt32(self.trawlerfetchstate_)
    if (self.has_trawlerfetchreason_):
      out.putVarInt32(1344)
      out.putVarInt32(self.trawlerfetchreason_)
    if (self.has_trawlerconversionfailed_):
      out.putVarInt32(1352)
      out.putBoolean(self.trawlerconversionfailed_)
    if (self.has_isadditionaldoc_):
      out.putVarInt32(1472)
      out.putBoolean(self.isadditionaldoc_)
    if (self.has_webmirrorsource_):
      out.putVarInt32(1512)
      out.putVarInt32(self.webmirrorsource_)
    if (self.has_crawllooptimestamp_):
      out.putVarInt32(1520)
      out.putVarUint64(self.crawllooptimestamp_)
    if (self.has_responsecode_):
      out.putVarInt32(1616)
      out.putVarInt32(self.responsecode_)
    if (self.has_islink_):
      out.putVarInt32(1664)
      out.putBoolean(self.islink_)
    if (self.has_finalurlafterredirects_):
      out.putVarInt32(1682)
      out.putPrefixedString(self.finalurlafterredirects_)
    if (self.has_premiumdata_):
      out.putVarInt32(1763)
      self.premiumdata_.OutputUnchecked(out)
      out.putVarInt32(1764)
    for i in xrange(len(self.embedding_)):
      out.putVarInt32(1802)
      out.putVarInt32(self.embedding_[i].ByteSize())
      self.embedding_[i].OutputUnchecked(out)
    if (self.has_isembedding_):
      out.putVarInt32(1808)
      out.putBoolean(self.isembedding_)
    if (self.has_finalrepidafterredirects_):
      out.putVarInt32(1818)
      out.putPrefixedString(self.finalrepidafterredirects_)
    if (self.has_ispagerankdemoted_deprecated_):
      out.putVarInt32(1840)
      out.putBoolean(self.ispagerankdemoted_deprecated_)
    if (self.has_langnormalizedpagerank_):
      out.putVarInt32(1848)
      out.putVarInt32(self.langnormalizedpagerank_)
    if (self.has_logicaltargetindex_):
      out.putVarInt32(1880)
      out.putVarInt32(self.logicaltargetindex_)
    for i in xrange(len(self.logicaltargetchoices_)):
      out.putVarInt32(1891)
      self.logicaltargetchoices_[i].OutputUnchecked(out)
      out.putVarInt32(1892)
    if (self.has_istracer_):
      out.putVarInt32(1912)
      out.putBoolean(self.istracer_)
    if (self.has_wikipediatitle_):
      out.putVarInt32(1962)
      out.putPrefixedString(self.wikipediatitle_)
    if (self.has_additionalchecksums_):
      out.putVarInt32(1971)
      self.additionalchecksums_.OutputUnchecked(out)
      out.putVarInt32(1972)
    if (self.has_noindexreason_):
      out.putVarInt32(1992)
      out.putVarInt32(self.noindexreason_)
    if (self.has_logicaltargetlocation_):
      out.putVarInt32(2010)
      out.putVarInt32(self.logicaltargetlocation_.ByteSize())
      self.logicaltargetlocation_.OutputUnchecked(out)
    if (self.has_contentexpirytime_):
      out.putVarInt32(2032)
      out.putVarInt32(self.contentexpirytime_)
    if (self.has_doc_attachments_):
      out.putVarInt32(2042)
      out.putVarInt32(self.doc_attachments_.ByteSize())
      self.doc_attachments_.OutputUnchecked(out)
    if (self.has_displayurl_):
      out.putVarInt32(2050)
      out.putPrefixedString(self.displayurl_)
    if (self.has_trawlerrobotsstate_):
      out.putVarInt32(2056)
      out.putVarInt32(self.trawlerrobotsstate_)
    if (self.has_trawlerrobotsreason_):
      out.putVarInt32(2064)
      out.putVarInt32(self.trawlerrobotsreason_)
    if (self.has_debuginfo_):
      out.putVarInt32(2075)
      self.debuginfo_.OutputUnchecked(out)
      out.putVarInt32(2076)
    if (self.has_numtokens_):
      out.putVarInt32(2128)
      out.putVarInt32(self.numtokens_)
    if (self.has_hourlyinfo_):
      out.putVarInt32(2147)
      self.hourlyinfo_.OutputUnchecked(out)
      out.putVarInt32(2148)
    for i in xrange(len(self.includedcontent_)):
      out.putVarInt32(2171)
      self.includedcontent_[i].OutputUnchecked(out)
      out.putVarInt32(2172)
    if (self.has_noarchivereason_):
      out.putVarInt32(2272)
      out.putVarInt32(self.noarchivereason_)
    if (self.has_nofollowreason_):
      out.putVarInt32(2280)
      out.putVarInt32(self.nofollowreason_)
    if (self.has_nosnippetreason_):
      out.putVarInt32(2288)
      out.putVarInt32(self.nosnippetreason_)
    if (self.has_converterranclassifiers_):
      out.putVarInt32(2328)
      out.putBoolean(self.converterranclassifiers_)
    if (self.has_mobiledata_):
      out.putVarInt32(2338)
      out.putVarInt32(self.mobiledata_.ByteSize())
      self.mobiledata_.OutputUnchecked(out)
    if (self.has_summary_doc_attachments_):
      out.putVarInt32(2346)
      out.putVarInt32(self.summary_doc_attachments_.ByteSize())
      self.summary_doc_attachments_.OutputUnchecked(out)
    if (self.has_repidafterredirects_):
      out.putVarInt32(2394)
      out.putPrefixedString(self.repidafterredirects_)
    if (self.has_converter_doc_attachments_):
      out.putVarInt32(2402)
      out.putVarInt32(self.converter_doc_attachments_.ByteSize())
      self.converter_doc_attachments_.OutputUnchecked(out)
    if (self.has_visualtype_):
      out.putVarInt32(2408)
      out.putVarInt32(self.visualtype_)
    if (self.has_isflashprocessed_):
      out.putVarInt32(2416)
      out.putBoolean(self.isflashprocessed_)
    if (self.has_istruncated_):
      out.putVarInt32(2432)
      out.putBoolean(self.istruncated_)
    if (self.has_flashprocessingtimestamp_):
      out.putVarInt32(2440)
      out.putVarInt32(self.flashprocessingtimestamp_)
    if (self.has_flashskipintrourl_):
      out.putVarInt32(2450)
      out.putPrefixedString(self.flashskipintrourl_)
    if (self.has_required_for_cse_):
      out.putVarInt32(2456)
      out.putBoolean(self.required_for_cse_)
    for i in xrange(len(self.cse_id_)):
      out.putVarInt32(2466)
      out.putVarInt32(self.cse_id_[i].ByteSize())
      self.cse_id_[i].OutputUnchecked(out)
    if (self.has_richsnippet_):
      out.putVarInt32(2474)
      out.putVarInt32(self.richsnippet_.ByteSize())
      self.richsnippet_.OutputUnchecked(out)
    if (self.has_nosearchresultspage_):
      out.putVarInt32(2480)
      out.putBoolean(self.nosearchresultspage_)
    if (self.has_bouncepad302convertedto301_):
      out.putVarInt32(2576)
      out.putBoolean(self.bouncepad302convertedto301_)
    if (self.has_linkextractorranclassifiers_):
      out.putVarInt32(2616)
      out.putBoolean(self.linkextractorranclassifiers_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 20: break
      if tt == 24:
        self.set_docid(d.getVarUint64())
        continue
      if tt == 34:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 42:
        self.set_urlafterredirects(d.getPrefixedString())
        continue
      if tt == 50:
        self.set_contents(d.getPrefixedString())
        continue
      if tt == 56:
        self.set_uncompressedlength(d.getVarInt64())
        continue
      if tt == 64:
        self.set_ipaddr(d.getVarInt64())
        continue
      if tt == 72:
        self.set_contenttype(d.getVarInt64())
        continue
      if tt == 80:
        self.set_language(d.getVarInt64())
        continue
      if tt == 88:
        self.set_encoding(d.getVarInt64())
        continue
      if tt == 96:
        self.set_replacebody(d.getBoolean())
        continue
      if tt == 104:
        self.set_replaceanchors(d.getBoolean())
        continue
      if tt == 112:
        self.set_pagerank(d.getVarInt32())
        continue
      if tt == 120:
        self.set_locale(d.getVarInt64())
        continue
      if tt == 128:
        self.set_titlefp_deprecated(d.getVarInt64())
        continue
      if tt == 136:
        self.set_pagerank_ns(d.getVarInt32())
        continue
      if tt == 144:
        self.set_countrycode(d.getVarInt64())
        continue
      if tt == 184:
        self.set_urlmatchings(d.getVarInt32())
        continue
      if tt == 563:
        self.add_indexdata().TryMerge(d)
        continue
      if tt == 592:
        self.set_timestamp(d.getVarInt32())
        continue
      if tt == 603:
        self.add_directory().TryMerge(d)
        continue
      if tt == 1088:
        self.add_duplicatedocids(d.getVarUint64())
        continue
      if tt == 1096:
        self.set_authmethod(d.getVarInt32())
        continue
      if tt == 1107:
        self.add_rawanchordata().TryMerge(d)
        continue
      if tt == 1160:
        self.set_contentchecksum(d.getVarUint64())
        continue
      if tt == 1176:
        self.set_ispermanentredirect(d.getBoolean())
        continue
      if tt == 1184:
        self.set_isduphint(d.getBoolean())
        continue
      if tt == 1195:
        self.add_redirects().TryMerge(d)
        continue
      if tt == 1275:
        self.mutable_originaldoc().TryMerge(d)
        continue
      if tt == 1322:
        self.set_representativeid(d.getPrefixedString())
        continue
      if tt == 1336:
        self.set_trawlerfetchstate(d.getVarInt32())
        continue
      if tt == 1344:
        self.set_trawlerfetchreason(d.getVarInt32())
        continue
      if tt == 1352:
        self.set_trawlerconversionfailed(d.getBoolean())
        continue
      if tt == 1472:
        self.set_isadditionaldoc(d.getBoolean())
        continue
      if tt == 1512:
        self.set_webmirrorsource(d.getVarInt32())
        continue
      if tt == 1520:
        self.set_crawllooptimestamp(d.getVarUint64())
        continue
      if tt == 1616:
        self.set_responsecode(d.getVarInt32())
        continue
      if tt == 1664:
        self.set_islink(d.getBoolean())
        continue
      if tt == 1682:
        self.set_finalurlafterredirects(d.getPrefixedString())
        continue
      if tt == 1763:
        self.mutable_premiumdata().TryMerge(d)
        continue
      if tt == 1802:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_embedding().TryMerge(tmp)
        continue
      if tt == 1808:
        self.set_isembedding(d.getBoolean())
        continue
      if tt == 1818:
        self.set_finalrepidafterredirects(d.getPrefixedString())
        continue
      if tt == 1840:
        self.set_ispagerankdemoted_deprecated(d.getBoolean())
        continue
      if tt == 1848:
        self.set_langnormalizedpagerank(d.getVarInt32())
        continue
      if tt == 1880:
        self.set_logicaltargetindex(d.getVarInt32())
        continue
      if tt == 1891:
        self.add_logicaltargetchoices().TryMerge(d)
        continue
      if tt == 1912:
        self.set_istracer(d.getBoolean())
        continue
      if tt == 1962:
        self.set_wikipediatitle(d.getPrefixedString())
        continue
      if tt == 1971:
        self.mutable_additionalchecksums().TryMerge(d)
        continue
      if tt == 1992:
        self.set_noindexreason(d.getVarInt32())
        continue
      if tt == 2010:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_logicaltargetlocation().TryMerge(tmp)
        continue
      if tt == 2032:
        self.set_contentexpirytime(d.getVarInt32())
        continue
      if tt == 2042:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_doc_attachments().TryMerge(tmp)
        continue
      if tt == 2050:
        self.set_displayurl(d.getPrefixedString())
        continue
      if tt == 2056:
        self.set_trawlerrobotsstate(d.getVarInt32())
        continue
      if tt == 2064:
        self.set_trawlerrobotsreason(d.getVarInt32())
        continue
      if tt == 2075:
        self.mutable_debuginfo().TryMerge(d)
        continue
      if tt == 2128:
        self.set_numtokens(d.getVarInt32())
        continue
      if tt == 2147:
        self.mutable_hourlyinfo().TryMerge(d)
        continue
      if tt == 2171:
        self.add_includedcontent().TryMerge(d)
        continue
      if tt == 2272:
        self.set_noarchivereason(d.getVarInt32())
        continue
      if tt == 2280:
        self.set_nofollowreason(d.getVarInt32())
        continue
      if tt == 2288:
        self.set_nosnippetreason(d.getVarInt32())
        continue
      if tt == 2328:
        self.set_converterranclassifiers(d.getBoolean())
        continue
      if tt == 2338:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_mobiledata().TryMerge(tmp)
        continue
      if tt == 2346:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_summary_doc_attachments().TryMerge(tmp)
        continue
      if tt == 2394:
        self.set_repidafterredirects(d.getPrefixedString())
        continue
      if tt == 2402:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_converter_doc_attachments().TryMerge(tmp)
        continue
      if tt == 2408:
        self.set_visualtype(d.getVarInt32())
        continue
      if tt == 2416:
        self.set_isflashprocessed(d.getBoolean())
        continue
      if tt == 2432:
        self.set_istruncated(d.getBoolean())
        continue
      if tt == 2440:
        self.set_flashprocessingtimestamp(d.getVarInt32())
        continue
      if tt == 2450:
        self.set_flashskipintrourl(d.getPrefixedString())
        continue
      if tt == 2456:
        self.set_required_for_cse(d.getBoolean())
        continue
      if tt == 2466:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_cse_id().TryMerge(tmp)
        continue
      if tt == 2474:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_richsnippet().TryMerge(tmp)
        continue
      if tt == 2480:
        self.set_nosearchresultspage(d.getBoolean())
        continue
      if tt == 2576:
        self.set_bouncepad302convertedto301(d.getBoolean())
        continue
      if tt == 2616:
        self.set_linkextractorranclassifiers(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_docid_: res+=prefix+("Docid: %s\n" % self.DebugFormatInt64(self.docid_))
    if self.has_representativeid_: res+=prefix+("RepresentativeId: %s\n" % self.DebugFormatString(self.representativeid_))
    if self.has_timestamp_: res+=prefix+("Timestamp: %s\n" % self.DebugFormatInt32(self.timestamp_))
    if self.has_url_: res+=prefix+("Url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_urlmatchings_: res+=prefix+("UrlMatchings: %s\n" % self.DebugFormatInt32(self.urlmatchings_))
    if self.has_ispagerankdemoted_deprecated_: res+=prefix+("IsPagerankDemoted_DEPRECATED: %s\n" % self.DebugFormatBool(self.ispagerankdemoted_deprecated_))
    if self.has_displayurl_: res+=prefix+("DisplayUrl: %s\n" % self.DebugFormatString(self.displayurl_))
    if self.has_pagerank_: res+=prefix+("Pagerank: %s\n" % self.DebugFormatInt32(self.pagerank_))
    if self.has_pagerank_ns_: res+=prefix+("Pagerank_NS: %s\n" % self.DebugFormatInt32(self.pagerank_ns_))
    if self.has_langnormalizedpagerank_: res+=prefix+("LangNormalizedPagerank: %s\n" % self.DebugFormatInt32(self.langnormalizedpagerank_))
    cnt=0
    for e in self.duplicatedocids_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DuplicateDocids%s: %s\n" % (elm, self.DebugFormatInt64(e)))
      cnt+=1
    cnt=0
    for e in self.redirects_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Redirects%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_urlafterredirects_: res+=prefix+("UrlAfterRedirects: %s\n" % self.DebugFormatString(self.urlafterredirects_))
    if self.has_contents_: res+=prefix+("Contents: %s\n" % self.DebugFormatString(self.contents_))
    if self.has_istruncated_: res+=prefix+("IsTruncated: %s\n" % self.DebugFormatBool(self.istruncated_))
    if self.has_uncompressedlength_: res+=prefix+("UncompressedLength: %s\n" % self.DebugFormatInt64(self.uncompressedlength_))
    if self.has_ipaddr_: res+=prefix+("IpAddr: %s\n" % self.DebugFormatInt64(self.ipaddr_))
    if self.has_contenttype_: res+=prefix+("ContentType: %s\n" % self.DebugFormatInt64(self.contenttype_))
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatInt64(self.language_))
    if self.has_encoding_: res+=prefix+("Encoding: %s\n" % self.DebugFormatInt64(self.encoding_))
    if self.has_countrycode_: res+=prefix+("CountryCode: %s\n" % self.DebugFormatInt64(self.countrycode_))
    if self.has_replacebody_: res+=prefix+("ReplaceBody: %s\n" % self.DebugFormatBool(self.replacebody_))
    if self.has_replaceanchors_: res+=prefix+("ReplaceAnchors: %s\n" % self.DebugFormatBool(self.replaceanchors_))
    if self.has_locale_: res+=prefix+("Locale: %s\n" % self.DebugFormatInt64(self.locale_))
    if self.has_authmethod_: res+=prefix+("AuthMethod: %s\n" % self.DebugFormatInt32(self.authmethod_))
    if self.has_contentchecksum_: res+=prefix+("ContentChecksum: %s\n" % self.DebugFormatInt64(self.contentchecksum_))
    if self.has_ispermanentredirect_: res+=prefix+("IsPermanentRedirect: %s\n" % self.DebugFormatBool(self.ispermanentredirect_))
    if self.has_isduphint_: res+=prefix+("IsDupHint: %s\n" % self.DebugFormatBool(self.isduphint_))
    if self.has_titlefp_deprecated_: res+=prefix+("TitleFP_DEPRECATED: %s\n" % self.DebugFormatInt64(self.titlefp_deprecated_))
    if self.has_numtokens_: res+=prefix+("NumTokens: %s\n" % self.DebugFormatInt32(self.numtokens_))
    if self.has_noindexreason_: res+=prefix+("NoIndexReason: %s\n" % self.DebugFormatInt32(self.noindexreason_))
    if self.has_noarchivereason_: res+=prefix+("NoArchiveReason: %s\n" % self.DebugFormatInt32(self.noarchivereason_))
    if self.has_nofollowreason_: res+=prefix+("NoFollowReason: %s\n" % self.DebugFormatInt32(self.nofollowreason_))
    if self.has_nosnippetreason_: res+=prefix+("NoSnippetReason: %s\n" % self.DebugFormatInt32(self.nosnippetreason_))
    cnt=0
    for e in self.indexdata_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("IndexData%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.rawanchordata_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("RawAnchorData%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.directory_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Directory%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_originaldoc_:
      res+=prefix+"OriginalDoc {\n"
      res+=self.originaldoc_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_visualtype_: res+=prefix+("VisualType: %s\n" % self.DebugFormatInt32(self.visualtype_))
    if self.has_trawlerfetchstate_: res+=prefix+("TrawlerFetchState: %s\n" % self.DebugFormatInt32(self.trawlerfetchstate_))
    if self.has_trawlerfetchreason_: res+=prefix+("TrawlerFetchReason: %s\n" % self.DebugFormatInt32(self.trawlerfetchreason_))
    if self.has_trawlerconversionfailed_: res+=prefix+("TrawlerConversionFailed: %s\n" % self.DebugFormatBool(self.trawlerconversionfailed_))
    if self.has_trawlerrobotsstate_: res+=prefix+("TrawlerRobotsState: %s\n" % self.DebugFormatInt32(self.trawlerrobotsstate_))
    if self.has_trawlerrobotsreason_: res+=prefix+("TrawlerRobotsReason: %s\n" % self.DebugFormatInt32(self.trawlerrobotsreason_))
    if self.has_webmirrorsource_: res+=prefix+("WebMirrorSource: %s\n" % self.DebugFormatInt32(self.webmirrorsource_))
    if self.has_crawllooptimestamp_: res+=prefix+("CrawlLoopTimeStamp: %s\n" % self.DebugFormatInt64(self.crawllooptimestamp_))
    if self.has_responsecode_: res+=prefix+("ResponseCode: %s\n" % self.DebugFormatInt32(self.responsecode_))
    if self.has_finalurlafterredirects_: res+=prefix+("FinalUrlAfterRedirects: %s\n" % self.DebugFormatString(self.finalurlafterredirects_))
    if self.has_repidafterredirects_: res+=prefix+("RepIdAfterRedirects: %s\n" % self.DebugFormatString(self.repidafterredirects_))
    if self.has_finalrepidafterredirects_: res+=prefix+("FinalRepIdAfterRedirects: %s\n" % self.DebugFormatString(self.finalrepidafterredirects_))
    if self.has_debuginfo_:
      res+=prefix+"DebugInfo {\n"
      res+=self.debuginfo_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_hourlyinfo_:
      res+=prefix+"HourlyInfo {\n"
      res+=self.hourlyinfo_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_converterranclassifiers_: res+=prefix+("ConverterRanClassifiers: %s\n" % self.DebugFormatBool(self.converterranclassifiers_))
    if self.has_linkextractorranclassifiers_: res+=prefix+("LinkextractorRanClassifiers: %s\n" % self.DebugFormatBool(self.linkextractorranclassifiers_))
    if self.has_logicaltargetindex_: res+=prefix+("LogicalTargetIndex: %s\n" % self.DebugFormatInt32(self.logicaltargetindex_))
    cnt=0
    for e in self.logicaltargetchoices_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("LogicalTargetChoices%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_logicaltargetlocation_:
      res+=prefix+"LogicalTargetLocation <\n"
      res+=self.logicaltargetlocation_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_wikipediatitle_: res+=prefix+("WikipediaTitle: %s\n" % self.DebugFormatString(self.wikipediatitle_))
    if self.has_isadditionaldoc_: res+=prefix+("IsAdditionalDoc: %s\n" % self.DebugFormatBool(self.isadditionaldoc_))
    if self.has_islink_: res+=prefix+("IsLink: %s\n" % self.DebugFormatBool(self.islink_))
    if self.has_istracer_: res+=prefix+("IsTracer: %s\n" % self.DebugFormatBool(self.istracer_))
    if self.has_premiumdata_:
      res+=prefix+"PremiumData {\n"
      res+=self.premiumdata_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    cnt=0
    for e in self.embedding_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Embedding%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_isembedding_: res+=prefix+("IsEmbedding: %s\n" % self.DebugFormatBool(self.isembedding_))
    if self.has_isflashprocessed_: res+=prefix+("IsFlashProcessed: %s\n" % self.DebugFormatBool(self.isflashprocessed_))
    if self.has_flashprocessingtimestamp_: res+=prefix+("FlashProcessingTimestamp: %s\n" % self.DebugFormatInt32(self.flashprocessingtimestamp_))
    if self.has_flashskipintrourl_: res+=prefix+("FlashSkipIntroUrl: %s\n" % self.DebugFormatString(self.flashskipintrourl_))
    if self.has_additionalchecksums_:
      res+=prefix+"AdditionalChecksums {\n"
      res+=self.additionalchecksums_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_bouncepad302convertedto301_: res+=prefix+("Bouncepad302ConvertedTo301: %s\n" % self.DebugFormatBool(self.bouncepad302convertedto301_))
    if self.has_converter_doc_attachments_:
      res+=prefix+"converter_doc_attachments <\n"
      res+=self.converter_doc_attachments_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_summary_doc_attachments_:
      res+=prefix+"summary_doc_attachments <\n"
      res+=self.summary_doc_attachments_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_doc_attachments_:
      res+=prefix+"doc_attachments <\n"
      res+=self.doc_attachments_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_contentexpirytime_: res+=prefix+("ContentExpiryTime: %s\n" % self.DebugFormatInt32(self.contentexpirytime_))
    if self.has_nosearchresultspage_: res+=prefix+("NoSearchResultsPage: %s\n" % self.DebugFormatBool(self.nosearchresultspage_))
    cnt=0
    for e in self.includedcontent_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("IncludedContent%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_mobiledata_:
      res+=prefix+"MobileData <\n"
      res+=self.mobiledata_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_required_for_cse_: res+=prefix+("required_for_cse: %s\n" % self.DebugFormatBool(self.required_for_cse_))
    cnt=0
    for e in self.cse_id_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("cse_id%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_richsnippet_:
      res+=prefix+"richsnippet <\n"
      res+=self.richsnippet_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

class RTUpdate_DeleteDoc(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.docid_ = 0
    self.body_ = 1
    self.anchors_ = 1
    self.beforecreationtime_ = 0
    self.syncviaanchorrpclog_ = 0
    self.has_docid_ = 0
    self.has_body_ = 0
    self.has_anchors_ = 0
    self.has_beforecreationtime_ = 0
    self.has_syncviaanchorrpclog_ = 0
    if contents is not None: self.MergeFromString(contents)

  def docid(self): return self.docid_

  def set_docid(self, x):
    self.has_docid_ = 1
    self.docid_ = x

  def clear_docid(self):
    self.has_docid_ = 0
    self.docid_ = 0

  def has_docid(self): return self.has_docid_

  def body(self): return self.body_

  def set_body(self, x):
    self.has_body_ = 1
    self.body_ = x

  def clear_body(self):
    self.has_body_ = 0
    self.body_ = 1

  def has_body(self): return self.has_body_

  def anchors(self): return self.anchors_

  def set_anchors(self, x):
    self.has_anchors_ = 1
    self.anchors_ = x

  def clear_anchors(self):
    self.has_anchors_ = 0
    self.anchors_ = 1

  def has_anchors(self): return self.has_anchors_

  def beforecreationtime(self): return self.beforecreationtime_

  def set_beforecreationtime(self, x):
    self.has_beforecreationtime_ = 1
    self.beforecreationtime_ = x

  def clear_beforecreationtime(self):
    self.has_beforecreationtime_ = 0
    self.beforecreationtime_ = 0

  def has_beforecreationtime(self): return self.has_beforecreationtime_

  def syncviaanchorrpclog(self): return self.syncviaanchorrpclog_

  def set_syncviaanchorrpclog(self, x):
    self.has_syncviaanchorrpclog_ = 1
    self.syncviaanchorrpclog_ = x

  def clear_syncviaanchorrpclog(self):
    self.has_syncviaanchorrpclog_ = 0
    self.syncviaanchorrpclog_ = 0

  def has_syncviaanchorrpclog(self): return self.has_syncviaanchorrpclog_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_docid()): self.set_docid(x.docid())
    if (x.has_body()): self.set_body(x.body())
    if (x.has_anchors()): self.set_anchors(x.anchors())
    if (x.has_beforecreationtime()): self.set_beforecreationtime(x.beforecreationtime())
    if (x.has_syncviaanchorrpclog()): self.set_syncviaanchorrpclog(x.syncviaanchorrpclog())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_docid_ != x.has_docid_: return 0
    if self.has_docid_ and self.docid_ != x.docid_: return 0
    if self.has_body_ != x.has_body_: return 0
    if self.has_body_ and self.body_ != x.body_: return 0
    if self.has_anchors_ != x.has_anchors_: return 0
    if self.has_anchors_ and self.anchors_ != x.anchors_: return 0
    if self.has_beforecreationtime_ != x.has_beforecreationtime_: return 0
    if self.has_beforecreationtime_ and self.beforecreationtime_ != x.beforecreationtime_: return 0
    if self.has_syncviaanchorrpclog_ != x.has_syncviaanchorrpclog_: return 0
    if self.has_syncviaanchorrpclog_ and self.syncviaanchorrpclog_ != x.syncviaanchorrpclog_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_docid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: docid not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.docid_)
    if (self.has_body_): n += 3
    if (self.has_anchors_): n += 3
    if (self.has_beforecreationtime_): n += 2 + self.lengthVarInt64(self.beforecreationtime_)
    if (self.has_syncviaanchorrpclog_): n += 3
    return n + 2

  def Clear(self):
    self.clear_docid()
    self.clear_body()
    self.clear_anchors()
    self.clear_beforecreationtime()
    self.clear_syncviaanchorrpclog()

  def OutputUnchecked(self, out):
    out.putVarInt32(248)
    out.putVarUint64(self.docid_)
    if (self.has_body_):
      out.putVarInt32(256)
      out.putBoolean(self.body_)
    if (self.has_anchors_):
      out.putVarInt32(264)
      out.putBoolean(self.anchors_)
    if (self.has_beforecreationtime_):
      out.putVarInt32(976)
      out.putVarInt32(self.beforecreationtime_)
    if (self.has_syncviaanchorrpclog_):
      out.putVarInt32(1064)
      out.putBoolean(self.syncviaanchorrpclog_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 244: break
      if tt == 248:
        self.set_docid(d.getVarUint64())
        continue
      if tt == 256:
        self.set_body(d.getBoolean())
        continue
      if tt == 264:
        self.set_anchors(d.getBoolean())
        continue
      if tt == 976:
        self.set_beforecreationtime(d.getVarInt32())
        continue
      if tt == 1064:
        self.set_syncviaanchorrpclog(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_docid_: res+=prefix+("Docid: %s\n" % self.DebugFormatInt64(self.docid_))
    if self.has_body_: res+=prefix+("Body: %s\n" % self.DebugFormatBool(self.body_))
    if self.has_anchors_: res+=prefix+("Anchors: %s\n" % self.DebugFormatBool(self.anchors_))
    if self.has_beforecreationtime_: res+=prefix+("BeforeCreationTime: %s\n" % self.DebugFormatInt32(self.beforecreationtime_))
    if self.has_syncviaanchorrpclog_: res+=prefix+("SyncViaAnchorRPCLog: %s\n" % self.DebugFormatBool(self.syncviaanchorrpclog_))
    return res

class RTUpdate_Data(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.key_ = 0
    self.property_ = 0
    self.intvalue_ = 0
    self.floatvalue_ = 0.0
    self.doublevalue_ = 0.0
    self.stringvalue_ = ""
    self.has_key_ = 0
    self.has_property_ = 0
    self.has_intvalue_ = 0
    self.has_floatvalue_ = 0
    self.has_doublevalue_ = 0
    self.has_stringvalue_ = 0
    if contents is not None: self.MergeFromString(contents)

  def key(self): return self.key_

  def set_key(self, x):
    self.has_key_ = 1
    self.key_ = x

  def clear_key(self):
    self.has_key_ = 0
    self.key_ = 0

  def has_key(self): return self.has_key_

  def property(self): return self.property_

  def set_property(self, x):
    self.has_property_ = 1
    self.property_ = x

  def clear_property(self):
    self.has_property_ = 0
    self.property_ = 0

  def has_property(self): return self.has_property_

  def intvalue(self): return self.intvalue_

  def set_intvalue(self, x):
    self.has_intvalue_ = 1
    self.intvalue_ = x

  def clear_intvalue(self):
    self.has_intvalue_ = 0
    self.intvalue_ = 0

  def has_intvalue(self): return self.has_intvalue_

  def floatvalue(self): return self.floatvalue_

  def set_floatvalue(self, x):
    self.has_floatvalue_ = 1
    self.floatvalue_ = x

  def clear_floatvalue(self):
    self.has_floatvalue_ = 0
    self.floatvalue_ = 0.0

  def has_floatvalue(self): return self.has_floatvalue_

  def doublevalue(self): return self.doublevalue_

  def set_doublevalue(self, x):
    self.has_doublevalue_ = 1
    self.doublevalue_ = x

  def clear_doublevalue(self):
    self.has_doublevalue_ = 0
    self.doublevalue_ = 0.0

  def has_doublevalue(self): return self.has_doublevalue_

  def stringvalue(self): return self.stringvalue_

  def set_stringvalue(self, x):
    self.has_stringvalue_ = 1
    self.stringvalue_ = x

  def clear_stringvalue(self):
    self.has_stringvalue_ = 0
    self.stringvalue_ = ""

  def has_stringvalue(self): return self.has_stringvalue_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_key()): self.set_key(x.key())
    if (x.has_property()): self.set_property(x.property())
    if (x.has_intvalue()): self.set_intvalue(x.intvalue())
    if (x.has_floatvalue()): self.set_floatvalue(x.floatvalue())
    if (x.has_doublevalue()): self.set_doublevalue(x.doublevalue())
    if (x.has_stringvalue()): self.set_stringvalue(x.stringvalue())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_key_ != x.has_key_: return 0
    if self.has_key_ and self.key_ != x.key_: return 0
    if self.has_property_ != x.has_property_: return 0
    if self.has_property_ and self.property_ != x.property_: return 0
    if self.has_intvalue_ != x.has_intvalue_: return 0
    if self.has_intvalue_ and self.intvalue_ != x.intvalue_: return 0
    if self.has_floatvalue_ != x.has_floatvalue_: return 0
    if self.has_floatvalue_ and self.floatvalue_ != x.floatvalue_: return 0
    if self.has_doublevalue_ != x.has_doublevalue_: return 0
    if self.has_doublevalue_ and self.doublevalue_ != x.doublevalue_: return 0
    if self.has_stringvalue_ != x.has_stringvalue_: return 0
    if self.has_stringvalue_ and self.stringvalue_ != x.stringvalue_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_key_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: key not set.')
    if (not self.has_property_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: property not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.key_)
    n += self.lengthVarInt64(self.property_)
    if (self.has_intvalue_): n += 2 + self.lengthVarInt64(self.intvalue_)
    if (self.has_floatvalue_): n += 6
    if (self.has_doublevalue_): n += 10
    if (self.has_stringvalue_): n += 2 + self.lengthString(len(self.stringvalue_))
    return n + 4

  def Clear(self):
    self.clear_key()
    self.clear_property()
    self.clear_intvalue()
    self.clear_floatvalue()
    self.clear_doublevalue()
    self.clear_stringvalue()

  def OutputUnchecked(self, out):
    out.putVarInt32(328)
    out.putVarInt64(self.key_)
    out.putVarInt32(336)
    out.putVarInt64(self.property_)
    if (self.has_intvalue_):
      out.putVarInt32(344)
      out.putVarInt64(self.intvalue_)
    if (self.has_floatvalue_):
      out.putVarInt32(357)
      out.putFloat(self.floatvalue_)
    if (self.has_doublevalue_):
      out.putVarInt32(361)
      out.putDouble(self.doublevalue_)
    if (self.has_stringvalue_):
      out.putVarInt32(370)
      out.putPrefixedString(self.stringvalue_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 324: break
      if tt == 328:
        self.set_key(d.getVarInt64())
        continue
      if tt == 336:
        self.set_property(d.getVarInt64())
        continue
      if tt == 344:
        self.set_intvalue(d.getVarInt64())
        continue
      if tt == 357:
        self.set_floatvalue(d.getFloat())
        continue
      if tt == 361:
        self.set_doublevalue(d.getDouble())
        continue
      if tt == 370:
        self.set_stringvalue(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_key_: res+=prefix+("Key: %s\n" % self.DebugFormatInt64(self.key_))
    if self.has_property_: res+=prefix+("Property: %s\n" % self.DebugFormatInt64(self.property_))
    if self.has_intvalue_: res+=prefix+("IntValue: %s\n" % self.DebugFormatInt64(self.intvalue_))
    if self.has_floatvalue_: res+=prefix+("FloatValue: %s\n" % self.DebugFormatFloat(self.floatvalue_))
    if self.has_doublevalue_: res+=prefix+("DoubleValue: %s\n" % self.DebugFormat(self.doublevalue_))
    if self.has_stringvalue_: res+=prefix+("StringValue: %s\n" % self.DebugFormatString(self.stringvalue_))
    return res

class RTUpdate_Link(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.timestamp_ = 0
    self.sourceid_ = 0
    self.sourcepr_ = 0
    self.sourceip_ = 0
    self.lcasourceip_ = 0
    self.lcasourcehostid_ = 0
    self.sourceorg_ = ""
    self.sourcelinkhash_ = 0
    self.sourcelanguage_ = 0
    self.sourceoutdegree_ = 0
    self.sourcedoclength_ = 0
    self.anchor_ = []
    self.has_timestamp_ = 0
    self.has_sourceid_ = 0
    self.has_sourcepr_ = 0
    self.has_sourceip_ = 0
    self.has_lcasourceip_ = 0
    self.has_lcasourcehostid_ = 0
    self.has_sourceorg_ = 0
    self.has_sourcelinkhash_ = 0
    self.has_sourcelanguage_ = 0
    self.has_sourceoutdegree_ = 0
    self.has_sourcedoclength_ = 0
    if contents is not None: self.MergeFromString(contents)

  def timestamp(self): return self.timestamp_

  def set_timestamp(self, x):
    self.has_timestamp_ = 1
    self.timestamp_ = x

  def clear_timestamp(self):
    self.has_timestamp_ = 0
    self.timestamp_ = 0

  def has_timestamp(self): return self.has_timestamp_

  def sourceid(self): return self.sourceid_

  def set_sourceid(self, x):
    self.has_sourceid_ = 1
    self.sourceid_ = x

  def clear_sourceid(self):
    self.has_sourceid_ = 0
    self.sourceid_ = 0

  def has_sourceid(self): return self.has_sourceid_

  def sourcepr(self): return self.sourcepr_

  def set_sourcepr(self, x):
    self.has_sourcepr_ = 1
    self.sourcepr_ = x

  def clear_sourcepr(self):
    self.has_sourcepr_ = 0
    self.sourcepr_ = 0

  def has_sourcepr(self): return self.has_sourcepr_

  def sourceip(self): return self.sourceip_

  def set_sourceip(self, x):
    self.has_sourceip_ = 1
    self.sourceip_ = x

  def clear_sourceip(self):
    self.has_sourceip_ = 0
    self.sourceip_ = 0

  def has_sourceip(self): return self.has_sourceip_

  def lcasourceip(self): return self.lcasourceip_

  def set_lcasourceip(self, x):
    self.has_lcasourceip_ = 1
    self.lcasourceip_ = x

  def clear_lcasourceip(self):
    self.has_lcasourceip_ = 0
    self.lcasourceip_ = 0

  def has_lcasourceip(self): return self.has_lcasourceip_

  def lcasourcehostid(self): return self.lcasourcehostid_

  def set_lcasourcehostid(self, x):
    self.has_lcasourcehostid_ = 1
    self.lcasourcehostid_ = x

  def clear_lcasourcehostid(self):
    self.has_lcasourcehostid_ = 0
    self.lcasourcehostid_ = 0

  def has_lcasourcehostid(self): return self.has_lcasourcehostid_

  def sourceorg(self): return self.sourceorg_

  def set_sourceorg(self, x):
    self.has_sourceorg_ = 1
    self.sourceorg_ = x

  def clear_sourceorg(self):
    self.has_sourceorg_ = 0
    self.sourceorg_ = ""

  def has_sourceorg(self): return self.has_sourceorg_

  def sourcelinkhash(self): return self.sourcelinkhash_

  def set_sourcelinkhash(self, x):
    self.has_sourcelinkhash_ = 1
    self.sourcelinkhash_ = x

  def clear_sourcelinkhash(self):
    self.has_sourcelinkhash_ = 0
    self.sourcelinkhash_ = 0

  def has_sourcelinkhash(self): return self.has_sourcelinkhash_

  def sourcelanguage(self): return self.sourcelanguage_

  def set_sourcelanguage(self, x):
    self.has_sourcelanguage_ = 1
    self.sourcelanguage_ = x

  def clear_sourcelanguage(self):
    self.has_sourcelanguage_ = 0
    self.sourcelanguage_ = 0

  def has_sourcelanguage(self): return self.has_sourcelanguage_

  def sourceoutdegree(self): return self.sourceoutdegree_

  def set_sourceoutdegree(self, x):
    self.has_sourceoutdegree_ = 1
    self.sourceoutdegree_ = x

  def clear_sourceoutdegree(self):
    self.has_sourceoutdegree_ = 0
    self.sourceoutdegree_ = 0

  def has_sourceoutdegree(self): return self.has_sourceoutdegree_

  def sourcedoclength(self): return self.sourcedoclength_

  def set_sourcedoclength(self, x):
    self.has_sourcedoclength_ = 1
    self.sourcedoclength_ = x

  def clear_sourcedoclength(self):
    self.has_sourcedoclength_ = 0
    self.sourcedoclength_ = 0

  def has_sourcedoclength(self): return self.has_sourcedoclength_

  def anchor_size(self): return len(self.anchor_)
  def anchor_list(self): return self.anchor_

  def anchor(self, i):
    return self.anchor_[i]

  def mutable_anchor(self, i):
    return self.anchor_[i]

  def add_anchor(self):
    x = RTUpdate_LinkAnchor()
    self.anchor_.append(x)
    return x

  def clear_anchor(self):
    self.anchor_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_timestamp()): self.set_timestamp(x.timestamp())
    if (x.has_sourceid()): self.set_sourceid(x.sourceid())
    if (x.has_sourcepr()): self.set_sourcepr(x.sourcepr())
    if (x.has_sourceip()): self.set_sourceip(x.sourceip())
    if (x.has_lcasourceip()): self.set_lcasourceip(x.lcasourceip())
    if (x.has_lcasourcehostid()): self.set_lcasourcehostid(x.lcasourcehostid())
    if (x.has_sourceorg()): self.set_sourceorg(x.sourceorg())
    if (x.has_sourcelinkhash()): self.set_sourcelinkhash(x.sourcelinkhash())
    if (x.has_sourcelanguage()): self.set_sourcelanguage(x.sourcelanguage())
    if (x.has_sourceoutdegree()): self.set_sourceoutdegree(x.sourceoutdegree())
    if (x.has_sourcedoclength()): self.set_sourcedoclength(x.sourcedoclength())
    for i in xrange(x.anchor_size()): self.add_anchor().CopyFrom(x.anchor(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_timestamp_ != x.has_timestamp_: return 0
    if self.has_timestamp_ and self.timestamp_ != x.timestamp_: return 0
    if self.has_sourceid_ != x.has_sourceid_: return 0
    if self.has_sourceid_ and self.sourceid_ != x.sourceid_: return 0
    if self.has_sourcepr_ != x.has_sourcepr_: return 0
    if self.has_sourcepr_ and self.sourcepr_ != x.sourcepr_: return 0
    if self.has_sourceip_ != x.has_sourceip_: return 0
    if self.has_sourceip_ and self.sourceip_ != x.sourceip_: return 0
    if self.has_lcasourceip_ != x.has_lcasourceip_: return 0
    if self.has_lcasourceip_ and self.lcasourceip_ != x.lcasourceip_: return 0
    if self.has_lcasourcehostid_ != x.has_lcasourcehostid_: return 0
    if self.has_lcasourcehostid_ and self.lcasourcehostid_ != x.lcasourcehostid_: return 0
    if self.has_sourceorg_ != x.has_sourceorg_: return 0
    if self.has_sourceorg_ and self.sourceorg_ != x.sourceorg_: return 0
    if self.has_sourcelinkhash_ != x.has_sourcelinkhash_: return 0
    if self.has_sourcelinkhash_ and self.sourcelinkhash_ != x.sourcelinkhash_: return 0
    if self.has_sourcelanguage_ != x.has_sourcelanguage_: return 0
    if self.has_sourcelanguage_ and self.sourcelanguage_ != x.sourcelanguage_: return 0
    if self.has_sourceoutdegree_ != x.has_sourceoutdegree_: return 0
    if self.has_sourceoutdegree_ and self.sourceoutdegree_ != x.sourceoutdegree_: return 0
    if self.has_sourcedoclength_ != x.has_sourcedoclength_: return 0
    if self.has_sourcedoclength_ and self.sourcedoclength_ != x.sourcedoclength_: return 0
    if len(self.anchor_) != len(x.anchor_): return 0
    for e1, e2 in zip(self.anchor_, x.anchor_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_timestamp_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: timestamp not set.')
    if (not self.has_sourceid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: sourceid not set.')
    for i in xrange(len(self.anchor_)):
      if (not self.anchor_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.timestamp_)
    n += self.lengthVarInt64(self.sourceid_)
    if (self.has_sourcepr_): n += 2 + self.lengthVarInt64(self.sourcepr_)
    if (self.has_sourceip_): n += 2 + self.lengthVarInt64(self.sourceip_)
    if (self.has_lcasourceip_): n += 2 + self.lengthVarInt64(self.lcasourceip_)
    if (self.has_lcasourcehostid_): n += 2 + self.lengthVarInt64(self.lcasourcehostid_)
    if (self.has_sourceorg_): n += 2 + self.lengthString(len(self.sourceorg_))
    if (self.has_sourcelinkhash_): n += 2 + self.lengthVarInt64(self.sourcelinkhash_)
    if (self.has_sourcelanguage_): n += 2 + self.lengthVarInt64(self.sourcelanguage_)
    if (self.has_sourceoutdegree_): n += 2 + self.lengthVarInt64(self.sourceoutdegree_)
    if (self.has_sourcedoclength_): n += 2 + self.lengthVarInt64(self.sourcedoclength_)
    n += 4 * len(self.anchor_)
    for i in xrange(len(self.anchor_)): n += self.anchor_[i].ByteSize()
    return n + 4

  def Clear(self):
    self.clear_timestamp()
    self.clear_sourceid()
    self.clear_sourcepr()
    self.clear_sourceip()
    self.clear_lcasourceip()
    self.clear_lcasourcehostid()
    self.clear_sourceorg()
    self.clear_sourcelinkhash()
    self.clear_sourcelanguage()
    self.clear_sourceoutdegree()
    self.clear_sourcedoclength()
    self.clear_anchor()

  def OutputUnchecked(self, out):
    out.putVarInt32(408)
    out.putVarUint64(self.sourceid_)
    if (self.has_sourceip_):
      out.putVarInt32(416)
      out.putVarInt32(self.sourceip_)
    if (self.has_sourceorg_):
      out.putVarInt32(426)
      out.putPrefixedString(self.sourceorg_)
    if (self.has_sourcelinkhash_):
      out.putVarInt32(432)
      out.putVarUint64(self.sourcelinkhash_)
    if (self.has_sourcelanguage_):
      out.putVarInt32(440)
      out.putVarInt32(self.sourcelanguage_)
    for i in xrange(len(self.anchor_)):
      out.putVarInt32(451)
      self.anchor_[i].OutputUnchecked(out)
      out.putVarInt32(452)
    if (self.has_sourcedoclength_):
      out.putVarInt32(520)
      out.putVarInt32(self.sourcedoclength_)
    if (self.has_sourcepr_):
      out.putVarInt32(528)
      out.putVarInt32(self.sourcepr_)
    if (self.has_sourceoutdegree_):
      out.putVarInt32(536)
      out.putVarInt32(self.sourceoutdegree_)
    out.putVarInt32(552)
    out.putVarInt32(self.timestamp_)
    if (self.has_lcasourceip_):
      out.putVarInt32(936)
      out.putVarInt32(self.lcasourceip_)
    if (self.has_lcasourcehostid_):
      out.putVarInt32(1056)
      out.putVarUint64(self.lcasourcehostid_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 404: break
      if tt == 408:
        self.set_sourceid(d.getVarUint64())
        continue
      if tt == 416:
        self.set_sourceip(d.getVarInt32())
        continue
      if tt == 426:
        self.set_sourceorg(d.getPrefixedString())
        continue
      if tt == 432:
        self.set_sourcelinkhash(d.getVarUint64())
        continue
      if tt == 440:
        self.set_sourcelanguage(d.getVarInt32())
        continue
      if tt == 451:
        self.add_anchor().TryMerge(d)
        continue
      if tt == 520:
        self.set_sourcedoclength(d.getVarInt32())
        continue
      if tt == 528:
        self.set_sourcepr(d.getVarInt32())
        continue
      if tt == 536:
        self.set_sourceoutdegree(d.getVarInt32())
        continue
      if tt == 552:
        self.set_timestamp(d.getVarInt32())
        continue
      if tt == 936:
        self.set_lcasourceip(d.getVarInt32())
        continue
      if tt == 1056:
        self.set_lcasourcehostid(d.getVarUint64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_timestamp_: res+=prefix+("Timestamp: %s\n" % self.DebugFormatInt32(self.timestamp_))
    if self.has_sourceid_: res+=prefix+("SourceID: %s\n" % self.DebugFormatInt64(self.sourceid_))
    if self.has_sourcepr_: res+=prefix+("SourcePR: %s\n" % self.DebugFormatInt32(self.sourcepr_))
    if self.has_sourceip_: res+=prefix+("SourceIP: %s\n" % self.DebugFormatInt32(self.sourceip_))
    if self.has_lcasourceip_: res+=prefix+("LCASourceIP: %s\n" % self.DebugFormatInt32(self.lcasourceip_))
    if self.has_lcasourcehostid_: res+=prefix+("LCASourceHostID: %s\n" % self.DebugFormatInt64(self.lcasourcehostid_))
    if self.has_sourceorg_: res+=prefix+("SourceOrg: %s\n" % self.DebugFormatString(self.sourceorg_))
    if self.has_sourcelinkhash_: res+=prefix+("SourceLinkHash: %s\n" % self.DebugFormatInt64(self.sourcelinkhash_))
    if self.has_sourcelanguage_: res+=prefix+("SourceLanguage: %s\n" % self.DebugFormatInt32(self.sourcelanguage_))
    if self.has_sourceoutdegree_: res+=prefix+("SourceOutdegree: %s\n" % self.DebugFormatInt32(self.sourceoutdegree_))
    if self.has_sourcedoclength_: res+=prefix+("SourceDocLength: %s\n" % self.DebugFormatInt32(self.sourcedoclength_))
    cnt=0
    for e in self.anchor_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Anchor%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

class RTUpdate_Anchor(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.timestamp_ = 0
    self.sourceid_ = 0
    self.sourcepr_ = 0
    self.sourceindyrank_ = 0
    self.sourceclusterid_ = 0
    self.sourceip_ = 0
    self.sourceorg_ = ""
    self.sourcesitename_ = ""
    self.sourcelinkhash_ = 0
    self.sourcelanguage_ = 0
    self.sourcedoclength_ = 0
    self.sourceoutdegree_ = 0
    self.linktext_ = ""
    self.linkfontsize_ = 3
    self.linkweight_ = 127
    self.linkdemotionreason_ = 0
    self.deleted_ = 0
    self.targetid_ = 0
    self.ondomain_ = 0
    self.has_timestamp_ = 0
    self.has_sourceid_ = 0
    self.has_sourcepr_ = 0
    self.has_sourceindyrank_ = 0
    self.has_sourceclusterid_ = 0
    self.has_sourceip_ = 0
    self.has_sourceorg_ = 0
    self.has_sourcesitename_ = 0
    self.has_sourcelinkhash_ = 0
    self.has_sourcelanguage_ = 0
    self.has_sourcedoclength_ = 0
    self.has_sourceoutdegree_ = 0
    self.has_linktext_ = 0
    self.has_linkfontsize_ = 0
    self.has_linkweight_ = 0
    self.has_linkdemotionreason_ = 0
    self.has_deleted_ = 0
    self.has_targetid_ = 0
    self.has_ondomain_ = 0
    if contents is not None: self.MergeFromString(contents)

  def timestamp(self): return self.timestamp_

  def set_timestamp(self, x):
    self.has_timestamp_ = 1
    self.timestamp_ = x

  def clear_timestamp(self):
    self.has_timestamp_ = 0
    self.timestamp_ = 0

  def has_timestamp(self): return self.has_timestamp_

  def sourceid(self): return self.sourceid_

  def set_sourceid(self, x):
    self.has_sourceid_ = 1
    self.sourceid_ = x

  def clear_sourceid(self):
    self.has_sourceid_ = 0
    self.sourceid_ = 0

  def has_sourceid(self): return self.has_sourceid_

  def sourcepr(self): return self.sourcepr_

  def set_sourcepr(self, x):
    self.has_sourcepr_ = 1
    self.sourcepr_ = x

  def clear_sourcepr(self):
    self.has_sourcepr_ = 0
    self.sourcepr_ = 0

  def has_sourcepr(self): return self.has_sourcepr_

  def sourceindyrank(self): return self.sourceindyrank_

  def set_sourceindyrank(self, x):
    self.has_sourceindyrank_ = 1
    self.sourceindyrank_ = x

  def clear_sourceindyrank(self):
    self.has_sourceindyrank_ = 0
    self.sourceindyrank_ = 0

  def has_sourceindyrank(self): return self.has_sourceindyrank_

  def sourceclusterid(self): return self.sourceclusterid_

  def set_sourceclusterid(self, x):
    self.has_sourceclusterid_ = 1
    self.sourceclusterid_ = x

  def clear_sourceclusterid(self):
    self.has_sourceclusterid_ = 0
    self.sourceclusterid_ = 0

  def has_sourceclusterid(self): return self.has_sourceclusterid_

  def sourceip(self): return self.sourceip_

  def set_sourceip(self, x):
    self.has_sourceip_ = 1
    self.sourceip_ = x

  def clear_sourceip(self):
    self.has_sourceip_ = 0
    self.sourceip_ = 0

  def has_sourceip(self): return self.has_sourceip_

  def sourceorg(self): return self.sourceorg_

  def set_sourceorg(self, x):
    self.has_sourceorg_ = 1
    self.sourceorg_ = x

  def clear_sourceorg(self):
    self.has_sourceorg_ = 0
    self.sourceorg_ = ""

  def has_sourceorg(self): return self.has_sourceorg_

  def sourcesitename(self): return self.sourcesitename_

  def set_sourcesitename(self, x):
    self.has_sourcesitename_ = 1
    self.sourcesitename_ = x

  def clear_sourcesitename(self):
    self.has_sourcesitename_ = 0
    self.sourcesitename_ = ""

  def has_sourcesitename(self): return self.has_sourcesitename_

  def sourcelinkhash(self): return self.sourcelinkhash_

  def set_sourcelinkhash(self, x):
    self.has_sourcelinkhash_ = 1
    self.sourcelinkhash_ = x

  def clear_sourcelinkhash(self):
    self.has_sourcelinkhash_ = 0
    self.sourcelinkhash_ = 0

  def has_sourcelinkhash(self): return self.has_sourcelinkhash_

  def sourcelanguage(self): return self.sourcelanguage_

  def set_sourcelanguage(self, x):
    self.has_sourcelanguage_ = 1
    self.sourcelanguage_ = x

  def clear_sourcelanguage(self):
    self.has_sourcelanguage_ = 0
    self.sourcelanguage_ = 0

  def has_sourcelanguage(self): return self.has_sourcelanguage_

  def sourcedoclength(self): return self.sourcedoclength_

  def set_sourcedoclength(self, x):
    self.has_sourcedoclength_ = 1
    self.sourcedoclength_ = x

  def clear_sourcedoclength(self):
    self.has_sourcedoclength_ = 0
    self.sourcedoclength_ = 0

  def has_sourcedoclength(self): return self.has_sourcedoclength_

  def sourceoutdegree(self): return self.sourceoutdegree_

  def set_sourceoutdegree(self, x):
    self.has_sourceoutdegree_ = 1
    self.sourceoutdegree_ = x

  def clear_sourceoutdegree(self):
    self.has_sourceoutdegree_ = 0
    self.sourceoutdegree_ = 0

  def has_sourceoutdegree(self): return self.has_sourceoutdegree_

  def linktext(self): return self.linktext_

  def set_linktext(self, x):
    self.has_linktext_ = 1
    self.linktext_ = x

  def clear_linktext(self):
    self.has_linktext_ = 0
    self.linktext_ = ""

  def has_linktext(self): return self.has_linktext_

  def linkfontsize(self): return self.linkfontsize_

  def set_linkfontsize(self, x):
    self.has_linkfontsize_ = 1
    self.linkfontsize_ = x

  def clear_linkfontsize(self):
    self.has_linkfontsize_ = 0
    self.linkfontsize_ = 3

  def has_linkfontsize(self): return self.has_linkfontsize_

  def linkweight(self): return self.linkweight_

  def set_linkweight(self, x):
    self.has_linkweight_ = 1
    self.linkweight_ = x

  def clear_linkweight(self):
    self.has_linkweight_ = 0
    self.linkweight_ = 127

  def has_linkweight(self): return self.has_linkweight_

  def linkdemotionreason(self): return self.linkdemotionreason_

  def set_linkdemotionreason(self, x):
    self.has_linkdemotionreason_ = 1
    self.linkdemotionreason_ = x

  def clear_linkdemotionreason(self):
    self.has_linkdemotionreason_ = 0
    self.linkdemotionreason_ = 0

  def has_linkdemotionreason(self): return self.has_linkdemotionreason_

  def deleted(self): return self.deleted_

  def set_deleted(self, x):
    self.has_deleted_ = 1
    self.deleted_ = x

  def clear_deleted(self):
    self.has_deleted_ = 0
    self.deleted_ = 0

  def has_deleted(self): return self.has_deleted_

  def targetid(self): return self.targetid_

  def set_targetid(self, x):
    self.has_targetid_ = 1
    self.targetid_ = x

  def clear_targetid(self):
    self.has_targetid_ = 0
    self.targetid_ = 0

  def has_targetid(self): return self.has_targetid_

  def ondomain(self): return self.ondomain_

  def set_ondomain(self, x):
    self.has_ondomain_ = 1
    self.ondomain_ = x

  def clear_ondomain(self):
    self.has_ondomain_ = 0
    self.ondomain_ = 0

  def has_ondomain(self): return self.has_ondomain_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_timestamp()): self.set_timestamp(x.timestamp())
    if (x.has_sourceid()): self.set_sourceid(x.sourceid())
    if (x.has_sourcepr()): self.set_sourcepr(x.sourcepr())
    if (x.has_sourceindyrank()): self.set_sourceindyrank(x.sourceindyrank())
    if (x.has_sourceclusterid()): self.set_sourceclusterid(x.sourceclusterid())
    if (x.has_sourceip()): self.set_sourceip(x.sourceip())
    if (x.has_sourceorg()): self.set_sourceorg(x.sourceorg())
    if (x.has_sourcesitename()): self.set_sourcesitename(x.sourcesitename())
    if (x.has_sourcelinkhash()): self.set_sourcelinkhash(x.sourcelinkhash())
    if (x.has_sourcelanguage()): self.set_sourcelanguage(x.sourcelanguage())
    if (x.has_sourcedoclength()): self.set_sourcedoclength(x.sourcedoclength())
    if (x.has_sourceoutdegree()): self.set_sourceoutdegree(x.sourceoutdegree())
    if (x.has_linktext()): self.set_linktext(x.linktext())
    if (x.has_linkfontsize()): self.set_linkfontsize(x.linkfontsize())
    if (x.has_linkweight()): self.set_linkweight(x.linkweight())
    if (x.has_linkdemotionreason()): self.set_linkdemotionreason(x.linkdemotionreason())
    if (x.has_deleted()): self.set_deleted(x.deleted())
    if (x.has_targetid()): self.set_targetid(x.targetid())
    if (x.has_ondomain()): self.set_ondomain(x.ondomain())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_timestamp_ != x.has_timestamp_: return 0
    if self.has_timestamp_ and self.timestamp_ != x.timestamp_: return 0
    if self.has_sourceid_ != x.has_sourceid_: return 0
    if self.has_sourceid_ and self.sourceid_ != x.sourceid_: return 0
    if self.has_sourcepr_ != x.has_sourcepr_: return 0
    if self.has_sourcepr_ and self.sourcepr_ != x.sourcepr_: return 0
    if self.has_sourceindyrank_ != x.has_sourceindyrank_: return 0
    if self.has_sourceindyrank_ and self.sourceindyrank_ != x.sourceindyrank_: return 0
    if self.has_sourceclusterid_ != x.has_sourceclusterid_: return 0
    if self.has_sourceclusterid_ and self.sourceclusterid_ != x.sourceclusterid_: return 0
    if self.has_sourceip_ != x.has_sourceip_: return 0
    if self.has_sourceip_ and self.sourceip_ != x.sourceip_: return 0
    if self.has_sourceorg_ != x.has_sourceorg_: return 0
    if self.has_sourceorg_ and self.sourceorg_ != x.sourceorg_: return 0
    if self.has_sourcesitename_ != x.has_sourcesitename_: return 0
    if self.has_sourcesitename_ and self.sourcesitename_ != x.sourcesitename_: return 0
    if self.has_sourcelinkhash_ != x.has_sourcelinkhash_: return 0
    if self.has_sourcelinkhash_ and self.sourcelinkhash_ != x.sourcelinkhash_: return 0
    if self.has_sourcelanguage_ != x.has_sourcelanguage_: return 0
    if self.has_sourcelanguage_ and self.sourcelanguage_ != x.sourcelanguage_: return 0
    if self.has_sourcedoclength_ != x.has_sourcedoclength_: return 0
    if self.has_sourcedoclength_ and self.sourcedoclength_ != x.sourcedoclength_: return 0
    if self.has_sourceoutdegree_ != x.has_sourceoutdegree_: return 0
    if self.has_sourceoutdegree_ and self.sourceoutdegree_ != x.sourceoutdegree_: return 0
    if self.has_linktext_ != x.has_linktext_: return 0
    if self.has_linktext_ and self.linktext_ != x.linktext_: return 0
    if self.has_linkfontsize_ != x.has_linkfontsize_: return 0
    if self.has_linkfontsize_ and self.linkfontsize_ != x.linkfontsize_: return 0
    if self.has_linkweight_ != x.has_linkweight_: return 0
    if self.has_linkweight_ and self.linkweight_ != x.linkweight_: return 0
    if self.has_linkdemotionreason_ != x.has_linkdemotionreason_: return 0
    if self.has_linkdemotionreason_ and self.linkdemotionreason_ != x.linkdemotionreason_: return 0
    if self.has_deleted_ != x.has_deleted_: return 0
    if self.has_deleted_ and self.deleted_ != x.deleted_: return 0
    if self.has_targetid_ != x.has_targetid_: return 0
    if self.has_targetid_ and self.targetid_ != x.targetid_: return 0
    if self.has_ondomain_ != x.has_ondomain_: return 0
    if self.has_ondomain_ and self.ondomain_ != x.ondomain_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_timestamp_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: timestamp not set.')
    if (not self.has_sourceid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: sourceid not set.')
    if (not self.has_targetid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: targetid not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.timestamp_)
    if (self.has_sourcepr_): n += 2 + self.lengthVarInt64(self.sourcepr_)
    if (self.has_sourceindyrank_): n += 2 + self.lengthVarInt64(self.sourceindyrank_)
    if (self.has_sourceclusterid_): n += 2 + self.lengthVarInt64(self.sourceclusterid_)
    if (self.has_sourceip_): n += 2 + self.lengthVarInt64(self.sourceip_)
    if (self.has_sourceorg_): n += 2 + self.lengthString(len(self.sourceorg_))
    if (self.has_sourcesitename_): n += 2 + self.lengthString(len(self.sourcesitename_))
    if (self.has_sourcelinkhash_): n += 10
    if (self.has_sourcelanguage_): n += 2 + self.lengthVarInt64(self.sourcelanguage_)
    if (self.has_sourcedoclength_): n += 2 + self.lengthVarInt64(self.sourcedoclength_)
    if (self.has_sourceoutdegree_): n += 2 + self.lengthVarInt64(self.sourceoutdegree_)
    if (self.has_linktext_): n += 2 + self.lengthString(len(self.linktext_))
    if (self.has_linkfontsize_): n += 2 + self.lengthVarInt64(self.linkfontsize_)
    if (self.has_linkweight_): n += 2 + self.lengthVarInt64(self.linkweight_)
    if (self.has_linkdemotionreason_): n += 2 + self.lengthVarInt64(self.linkdemotionreason_)
    if (self.has_deleted_): n += 3
    if (self.has_ondomain_): n += 3
    return n + 22

  def Clear(self):
    self.clear_timestamp()
    self.clear_sourceid()
    self.clear_sourcepr()
    self.clear_sourceindyrank()
    self.clear_sourceclusterid()
    self.clear_sourceip()
    self.clear_sourceorg()
    self.clear_sourcesitename()
    self.clear_sourcelinkhash()
    self.clear_sourcelanguage()
    self.clear_sourcedoclength()
    self.clear_sourceoutdegree()
    self.clear_linktext()
    self.clear_linkfontsize()
    self.clear_linkweight()
    self.clear_linkdemotionreason()
    self.clear_deleted()
    self.clear_targetid()
    self.clear_ondomain()

  def OutputUnchecked(self, out):
    out.putVarInt32(649)
    out.put64(self.sourceid_)
    if (self.has_sourceip_):
      out.putVarInt32(656)
      out.putVarInt32(self.sourceip_)
    if (self.has_sourceorg_):
      out.putVarInt32(666)
      out.putPrefixedString(self.sourceorg_)
    if (self.has_sourcelinkhash_):
      out.putVarInt32(673)
      out.put64(self.sourcelinkhash_)
    if (self.has_sourcelanguage_):
      out.putVarInt32(680)
      out.putVarInt32(self.sourcelanguage_)
    if (self.has_sourcedoclength_):
      out.putVarInt32(688)
      out.putVarInt32(self.sourcedoclength_)
    if (self.has_sourceoutdegree_):
      out.putVarInt32(696)
      out.putVarInt32(self.sourceoutdegree_)
    if (self.has_linktext_):
      out.putVarInt32(706)
      out.putPrefixedString(self.linktext_)
    if (self.has_linkfontsize_):
      out.putVarInt32(712)
      out.putVarInt32(self.linkfontsize_)
    if (self.has_linkweight_):
      out.putVarInt32(720)
      out.putVarInt32(self.linkweight_)
    out.putVarInt32(729)
    out.put64(self.targetid_)
    if (self.has_sourcepr_):
      out.putVarInt32(736)
      out.putVarInt32(self.sourcepr_)
    if (self.has_linkdemotionreason_):
      out.putVarInt32(744)
      out.putVarInt32(self.linkdemotionreason_)
    if (self.has_deleted_):
      out.putVarInt32(752)
      out.putBoolean(self.deleted_)
    out.putVarInt32(760)
    out.putVarInt32(self.timestamp_)
    if (self.has_sourceindyrank_):
      out.putVarInt32(768)
      out.putVarInt32(self.sourceindyrank_)
    if (self.has_sourcesitename_):
      out.putVarInt32(778)
      out.putPrefixedString(self.sourcesitename_)
    if (self.has_sourceclusterid_):
      out.putVarInt32(784)
      out.putVarInt64(self.sourceclusterid_)
    if (self.has_ondomain_):
      out.putVarInt32(904)
      out.putBoolean(self.ondomain_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 644: break
      if tt == 649:
        self.set_sourceid(d.get64())
        continue
      if tt == 656:
        self.set_sourceip(d.getVarInt32())
        continue
      if tt == 666:
        self.set_sourceorg(d.getPrefixedString())
        continue
      if tt == 673:
        self.set_sourcelinkhash(d.get64())
        continue
      if tt == 680:
        self.set_sourcelanguage(d.getVarInt32())
        continue
      if tt == 688:
        self.set_sourcedoclength(d.getVarInt32())
        continue
      if tt == 696:
        self.set_sourceoutdegree(d.getVarInt32())
        continue
      if tt == 706:
        self.set_linktext(d.getPrefixedString())
        continue
      if tt == 712:
        self.set_linkfontsize(d.getVarInt32())
        continue
      if tt == 720:
        self.set_linkweight(d.getVarInt32())
        continue
      if tt == 729:
        self.set_targetid(d.get64())
        continue
      if tt == 736:
        self.set_sourcepr(d.getVarInt32())
        continue
      if tt == 744:
        self.set_linkdemotionreason(d.getVarInt32())
        continue
      if tt == 752:
        self.set_deleted(d.getBoolean())
        continue
      if tt == 760:
        self.set_timestamp(d.getVarInt32())
        continue
      if tt == 768:
        self.set_sourceindyrank(d.getVarInt32())
        continue
      if tt == 778:
        self.set_sourcesitename(d.getPrefixedString())
        continue
      if tt == 784:
        self.set_sourceclusterid(d.getVarInt64())
        continue
      if tt == 904:
        self.set_ondomain(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_timestamp_: res+=prefix+("TimeStamp: %s\n" % self.DebugFormatInt32(self.timestamp_))
    if self.has_sourceid_: res+=prefix+("SourceID: %s\n" % self.DebugFormatFixed64(self.sourceid_))
    if self.has_sourcepr_: res+=prefix+("SourcePR: %s\n" % self.DebugFormatInt32(self.sourcepr_))
    if self.has_sourceindyrank_: res+=prefix+("SourceIndyRank: %s\n" % self.DebugFormatInt32(self.sourceindyrank_))
    if self.has_sourceclusterid_: res+=prefix+("SourceClusterID: %s\n" % self.DebugFormatInt64(self.sourceclusterid_))
    if self.has_sourceip_: res+=prefix+("SourceIP: %s\n" % self.DebugFormatInt32(self.sourceip_))
    if self.has_sourceorg_: res+=prefix+("SourceOrg: %s\n" % self.DebugFormatString(self.sourceorg_))
    if self.has_sourcesitename_: res+=prefix+("SourceSiteName: %s\n" % self.DebugFormatString(self.sourcesitename_))
    if self.has_sourcelinkhash_: res+=prefix+("SourceLinkHash: %s\n" % self.DebugFormatFixed64(self.sourcelinkhash_))
    if self.has_sourcelanguage_: res+=prefix+("SourceLanguage: %s\n" % self.DebugFormatInt32(self.sourcelanguage_))
    if self.has_sourcedoclength_: res+=prefix+("SourceDocLength: %s\n" % self.DebugFormatInt32(self.sourcedoclength_))
    if self.has_sourceoutdegree_: res+=prefix+("SourceOutDegree: %s\n" % self.DebugFormatInt32(self.sourceoutdegree_))
    if self.has_linktext_: res+=prefix+("LinkText: %s\n" % self.DebugFormatString(self.linktext_))
    if self.has_linkfontsize_: res+=prefix+("LinkFontSize: %s\n" % self.DebugFormatInt32(self.linkfontsize_))
    if self.has_linkweight_: res+=prefix+("LinkWeight: %s\n" % self.DebugFormatInt32(self.linkweight_))
    if self.has_linkdemotionreason_: res+=prefix+("LinkDemotionReason: %s\n" % self.DebugFormatInt32(self.linkdemotionreason_))
    if self.has_deleted_: res+=prefix+("Deleted: %s\n" % self.DebugFormatBool(self.deleted_))
    if self.has_targetid_: res+=prefix+("TargetID: %s\n" % self.DebugFormatFixed64(self.targetid_))
    if self.has_ondomain_: res+=prefix+("OnDomain: %s\n" % self.DebugFormatBool(self.ondomain_))
    return res

class RTUpdate_DataRequest(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.logfilename_ = ""
    self.marker_ = ""
    self.echortupdate_ = []
    self.anchorindexdata_ = []
    self.has_logfilename_ = 0
    self.has_marker_ = 0
    if contents is not None: self.MergeFromString(contents)

  def logfilename(self): return self.logfilename_

  def set_logfilename(self, x):
    self.has_logfilename_ = 1
    self.logfilename_ = x

  def clear_logfilename(self):
    self.has_logfilename_ = 0
    self.logfilename_ = ""

  def has_logfilename(self): return self.has_logfilename_

  def marker(self): return self.marker_

  def set_marker(self, x):
    self.has_marker_ = 1
    self.marker_ = x

  def clear_marker(self):
    self.has_marker_ = 0
    self.marker_ = ""

  def has_marker(self): return self.has_marker_

  def echortupdate_size(self): return len(self.echortupdate_)
  def echortupdate_list(self): return self.echortupdate_

  def echortupdate(self, i):
    return self.echortupdate_[i]

  def set_echortupdate(self, i, x):
    self.echortupdate_[i] = x

  def add_echortupdate(self, x):
    self.echortupdate_.append(x)

  def clear_echortupdate(self):
    self.echortupdate_ = []

  def anchorindexdata_size(self): return len(self.anchorindexdata_)
  def anchorindexdata_list(self): return self.anchorindexdata_

  def anchorindexdata(self, i):
    return self.anchorindexdata_[i]

  def mutable_anchorindexdata(self, i):
    return self.anchorindexdata_[i]

  def add_anchorindexdata(self):
    x = RTUpdate_DataRequestAnchorIndexData()
    self.anchorindexdata_.append(x)
    return x

  def clear_anchorindexdata(self):
    self.anchorindexdata_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_logfilename()): self.set_logfilename(x.logfilename())
    if (x.has_marker()): self.set_marker(x.marker())
    for i in xrange(x.echortupdate_size()): self.add_echortupdate(x.echortupdate(i))
    for i in xrange(x.anchorindexdata_size()): self.add_anchorindexdata().CopyFrom(x.anchorindexdata(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_logfilename_ != x.has_logfilename_: return 0
    if self.has_logfilename_ and self.logfilename_ != x.logfilename_: return 0
    if self.has_marker_ != x.has_marker_: return 0
    if self.has_marker_ and self.marker_ != x.marker_: return 0
    if len(self.echortupdate_) != len(x.echortupdate_): return 0
    for e1, e2 in zip(self.echortupdate_, x.echortupdate_):
      if e1 != e2: return 0
    if len(self.anchorindexdata_) != len(x.anchorindexdata_): return 0
    for e1, e2 in zip(self.anchorindexdata_, x.anchorindexdata_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_logfilename_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: logfilename not set.')
    for i in xrange(len(self.anchorindexdata_)):
      if (not self.anchorindexdata_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.logfilename_))
    if (self.has_marker_): n += 2 + self.lengthString(len(self.marker_))
    n += 2 * len(self.echortupdate_)
    for i in xrange(len(self.echortupdate_)): n += self.lengthString(len(self.echortupdate_[i]))
    n += 4 * len(self.anchorindexdata_)
    for i in xrange(len(self.anchorindexdata_)): n += self.anchorindexdata_[i].ByteSize()
    return n + 2

  def Clear(self):
    self.clear_logfilename()
    self.clear_marker()
    self.clear_echortupdate()
    self.clear_anchorindexdata()

  def OutputUnchecked(self, out):
    out.putVarInt32(818)
    out.putPrefixedString(self.logfilename_)
    if (self.has_marker_):
      out.putVarInt32(826)
      out.putPrefixedString(self.marker_)
    for i in xrange(len(self.anchorindexdata_)):
      out.putVarInt32(883)
      self.anchorindexdata_[i].OutputUnchecked(out)
      out.putVarInt32(884)
    for i in xrange(len(self.echortupdate_)):
      out.putVarInt32(1074)
      out.putPrefixedString(self.echortupdate_[i])

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 812: break
      if tt == 818:
        self.set_logfilename(d.getPrefixedString())
        continue
      if tt == 826:
        self.set_marker(d.getPrefixedString())
        continue
      if tt == 883:
        self.add_anchorindexdata().TryMerge(d)
        continue
      if tt == 1074:
        self.add_echortupdate(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_logfilename_: res+=prefix+("LogFilename: %s\n" % self.DebugFormatString(self.logfilename_))
    if self.has_marker_: res+=prefix+("Marker: %s\n" % self.DebugFormatString(self.marker_))
    cnt=0
    for e in self.echortupdate_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("EchoRTUpdate%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    cnt=0
    for e in self.anchorindexdata_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("AnchorIndexData%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

class RTUpdate_Heartbeat(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.timestamp_ = 0
    self.has_timestamp_ = 0
    if contents is not None: self.MergeFromString(contents)

  def timestamp(self): return self.timestamp_

  def set_timestamp(self, x):
    self.has_timestamp_ = 1
    self.timestamp_ = x

  def clear_timestamp(self):
    self.has_timestamp_ = 0
    self.timestamp_ = 0

  def has_timestamp(self): return self.has_timestamp_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_timestamp()): self.set_timestamp(x.timestamp())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_timestamp_ != x.has_timestamp_: return 0
    if self.has_timestamp_ and self.timestamp_ != x.timestamp_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_timestamp_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: timestamp not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.timestamp_)
    return n + 2

  def Clear(self):
    self.clear_timestamp()

  def OutputUnchecked(self, out):
    out.putVarInt32(920)
    out.putVarInt32(self.timestamp_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 916: break
      if tt == 920:
        self.set_timestamp(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_timestamp_: res+=prefix+("TimeStamp: %s\n" % self.DebugFormatInt32(self.timestamp_))
    return res

class RTUpdate_RestrictUpdate(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.isdeleteoraddrestrict_ = 0
    self.restrictfilename_ = ""
    self.restrictname_ = ""
    self.restricttype_ = 0
    self.has_isdeleteoraddrestrict_ = 0
    self.has_restrictfilename_ = 0
    self.has_restrictname_ = 0
    self.has_restricttype_ = 0
    if contents is not None: self.MergeFromString(contents)

  def isdeleteoraddrestrict(self): return self.isdeleteoraddrestrict_

  def set_isdeleteoraddrestrict(self, x):
    self.has_isdeleteoraddrestrict_ = 1
    self.isdeleteoraddrestrict_ = x

  def clear_isdeleteoraddrestrict(self):
    self.has_isdeleteoraddrestrict_ = 0
    self.isdeleteoraddrestrict_ = 0

  def has_isdeleteoraddrestrict(self): return self.has_isdeleteoraddrestrict_

  def restrictfilename(self): return self.restrictfilename_

  def set_restrictfilename(self, x):
    self.has_restrictfilename_ = 1
    self.restrictfilename_ = x

  def clear_restrictfilename(self):
    self.has_restrictfilename_ = 0
    self.restrictfilename_ = ""

  def has_restrictfilename(self): return self.has_restrictfilename_

  def restrictname(self): return self.restrictname_

  def set_restrictname(self, x):
    self.has_restrictname_ = 1
    self.restrictname_ = x

  def clear_restrictname(self):
    self.has_restrictname_ = 0
    self.restrictname_ = ""

  def has_restrictname(self): return self.has_restrictname_

  def restricttype(self): return self.restricttype_

  def set_restricttype(self, x):
    self.has_restricttype_ = 1
    self.restricttype_ = x

  def clear_restricttype(self):
    self.has_restricttype_ = 0
    self.restricttype_ = 0

  def has_restricttype(self): return self.has_restricttype_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_isdeleteoraddrestrict()): self.set_isdeleteoraddrestrict(x.isdeleteoraddrestrict())
    if (x.has_restrictfilename()): self.set_restrictfilename(x.restrictfilename())
    if (x.has_restrictname()): self.set_restrictname(x.restrictname())
    if (x.has_restricttype()): self.set_restricttype(x.restricttype())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_isdeleteoraddrestrict_ != x.has_isdeleteoraddrestrict_: return 0
    if self.has_isdeleteoraddrestrict_ and self.isdeleteoraddrestrict_ != x.isdeleteoraddrestrict_: return 0
    if self.has_restrictfilename_ != x.has_restrictfilename_: return 0
    if self.has_restrictfilename_ and self.restrictfilename_ != x.restrictfilename_: return 0
    if self.has_restrictname_ != x.has_restrictname_: return 0
    if self.has_restrictname_ and self.restrictname_ != x.restrictname_: return 0
    if self.has_restricttype_ != x.has_restricttype_: return 0
    if self.has_restricttype_ and self.restricttype_ != x.restricttype_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_isdeleteoraddrestrict_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: isdeleteoraddrestrict not set.')
    if (not self.has_restrictfilename_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: restrictfilename not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.restrictfilename_))
    if (self.has_restrictname_): n += 2 + self.lengthString(len(self.restrictname_))
    if (self.has_restricttype_): n += 2 + self.lengthVarInt64(self.restricttype_)
    return n + 5

  def Clear(self):
    self.clear_isdeleteoraddrestrict()
    self.clear_restrictfilename()
    self.clear_restrictname()
    self.clear_restricttype()

  def OutputUnchecked(self, out):
    out.putVarInt32(960)
    out.putBoolean(self.isdeleteoraddrestrict_)
    out.putVarInt32(970)
    out.putPrefixedString(self.restrictfilename_)
    if (self.has_restrictname_):
      out.putVarInt32(986)
      out.putPrefixedString(self.restrictname_)
    if (self.has_restricttype_):
      out.putVarInt32(1080)
      out.putVarInt32(self.restricttype_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 956: break
      if tt == 960:
        self.set_isdeleteoraddrestrict(d.getBoolean())
        continue
      if tt == 970:
        self.set_restrictfilename(d.getPrefixedString())
        continue
      if tt == 986:
        self.set_restrictname(d.getPrefixedString())
        continue
      if tt == 1080:
        self.set_restricttype(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_isdeleteoraddrestrict_: res+=prefix+("IsDeleteOrAddRestrict: %s\n" % self.DebugFormatBool(self.isdeleteoraddrestrict_))
    if self.has_restrictfilename_: res+=prefix+("RestrictFileName: %s\n" % self.DebugFormatString(self.restrictfilename_))
    if self.has_restrictname_: res+=prefix+("RestrictName: %s\n" % self.DebugFormatString(self.restrictname_))
    if self.has_restricttype_: res+=prefix+("RestrictType: %s\n" % self.DebugFormatInt32(self.restricttype_))
    return res

class RTUpdate_Viewstamp(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.viewid_ = 0
    self.seqnum_ = 0
    self.has_viewid_ = 0
    self.has_seqnum_ = 0
    if contents is not None: self.MergeFromString(contents)

  def viewid(self): return self.viewid_

  def set_viewid(self, x):
    self.has_viewid_ = 1
    self.viewid_ = x

  def clear_viewid(self):
    self.has_viewid_ = 0
    self.viewid_ = 0

  def has_viewid(self): return self.has_viewid_

  def seqnum(self): return self.seqnum_

  def set_seqnum(self, x):
    self.has_seqnum_ = 1
    self.seqnum_ = x

  def clear_seqnum(self):
    self.has_seqnum_ = 0
    self.seqnum_ = 0

  def has_seqnum(self): return self.has_seqnum_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_viewid()): self.set_viewid(x.viewid())
    if (x.has_seqnum()): self.set_seqnum(x.seqnum())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_viewid_ != x.has_viewid_: return 0
    if self.has_viewid_ and self.viewid_ != x.viewid_: return 0
    if self.has_seqnum_ != x.has_seqnum_: return 0
    if self.has_seqnum_ and self.seqnum_ != x.seqnum_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_viewid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: viewid not set.')
    if (not self.has_seqnum_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: seqnum not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.viewid_)
    n += self.lengthVarInt64(self.seqnum_)
    return n + 4

  def Clear(self):
    self.clear_viewid()
    self.clear_seqnum()

  def OutputUnchecked(self, out):
    out.putVarInt32(1040)
    out.putVarInt64(self.viewid_)
    out.putVarInt32(1048)
    out.putVarInt64(self.seqnum_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1036: break
      if tt == 1040:
        self.set_viewid(d.getVarInt64())
        continue
      if tt == 1048:
        self.set_seqnum(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_viewid_: res+=prefix+("ViewId: %s\n" % self.DebugFormatInt64(self.viewid_))
    if self.has_seqnum_: res+=prefix+("SeqNum: %s\n" % self.DebugFormatInt64(self.seqnum_))
    return res

class RTUpdate_ContentManager(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.position_ = ""
    self.tmpposition_ = ""
    self.label_ = ""
    self.compressedlength_ = 0
    self.has_position_ = 0
    self.has_tmpposition_ = 0
    self.has_label_ = 0
    self.has_compressedlength_ = 0
    if contents is not None: self.MergeFromString(contents)

  def position(self): return self.position_

  def set_position(self, x):
    self.has_position_ = 1
    self.position_ = x

  def clear_position(self):
    self.has_position_ = 0
    self.position_ = ""

  def has_position(self): return self.has_position_

  def tmpposition(self): return self.tmpposition_

  def set_tmpposition(self, x):
    self.has_tmpposition_ = 1
    self.tmpposition_ = x

  def clear_tmpposition(self):
    self.has_tmpposition_ = 0
    self.tmpposition_ = ""

  def has_tmpposition(self): return self.has_tmpposition_

  def label(self): return self.label_

  def set_label(self, x):
    self.has_label_ = 1
    self.label_ = x

  def clear_label(self):
    self.has_label_ = 0
    self.label_ = ""

  def has_label(self): return self.has_label_

  def compressedlength(self): return self.compressedlength_

  def set_compressedlength(self, x):
    self.has_compressedlength_ = 1
    self.compressedlength_ = x

  def clear_compressedlength(self):
    self.has_compressedlength_ = 0
    self.compressedlength_ = 0

  def has_compressedlength(self): return self.has_compressedlength_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_position()): self.set_position(x.position())
    if (x.has_tmpposition()): self.set_tmpposition(x.tmpposition())
    if (x.has_label()): self.set_label(x.label())
    if (x.has_compressedlength()): self.set_compressedlength(x.compressedlength())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_position_ != x.has_position_: return 0
    if self.has_position_ and self.position_ != x.position_: return 0
    if self.has_tmpposition_ != x.has_tmpposition_: return 0
    if self.has_tmpposition_ and self.tmpposition_ != x.tmpposition_: return 0
    if self.has_label_ != x.has_label_: return 0
    if self.has_label_ and self.label_ != x.label_: return 0
    if self.has_compressedlength_ != x.has_compressedlength_: return 0
    if self.has_compressedlength_ and self.compressedlength_ != x.compressedlength_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_position_): n += 2 + self.lengthString(len(self.position_))
    if (self.has_tmpposition_): n += 2 + self.lengthString(len(self.tmpposition_))
    if (self.has_label_): n += 2 + self.lengthString(len(self.label_))
    if (self.has_compressedlength_): n += 2 + self.lengthVarInt64(self.compressedlength_)
    return n + 0

  def Clear(self):
    self.clear_position()
    self.clear_tmpposition()
    self.clear_label()
    self.clear_compressedlength()

  def OutputUnchecked(self, out):
    if (self.has_position_):
      out.putVarInt32(1250)
      out.putPrefixedString(self.position_)
    if (self.has_label_):
      out.putVarInt32(1266)
      out.putPrefixedString(self.label_)
    if (self.has_compressedlength_):
      out.putVarInt32(1304)
      out.putVarInt64(self.compressedlength_)
    if (self.has_tmpposition_):
      out.putVarInt32(1330)
      out.putPrefixedString(self.tmpposition_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1260: break
      if tt == 1250:
        self.set_position(d.getPrefixedString())
        continue
      if tt == 1266:
        self.set_label(d.getPrefixedString())
        continue
      if tt == 1304:
        self.set_compressedlength(d.getVarInt64())
        continue
      if tt == 1330:
        self.set_tmpposition(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_position_: res+=prefix+("Position: %s\n" % self.DebugFormatString(self.position_))
    if self.has_tmpposition_: res+=prefix+("TmpPosition: %s\n" % self.DebugFormatString(self.tmpposition_))
    if self.has_label_: res+=prefix+("Label: %s\n" % self.DebugFormatString(self.label_))
    if self.has_compressedlength_: res+=prefix+("CompressedLength: %s\n" % self.DebugFormatInt64(self.compressedlength_))
    return res

class RTUpdate_PipelineInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.indexselectionscore_int32_deprecated_ = 0
    self.location_ = []
    self.reused_from_repository_ = 0
    self.rejectedby_ = 0
    self.rejectedreason_ = 0
    self.num_summaries_ = 0
    self.num_permredirects_ = 0
    self.retainedversion_ = None
    self.supercededversion_deprecated_ = []
    self.servingversions_ = []
    self.servingdupversions_ = []
    self.pagerankbeforepromotion_ = 0
    self.pageranknsbeforepromotion_ = 0
    self.isapproximatepagerank_ = 0
    self.isapproximatepagerank_ns_ = 0
    self.approximatepagerank_ = 0
    self.approximatepagerank_ns_ = 0
    self.mangledrepid_ = ""
    self.fresherrepid_ = None
    self.dupforwarding_deprecated_ = []
    self.alternatename_deprecated_ = []
    self.dupforwarding_ = []
    self.alternatename_ = []
    self.permredirects_ = []
    self.canonicalurl_ = ""
    self.canonicaldocid_deprecated_ = 0
    self.previous_canonicalurl_ = ""
    self.canonical_in_indices_ = []
    self.finalcontentchecksum_ = 0
    self.indexselectionacceptingselectors_deprecated_ = []
    self.indexselectionrejectingfilters_deprecated_ = []
    self.compressedlength_ = 0
    self.sitestats_ = None
    self.urlstats_ = None
    self.hoststats_ = None
    self.indexcoveragestats_ = None
    self.indexselectionscore_double_deprecated_ = 0.0
    self.diversity_guarantee_score_ = 0
    self.indyrank_deprecated_ = 0
    self.homepagepagerank_ = 0
    self.homepagepagerankns_ = 0
    self.foundinbarturlfpmap_ = 0
    self.globalfactors_deprecated_ = []
    self.indexspecificfactors_deprecated_ = []
    self.historicalfactors_ = None
    self.reusetimestamp_ = []
    self.microrepmap_ = None
    self.linkrecord_ = None
    self.dfa_labels_ = []
    self.non_terminal_timerange_ = 0
    self.non_terminal_count_ = 0
    self.crypto404_info_ = 0
    self.trace_ = []
    self.skipduringindexing_ = 0
    self.skipduringcollapse_ = 0
    self.selectionoutput_ = None
    self.finallogicaltarget_ = None
    self.firstcrawledtimestamp_deprecated_ = 0
    self.isbouncepad_ = 0
    self.targetfromtoolbar_ = ""
    self.penalizesources_ = 0
    self.ispenalizedsource_ = 0
    self.has_indexselectionscore_int32_deprecated_ = 0
    self.has_reused_from_repository_ = 0
    self.has_rejectedby_ = 0
    self.has_rejectedreason_ = 0
    self.has_num_summaries_ = 0
    self.has_num_permredirects_ = 0
    self.has_retainedversion_ = 0
    self.has_pagerankbeforepromotion_ = 0
    self.has_pageranknsbeforepromotion_ = 0
    self.has_isapproximatepagerank_ = 0
    self.has_isapproximatepagerank_ns_ = 0
    self.has_approximatepagerank_ = 0
    self.has_approximatepagerank_ns_ = 0
    self.has_mangledrepid_ = 0
    self.has_fresherrepid_ = 0
    self.has_canonicalurl_ = 0
    self.has_canonicaldocid_deprecated_ = 0
    self.has_previous_canonicalurl_ = 0
    self.has_finalcontentchecksum_ = 0
    self.has_compressedlength_ = 0
    self.has_sitestats_ = 0
    self.has_urlstats_ = 0
    self.has_hoststats_ = 0
    self.has_indexcoveragestats_ = 0
    self.has_indexselectionscore_double_deprecated_ = 0
    self.has_diversity_guarantee_score_ = 0
    self.has_indyrank_deprecated_ = 0
    self.has_homepagepagerank_ = 0
    self.has_homepagepagerankns_ = 0
    self.has_foundinbarturlfpmap_ = 0
    self.has_historicalfactors_ = 0
    self.has_microrepmap_ = 0
    self.has_linkrecord_ = 0
    self.has_non_terminal_timerange_ = 0
    self.has_non_terminal_count_ = 0
    self.has_crypto404_info_ = 0
    self.has_skipduringindexing_ = 0
    self.has_skipduringcollapse_ = 0
    self.has_selectionoutput_ = 0
    self.has_finallogicaltarget_ = 0
    self.has_firstcrawledtimestamp_deprecated_ = 0
    self.has_isbouncepad_ = 0
    self.has_targetfromtoolbar_ = 0
    self.has_penalizesources_ = 0
    self.has_ispenalizedsource_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def indexselectionscore_int32_deprecated(self): return self.indexselectionscore_int32_deprecated_

  def set_indexselectionscore_int32_deprecated(self, x):
    self.has_indexselectionscore_int32_deprecated_ = 1
    self.indexselectionscore_int32_deprecated_ = x

  def clear_indexselectionscore_int32_deprecated(self):
    self.has_indexselectionscore_int32_deprecated_ = 0
    self.indexselectionscore_int32_deprecated_ = 0

  def has_indexselectionscore_int32_deprecated(self): return self.has_indexselectionscore_int32_deprecated_

  def location_size(self): return len(self.location_)
  def location_list(self): return self.location_

  def location(self, i):
    return self.location_[i]

  def mutable_location(self, i):
    return self.location_[i]

  def add_location(self):
    x = RTDocReference()
    self.location_.append(x)
    return x

  def clear_location(self):
    self.location_ = []
  def reused_from_repository(self): return self.reused_from_repository_

  def set_reused_from_repository(self, x):
    self.has_reused_from_repository_ = 1
    self.reused_from_repository_ = x

  def clear_reused_from_repository(self):
    self.has_reused_from_repository_ = 0
    self.reused_from_repository_ = 0

  def has_reused_from_repository(self): return self.has_reused_from_repository_

  def rejectedby(self): return self.rejectedby_

  def set_rejectedby(self, x):
    self.has_rejectedby_ = 1
    self.rejectedby_ = x

  def clear_rejectedby(self):
    self.has_rejectedby_ = 0
    self.rejectedby_ = 0

  def has_rejectedby(self): return self.has_rejectedby_

  def rejectedreason(self): return self.rejectedreason_

  def set_rejectedreason(self, x):
    self.has_rejectedreason_ = 1
    self.rejectedreason_ = x

  def clear_rejectedreason(self):
    self.has_rejectedreason_ = 0
    self.rejectedreason_ = 0

  def has_rejectedreason(self): return self.has_rejectedreason_

  def num_summaries(self): return self.num_summaries_

  def set_num_summaries(self, x):
    self.has_num_summaries_ = 1
    self.num_summaries_ = x

  def clear_num_summaries(self):
    self.has_num_summaries_ = 0
    self.num_summaries_ = 0

  def has_num_summaries(self): return self.has_num_summaries_

  def num_permredirects(self): return self.num_permredirects_

  def set_num_permredirects(self, x):
    self.has_num_permredirects_ = 1
    self.num_permredirects_ = x

  def clear_num_permredirects(self):
    self.has_num_permredirects_ = 0
    self.num_permredirects_ = 0

  def has_num_permredirects(self): return self.has_num_permredirects_

  def retainedversion(self):
    if self.retainedversion_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.retainedversion_ is None: self.retainedversion_ = RTDocReference()
      finally:
        self.lazy_init_lock_.release()
    return self.retainedversion_

  def mutable_retainedversion(self): self.has_retainedversion_ = 1; return self.retainedversion()

  def clear_retainedversion(self):
    #Warning: this method does not acquire the lock.
    self.has_retainedversion_ = 0;
    if self.retainedversion_ is not None: self.retainedversion_.Clear()

  def has_retainedversion(self): return self.has_retainedversion_

  def supercededversion_deprecated_size(self): return len(self.supercededversion_deprecated_)
  def supercededversion_deprecated_list(self): return self.supercededversion_deprecated_

  def supercededversion_deprecated(self, i):
    return self.supercededversion_deprecated_[i]

  def mutable_supercededversion_deprecated(self, i):
    return self.supercededversion_deprecated_[i]

  def add_supercededversion_deprecated(self):
    x = RTDocReference()
    self.supercededversion_deprecated_.append(x)
    return x

  def clear_supercededversion_deprecated(self):
    self.supercededversion_deprecated_ = []
  def servingversions_size(self): return len(self.servingversions_)
  def servingversions_list(self): return self.servingversions_

  def servingversions(self, i):
    return self.servingversions_[i]

  def mutable_servingversions(self, i):
    return self.servingversions_[i]

  def add_servingversions(self):
    x = RTDocReference()
    self.servingversions_.append(x)
    return x

  def clear_servingversions(self):
    self.servingversions_ = []
  def servingdupversions_size(self): return len(self.servingdupversions_)
  def servingdupversions_list(self): return self.servingdupversions_

  def servingdupversions(self, i):
    return self.servingdupversions_[i]

  def mutable_servingdupversions(self, i):
    return self.servingdupversions_[i]

  def add_servingdupversions(self):
    x = RTDocReference()
    self.servingdupversions_.append(x)
    return x

  def clear_servingdupversions(self):
    self.servingdupversions_ = []
  def pagerankbeforepromotion(self): return self.pagerankbeforepromotion_

  def set_pagerankbeforepromotion(self, x):
    self.has_pagerankbeforepromotion_ = 1
    self.pagerankbeforepromotion_ = x

  def clear_pagerankbeforepromotion(self):
    self.has_pagerankbeforepromotion_ = 0
    self.pagerankbeforepromotion_ = 0

  def has_pagerankbeforepromotion(self): return self.has_pagerankbeforepromotion_

  def pageranknsbeforepromotion(self): return self.pageranknsbeforepromotion_

  def set_pageranknsbeforepromotion(self, x):
    self.has_pageranknsbeforepromotion_ = 1
    self.pageranknsbeforepromotion_ = x

  def clear_pageranknsbeforepromotion(self):
    self.has_pageranknsbeforepromotion_ = 0
    self.pageranknsbeforepromotion_ = 0

  def has_pageranknsbeforepromotion(self): return self.has_pageranknsbeforepromotion_

  def isapproximatepagerank(self): return self.isapproximatepagerank_

  def set_isapproximatepagerank(self, x):
    self.has_isapproximatepagerank_ = 1
    self.isapproximatepagerank_ = x

  def clear_isapproximatepagerank(self):
    self.has_isapproximatepagerank_ = 0
    self.isapproximatepagerank_ = 0

  def has_isapproximatepagerank(self): return self.has_isapproximatepagerank_

  def isapproximatepagerank_ns(self): return self.isapproximatepagerank_ns_

  def set_isapproximatepagerank_ns(self, x):
    self.has_isapproximatepagerank_ns_ = 1
    self.isapproximatepagerank_ns_ = x

  def clear_isapproximatepagerank_ns(self):
    self.has_isapproximatepagerank_ns_ = 0
    self.isapproximatepagerank_ns_ = 0

  def has_isapproximatepagerank_ns(self): return self.has_isapproximatepagerank_ns_

  def approximatepagerank(self): return self.approximatepagerank_

  def set_approximatepagerank(self, x):
    self.has_approximatepagerank_ = 1
    self.approximatepagerank_ = x

  def clear_approximatepagerank(self):
    self.has_approximatepagerank_ = 0
    self.approximatepagerank_ = 0

  def has_approximatepagerank(self): return self.has_approximatepagerank_

  def approximatepagerank_ns(self): return self.approximatepagerank_ns_

  def set_approximatepagerank_ns(self, x):
    self.has_approximatepagerank_ns_ = 1
    self.approximatepagerank_ns_ = x

  def clear_approximatepagerank_ns(self):
    self.has_approximatepagerank_ns_ = 0
    self.approximatepagerank_ns_ = 0

  def has_approximatepagerank_ns(self): return self.has_approximatepagerank_ns_

  def mangledrepid(self): return self.mangledrepid_

  def set_mangledrepid(self, x):
    self.has_mangledrepid_ = 1
    self.mangledrepid_ = x

  def clear_mangledrepid(self):
    self.has_mangledrepid_ = 0
    self.mangledrepid_ = ""

  def has_mangledrepid(self): return self.has_mangledrepid_

  def fresherrepid(self):
    if self.fresherrepid_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.fresherrepid_ is None: self.fresherrepid_ = RTUpdate_PipelineInfoFresherRepId()
      finally:
        self.lazy_init_lock_.release()
    return self.fresherrepid_

  def mutable_fresherrepid(self): self.has_fresherrepid_ = 1; return self.fresherrepid()

  def clear_fresherrepid(self):
    #Warning: this method does not acquire the lock.
    self.has_fresherrepid_ = 0;
    if self.fresherrepid_ is not None: self.fresherrepid_.Clear()

  def has_fresherrepid(self): return self.has_fresherrepid_

  def dupforwarding_deprecated_size(self): return len(self.dupforwarding_deprecated_)
  def dupforwarding_deprecated_list(self): return self.dupforwarding_deprecated_

  def dupforwarding_deprecated(self, i):
    return self.dupforwarding_deprecated_[i]

  def mutable_dupforwarding_deprecated(self, i):
    return self.dupforwarding_deprecated_[i]

  def add_dupforwarding_deprecated(self):
    x = RTUpdate_PipelineInfoDupForwarding_DEPRECATED()
    self.dupforwarding_deprecated_.append(x)
    return x

  def clear_dupforwarding_deprecated(self):
    self.dupforwarding_deprecated_ = []
  def alternatename_deprecated_size(self): return len(self.alternatename_deprecated_)
  def alternatename_deprecated_list(self): return self.alternatename_deprecated_

  def alternatename_deprecated(self, i):
    return self.alternatename_deprecated_[i]

  def mutable_alternatename_deprecated(self, i):
    return self.alternatename_deprecated_[i]

  def add_alternatename_deprecated(self):
    x = RTUpdate_PipelineInfoAlternateName_DEPRECATED()
    self.alternatename_deprecated_.append(x)
    return x

  def clear_alternatename_deprecated(self):
    self.alternatename_deprecated_ = []
  def dupforwarding_size(self): return len(self.dupforwarding_)
  def dupforwarding_list(self): return self.dupforwarding_

  def dupforwarding(self, i):
    return self.dupforwarding_[i]

  def mutable_dupforwarding(self, i):
    return self.dupforwarding_[i]

  def add_dupforwarding(self):
    x = RTDocReference()
    self.dupforwarding_.append(x)
    return x

  def clear_dupforwarding(self):
    self.dupforwarding_ = []
  def alternatename_size(self): return len(self.alternatename_)
  def alternatename_list(self): return self.alternatename_

  def alternatename(self, i):
    return self.alternatename_[i]

  def mutable_alternatename(self, i):
    return self.alternatename_[i]

  def add_alternatename(self):
    x = RTDocReference()
    self.alternatename_.append(x)
    return x

  def clear_alternatename(self):
    self.alternatename_ = []
  def permredirects_size(self): return len(self.permredirects_)
  def permredirects_list(self): return self.permredirects_

  def permredirects(self, i):
    return self.permredirects_[i]

  def mutable_permredirects(self, i):
    return self.permredirects_[i]

  def add_permredirects(self):
    x = RTDocReference()
    self.permredirects_.append(x)
    return x

  def clear_permredirects(self):
    self.permredirects_ = []
  def canonicalurl(self): return self.canonicalurl_

  def set_canonicalurl(self, x):
    self.has_canonicalurl_ = 1
    self.canonicalurl_ = x

  def clear_canonicalurl(self):
    self.has_canonicalurl_ = 0
    self.canonicalurl_ = ""

  def has_canonicalurl(self): return self.has_canonicalurl_

  def canonicaldocid_deprecated(self): return self.canonicaldocid_deprecated_

  def set_canonicaldocid_deprecated(self, x):
    self.has_canonicaldocid_deprecated_ = 1
    self.canonicaldocid_deprecated_ = x

  def clear_canonicaldocid_deprecated(self):
    self.has_canonicaldocid_deprecated_ = 0
    self.canonicaldocid_deprecated_ = 0

  def has_canonicaldocid_deprecated(self): return self.has_canonicaldocid_deprecated_

  def previous_canonicalurl(self): return self.previous_canonicalurl_

  def set_previous_canonicalurl(self, x):
    self.has_previous_canonicalurl_ = 1
    self.previous_canonicalurl_ = x

  def clear_previous_canonicalurl(self):
    self.has_previous_canonicalurl_ = 0
    self.previous_canonicalurl_ = ""

  def has_previous_canonicalurl(self): return self.has_previous_canonicalurl_

  def canonical_in_indices_size(self): return len(self.canonical_in_indices_)
  def canonical_in_indices_list(self): return self.canonical_in_indices_

  def canonical_in_indices(self, i):
    return self.canonical_in_indices_[i]

  def set_canonical_in_indices(self, i, x):
    self.canonical_in_indices_[i] = x

  def add_canonical_in_indices(self, x):
    self.canonical_in_indices_.append(x)

  def clear_canonical_in_indices(self):
    self.canonical_in_indices_ = []

  def finalcontentchecksum(self): return self.finalcontentchecksum_

  def set_finalcontentchecksum(self, x):
    self.has_finalcontentchecksum_ = 1
    self.finalcontentchecksum_ = x

  def clear_finalcontentchecksum(self):
    self.has_finalcontentchecksum_ = 0
    self.finalcontentchecksum_ = 0

  def has_finalcontentchecksum(self): return self.has_finalcontentchecksum_

  def indexselectionacceptingselectors_deprecated_size(self): return len(self.indexselectionacceptingselectors_deprecated_)
  def indexselectionacceptingselectors_deprecated_list(self): return self.indexselectionacceptingselectors_deprecated_

  def indexselectionacceptingselectors_deprecated(self, i):
    return self.indexselectionacceptingselectors_deprecated_[i]

  def set_indexselectionacceptingselectors_deprecated(self, i, x):
    self.indexselectionacceptingselectors_deprecated_[i] = x

  def add_indexselectionacceptingselectors_deprecated(self, x):
    self.indexselectionacceptingselectors_deprecated_.append(x)

  def clear_indexselectionacceptingselectors_deprecated(self):
    self.indexselectionacceptingselectors_deprecated_ = []

  def indexselectionrejectingfilters_deprecated_size(self): return len(self.indexselectionrejectingfilters_deprecated_)
  def indexselectionrejectingfilters_deprecated_list(self): return self.indexselectionrejectingfilters_deprecated_

  def indexselectionrejectingfilters_deprecated(self, i):
    return self.indexselectionrejectingfilters_deprecated_[i]

  def set_indexselectionrejectingfilters_deprecated(self, i, x):
    self.indexselectionrejectingfilters_deprecated_[i] = x

  def add_indexselectionrejectingfilters_deprecated(self, x):
    self.indexselectionrejectingfilters_deprecated_.append(x)

  def clear_indexselectionrejectingfilters_deprecated(self):
    self.indexselectionrejectingfilters_deprecated_ = []

  def compressedlength(self): return self.compressedlength_

  def set_compressedlength(self, x):
    self.has_compressedlength_ = 1
    self.compressedlength_ = x

  def clear_compressedlength(self):
    self.has_compressedlength_ = 0
    self.compressedlength_ = 0

  def has_compressedlength(self): return self.has_compressedlength_

  def sitestats(self):
    if self.sitestats_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.sitestats_ is None: self.sitestats_ = IndexSelectionSiteStats()
      finally:
        self.lazy_init_lock_.release()
    return self.sitestats_

  def mutable_sitestats(self): self.has_sitestats_ = 1; return self.sitestats()

  def clear_sitestats(self):
    #Warning: this method does not acquire the lock.
    self.has_sitestats_ = 0;
    if self.sitestats_ is not None: self.sitestats_.Clear()

  def has_sitestats(self): return self.has_sitestats_

  def urlstats(self):
    if self.urlstats_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.urlstats_ is None: self.urlstats_ = IndexSelectionURLStats()
      finally:
        self.lazy_init_lock_.release()
    return self.urlstats_

  def mutable_urlstats(self): self.has_urlstats_ = 1; return self.urlstats()

  def clear_urlstats(self):
    #Warning: this method does not acquire the lock.
    self.has_urlstats_ = 0;
    if self.urlstats_ is not None: self.urlstats_.Clear()

  def has_urlstats(self): return self.has_urlstats_

  def hoststats(self):
    if self.hoststats_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.hoststats_ is None: self.hoststats_ = IndexSelectionHostStats()
      finally:
        self.lazy_init_lock_.release()
    return self.hoststats_

  def mutable_hoststats(self): self.has_hoststats_ = 1; return self.hoststats()

  def clear_hoststats(self):
    #Warning: this method does not acquire the lock.
    self.has_hoststats_ = 0;
    if self.hoststats_ is not None: self.hoststats_.Clear()

  def has_hoststats(self): return self.has_hoststats_

  def indexcoveragestats(self):
    if self.indexcoveragestats_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.indexcoveragestats_ is None: self.indexcoveragestats_ = RTUpdate_PipelineInfoIndexCoverageStats()
      finally:
        self.lazy_init_lock_.release()
    return self.indexcoveragestats_

  def mutable_indexcoveragestats(self): self.has_indexcoveragestats_ = 1; return self.indexcoveragestats()

  def clear_indexcoveragestats(self):
    #Warning: this method does not acquire the lock.
    self.has_indexcoveragestats_ = 0;
    if self.indexcoveragestats_ is not None: self.indexcoveragestats_.Clear()

  def has_indexcoveragestats(self): return self.has_indexcoveragestats_

  def indexselectionscore_double_deprecated(self): return self.indexselectionscore_double_deprecated_

  def set_indexselectionscore_double_deprecated(self, x):
    self.has_indexselectionscore_double_deprecated_ = 1
    self.indexselectionscore_double_deprecated_ = x

  def clear_indexselectionscore_double_deprecated(self):
    self.has_indexselectionscore_double_deprecated_ = 0
    self.indexselectionscore_double_deprecated_ = 0.0

  def has_indexselectionscore_double_deprecated(self): return self.has_indexselectionscore_double_deprecated_

  def diversity_guarantee_score(self): return self.diversity_guarantee_score_

  def set_diversity_guarantee_score(self, x):
    self.has_diversity_guarantee_score_ = 1
    self.diversity_guarantee_score_ = x

  def clear_diversity_guarantee_score(self):
    self.has_diversity_guarantee_score_ = 0
    self.diversity_guarantee_score_ = 0

  def has_diversity_guarantee_score(self): return self.has_diversity_guarantee_score_

  def indyrank_deprecated(self): return self.indyrank_deprecated_

  def set_indyrank_deprecated(self, x):
    self.has_indyrank_deprecated_ = 1
    self.indyrank_deprecated_ = x

  def clear_indyrank_deprecated(self):
    self.has_indyrank_deprecated_ = 0
    self.indyrank_deprecated_ = 0

  def has_indyrank_deprecated(self): return self.has_indyrank_deprecated_

  def homepagepagerank(self): return self.homepagepagerank_

  def set_homepagepagerank(self, x):
    self.has_homepagepagerank_ = 1
    self.homepagepagerank_ = x

  def clear_homepagepagerank(self):
    self.has_homepagepagerank_ = 0
    self.homepagepagerank_ = 0

  def has_homepagepagerank(self): return self.has_homepagepagerank_

  def homepagepagerankns(self): return self.homepagepagerankns_

  def set_homepagepagerankns(self, x):
    self.has_homepagepagerankns_ = 1
    self.homepagepagerankns_ = x

  def clear_homepagepagerankns(self):
    self.has_homepagepagerankns_ = 0
    self.homepagepagerankns_ = 0

  def has_homepagepagerankns(self): return self.has_homepagepagerankns_

  def foundinbarturlfpmap(self): return self.foundinbarturlfpmap_

  def set_foundinbarturlfpmap(self, x):
    self.has_foundinbarturlfpmap_ = 1
    self.foundinbarturlfpmap_ = x

  def clear_foundinbarturlfpmap(self):
    self.has_foundinbarturlfpmap_ = 0
    self.foundinbarturlfpmap_ = 0

  def has_foundinbarturlfpmap(self): return self.has_foundinbarturlfpmap_

  def globalfactors_deprecated_size(self): return len(self.globalfactors_deprecated_)
  def globalfactors_deprecated_list(self): return self.globalfactors_deprecated_

  def globalfactors_deprecated(self, i):
    return self.globalfactors_deprecated_[i]

  def mutable_globalfactors_deprecated(self, i):
    return self.globalfactors_deprecated_[i]

  def add_globalfactors_deprecated(self):
    x = SelectionFactors()
    self.globalfactors_deprecated_.append(x)
    return x

  def clear_globalfactors_deprecated(self):
    self.globalfactors_deprecated_ = []
  def indexspecificfactors_deprecated_size(self): return len(self.indexspecificfactors_deprecated_)
  def indexspecificfactors_deprecated_list(self): return self.indexspecificfactors_deprecated_

  def indexspecificfactors_deprecated(self, i):
    return self.indexspecificfactors_deprecated_[i]

  def mutable_indexspecificfactors_deprecated(self, i):
    return self.indexspecificfactors_deprecated_[i]

  def add_indexspecificfactors_deprecated(self):
    x = RTUpdate_PipelineInfoIndexSpecificFactors_DEPRECATED()
    self.indexspecificfactors_deprecated_.append(x)
    return x

  def clear_indexspecificfactors_deprecated(self):
    self.indexspecificfactors_deprecated_ = []
  def historicalfactors(self):
    if self.historicalfactors_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.historicalfactors_ is None: self.historicalfactors_ = HistoricalFactors()
      finally:
        self.lazy_init_lock_.release()
    return self.historicalfactors_

  def mutable_historicalfactors(self): self.has_historicalfactors_ = 1; return self.historicalfactors()

  def clear_historicalfactors(self):
    #Warning: this method does not acquire the lock.
    self.has_historicalfactors_ = 0;
    if self.historicalfactors_ is not None: self.historicalfactors_.Clear()

  def has_historicalfactors(self): return self.has_historicalfactors_

  def reusetimestamp_size(self): return len(self.reusetimestamp_)
  def reusetimestamp_list(self): return self.reusetimestamp_

  def reusetimestamp(self, i):
    return self.reusetimestamp_[i]

  def set_reusetimestamp(self, i, x):
    self.reusetimestamp_[i] = x

  def add_reusetimestamp(self, x):
    self.reusetimestamp_.append(x)

  def clear_reusetimestamp(self):
    self.reusetimestamp_ = []

  def microrepmap(self):
    if self.microrepmap_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.microrepmap_ is None: self.microrepmap_ = MicroRepmap()
      finally:
        self.lazy_init_lock_.release()
    return self.microrepmap_

  def mutable_microrepmap(self): self.has_microrepmap_ = 1; return self.microrepmap()

  def clear_microrepmap(self):
    #Warning: this method does not acquire the lock.
    self.has_microrepmap_ = 0;
    if self.microrepmap_ is not None: self.microrepmap_.Clear()

  def has_microrepmap(self): return self.has_microrepmap_

  def linkrecord(self):
    if self.linkrecord_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.linkrecord_ is None: self.linkrecord_ = LinkRecord()
      finally:
        self.lazy_init_lock_.release()
    return self.linkrecord_

  def mutable_linkrecord(self): self.has_linkrecord_ = 1; return self.linkrecord()

  def clear_linkrecord(self):
    #Warning: this method does not acquire the lock.
    self.has_linkrecord_ = 0;
    if self.linkrecord_ is not None: self.linkrecord_.Clear()

  def has_linkrecord(self): return self.has_linkrecord_

  def dfa_labels_size(self): return len(self.dfa_labels_)
  def dfa_labels_list(self): return self.dfa_labels_

  def dfa_labels(self, i):
    return self.dfa_labels_[i]

  def set_dfa_labels(self, i, x):
    self.dfa_labels_[i] = x

  def add_dfa_labels(self, x):
    self.dfa_labels_.append(x)

  def clear_dfa_labels(self):
    self.dfa_labels_ = []

  def non_terminal_timerange(self): return self.non_terminal_timerange_

  def set_non_terminal_timerange(self, x):
    self.has_non_terminal_timerange_ = 1
    self.non_terminal_timerange_ = x

  def clear_non_terminal_timerange(self):
    self.has_non_terminal_timerange_ = 0
    self.non_terminal_timerange_ = 0

  def has_non_terminal_timerange(self): return self.has_non_terminal_timerange_

  def non_terminal_count(self): return self.non_terminal_count_

  def set_non_terminal_count(self, x):
    self.has_non_terminal_count_ = 1
    self.non_terminal_count_ = x

  def clear_non_terminal_count(self):
    self.has_non_terminal_count_ = 0
    self.non_terminal_count_ = 0

  def has_non_terminal_count(self): return self.has_non_terminal_count_

  def crypto404_info(self): return self.crypto404_info_

  def set_crypto404_info(self, x):
    self.has_crypto404_info_ = 1
    self.crypto404_info_ = x

  def clear_crypto404_info(self):
    self.has_crypto404_info_ = 0
    self.crypto404_info_ = 0

  def has_crypto404_info(self): return self.has_crypto404_info_

  def trace_size(self): return len(self.trace_)
  def trace_list(self): return self.trace_

  def trace(self, i):
    return self.trace_[i]

  def mutable_trace(self, i):
    return self.trace_[i]

  def add_trace(self):
    x = RTUpdate_PipelineInfoTrace()
    self.trace_.append(x)
    return x

  def clear_trace(self):
    self.trace_ = []
  def skipduringindexing(self): return self.skipduringindexing_

  def set_skipduringindexing(self, x):
    self.has_skipduringindexing_ = 1
    self.skipduringindexing_ = x

  def clear_skipduringindexing(self):
    self.has_skipduringindexing_ = 0
    self.skipduringindexing_ = 0

  def has_skipduringindexing(self): return self.has_skipduringindexing_

  def skipduringcollapse(self): return self.skipduringcollapse_

  def set_skipduringcollapse(self, x):
    self.has_skipduringcollapse_ = 1
    self.skipduringcollapse_ = x

  def clear_skipduringcollapse(self):
    self.has_skipduringcollapse_ = 0
    self.skipduringcollapse_ = 0

  def has_skipduringcollapse(self): return self.has_skipduringcollapse_

  def selectionoutput(self):
    if self.selectionoutput_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.selectionoutput_ is None: self.selectionoutput_ = IndexSelectionOutput()
      finally:
        self.lazy_init_lock_.release()
    return self.selectionoutput_

  def mutable_selectionoutput(self): self.has_selectionoutput_ = 1; return self.selectionoutput()

  def clear_selectionoutput(self):
    #Warning: this method does not acquire the lock.
    self.has_selectionoutput_ = 0;
    if self.selectionoutput_ is not None: self.selectionoutput_.Clear()

  def has_selectionoutput(self): return self.has_selectionoutput_

  def finallogicaltarget(self):
    if self.finallogicaltarget_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.finallogicaltarget_ is None: self.finallogicaltarget_ = LogicalTarget()
      finally:
        self.lazy_init_lock_.release()
    return self.finallogicaltarget_

  def mutable_finallogicaltarget(self): self.has_finallogicaltarget_ = 1; return self.finallogicaltarget()

  def clear_finallogicaltarget(self):
    #Warning: this method does not acquire the lock.
    self.has_finallogicaltarget_ = 0;
    if self.finallogicaltarget_ is not None: self.finallogicaltarget_.Clear()

  def has_finallogicaltarget(self): return self.has_finallogicaltarget_

  def firstcrawledtimestamp_deprecated(self): return self.firstcrawledtimestamp_deprecated_

  def set_firstcrawledtimestamp_deprecated(self, x):
    self.has_firstcrawledtimestamp_deprecated_ = 1
    self.firstcrawledtimestamp_deprecated_ = x

  def clear_firstcrawledtimestamp_deprecated(self):
    self.has_firstcrawledtimestamp_deprecated_ = 0
    self.firstcrawledtimestamp_deprecated_ = 0

  def has_firstcrawledtimestamp_deprecated(self): return self.has_firstcrawledtimestamp_deprecated_

  def isbouncepad(self): return self.isbouncepad_

  def set_isbouncepad(self, x):
    self.has_isbouncepad_ = 1
    self.isbouncepad_ = x

  def clear_isbouncepad(self):
    self.has_isbouncepad_ = 0
    self.isbouncepad_ = 0

  def has_isbouncepad(self): return self.has_isbouncepad_

  def targetfromtoolbar(self): return self.targetfromtoolbar_

  def set_targetfromtoolbar(self, x):
    self.has_targetfromtoolbar_ = 1
    self.targetfromtoolbar_ = x

  def clear_targetfromtoolbar(self):
    self.has_targetfromtoolbar_ = 0
    self.targetfromtoolbar_ = ""

  def has_targetfromtoolbar(self): return self.has_targetfromtoolbar_

  def penalizesources(self): return self.penalizesources_

  def set_penalizesources(self, x):
    self.has_penalizesources_ = 1
    self.penalizesources_ = x

  def clear_penalizesources(self):
    self.has_penalizesources_ = 0
    self.penalizesources_ = 0

  def has_penalizesources(self): return self.has_penalizesources_

  def ispenalizedsource(self): return self.ispenalizedsource_

  def set_ispenalizedsource(self, x):
    self.has_ispenalizedsource_ = 1
    self.ispenalizedsource_ = x

  def clear_ispenalizedsource(self):
    self.has_ispenalizedsource_ = 0
    self.ispenalizedsource_ = 0

  def has_ispenalizedsource(self): return self.has_ispenalizedsource_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_indexselectionscore_int32_deprecated()): self.set_indexselectionscore_int32_deprecated(x.indexselectionscore_int32_deprecated())
    for i in xrange(x.location_size()): self.add_location().CopyFrom(x.location(i))
    if (x.has_reused_from_repository()): self.set_reused_from_repository(x.reused_from_repository())
    if (x.has_rejectedby()): self.set_rejectedby(x.rejectedby())
    if (x.has_rejectedreason()): self.set_rejectedreason(x.rejectedreason())
    if (x.has_num_summaries()): self.set_num_summaries(x.num_summaries())
    if (x.has_num_permredirects()): self.set_num_permredirects(x.num_permredirects())
    if (x.has_retainedversion()): self.mutable_retainedversion().MergeFrom(x.retainedversion())
    for i in xrange(x.supercededversion_deprecated_size()): self.add_supercededversion_deprecated().CopyFrom(x.supercededversion_deprecated(i))
    for i in xrange(x.servingversions_size()): self.add_servingversions().CopyFrom(x.servingversions(i))
    for i in xrange(x.servingdupversions_size()): self.add_servingdupversions().CopyFrom(x.servingdupversions(i))
    if (x.has_pagerankbeforepromotion()): self.set_pagerankbeforepromotion(x.pagerankbeforepromotion())
    if (x.has_pageranknsbeforepromotion()): self.set_pageranknsbeforepromotion(x.pageranknsbeforepromotion())
    if (x.has_isapproximatepagerank()): self.set_isapproximatepagerank(x.isapproximatepagerank())
    if (x.has_isapproximatepagerank_ns()): self.set_isapproximatepagerank_ns(x.isapproximatepagerank_ns())
    if (x.has_approximatepagerank()): self.set_approximatepagerank(x.approximatepagerank())
    if (x.has_approximatepagerank_ns()): self.set_approximatepagerank_ns(x.approximatepagerank_ns())
    if (x.has_mangledrepid()): self.set_mangledrepid(x.mangledrepid())
    if (x.has_fresherrepid()): self.mutable_fresherrepid().MergeFrom(x.fresherrepid())
    for i in xrange(x.dupforwarding_deprecated_size()): self.add_dupforwarding_deprecated().CopyFrom(x.dupforwarding_deprecated(i))
    for i in xrange(x.alternatename_deprecated_size()): self.add_alternatename_deprecated().CopyFrom(x.alternatename_deprecated(i))
    for i in xrange(x.dupforwarding_size()): self.add_dupforwarding().CopyFrom(x.dupforwarding(i))
    for i in xrange(x.alternatename_size()): self.add_alternatename().CopyFrom(x.alternatename(i))
    for i in xrange(x.permredirects_size()): self.add_permredirects().CopyFrom(x.permredirects(i))
    if (x.has_canonicalurl()): self.set_canonicalurl(x.canonicalurl())
    if (x.has_canonicaldocid_deprecated()): self.set_canonicaldocid_deprecated(x.canonicaldocid_deprecated())
    if (x.has_previous_canonicalurl()): self.set_previous_canonicalurl(x.previous_canonicalurl())
    for i in xrange(x.canonical_in_indices_size()): self.add_canonical_in_indices(x.canonical_in_indices(i))
    if (x.has_finalcontentchecksum()): self.set_finalcontentchecksum(x.finalcontentchecksum())
    for i in xrange(x.indexselectionacceptingselectors_deprecated_size()): self.add_indexselectionacceptingselectors_deprecated(x.indexselectionacceptingselectors_deprecated(i))
    for i in xrange(x.indexselectionrejectingfilters_deprecated_size()): self.add_indexselectionrejectingfilters_deprecated(x.indexselectionrejectingfilters_deprecated(i))
    if (x.has_compressedlength()): self.set_compressedlength(x.compressedlength())
    if (x.has_sitestats()): self.mutable_sitestats().MergeFrom(x.sitestats())
    if (x.has_urlstats()): self.mutable_urlstats().MergeFrom(x.urlstats())
    if (x.has_hoststats()): self.mutable_hoststats().MergeFrom(x.hoststats())
    if (x.has_indexcoveragestats()): self.mutable_indexcoveragestats().MergeFrom(x.indexcoveragestats())
    if (x.has_indexselectionscore_double_deprecated()): self.set_indexselectionscore_double_deprecated(x.indexselectionscore_double_deprecated())
    if (x.has_diversity_guarantee_score()): self.set_diversity_guarantee_score(x.diversity_guarantee_score())
    if (x.has_indyrank_deprecated()): self.set_indyrank_deprecated(x.indyrank_deprecated())
    if (x.has_homepagepagerank()): self.set_homepagepagerank(x.homepagepagerank())
    if (x.has_homepagepagerankns()): self.set_homepagepagerankns(x.homepagepagerankns())
    if (x.has_foundinbarturlfpmap()): self.set_foundinbarturlfpmap(x.foundinbarturlfpmap())
    for i in xrange(x.globalfactors_deprecated_size()): self.add_globalfactors_deprecated().CopyFrom(x.globalfactors_deprecated(i))
    for i in xrange(x.indexspecificfactors_deprecated_size()): self.add_indexspecificfactors_deprecated().CopyFrom(x.indexspecificfactors_deprecated(i))
    if (x.has_historicalfactors()): self.mutable_historicalfactors().MergeFrom(x.historicalfactors())
    for i in xrange(x.reusetimestamp_size()): self.add_reusetimestamp(x.reusetimestamp(i))
    if (x.has_microrepmap()): self.mutable_microrepmap().MergeFrom(x.microrepmap())
    if (x.has_linkrecord()): self.mutable_linkrecord().MergeFrom(x.linkrecord())
    for i in xrange(x.dfa_labels_size()): self.add_dfa_labels(x.dfa_labels(i))
    if (x.has_non_terminal_timerange()): self.set_non_terminal_timerange(x.non_terminal_timerange())
    if (x.has_non_terminal_count()): self.set_non_terminal_count(x.non_terminal_count())
    if (x.has_crypto404_info()): self.set_crypto404_info(x.crypto404_info())
    for i in xrange(x.trace_size()): self.add_trace().CopyFrom(x.trace(i))
    if (x.has_skipduringindexing()): self.set_skipduringindexing(x.skipduringindexing())
    if (x.has_skipduringcollapse()): self.set_skipduringcollapse(x.skipduringcollapse())
    if (x.has_selectionoutput()): self.mutable_selectionoutput().MergeFrom(x.selectionoutput())
    if (x.has_finallogicaltarget()): self.mutable_finallogicaltarget().MergeFrom(x.finallogicaltarget())
    if (x.has_firstcrawledtimestamp_deprecated()): self.set_firstcrawledtimestamp_deprecated(x.firstcrawledtimestamp_deprecated())
    if (x.has_isbouncepad()): self.set_isbouncepad(x.isbouncepad())
    if (x.has_targetfromtoolbar()): self.set_targetfromtoolbar(x.targetfromtoolbar())
    if (x.has_penalizesources()): self.set_penalizesources(x.penalizesources())
    if (x.has_ispenalizedsource()): self.set_ispenalizedsource(x.ispenalizedsource())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_indexselectionscore_int32_deprecated_ != x.has_indexselectionscore_int32_deprecated_: return 0
    if self.has_indexselectionscore_int32_deprecated_ and self.indexselectionscore_int32_deprecated_ != x.indexselectionscore_int32_deprecated_: return 0
    if len(self.location_) != len(x.location_): return 0
    for e1, e2 in zip(self.location_, x.location_):
      if e1 != e2: return 0
    if self.has_reused_from_repository_ != x.has_reused_from_repository_: return 0
    if self.has_reused_from_repository_ and self.reused_from_repository_ != x.reused_from_repository_: return 0
    if self.has_rejectedby_ != x.has_rejectedby_: return 0
    if self.has_rejectedby_ and self.rejectedby_ != x.rejectedby_: return 0
    if self.has_rejectedreason_ != x.has_rejectedreason_: return 0
    if self.has_rejectedreason_ and self.rejectedreason_ != x.rejectedreason_: return 0
    if self.has_num_summaries_ != x.has_num_summaries_: return 0
    if self.has_num_summaries_ and self.num_summaries_ != x.num_summaries_: return 0
    if self.has_num_permredirects_ != x.has_num_permredirects_: return 0
    if self.has_num_permredirects_ and self.num_permredirects_ != x.num_permredirects_: return 0
    if self.has_retainedversion_ != x.has_retainedversion_: return 0
    if self.has_retainedversion_ and self.retainedversion_ != x.retainedversion_: return 0
    if len(self.supercededversion_deprecated_) != len(x.supercededversion_deprecated_): return 0
    for e1, e2 in zip(self.supercededversion_deprecated_, x.supercededversion_deprecated_):
      if e1 != e2: return 0
    if len(self.servingversions_) != len(x.servingversions_): return 0
    for e1, e2 in zip(self.servingversions_, x.servingversions_):
      if e1 != e2: return 0
    if len(self.servingdupversions_) != len(x.servingdupversions_): return 0
    for e1, e2 in zip(self.servingdupversions_, x.servingdupversions_):
      if e1 != e2: return 0
    if self.has_pagerankbeforepromotion_ != x.has_pagerankbeforepromotion_: return 0
    if self.has_pagerankbeforepromotion_ and self.pagerankbeforepromotion_ != x.pagerankbeforepromotion_: return 0
    if self.has_pageranknsbeforepromotion_ != x.has_pageranknsbeforepromotion_: return 0
    if self.has_pageranknsbeforepromotion_ and self.pageranknsbeforepromotion_ != x.pageranknsbeforepromotion_: return 0
    if self.has_isapproximatepagerank_ != x.has_isapproximatepagerank_: return 0
    if self.has_isapproximatepagerank_ and self.isapproximatepagerank_ != x.isapproximatepagerank_: return 0
    if self.has_isapproximatepagerank_ns_ != x.has_isapproximatepagerank_ns_: return 0
    if self.has_isapproximatepagerank_ns_ and self.isapproximatepagerank_ns_ != x.isapproximatepagerank_ns_: return 0
    if self.has_approximatepagerank_ != x.has_approximatepagerank_: return 0
    if self.has_approximatepagerank_ and self.approximatepagerank_ != x.approximatepagerank_: return 0
    if self.has_approximatepagerank_ns_ != x.has_approximatepagerank_ns_: return 0
    if self.has_approximatepagerank_ns_ and self.approximatepagerank_ns_ != x.approximatepagerank_ns_: return 0
    if self.has_mangledrepid_ != x.has_mangledrepid_: return 0
    if self.has_mangledrepid_ and self.mangledrepid_ != x.mangledrepid_: return 0
    if self.has_fresherrepid_ != x.has_fresherrepid_: return 0
    if self.has_fresherrepid_ and self.fresherrepid_ != x.fresherrepid_: return 0
    if len(self.dupforwarding_deprecated_) != len(x.dupforwarding_deprecated_): return 0
    for e1, e2 in zip(self.dupforwarding_deprecated_, x.dupforwarding_deprecated_):
      if e1 != e2: return 0
    if len(self.alternatename_deprecated_) != len(x.alternatename_deprecated_): return 0
    for e1, e2 in zip(self.alternatename_deprecated_, x.alternatename_deprecated_):
      if e1 != e2: return 0
    if len(self.dupforwarding_) != len(x.dupforwarding_): return 0
    for e1, e2 in zip(self.dupforwarding_, x.dupforwarding_):
      if e1 != e2: return 0
    if len(self.alternatename_) != len(x.alternatename_): return 0
    for e1, e2 in zip(self.alternatename_, x.alternatename_):
      if e1 != e2: return 0
    if len(self.permredirects_) != len(x.permredirects_): return 0
    for e1, e2 in zip(self.permredirects_, x.permredirects_):
      if e1 != e2: return 0
    if self.has_canonicalurl_ != x.has_canonicalurl_: return 0
    if self.has_canonicalurl_ and self.canonicalurl_ != x.canonicalurl_: return 0
    if self.has_canonicaldocid_deprecated_ != x.has_canonicaldocid_deprecated_: return 0
    if self.has_canonicaldocid_deprecated_ and self.canonicaldocid_deprecated_ != x.canonicaldocid_deprecated_: return 0
    if self.has_previous_canonicalurl_ != x.has_previous_canonicalurl_: return 0
    if self.has_previous_canonicalurl_ and self.previous_canonicalurl_ != x.previous_canonicalurl_: return 0
    if len(self.canonical_in_indices_) != len(x.canonical_in_indices_): return 0
    for e1, e2 in zip(self.canonical_in_indices_, x.canonical_in_indices_):
      if e1 != e2: return 0
    if self.has_finalcontentchecksum_ != x.has_finalcontentchecksum_: return 0
    if self.has_finalcontentchecksum_ and self.finalcontentchecksum_ != x.finalcontentchecksum_: return 0
    if len(self.indexselectionacceptingselectors_deprecated_) != len(x.indexselectionacceptingselectors_deprecated_): return 0
    for e1, e2 in zip(self.indexselectionacceptingselectors_deprecated_, x.indexselectionacceptingselectors_deprecated_):
      if e1 != e2: return 0
    if len(self.indexselectionrejectingfilters_deprecated_) != len(x.indexselectionrejectingfilters_deprecated_): return 0
    for e1, e2 in zip(self.indexselectionrejectingfilters_deprecated_, x.indexselectionrejectingfilters_deprecated_):
      if e1 != e2: return 0
    if self.has_compressedlength_ != x.has_compressedlength_: return 0
    if self.has_compressedlength_ and self.compressedlength_ != x.compressedlength_: return 0
    if self.has_sitestats_ != x.has_sitestats_: return 0
    if self.has_sitestats_ and self.sitestats_ != x.sitestats_: return 0
    if self.has_urlstats_ != x.has_urlstats_: return 0
    if self.has_urlstats_ and self.urlstats_ != x.urlstats_: return 0
    if self.has_hoststats_ != x.has_hoststats_: return 0
    if self.has_hoststats_ and self.hoststats_ != x.hoststats_: return 0
    if self.has_indexcoveragestats_ != x.has_indexcoveragestats_: return 0
    if self.has_indexcoveragestats_ and self.indexcoveragestats_ != x.indexcoveragestats_: return 0
    if self.has_indexselectionscore_double_deprecated_ != x.has_indexselectionscore_double_deprecated_: return 0
    if self.has_indexselectionscore_double_deprecated_ and self.indexselectionscore_double_deprecated_ != x.indexselectionscore_double_deprecated_: return 0
    if self.has_diversity_guarantee_score_ != x.has_diversity_guarantee_score_: return 0
    if self.has_diversity_guarantee_score_ and self.diversity_guarantee_score_ != x.diversity_guarantee_score_: return 0
    if self.has_indyrank_deprecated_ != x.has_indyrank_deprecated_: return 0
    if self.has_indyrank_deprecated_ and self.indyrank_deprecated_ != x.indyrank_deprecated_: return 0
    if self.has_homepagepagerank_ != x.has_homepagepagerank_: return 0
    if self.has_homepagepagerank_ and self.homepagepagerank_ != x.homepagepagerank_: return 0
    if self.has_homepagepagerankns_ != x.has_homepagepagerankns_: return 0
    if self.has_homepagepagerankns_ and self.homepagepagerankns_ != x.homepagepagerankns_: return 0
    if self.has_foundinbarturlfpmap_ != x.has_foundinbarturlfpmap_: return 0
    if self.has_foundinbarturlfpmap_ and self.foundinbarturlfpmap_ != x.foundinbarturlfpmap_: return 0
    if len(self.globalfactors_deprecated_) != len(x.globalfactors_deprecated_): return 0
    for e1, e2 in zip(self.globalfactors_deprecated_, x.globalfactors_deprecated_):
      if e1 != e2: return 0
    if len(self.indexspecificfactors_deprecated_) != len(x.indexspecificfactors_deprecated_): return 0
    for e1, e2 in zip(self.indexspecificfactors_deprecated_, x.indexspecificfactors_deprecated_):
      if e1 != e2: return 0
    if self.has_historicalfactors_ != x.has_historicalfactors_: return 0
    if self.has_historicalfactors_ and self.historicalfactors_ != x.historicalfactors_: return 0
    if len(self.reusetimestamp_) != len(x.reusetimestamp_): return 0
    for e1, e2 in zip(self.reusetimestamp_, x.reusetimestamp_):
      if e1 != e2: return 0
    if self.has_microrepmap_ != x.has_microrepmap_: return 0
    if self.has_microrepmap_ and self.microrepmap_ != x.microrepmap_: return 0
    if self.has_linkrecord_ != x.has_linkrecord_: return 0
    if self.has_linkrecord_ and self.linkrecord_ != x.linkrecord_: return 0
    if len(self.dfa_labels_) != len(x.dfa_labels_): return 0
    for e1, e2 in zip(self.dfa_labels_, x.dfa_labels_):
      if e1 != e2: return 0
    if self.has_non_terminal_timerange_ != x.has_non_terminal_timerange_: return 0
    if self.has_non_terminal_timerange_ and self.non_terminal_timerange_ != x.non_terminal_timerange_: return 0
    if self.has_non_terminal_count_ != x.has_non_terminal_count_: return 0
    if self.has_non_terminal_count_ and self.non_terminal_count_ != x.non_terminal_count_: return 0
    if self.has_crypto404_info_ != x.has_crypto404_info_: return 0
    if self.has_crypto404_info_ and self.crypto404_info_ != x.crypto404_info_: return 0
    if len(self.trace_) != len(x.trace_): return 0
    for e1, e2 in zip(self.trace_, x.trace_):
      if e1 != e2: return 0
    if self.has_skipduringindexing_ != x.has_skipduringindexing_: return 0
    if self.has_skipduringindexing_ and self.skipduringindexing_ != x.skipduringindexing_: return 0
    if self.has_skipduringcollapse_ != x.has_skipduringcollapse_: return 0
    if self.has_skipduringcollapse_ and self.skipduringcollapse_ != x.skipduringcollapse_: return 0
    if self.has_selectionoutput_ != x.has_selectionoutput_: return 0
    if self.has_selectionoutput_ and self.selectionoutput_ != x.selectionoutput_: return 0
    if self.has_finallogicaltarget_ != x.has_finallogicaltarget_: return 0
    if self.has_finallogicaltarget_ and self.finallogicaltarget_ != x.finallogicaltarget_: return 0
    if self.has_firstcrawledtimestamp_deprecated_ != x.has_firstcrawledtimestamp_deprecated_: return 0
    if self.has_firstcrawledtimestamp_deprecated_ and self.firstcrawledtimestamp_deprecated_ != x.firstcrawledtimestamp_deprecated_: return 0
    if self.has_isbouncepad_ != x.has_isbouncepad_: return 0
    if self.has_isbouncepad_ and self.isbouncepad_ != x.isbouncepad_: return 0
    if self.has_targetfromtoolbar_ != x.has_targetfromtoolbar_: return 0
    if self.has_targetfromtoolbar_ and self.targetfromtoolbar_ != x.targetfromtoolbar_: return 0
    if self.has_penalizesources_ != x.has_penalizesources_: return 0
    if self.has_penalizesources_ and self.penalizesources_ != x.penalizesources_: return 0
    if self.has_ispenalizedsource_ != x.has_ispenalizedsource_: return 0
    if self.has_ispenalizedsource_ and self.ispenalizedsource_ != x.ispenalizedsource_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.location_)):
      if (not self.location_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_retainedversion_ and not self.retainedversion_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.supercededversion_deprecated_)):
      if (not self.supercededversion_deprecated_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.servingversions_)):
      if (not self.servingversions_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.servingdupversions_)):
      if (not self.servingdupversions_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_fresherrepid_ and not self.fresherrepid_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.dupforwarding_deprecated_)):
      if (not self.dupforwarding_deprecated_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.alternatename_deprecated_)):
      if (not self.alternatename_deprecated_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.dupforwarding_)):
      if (not self.dupforwarding_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.alternatename_)):
      if (not self.alternatename_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.permredirects_)):
      if (not self.permredirects_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_sitestats_ and not self.sitestats_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_urlstats_ and not self.urlstats_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_hoststats_ and not self.hoststats_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_indexcoveragestats_ and not self.indexcoveragestats_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.globalfactors_deprecated_)):
      if (not self.globalfactors_deprecated_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.indexspecificfactors_deprecated_)):
      if (not self.indexspecificfactors_deprecated_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_historicalfactors_ and not self.historicalfactors_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_microrepmap_ and not self.microrepmap_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_linkrecord_ and not self.linkrecord_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.trace_)):
      if (not self.trace_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_selectionoutput_ and not self.selectionoutput_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_finallogicaltarget_ and not self.finallogicaltarget_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_indexselectionscore_int32_deprecated_): n += 2 + self.lengthVarInt64(self.indexselectionscore_int32_deprecated_)
    n += 2 * len(self.location_)
    for i in xrange(len(self.location_)): n += self.lengthString(self.location_[i].ByteSize())
    if (self.has_reused_from_repository_): n += 3
    if (self.has_rejectedby_): n += 2 + self.lengthVarInt64(self.rejectedby_)
    if (self.has_rejectedreason_): n += 2 + self.lengthVarInt64(self.rejectedreason_)
    if (self.has_num_summaries_): n += 2 + self.lengthVarInt64(self.num_summaries_)
    if (self.has_num_permredirects_): n += 2 + self.lengthVarInt64(self.num_permredirects_)
    if (self.has_retainedversion_): n += 2 + self.lengthString(self.retainedversion_.ByteSize())
    n += 2 * len(self.supercededversion_deprecated_)
    for i in xrange(len(self.supercededversion_deprecated_)): n += self.lengthString(self.supercededversion_deprecated_[i].ByteSize())
    n += 2 * len(self.servingversions_)
    for i in xrange(len(self.servingversions_)): n += self.lengthString(self.servingversions_[i].ByteSize())
    n += 2 * len(self.servingdupversions_)
    for i in xrange(len(self.servingdupversions_)): n += self.lengthString(self.servingdupversions_[i].ByteSize())
    if (self.has_pagerankbeforepromotion_): n += 2 + self.lengthVarInt64(self.pagerankbeforepromotion_)
    if (self.has_pageranknsbeforepromotion_): n += 2 + self.lengthVarInt64(self.pageranknsbeforepromotion_)
    if (self.has_isapproximatepagerank_): n += 3
    if (self.has_isapproximatepagerank_ns_): n += 3
    if (self.has_approximatepagerank_): n += 2 + self.lengthVarInt64(self.approximatepagerank_)
    if (self.has_approximatepagerank_ns_): n += 2 + self.lengthVarInt64(self.approximatepagerank_ns_)
    if (self.has_mangledrepid_): n += 2 + self.lengthString(len(self.mangledrepid_))
    if (self.has_fresherrepid_): n += 4 + self.fresherrepid_.ByteSize()
    n += 4 * len(self.dupforwarding_deprecated_)
    for i in xrange(len(self.dupforwarding_deprecated_)): n += self.dupforwarding_deprecated_[i].ByteSize()
    n += 4 * len(self.alternatename_deprecated_)
    for i in xrange(len(self.alternatename_deprecated_)): n += self.alternatename_deprecated_[i].ByteSize()
    n += 2 * len(self.dupforwarding_)
    for i in xrange(len(self.dupforwarding_)): n += self.lengthString(self.dupforwarding_[i].ByteSize())
    n += 2 * len(self.alternatename_)
    for i in xrange(len(self.alternatename_)): n += self.lengthString(self.alternatename_[i].ByteSize())
    n += 2 * len(self.permredirects_)
    for i in xrange(len(self.permredirects_)): n += self.lengthString(self.permredirects_[i].ByteSize())
    if (self.has_canonicalurl_): n += 2 + self.lengthString(len(self.canonicalurl_))
    if (self.has_canonicaldocid_deprecated_): n += 10
    if (self.has_previous_canonicalurl_): n += 2 + self.lengthString(len(self.previous_canonicalurl_))
    n += 2 * len(self.canonical_in_indices_)
    for i in xrange(len(self.canonical_in_indices_)): n += self.lengthVarInt64(self.canonical_in_indices_[i])
    if (self.has_finalcontentchecksum_): n += 10
    n += 2 * len(self.indexselectionacceptingselectors_deprecated_)
    for i in xrange(len(self.indexselectionacceptingselectors_deprecated_)): n += self.lengthVarInt64(self.indexselectionacceptingselectors_deprecated_[i])
    n += 2 * len(self.indexselectionrejectingfilters_deprecated_)
    for i in xrange(len(self.indexselectionrejectingfilters_deprecated_)): n += self.lengthVarInt64(self.indexselectionrejectingfilters_deprecated_[i])
    if (self.has_compressedlength_): n += 2 + self.lengthVarInt64(self.compressedlength_)
    if (self.has_sitestats_): n += 2 + self.lengthString(self.sitestats_.ByteSize())
    if (self.has_urlstats_): n += 2 + self.lengthString(self.urlstats_.ByteSize())
    if (self.has_hoststats_): n += 2 + self.lengthString(self.hoststats_.ByteSize())
    if (self.has_indexcoveragestats_): n += 4 + self.indexcoveragestats_.ByteSize()
    if (self.has_indexselectionscore_double_deprecated_): n += 10
    if (self.has_diversity_guarantee_score_): n += 2 + self.lengthVarInt64(self.diversity_guarantee_score_)
    if (self.has_indyrank_deprecated_): n += 2 + self.lengthVarInt64(self.indyrank_deprecated_)
    if (self.has_homepagepagerank_): n += 2 + self.lengthVarInt64(self.homepagepagerank_)
    if (self.has_homepagepagerankns_): n += 2 + self.lengthVarInt64(self.homepagepagerankns_)
    if (self.has_foundinbarturlfpmap_): n += 3
    n += 2 * len(self.globalfactors_deprecated_)
    for i in xrange(len(self.globalfactors_deprecated_)): n += self.lengthString(self.globalfactors_deprecated_[i].ByteSize())
    n += 4 * len(self.indexspecificfactors_deprecated_)
    for i in xrange(len(self.indexspecificfactors_deprecated_)): n += self.indexspecificfactors_deprecated_[i].ByteSize()
    if (self.has_historicalfactors_): n += 2 + self.lengthString(self.historicalfactors_.ByteSize())
    n += 2 * len(self.reusetimestamp_)
    for i in xrange(len(self.reusetimestamp_)): n += self.lengthVarInt64(self.reusetimestamp_[i])
    if (self.has_microrepmap_): n += 2 + self.lengthString(self.microrepmap_.ByteSize())
    if (self.has_linkrecord_): n += 2 + self.lengthString(self.linkrecord_.ByteSize())
    n += 2 * len(self.dfa_labels_)
    for i in xrange(len(self.dfa_labels_)): n += self.lengthString(len(self.dfa_labels_[i]))
    if (self.has_non_terminal_timerange_): n += 2 + self.lengthVarInt64(self.non_terminal_timerange_)
    if (self.has_non_terminal_count_): n += 2 + self.lengthVarInt64(self.non_terminal_count_)
    if (self.has_crypto404_info_): n += 2 + self.lengthVarInt64(self.crypto404_info_)
    n += 4 * len(self.trace_)
    for i in xrange(len(self.trace_)): n += self.trace_[i].ByteSize()
    if (self.has_skipduringindexing_): n += 3
    if (self.has_skipduringcollapse_): n += 3
    if (self.has_selectionoutput_): n += 2 + self.lengthString(self.selectionoutput_.ByteSize())
    if (self.has_finallogicaltarget_): n += 2 + self.lengthString(self.finallogicaltarget_.ByteSize())
    if (self.has_firstcrawledtimestamp_deprecated_): n += 2 + self.lengthVarInt64(self.firstcrawledtimestamp_deprecated_)
    if (self.has_isbouncepad_): n += 3
    if (self.has_targetfromtoolbar_): n += 2 + self.lengthString(len(self.targetfromtoolbar_))
    if (self.has_penalizesources_): n += 3
    if (self.has_ispenalizedsource_): n += 3
    return n + 0

  def Clear(self):
    self.clear_indexselectionscore_int32_deprecated()
    self.clear_location()
    self.clear_reused_from_repository()
    self.clear_rejectedby()
    self.clear_rejectedreason()
    self.clear_num_summaries()
    self.clear_num_permredirects()
    self.clear_retainedversion()
    self.clear_supercededversion_deprecated()
    self.clear_servingversions()
    self.clear_servingdupversions()
    self.clear_pagerankbeforepromotion()
    self.clear_pageranknsbeforepromotion()
    self.clear_isapproximatepagerank()
    self.clear_isapproximatepagerank_ns()
    self.clear_approximatepagerank()
    self.clear_approximatepagerank_ns()
    self.clear_mangledrepid()
    self.clear_fresherrepid()
    self.clear_dupforwarding_deprecated()
    self.clear_alternatename_deprecated()
    self.clear_dupforwarding()
    self.clear_alternatename()
    self.clear_permredirects()
    self.clear_canonicalurl()
    self.clear_canonicaldocid_deprecated()
    self.clear_previous_canonicalurl()
    self.clear_canonical_in_indices()
    self.clear_finalcontentchecksum()
    self.clear_indexselectionacceptingselectors_deprecated()
    self.clear_indexselectionrejectingfilters_deprecated()
    self.clear_compressedlength()
    self.clear_sitestats()
    self.clear_urlstats()
    self.clear_hoststats()
    self.clear_indexcoveragestats()
    self.clear_indexselectionscore_double_deprecated()
    self.clear_diversity_guarantee_score()
    self.clear_indyrank_deprecated()
    self.clear_homepagepagerank()
    self.clear_homepagepagerankns()
    self.clear_foundinbarturlfpmap()
    self.clear_globalfactors_deprecated()
    self.clear_indexspecificfactors_deprecated()
    self.clear_historicalfactors()
    self.clear_reusetimestamp()
    self.clear_microrepmap()
    self.clear_linkrecord()
    self.clear_dfa_labels()
    self.clear_non_terminal_timerange()
    self.clear_non_terminal_count()
    self.clear_crypto404_info()
    self.clear_trace()
    self.clear_skipduringindexing()
    self.clear_skipduringcollapse()
    self.clear_selectionoutput()
    self.clear_finallogicaltarget()
    self.clear_firstcrawledtimestamp_deprecated()
    self.clear_isbouncepad()
    self.clear_targetfromtoolbar()
    self.clear_penalizesources()
    self.clear_ispenalizedsource()

  def OutputUnchecked(self, out):
    if (self.has_fresherrepid_):
      out.putVarInt32(835)
      self.fresherrepid_.OutputUnchecked(out)
      out.putVarInt32(836)
    if (self.has_num_summaries_):
      out.putVarInt32(1008)
      out.putVarInt32(self.num_summaries_)
    if (self.has_num_permredirects_):
      out.putVarInt32(1016)
      out.putVarInt32(self.num_permredirects_)
    if (self.has_indexselectionscore_int32_deprecated_):
      out.putVarInt32(1312)
      out.putVarInt32(self.indexselectionscore_int32_deprecated_)
    for i in xrange(len(self.location_)):
      out.putVarInt32(1370)
      out.putVarInt32(self.location_[i].ByteSize())
      self.location_[i].OutputUnchecked(out)
    if (self.has_rejectedby_):
      out.putVarInt32(1376)
      out.putVarInt32(self.rejectedby_)
    if (self.has_rejectedreason_):
      out.putVarInt32(1384)
      out.putVarInt32(self.rejectedreason_)
    if (self.has_retainedversion_):
      out.putVarInt32(1394)
      out.putVarInt32(self.retainedversion_.ByteSize())
      self.retainedversion_.OutputUnchecked(out)
    for i in xrange(len(self.supercededversion_deprecated_)):
      out.putVarInt32(1402)
      out.putVarInt32(self.supercededversion_deprecated_[i].ByteSize())
      self.supercededversion_deprecated_[i].OutputUnchecked(out)
    if (self.has_canonicaldocid_deprecated_):
      out.putVarInt32(1409)
      out.put64(self.canonicaldocid_deprecated_)
    if (self.has_finalcontentchecksum_):
      out.putVarInt32(1417)
      out.put64(self.finalcontentchecksum_)
    for i in xrange(len(self.indexselectionacceptingselectors_deprecated_)):
      out.putVarInt32(1424)
      out.putVarInt32(self.indexselectionacceptingselectors_deprecated_[i])
    if (self.has_compressedlength_):
      out.putVarInt32(1432)
      out.putVarInt64(self.compressedlength_)
    if (self.has_pagerankbeforepromotion_):
      out.putVarInt32(1440)
      out.putVarInt32(self.pagerankbeforepromotion_)
    for i in xrange(len(self.dupforwarding_deprecated_)):
      out.putVarInt32(1451)
      self.dupforwarding_deprecated_[i].OutputUnchecked(out)
      out.putVarInt32(1452)
    for i in xrange(len(self.servingversions_)):
      out.putVarInt32(1498)
      out.putVarInt32(self.servingversions_[i].ByteSize())
      self.servingversions_[i].OutputUnchecked(out)
    for i in xrange(len(self.servingdupversions_)):
      out.putVarInt32(1506)
      out.putVarInt32(self.servingdupversions_[i].ByteSize())
      self.servingdupversions_[i].OutputUnchecked(out)
    if (self.has_sitestats_):
      out.putVarInt32(1530)
      out.putVarInt32(self.sitestats_.ByteSize())
      self.sitestats_.OutputUnchecked(out)
    if (self.has_urlstats_):
      out.putVarInt32(1538)
      out.putVarInt32(self.urlstats_.ByteSize())
      self.urlstats_.OutputUnchecked(out)
    if (self.has_indexselectionscore_double_deprecated_):
      out.putVarInt32(1545)
      out.putDouble(self.indexselectionscore_double_deprecated_)
    for i in xrange(len(self.indexselectionrejectingfilters_deprecated_)):
      out.putVarInt32(1552)
      out.putVarInt32(self.indexselectionrejectingfilters_deprecated_[i])
    if (self.has_reused_from_repository_):
      out.putVarInt32(1560)
      out.putBoolean(self.reused_from_repository_)
    if (self.has_indyrank_deprecated_):
      out.putVarInt32(1568)
      out.putVarInt32(self.indyrank_deprecated_)
    if (self.has_canonicalurl_):
      out.putVarInt32(1578)
      out.putPrefixedString(self.canonicalurl_)
    if (self.has_homepagepagerank_):
      out.putVarInt32(1584)
      out.putVarInt32(self.homepagepagerank_)
    if (self.has_foundinbarturlfpmap_):
      out.putVarInt32(1592)
      out.putBoolean(self.foundinbarturlfpmap_)
    for i in xrange(len(self.reusetimestamp_)):
      out.putVarInt32(1624)
      out.putVarInt32(self.reusetimestamp_[i])
    for i in xrange(len(self.globalfactors_deprecated_)):
      out.putVarInt32(1634)
      out.putVarInt32(self.globalfactors_deprecated_[i].ByteSize())
      self.globalfactors_deprecated_[i].OutputUnchecked(out)
    for i in xrange(len(self.indexspecificfactors_deprecated_)):
      out.putVarInt32(1643)
      self.indexspecificfactors_deprecated_[i].OutputUnchecked(out)
      out.putVarInt32(1644)
    for i in xrange(len(self.canonical_in_indices_)):
      out.putVarInt32(1672)
      out.putVarInt32(self.canonical_in_indices_[i])
    if (self.has_microrepmap_):
      out.putVarInt32(1690)
      out.putVarInt32(self.microrepmap_.ByteSize())
      self.microrepmap_.OutputUnchecked(out)
    for i in xrange(len(self.alternatename_deprecated_)):
      out.putVarInt32(1699)
      self.alternatename_deprecated_[i].OutputUnchecked(out)
      out.putVarInt32(1700)
    if (self.has_mangledrepid_):
      out.putVarInt32(1722)
      out.putPrefixedString(self.mangledrepid_)
    for i in xrange(len(self.dupforwarding_)):
      out.putVarInt32(1730)
      out.putVarInt32(self.dupforwarding_[i].ByteSize())
      self.dupforwarding_[i].OutputUnchecked(out)
    for i in xrange(len(self.alternatename_)):
      out.putVarInt32(1738)
      out.putVarInt32(self.alternatename_[i].ByteSize())
      self.alternatename_[i].OutputUnchecked(out)
    for i in xrange(len(self.permredirects_)):
      out.putVarInt32(1746)
      out.putVarInt32(self.permredirects_[i].ByteSize())
      self.permredirects_[i].OutputUnchecked(out)
    if (self.has_isapproximatepagerank_):
      out.putVarInt32(1752)
      out.putBoolean(self.isapproximatepagerank_)
    for i in xrange(len(self.dfa_labels_)):
      out.putVarInt32(1794)
      out.putPrefixedString(self.dfa_labels_[i])
    if (self.has_non_terminal_timerange_):
      out.putVarInt32(1824)
      out.putVarInt32(self.non_terminal_timerange_)
    if (self.has_non_terminal_count_):
      out.putVarInt32(1832)
      out.putVarInt32(self.non_terminal_count_)
    if (self.has_approximatepagerank_):
      out.putVarInt32(1856)
      out.putVarInt32(self.approximatepagerank_)
    if (self.has_historicalfactors_):
      out.putVarInt32(1866)
      out.putVarInt32(self.historicalfactors_.ByteSize())
      self.historicalfactors_.OutputUnchecked(out)
    if (self.has_hoststats_):
      out.putVarInt32(1874)
      out.putVarInt32(self.hoststats_.ByteSize())
      self.hoststats_.OutputUnchecked(out)
    for i in xrange(len(self.trace_)):
      out.putVarInt32(1923)
      self.trace_[i].OutputUnchecked(out)
      out.putVarInt32(1924)
    if (self.has_previous_canonicalurl_):
      out.putVarInt32(2002)
      out.putPrefixedString(self.previous_canonicalurl_)
    if (self.has_skipduringindexing_):
      out.putVarInt32(2016)
      out.putBoolean(self.skipduringindexing_)
    if (self.has_skipduringcollapse_):
      out.putVarInt32(2024)
      out.putBoolean(self.skipduringcollapse_)
    if (self.has_crypto404_info_):
      out.putVarInt32(2104)
      out.putVarInt32(self.crypto404_info_)
    if (self.has_diversity_guarantee_score_):
      out.putVarInt32(2112)
      out.putVarInt32(self.diversity_guarantee_score_)
    if (self.has_selectionoutput_):
      out.putVarInt32(2138)
      out.putVarInt32(self.selectionoutput_.ByteSize())
      self.selectionoutput_.OutputUnchecked(out)
    if (self.has_indexcoveragestats_):
      out.putVarInt32(2203)
      self.indexcoveragestats_.OutputUnchecked(out)
      out.putVarInt32(2204)
    if (self.has_finallogicaltarget_):
      out.putVarInt32(2266)
      out.putVarInt32(self.finallogicaltarget_.ByteSize())
      self.finallogicaltarget_.OutputUnchecked(out)
    if (self.has_firstcrawledtimestamp_deprecated_):
      out.putVarInt32(2312)
      out.putVarInt64(self.firstcrawledtimestamp_deprecated_)
    if (self.has_pageranknsbeforepromotion_):
      out.putVarInt32(2352)
      out.putVarInt32(self.pageranknsbeforepromotion_)
    if (self.has_linkrecord_):
      out.putVarInt32(2362)
      out.putVarInt32(self.linkrecord_.ByteSize())
      self.linkrecord_.OutputUnchecked(out)
    if (self.has_homepagepagerankns_):
      out.putVarInt32(2384)
      out.putVarInt32(self.homepagepagerankns_)
    if (self.has_isapproximatepagerank_ns_):
      out.putVarInt32(2552)
      out.putBoolean(self.isapproximatepagerank_ns_)
    if (self.has_approximatepagerank_ns_):
      out.putVarInt32(2560)
      out.putVarInt32(self.approximatepagerank_ns_)
    if (self.has_isbouncepad_):
      out.putVarInt32(2568)
      out.putBoolean(self.isbouncepad_)
    if (self.has_targetfromtoolbar_):
      out.putVarInt32(2586)
      out.putPrefixedString(self.targetfromtoolbar_)
    if (self.has_penalizesources_):
      out.putVarInt32(2592)
      out.putBoolean(self.penalizesources_)
    if (self.has_ispenalizedsource_):
      out.putVarInt32(2600)
      out.putBoolean(self.ispenalizedsource_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1364: break
      if tt == 835:
        self.mutable_fresherrepid().TryMerge(d)
        continue
      if tt == 1008:
        self.set_num_summaries(d.getVarInt32())
        continue
      if tt == 1016:
        self.set_num_permredirects(d.getVarInt32())
        continue
      if tt == 1312:
        self.set_indexselectionscore_int32_deprecated(d.getVarInt32())
        continue
      if tt == 1370:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_location().TryMerge(tmp)
        continue
      if tt == 1376:
        self.set_rejectedby(d.getVarInt32())
        continue
      if tt == 1384:
        self.set_rejectedreason(d.getVarInt32())
        continue
      if tt == 1394:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_retainedversion().TryMerge(tmp)
        continue
      if tt == 1402:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_supercededversion_deprecated().TryMerge(tmp)
        continue
      if tt == 1409:
        self.set_canonicaldocid_deprecated(d.get64())
        continue
      if tt == 1417:
        self.set_finalcontentchecksum(d.get64())
        continue
      if tt == 1424:
        self.add_indexselectionacceptingselectors_deprecated(d.getVarInt32())
        continue
      if tt == 1432:
        self.set_compressedlength(d.getVarInt64())
        continue
      if tt == 1440:
        self.set_pagerankbeforepromotion(d.getVarInt32())
        continue
      if tt == 1451:
        self.add_dupforwarding_deprecated().TryMerge(d)
        continue
      if tt == 1498:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_servingversions().TryMerge(tmp)
        continue
      if tt == 1506:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_servingdupversions().TryMerge(tmp)
        continue
      if tt == 1530:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_sitestats().TryMerge(tmp)
        continue
      if tt == 1538:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_urlstats().TryMerge(tmp)
        continue
      if tt == 1545:
        self.set_indexselectionscore_double_deprecated(d.getDouble())
        continue
      if tt == 1552:
        self.add_indexselectionrejectingfilters_deprecated(d.getVarInt32())
        continue
      if tt == 1560:
        self.set_reused_from_repository(d.getBoolean())
        continue
      if tt == 1568:
        self.set_indyrank_deprecated(d.getVarInt32())
        continue
      if tt == 1578:
        self.set_canonicalurl(d.getPrefixedString())
        continue
      if tt == 1584:
        self.set_homepagepagerank(d.getVarInt32())
        continue
      if tt == 1592:
        self.set_foundinbarturlfpmap(d.getBoolean())
        continue
      if tt == 1624:
        self.add_reusetimestamp(d.getVarInt32())
        continue
      if tt == 1634:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_globalfactors_deprecated().TryMerge(tmp)
        continue
      if tt == 1643:
        self.add_indexspecificfactors_deprecated().TryMerge(d)
        continue
      if tt == 1672:
        self.add_canonical_in_indices(d.getVarInt32())
        continue
      if tt == 1690:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_microrepmap().TryMerge(tmp)
        continue
      if tt == 1699:
        self.add_alternatename_deprecated().TryMerge(d)
        continue
      if tt == 1722:
        self.set_mangledrepid(d.getPrefixedString())
        continue
      if tt == 1730:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_dupforwarding().TryMerge(tmp)
        continue
      if tt == 1738:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_alternatename().TryMerge(tmp)
        continue
      if tt == 1746:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_permredirects().TryMerge(tmp)
        continue
      if tt == 1752:
        self.set_isapproximatepagerank(d.getBoolean())
        continue
      if tt == 1794:
        self.add_dfa_labels(d.getPrefixedString())
        continue
      if tt == 1824:
        self.set_non_terminal_timerange(d.getVarInt32())
        continue
      if tt == 1832:
        self.set_non_terminal_count(d.getVarInt32())
        continue
      if tt == 1856:
        self.set_approximatepagerank(d.getVarInt32())
        continue
      if tt == 1866:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_historicalfactors().TryMerge(tmp)
        continue
      if tt == 1874:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_hoststats().TryMerge(tmp)
        continue
      if tt == 1923:
        self.add_trace().TryMerge(d)
        continue
      if tt == 2002:
        self.set_previous_canonicalurl(d.getPrefixedString())
        continue
      if tt == 2016:
        self.set_skipduringindexing(d.getBoolean())
        continue
      if tt == 2024:
        self.set_skipduringcollapse(d.getBoolean())
        continue
      if tt == 2104:
        self.set_crypto404_info(d.getVarInt32())
        continue
      if tt == 2112:
        self.set_diversity_guarantee_score(d.getVarInt32())
        continue
      if tt == 2138:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_selectionoutput().TryMerge(tmp)
        continue
      if tt == 2203:
        self.mutable_indexcoveragestats().TryMerge(d)
        continue
      if tt == 2266:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_finallogicaltarget().TryMerge(tmp)
        continue
      if tt == 2312:
        self.set_firstcrawledtimestamp_deprecated(d.getVarInt64())
        continue
      if tt == 2352:
        self.set_pageranknsbeforepromotion(d.getVarInt32())
        continue
      if tt == 2362:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_linkrecord().TryMerge(tmp)
        continue
      if tt == 2384:
        self.set_homepagepagerankns(d.getVarInt32())
        continue
      if tt == 2552:
        self.set_isapproximatepagerank_ns(d.getBoolean())
        continue
      if tt == 2560:
        self.set_approximatepagerank_ns(d.getVarInt32())
        continue
      if tt == 2568:
        self.set_isbouncepad(d.getBoolean())
        continue
      if tt == 2586:
        self.set_targetfromtoolbar(d.getPrefixedString())
        continue
      if tt == 2592:
        self.set_penalizesources(d.getBoolean())
        continue
      if tt == 2600:
        self.set_ispenalizedsource(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_indexselectionscore_int32_deprecated_: res+=prefix+("IndexSelectionScore_int32_DEPRECATED: %s\n" % self.DebugFormatInt32(self.indexselectionscore_int32_deprecated_))
    cnt=0
    for e in self.location_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Location%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_reused_from_repository_: res+=prefix+("Reused_From_Repository: %s\n" % self.DebugFormatBool(self.reused_from_repository_))
    if self.has_rejectedby_: res+=prefix+("RejectedBy: %s\n" % self.DebugFormatInt32(self.rejectedby_))
    if self.has_rejectedreason_: res+=prefix+("RejectedReason: %s\n" % self.DebugFormatInt32(self.rejectedreason_))
    if self.has_num_summaries_: res+=prefix+("num_summaries: %s\n" % self.DebugFormatInt32(self.num_summaries_))
    if self.has_num_permredirects_: res+=prefix+("num_permredirects: %s\n" % self.DebugFormatInt32(self.num_permredirects_))
    if self.has_retainedversion_:
      res+=prefix+"RetainedVersion <\n"
      res+=self.retainedversion_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    cnt=0
    for e in self.supercededversion_deprecated_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("SupercededVersion_DEPRECATED%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.servingversions_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("ServingVersions%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.servingdupversions_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("ServingDupVersions%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_pagerankbeforepromotion_: res+=prefix+("PagerankBeforePromotion: %s\n" % self.DebugFormatInt32(self.pagerankbeforepromotion_))
    if self.has_pageranknsbeforepromotion_: res+=prefix+("PagerankNSBeforePromotion: %s\n" % self.DebugFormatInt32(self.pageranknsbeforepromotion_))
    if self.has_isapproximatepagerank_: res+=prefix+("IsApproximatePagerank: %s\n" % self.DebugFormatBool(self.isapproximatepagerank_))
    if self.has_isapproximatepagerank_ns_: res+=prefix+("IsApproximatePagerank_NS: %s\n" % self.DebugFormatBool(self.isapproximatepagerank_ns_))
    if self.has_approximatepagerank_: res+=prefix+("ApproximatePagerank: %s\n" % self.DebugFormatInt32(self.approximatepagerank_))
    if self.has_approximatepagerank_ns_: res+=prefix+("ApproximatePagerank_NS: %s\n" % self.DebugFormatInt32(self.approximatepagerank_ns_))
    if self.has_mangledrepid_: res+=prefix+("MangledRepId: %s\n" % self.DebugFormatString(self.mangledrepid_))
    if self.has_fresherrepid_:
      res+=prefix+"FresherRepId {\n"
      res+=self.fresherrepid_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    cnt=0
    for e in self.dupforwarding_deprecated_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DupForwarding_DEPRECATED%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.alternatename_deprecated_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("AlternateName_DEPRECATED%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.dupforwarding_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DupForwarding%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.alternatename_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("AlternateName%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.permredirects_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("PermRedirects%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_canonicalurl_: res+=prefix+("CanonicalUrl: %s\n" % self.DebugFormatString(self.canonicalurl_))
    if self.has_canonicaldocid_deprecated_: res+=prefix+("CanonicalDocid_DEPRECATED: %s\n" % self.DebugFormatFixed64(self.canonicaldocid_deprecated_))
    if self.has_previous_canonicalurl_: res+=prefix+("Previous_CanonicalUrl: %s\n" % self.DebugFormatString(self.previous_canonicalurl_))
    cnt=0
    for e in self.canonical_in_indices_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Canonical_In_Indices%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    if self.has_finalcontentchecksum_: res+=prefix+("FinalContentChecksum: %s\n" % self.DebugFormatFixed64(self.finalcontentchecksum_))
    cnt=0
    for e in self.indexselectionacceptingselectors_deprecated_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("IndexSelectionAcceptingSelectors_DEPRECATED%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    cnt=0
    for e in self.indexselectionrejectingfilters_deprecated_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("IndexSelectionRejectingFilters_DEPRECATED%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    if self.has_compressedlength_: res+=prefix+("CompressedLength: %s\n" % self.DebugFormatInt64(self.compressedlength_))
    if self.has_sitestats_:
      res+=prefix+"SiteStats <\n"
      res+=self.sitestats_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_urlstats_:
      res+=prefix+"URLStats <\n"
      res+=self.urlstats_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_hoststats_:
      res+=prefix+"HostStats <\n"
      res+=self.hoststats_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_indexcoveragestats_:
      res+=prefix+"IndexCoverageStats {\n"
      res+=self.indexcoveragestats_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_indexselectionscore_double_deprecated_: res+=prefix+("IndexSelectionScore_double_DEPRECATED: %s\n" % self.DebugFormat(self.indexselectionscore_double_deprecated_))
    if self.has_diversity_guarantee_score_: res+=prefix+("Diversity_Guarantee_Score: %s\n" % self.DebugFormatInt32(self.diversity_guarantee_score_))
    if self.has_indyrank_deprecated_: res+=prefix+("IndyRank_DEPRECATED: %s\n" % self.DebugFormatInt32(self.indyrank_deprecated_))
    if self.has_homepagepagerank_: res+=prefix+("HomePagePageRank: %s\n" % self.DebugFormatInt32(self.homepagepagerank_))
    if self.has_homepagepagerankns_: res+=prefix+("HomePagePageRankNS: %s\n" % self.DebugFormatInt32(self.homepagepagerankns_))
    if self.has_foundinbarturlfpmap_: res+=prefix+("FoundInBartUrlFpMap: %s\n" % self.DebugFormatBool(self.foundinbarturlfpmap_))
    cnt=0
    for e in self.globalfactors_deprecated_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("GlobalFactors_DEPRECATED%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.indexspecificfactors_deprecated_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("IndexSpecificFactors_DEPRECATED%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_historicalfactors_:
      res+=prefix+"HistoricalFactors <\n"
      res+=self.historicalfactors_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    cnt=0
    for e in self.reusetimestamp_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("ReuseTimestamp%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    if self.has_microrepmap_:
      res+=prefix+"MicroRepmap <\n"
      res+=self.microrepmap_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_linkrecord_:
      res+=prefix+"LinkRecord <\n"
      res+=self.linkrecord_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    cnt=0
    for e in self.dfa_labels_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DFA_Labels%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_non_terminal_timerange_: res+=prefix+("non_terminal_timerange: %s\n" % self.DebugFormatInt32(self.non_terminal_timerange_))
    if self.has_non_terminal_count_: res+=prefix+("non_terminal_count: %s\n" % self.DebugFormatInt32(self.non_terminal_count_))
    if self.has_crypto404_info_: res+=prefix+("crypto404_info: %s\n" % self.DebugFormatInt32(self.crypto404_info_))
    cnt=0
    for e in self.trace_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Trace%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_skipduringindexing_: res+=prefix+("SkipDuringIndexing: %s\n" % self.DebugFormatBool(self.skipduringindexing_))
    if self.has_skipduringcollapse_: res+=prefix+("SkipDuringCollapse: %s\n" % self.DebugFormatBool(self.skipduringcollapse_))
    if self.has_selectionoutput_:
      res+=prefix+"SelectionOutput <\n"
      res+=self.selectionoutput_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_finallogicaltarget_:
      res+=prefix+"FinalLogicalTarget <\n"
      res+=self.finallogicaltarget_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_firstcrawledtimestamp_deprecated_: res+=prefix+("FirstCrawledTimestamp_DEPRECATED: %s\n" % self.DebugFormatInt64(self.firstcrawledtimestamp_deprecated_))
    if self.has_isbouncepad_: res+=prefix+("IsBouncepad: %s\n" % self.DebugFormatBool(self.isbouncepad_))
    if self.has_targetfromtoolbar_: res+=prefix+("TargetFromToolbar: %s\n" % self.DebugFormatString(self.targetfromtoolbar_))
    if self.has_penalizesources_: res+=prefix+("PenalizeSources: %s\n" % self.DebugFormatBool(self.penalizesources_))
    if self.has_ispenalizedsource_: res+=prefix+("IsPenalizedSource: %s\n" % self.DebugFormatBool(self.ispenalizedsource_))
    return res

class RTUpdate(ProtocolBuffer.ProtocolMessage):

  COLLECTION_RESTRICT =    0 
  SEKURE_RESTRICT =    1 

  _RestrictTypeEnum_NAMES = {
    0: "COLLECTION_RESTRICT",
    1: "SEKURE_RESTRICT",
  }

  def RestrictTypeEnum_Name(cls, x): return cls._RestrictTypeEnum_NAMES.get(x, "")
  RestrictTypeEnum_Name = classmethod(RestrictTypeEnum_Name)


  ANCHOR_INDEXED =    0 
  ANCHOR_RAW   =    1 
  ANCHOR_INDEXED_AND_RAW =    2 
  NUM_RESPONSE_ANCHOR_DATA_TYPES =    3 

  _RespAnchorDataType_NAMES = {
    0: "ANCHOR_INDEXED",
    1: "ANCHOR_RAW",
    2: "ANCHOR_INDEXED_AND_RAW",
    3: "NUM_RESPONSE_ANCHOR_DATA_TYPES",
  }

  def RespAnchorDataType_Name(cls, x): return cls._RespAnchorDataType_NAMES.get(x, "")
  RespAnchorDataType_Name = classmethod(RespAnchorDataType_Name)

  def __init__(self, contents=None):
    self.doc_ = []
    self.deletedoc_ = []
    self.data_ = []
    self.link_ = []
    self.anchor_ = []
    self.urlhistoryupdate_ = []
    self.rtduphistoryupdate_ = []
    self.datarequest_ = []
    self.requestmarker_ = ""
    self.flush_ = 0
    self.epochmarker_ = 0
    self.epochdelete_ = []
    self.epochdiscard_ = 0
    self.heartbeat_ = []
    self.restrictupdate_ = []
    self.anchorreload_ = 0
    self.viewstamp_ = None
    self.contentmanager_ = None
    self.pipelineinfo_ = None
    self.has_requestmarker_ = 0
    self.has_flush_ = 0
    self.has_epochmarker_ = 0
    self.has_epochdiscard_ = 0
    self.has_anchorreload_ = 0
    self.has_viewstamp_ = 0
    self.has_contentmanager_ = 0
    self.has_pipelineinfo_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def doc_size(self): return len(self.doc_)
  def doc_list(self): return self.doc_

  def doc(self, i):
    return self.doc_[i]

  def mutable_doc(self, i):
    return self.doc_[i]

  def add_doc(self):
    x = RTUpdate_Doc()
    self.doc_.append(x)
    return x

  def clear_doc(self):
    self.doc_ = []
  def deletedoc_size(self): return len(self.deletedoc_)
  def deletedoc_list(self): return self.deletedoc_

  def deletedoc(self, i):
    return self.deletedoc_[i]

  def mutable_deletedoc(self, i):
    return self.deletedoc_[i]

  def add_deletedoc(self):
    x = RTUpdate_DeleteDoc()
    self.deletedoc_.append(x)
    return x

  def clear_deletedoc(self):
    self.deletedoc_ = []
  def data_size(self): return len(self.data_)
  def data_list(self): return self.data_

  def data(self, i):
    return self.data_[i]

  def mutable_data(self, i):
    return self.data_[i]

  def add_data(self):
    x = RTUpdate_Data()
    self.data_.append(x)
    return x

  def clear_data(self):
    self.data_ = []
  def link_size(self): return len(self.link_)
  def link_list(self): return self.link_

  def link(self, i):
    return self.link_[i]

  def mutable_link(self, i):
    return self.link_[i]

  def add_link(self):
    x = RTUpdate_Link()
    self.link_.append(x)
    return x

  def clear_link(self):
    self.link_ = []
  def anchor_size(self): return len(self.anchor_)
  def anchor_list(self): return self.anchor_

  def anchor(self, i):
    return self.anchor_[i]

  def mutable_anchor(self, i):
    return self.anchor_[i]

  def add_anchor(self):
    x = RTUpdate_Anchor()
    self.anchor_.append(x)
    return x

  def clear_anchor(self):
    self.anchor_ = []
  def urlhistoryupdate_size(self): return len(self.urlhistoryupdate_)
  def urlhistoryupdate_list(self): return self.urlhistoryupdate_

  def urlhistoryupdate(self, i):
    return self.urlhistoryupdate_[i]

  def mutable_urlhistoryupdate(self, i):
    return self.urlhistoryupdate_[i]

  def add_urlhistoryupdate(self):
    x = UrlHistoryTag()
    self.urlhistoryupdate_.append(x)
    return x

  def clear_urlhistoryupdate(self):
    self.urlhistoryupdate_ = []
  def rtduphistoryupdate_size(self): return len(self.rtduphistoryupdate_)
  def rtduphistoryupdate_list(self): return self.rtduphistoryupdate_

  def rtduphistoryupdate(self, i):
    return self.rtduphistoryupdate_[i]

  def mutable_rtduphistoryupdate(self, i):
    return self.rtduphistoryupdate_[i]

  def add_rtduphistoryupdate(self):
    x = RTDupLogHistory()
    self.rtduphistoryupdate_.append(x)
    return x

  def clear_rtduphistoryupdate(self):
    self.rtduphistoryupdate_ = []
  def datarequest_size(self): return len(self.datarequest_)
  def datarequest_list(self): return self.datarequest_

  def datarequest(self, i):
    return self.datarequest_[i]

  def mutable_datarequest(self, i):
    return self.datarequest_[i]

  def add_datarequest(self):
    x = RTUpdate_DataRequest()
    self.datarequest_.append(x)
    return x

  def clear_datarequest(self):
    self.datarequest_ = []
  def requestmarker(self): return self.requestmarker_

  def set_requestmarker(self, x):
    self.has_requestmarker_ = 1
    self.requestmarker_ = x

  def clear_requestmarker(self):
    self.has_requestmarker_ = 0
    self.requestmarker_ = ""

  def has_requestmarker(self): return self.has_requestmarker_

  def flush(self): return self.flush_

  def set_flush(self, x):
    self.has_flush_ = 1
    self.flush_ = x

  def clear_flush(self):
    self.has_flush_ = 0
    self.flush_ = 0

  def has_flush(self): return self.has_flush_

  def epochmarker(self): return self.epochmarker_

  def set_epochmarker(self, x):
    self.has_epochmarker_ = 1
    self.epochmarker_ = x

  def clear_epochmarker(self):
    self.has_epochmarker_ = 0
    self.epochmarker_ = 0

  def has_epochmarker(self): return self.has_epochmarker_

  def epochdelete_size(self): return len(self.epochdelete_)
  def epochdelete_list(self): return self.epochdelete_

  def epochdelete(self, i):
    return self.epochdelete_[i]

  def set_epochdelete(self, i, x):
    self.epochdelete_[i] = x

  def add_epochdelete(self, x):
    self.epochdelete_.append(x)

  def clear_epochdelete(self):
    self.epochdelete_ = []

  def epochdiscard(self): return self.epochdiscard_

  def set_epochdiscard(self, x):
    self.has_epochdiscard_ = 1
    self.epochdiscard_ = x

  def clear_epochdiscard(self):
    self.has_epochdiscard_ = 0
    self.epochdiscard_ = 0

  def has_epochdiscard(self): return self.has_epochdiscard_

  def heartbeat_size(self): return len(self.heartbeat_)
  def heartbeat_list(self): return self.heartbeat_

  def heartbeat(self, i):
    return self.heartbeat_[i]

  def mutable_heartbeat(self, i):
    return self.heartbeat_[i]

  def add_heartbeat(self):
    x = RTUpdate_Heartbeat()
    self.heartbeat_.append(x)
    return x

  def clear_heartbeat(self):
    self.heartbeat_ = []
  def restrictupdate_size(self): return len(self.restrictupdate_)
  def restrictupdate_list(self): return self.restrictupdate_

  def restrictupdate(self, i):
    return self.restrictupdate_[i]

  def mutable_restrictupdate(self, i):
    return self.restrictupdate_[i]

  def add_restrictupdate(self):
    x = RTUpdate_RestrictUpdate()
    self.restrictupdate_.append(x)
    return x

  def clear_restrictupdate(self):
    self.restrictupdate_ = []
  def anchorreload(self): return self.anchorreload_

  def set_anchorreload(self, x):
    self.has_anchorreload_ = 1
    self.anchorreload_ = x

  def clear_anchorreload(self):
    self.has_anchorreload_ = 0
    self.anchorreload_ = 0

  def has_anchorreload(self): return self.has_anchorreload_

  def viewstamp(self):
    if self.viewstamp_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.viewstamp_ is None: self.viewstamp_ = RTUpdate_Viewstamp()
      finally:
        self.lazy_init_lock_.release()
    return self.viewstamp_

  def mutable_viewstamp(self): self.has_viewstamp_ = 1; return self.viewstamp()

  def clear_viewstamp(self):
    #Warning: this method does not acquire the lock.
    self.has_viewstamp_ = 0;
    if self.viewstamp_ is not None: self.viewstamp_.Clear()

  def has_viewstamp(self): return self.has_viewstamp_

  def contentmanager(self):
    if self.contentmanager_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.contentmanager_ is None: self.contentmanager_ = RTUpdate_ContentManager()
      finally:
        self.lazy_init_lock_.release()
    return self.contentmanager_

  def mutable_contentmanager(self): self.has_contentmanager_ = 1; return self.contentmanager()

  def clear_contentmanager(self):
    #Warning: this method does not acquire the lock.
    self.has_contentmanager_ = 0;
    if self.contentmanager_ is not None: self.contentmanager_.Clear()

  def has_contentmanager(self): return self.has_contentmanager_

  def pipelineinfo(self):
    if self.pipelineinfo_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.pipelineinfo_ is None: self.pipelineinfo_ = RTUpdate_PipelineInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.pipelineinfo_

  def mutable_pipelineinfo(self): self.has_pipelineinfo_ = 1; return self.pipelineinfo()

  def clear_pipelineinfo(self):
    #Warning: this method does not acquire the lock.
    self.has_pipelineinfo_ = 0;
    if self.pipelineinfo_ is not None: self.pipelineinfo_.Clear()

  def has_pipelineinfo(self): return self.has_pipelineinfo_


  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.doc_size()): self.add_doc().CopyFrom(x.doc(i))
    for i in xrange(x.deletedoc_size()): self.add_deletedoc().CopyFrom(x.deletedoc(i))
    for i in xrange(x.data_size()): self.add_data().CopyFrom(x.data(i))
    for i in xrange(x.link_size()): self.add_link().CopyFrom(x.link(i))
    for i in xrange(x.anchor_size()): self.add_anchor().CopyFrom(x.anchor(i))
    for i in xrange(x.urlhistoryupdate_size()): self.add_urlhistoryupdate().CopyFrom(x.urlhistoryupdate(i))
    for i in xrange(x.rtduphistoryupdate_size()): self.add_rtduphistoryupdate().CopyFrom(x.rtduphistoryupdate(i))
    for i in xrange(x.datarequest_size()): self.add_datarequest().CopyFrom(x.datarequest(i))
    if (x.has_requestmarker()): self.set_requestmarker(x.requestmarker())
    if (x.has_flush()): self.set_flush(x.flush())
    if (x.has_epochmarker()): self.set_epochmarker(x.epochmarker())
    for i in xrange(x.epochdelete_size()): self.add_epochdelete(x.epochdelete(i))
    if (x.has_epochdiscard()): self.set_epochdiscard(x.epochdiscard())
    for i in xrange(x.heartbeat_size()): self.add_heartbeat().CopyFrom(x.heartbeat(i))
    for i in xrange(x.restrictupdate_size()): self.add_restrictupdate().CopyFrom(x.restrictupdate(i))
    if (x.has_anchorreload()): self.set_anchorreload(x.anchorreload())
    if (x.has_viewstamp()): self.mutable_viewstamp().MergeFrom(x.viewstamp())
    if (x.has_contentmanager()): self.mutable_contentmanager().MergeFrom(x.contentmanager())
    if (x.has_pipelineinfo()): self.mutable_pipelineinfo().MergeFrom(x.pipelineinfo())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTUpdate', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTUpdate')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTUpdate', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTUpdate', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTUpdate', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.doc_) != len(x.doc_): return 0
    for e1, e2 in zip(self.doc_, x.doc_):
      if e1 != e2: return 0
    if len(self.deletedoc_) != len(x.deletedoc_): return 0
    for e1, e2 in zip(self.deletedoc_, x.deletedoc_):
      if e1 != e2: return 0
    if len(self.data_) != len(x.data_): return 0
    for e1, e2 in zip(self.data_, x.data_):
      if e1 != e2: return 0
    if len(self.link_) != len(x.link_): return 0
    for e1, e2 in zip(self.link_, x.link_):
      if e1 != e2: return 0
    if len(self.anchor_) != len(x.anchor_): return 0
    for e1, e2 in zip(self.anchor_, x.anchor_):
      if e1 != e2: return 0
    if len(self.urlhistoryupdate_) != len(x.urlhistoryupdate_): return 0
    for e1, e2 in zip(self.urlhistoryupdate_, x.urlhistoryupdate_):
      if e1 != e2: return 0
    if len(self.rtduphistoryupdate_) != len(x.rtduphistoryupdate_): return 0
    for e1, e2 in zip(self.rtduphistoryupdate_, x.rtduphistoryupdate_):
      if e1 != e2: return 0
    if len(self.datarequest_) != len(x.datarequest_): return 0
    for e1, e2 in zip(self.datarequest_, x.datarequest_):
      if e1 != e2: return 0
    if self.has_requestmarker_ != x.has_requestmarker_: return 0
    if self.has_requestmarker_ and self.requestmarker_ != x.requestmarker_: return 0
    if self.has_flush_ != x.has_flush_: return 0
    if self.has_flush_ and self.flush_ != x.flush_: return 0
    if self.has_epochmarker_ != x.has_epochmarker_: return 0
    if self.has_epochmarker_ and self.epochmarker_ != x.epochmarker_: return 0
    if len(self.epochdelete_) != len(x.epochdelete_): return 0
    for e1, e2 in zip(self.epochdelete_, x.epochdelete_):
      if e1 != e2: return 0
    if self.has_epochdiscard_ != x.has_epochdiscard_: return 0
    if self.has_epochdiscard_ and self.epochdiscard_ != x.epochdiscard_: return 0
    if len(self.heartbeat_) != len(x.heartbeat_): return 0
    for e1, e2 in zip(self.heartbeat_, x.heartbeat_):
      if e1 != e2: return 0
    if len(self.restrictupdate_) != len(x.restrictupdate_): return 0
    for e1, e2 in zip(self.restrictupdate_, x.restrictupdate_):
      if e1 != e2: return 0
    if self.has_anchorreload_ != x.has_anchorreload_: return 0
    if self.has_anchorreload_ and self.anchorreload_ != x.anchorreload_: return 0
    if self.has_viewstamp_ != x.has_viewstamp_: return 0
    if self.has_viewstamp_ and self.viewstamp_ != x.viewstamp_: return 0
    if self.has_contentmanager_ != x.has_contentmanager_: return 0
    if self.has_contentmanager_ and self.contentmanager_ != x.contentmanager_: return 0
    if self.has_pipelineinfo_ != x.has_pipelineinfo_: return 0
    if self.has_pipelineinfo_ and self.pipelineinfo_ != x.pipelineinfo_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.doc_)):
      if (not self.doc_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.deletedoc_)):
      if (not self.deletedoc_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.data_)):
      if (not self.data_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.link_)):
      if (not self.link_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.anchor_)):
      if (not self.anchor_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.urlhistoryupdate_)):
      if (not self.urlhistoryupdate_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.rtduphistoryupdate_)):
      if (not self.rtduphistoryupdate_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.datarequest_)):
      if (not self.datarequest_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.heartbeat_)):
      if (not self.heartbeat_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.restrictupdate_)):
      if (not self.restrictupdate_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_viewstamp_ and not self.viewstamp_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_contentmanager_ and not self.contentmanager_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_pipelineinfo_ and not self.pipelineinfo_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.doc_)
    for i in xrange(len(self.doc_)): n += self.doc_[i].ByteSize()
    n += 4 * len(self.deletedoc_)
    for i in xrange(len(self.deletedoc_)): n += self.deletedoc_[i].ByteSize()
    n += 4 * len(self.data_)
    for i in xrange(len(self.data_)): n += self.data_[i].ByteSize()
    n += 4 * len(self.link_)
    for i in xrange(len(self.link_)): n += self.link_[i].ByteSize()
    n += 4 * len(self.anchor_)
    for i in xrange(len(self.anchor_)): n += self.anchor_[i].ByteSize()
    n += 2 * len(self.urlhistoryupdate_)
    for i in xrange(len(self.urlhistoryupdate_)): n += self.lengthString(self.urlhistoryupdate_[i].ByteSize())
    n += 2 * len(self.rtduphistoryupdate_)
    for i in xrange(len(self.rtduphistoryupdate_)): n += self.lengthString(self.rtduphistoryupdate_[i].ByteSize())
    n += 4 * len(self.datarequest_)
    for i in xrange(len(self.datarequest_)): n += self.datarequest_[i].ByteSize()
    if (self.has_requestmarker_): n += 2 + self.lengthString(len(self.requestmarker_))
    if (self.has_flush_): n += 3
    if (self.has_epochmarker_): n += 2 + self.lengthVarInt64(self.epochmarker_)
    n += 2 * len(self.epochdelete_)
    for i in xrange(len(self.epochdelete_)): n += self.lengthVarInt64(self.epochdelete_[i])
    if (self.has_epochdiscard_): n += 2 + self.lengthVarInt64(self.epochdiscard_)
    n += 4 * len(self.heartbeat_)
    for i in xrange(len(self.heartbeat_)): n += self.heartbeat_[i].ByteSize()
    n += 4 * len(self.restrictupdate_)
    for i in xrange(len(self.restrictupdate_)): n += self.restrictupdate_[i].ByteSize()
    if (self.has_anchorreload_): n += 3
    if (self.has_viewstamp_): n += 4 + self.viewstamp_.ByteSize()
    if (self.has_contentmanager_): n += 4 + self.contentmanager_.ByteSize()
    if (self.has_pipelineinfo_): n += 4 + self.pipelineinfo_.ByteSize()
    return n + 0

  def Clear(self):
    self.clear_doc()
    self.clear_deletedoc()
    self.clear_data()
    self.clear_link()
    self.clear_anchor()
    self.clear_urlhistoryupdate()
    self.clear_rtduphistoryupdate()
    self.clear_datarequest()
    self.clear_requestmarker()
    self.clear_flush()
    self.clear_epochmarker()
    self.clear_epochdelete()
    self.clear_epochdiscard()
    self.clear_heartbeat()
    self.clear_restrictupdate()
    self.clear_anchorreload()
    self.clear_viewstamp()
    self.clear_contentmanager()
    self.clear_pipelineinfo()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.doc_)):
      out.putVarInt32(19)
      self.doc_[i].OutputUnchecked(out)
      out.putVarInt32(20)
    for i in xrange(len(self.deletedoc_)):
      out.putVarInt32(243)
      self.deletedoc_[i].OutputUnchecked(out)
      out.putVarInt32(244)
    for i in xrange(len(self.data_)):
      out.putVarInt32(323)
      self.data_[i].OutputUnchecked(out)
      out.putVarInt32(324)
    for i in xrange(len(self.link_)):
      out.putVarInt32(403)
      self.link_[i].OutputUnchecked(out)
      out.putVarInt32(404)
    if (self.has_flush_):
      out.putVarInt32(480)
      out.putBoolean(self.flush_)
    if (self.has_epochmarker_):
      out.putVarInt32(488)
      out.putVarInt32(self.epochmarker_)
    for i in xrange(len(self.epochdelete_)):
      out.putVarInt32(496)
      out.putVarInt32(self.epochdelete_[i])
    if (self.has_epochdiscard_):
      out.putVarInt32(504)
      out.putVarInt32(self.epochdiscard_)
    for i in xrange(len(self.anchor_)):
      out.putVarInt32(643)
      self.anchor_[i].OutputUnchecked(out)
      out.putVarInt32(644)
    if (self.has_requestmarker_):
      out.putVarInt32(802)
      out.putPrefixedString(self.requestmarker_)
    for i in xrange(len(self.datarequest_)):
      out.putVarInt32(811)
      self.datarequest_[i].OutputUnchecked(out)
      out.putVarInt32(812)
    for i in xrange(len(self.heartbeat_)):
      out.putVarInt32(915)
      self.heartbeat_[i].OutputUnchecked(out)
      out.putVarInt32(916)
    for i in xrange(len(self.urlhistoryupdate_)):
      out.putVarInt32(930)
      out.putVarInt32(self.urlhistoryupdate_[i].ByteSize())
      self.urlhistoryupdate_[i].OutputUnchecked(out)
    for i in xrange(len(self.restrictupdate_)):
      out.putVarInt32(955)
      self.restrictupdate_[i].OutputUnchecked(out)
      out.putVarInt32(956)
    if (self.has_anchorreload_):
      out.putVarInt32(1024)
      out.putBoolean(self.anchorreload_)
    if (self.has_viewstamp_):
      out.putVarInt32(1035)
      self.viewstamp_.OutputUnchecked(out)
      out.putVarInt32(1036)
    for i in xrange(len(self.rtduphistoryupdate_)):
      out.putVarInt32(1170)
      out.putVarInt32(self.rtduphistoryupdate_[i].ByteSize())
      self.rtduphistoryupdate_[i].OutputUnchecked(out)
    if (self.has_contentmanager_):
      out.putVarInt32(1259)
      self.contentmanager_.OutputUnchecked(out)
      out.putVarInt32(1260)
    if (self.has_pipelineinfo_):
      out.putVarInt32(1363)
      self.pipelineinfo_.OutputUnchecked(out)
      out.putVarInt32(1364)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 19:
        self.add_doc().TryMerge(d)
        continue
      if tt == 243:
        self.add_deletedoc().TryMerge(d)
        continue
      if tt == 323:
        self.add_data().TryMerge(d)
        continue
      if tt == 403:
        self.add_link().TryMerge(d)
        continue
      if tt == 480:
        self.set_flush(d.getBoolean())
        continue
      if tt == 488:
        self.set_epochmarker(d.getVarInt32())
        continue
      if tt == 496:
        self.add_epochdelete(d.getVarInt32())
        continue
      if tt == 504:
        self.set_epochdiscard(d.getVarInt32())
        continue
      if tt == 643:
        self.add_anchor().TryMerge(d)
        continue
      if tt == 802:
        self.set_requestmarker(d.getPrefixedString())
        continue
      if tt == 811:
        self.add_datarequest().TryMerge(d)
        continue
      if tt == 915:
        self.add_heartbeat().TryMerge(d)
        continue
      if tt == 930:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_urlhistoryupdate().TryMerge(tmp)
        continue
      if tt == 955:
        self.add_restrictupdate().TryMerge(d)
        continue
      if tt == 1024:
        self.set_anchorreload(d.getBoolean())
        continue
      if tt == 1035:
        self.mutable_viewstamp().TryMerge(d)
        continue
      if tt == 1170:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_rtduphistoryupdate().TryMerge(tmp)
        continue
      if tt == 1259:
        self.mutable_contentmanager().TryMerge(d)
        continue
      if tt == 1363:
        self.mutable_pipelineinfo().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.doc_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Doc%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.deletedoc_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DeleteDoc%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.data_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Data%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.link_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Link%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.anchor_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Anchor%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.urlhistoryupdate_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("UrlHistoryUpdate%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.rtduphistoryupdate_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("RTDupHistoryUpdate%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.datarequest_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DataRequest%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_requestmarker_: res+=prefix+("RequestMarker: %s\n" % self.DebugFormatString(self.requestmarker_))
    if self.has_flush_: res+=prefix+("Flush: %s\n" % self.DebugFormatBool(self.flush_))
    if self.has_epochmarker_: res+=prefix+("EpochMarker: %s\n" % self.DebugFormatInt32(self.epochmarker_))
    cnt=0
    for e in self.epochdelete_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("EpochDelete%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    if self.has_epochdiscard_: res+=prefix+("EpochDiscard: %s\n" % self.DebugFormatInt32(self.epochdiscard_))
    cnt=0
    for e in self.heartbeat_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Heartbeat%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.restrictupdate_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("RestrictUpdate%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_anchorreload_: res+=prefix+("AnchorReload: %s\n" % self.DebugFormatBool(self.anchorreload_))
    if self.has_viewstamp_:
      res+=prefix+"Viewstamp {\n"
      res+=self.viewstamp_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_contentmanager_:
      res+=prefix+"ContentManager {\n"
      res+=self.contentmanager_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_pipelineinfo_:
      res+=prefix+"PipelineInfo {\n"
      res+=self.pipelineinfo_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    return res

  kDocGroup = 2
  kDocDocid = 3
  kDocRepresentativeId = 165
  kDocTimestamp = 74
  kDocUrl = 4
  kDocUrlMatchings = 23
  kDocIsPagerankDemoted_DEPRECATED = 230
  kDocDisplayUrl = 256
  kDocPagerank = 14
  kDocPagerank_NS = 17
  kDocLangNormalizedPagerank = 231
  kDocDuplicateDocids = 136
  kDocRedirectsGroup = 149
  kDocRedirectsType = 150
  kDocRedirectsTargetUrl = 151
  kDocRedirectsRawTargetUrl = 152
  kDocRedirectsRefreshTime = 153
  kDocRedirectsIPAddress = 154
  kDocRedirectsDownloadTime = 155
  kDocUrlAfterRedirects = 5
  kDocContents = 6
  kDocIsTruncated = 304
  kDocUncompressedLength = 7
  kDocIpAddr = 8
  kDocContentType = 9
  kDocLanguage = 10
  kDocEncoding = 11
  kDocCountryCode = 18
  kDocReplaceBody = 12
  kDocReplaceAnchors = 13
  kDocLocale = 15
  kDocAuthMethod = 137
  kDocContentChecksum = 145
  kDocIsPermanentRedirect = 147
  kDocIsDupHint = 148
  kDocTitleFP_DEPRECATED = 16
  kDocNumTokens = 266
  kDocNoIndexReason = 249
  kDocNoArchiveReason = 284
  kDocNoFollowReason = 285
  kDocNoSnippetReason = 286
  kDocIndexDataGroup = 70
  kDocIndexDataTermFP = 71
  kDocIndexDataPosition = 72
  kDocIndexDataAttribute = 73
  kDocIndexDataTermForDebug = 185
  kDocRawAnchorDataGroup = 138
  kDocRawAnchorDataLookupID = 140
  kDocRawAnchorDataRawAnchors = 141
  kDocRawAnchorDataFragmentID = 142
  kDocRawAnchorDataNumFragments = 143
  kDocDirectoryGroup = 75
  kDocDirectoryIdentifier = 76
  kDocDirectoryCategory = 77
  kDocDirectoryTitle = 78
  kDocDirectoryDescription = 79
  kDocOriginalDocGroup = 159
  kDocOriginalDocContents = 160
  kDocOriginalDocUncompressedLength = 161
  kDocOriginalDocUseHtmlCompressDictionary = 162
  kDocVisualType = 301
  kDocTrawlerFetchState = 167
  kDocTrawlerFetchReason = 168
  kDocTrawlerConversionFailed = 169
  kDocTrawlerRobotsState = 257
  kDocTrawlerRobotsReason = 258
  kDocWebMirrorSource = 189
  kDocCrawlLoopTimeStamp = 190
  kDocResponseCode = 202
  kDocFinalUrlAfterRedirects = 210
  kDocRepIdAfterRedirects = 299
  kDocFinalRepIdAfterRedirects = 227
  kDocDebugInfoGroup = 259
  kDocDebugInfoFetchlogFile = 260
  kDocDebugInfoOffset = 261
  kDocDebugInfoUrl = 262
  kDocHourlyInfoGroup = 268
  kDocHourlyInfoRequestorID = 269
  kDocHourlyInfoSeedFiles = 270
  kDocConverterRanClassifiers = 291
  kDocLinkextractorRanClassifiers = 327
  kDocLogicalTargetIndex = 235
  kDocLogicalTargetChoicesGroup = 236
  kDocLogicalTargetChoicesTargetType = 237
  kDocLogicalTargetChoicesTargetString = 238
  kDocLogicalTargetChoicesIsUndesirableSource = 296
  kDocLogicalTargetChoicesTargetRepid = 297
  kDocLogicalTargetLocation = 251
  kDocWikipediaTitle = 245
  kDocIsAdditionalDoc = 184
  kDocIsLink = 208
  kDocIsTracer = 239
  kDocPremiumDataGroup = 220
  kDocPremiumDataPremiumPerDocData = 221
  kDocPremiumDataPageRank = 222
  kDocPremiumDataMetadata = 223
  kDocEmbedding = 225
  kDocIsEmbedding = 226
  kDocIsFlashProcessed = 302
  kDocFlashProcessingTimestamp = 305
  kDocFlashSkipIntroUrl = 306
  kDocAdditionalChecksumsGroup = 246
  kDocAdditionalChecksumsExperimentalChecksum = 247
  kDocAdditionalChecksumsRelaxedChecksum = 248
  kDocAdditionalChecksumsNearDupChecksum = 265
  kDocAdditionalChecksumsSimHash = 287
  kDocAdditionalChecksumsSimHashIsTrusted = 290
  kDocAdditionalChecksumsNoTransientChecksum = 326
  kDocBouncepad302ConvertedTo301 = 322
  kDocconverter_doc_attachments = 300
  kDocsummary_doc_attachments = 293
  kDocdoc_attachments = 255
  kDocContentExpiryTime = 254
  kDocNoSearchResultsPage = 310
  kDocIncludedContentGroup = 271
  kDocIncludedContentContent = 272
  kDocIncludedContentUncompressedLength = 273
  kDocIncludedContentSourceTypeBitfield = 274
  kDocIncludedContentPosition = 303
  kDocMobileData = 292
  kDocrequired_for_cse = 307
  kDoccse_id = 308
  kDocrichsnippet = 309
  kDeleteDocGroup = 30
  kDeleteDocDocid = 31
  kDeleteDocBody = 32
  kDeleteDocAnchors = 33
  kDeleteDocBeforeCreationTime = 122
  kDeleteDocSyncViaAnchorRPCLog = 133
  kDataGroup = 40
  kDataKey = 41
  kDataProperty = 42
  kDataIntValue = 43
  kDataFloatValue = 44
  kDataDoubleValue = 45
  kDataStringValue = 46
  kLinkGroup = 50
  kLinkTimestamp = 69
  kLinkSourceID = 51
  kLinkSourcePR = 66
  kLinkSourceIP = 52
  kLinkLCASourceIP = 117
  kLinkLCASourceHostID = 132
  kLinkSourceOrg = 53
  kLinkSourceLinkHash = 54
  kLinkSourceLanguage = 55
  kLinkSourceOutdegree = 67
  kLinkSourceDocLength = 65
  kLinkAnchorGroup = 56
  kLinkAnchorTargetID = 57
  kLinkAnchorTargetHostID = 124
  kLinkAnchorLinkText = 58
  kLinkAnchorLinkFontSize = 59
  kLinkAnchorLinkWeight = 64
  kLinkAnchorLinkDemotionReason = 68
  kLinkAnchorOnDomain = 112
  kAnchorGroup = 80
  kAnchorTimeStamp = 95
  kAnchorSourceID = 81
  kAnchorSourcePR = 92
  kAnchorSourceIndyRank = 96
  kAnchorSourceClusterID = 98
  kAnchorSourceIP = 82
  kAnchorSourceOrg = 83
  kAnchorSourceSiteName = 97
  kAnchorSourceLinkHash = 84
  kAnchorSourceLanguage = 85
  kAnchorSourceDocLength = 86
  kAnchorSourceOutDegree = 87
  kAnchorLinkText = 88
  kAnchorLinkFontSize = 89
  kAnchorLinkWeight = 90
  kAnchorLinkDemotionReason = 93
  kAnchorDeleted = 94
  kAnchorTargetID = 91
  kAnchorOnDomain = 113
  kUrlHistoryUpdate = 116
  kRTDupHistoryUpdate = 146
  kDataRequestGroup = 101
  kDataRequestLogFilename = 102
  kDataRequestMarker = 103
  kDataRequestEchoRTUpdate = 134
  kDataRequestAnchorIndexDataGroup = 110
  kDataRequestAnchorIndexDataAnchorID = 111
  kDataRequestAnchorIndexDataLookupID = 118
  kDataRequestAnchorIndexDataPagerank = 125
  kDataRequestAnchorIndexDataRespDataType = 139
  kDataRequestAnchorIndexDataTargetOrg = 144
  kRequestMarker = 100
  kFlush = 60
  kEpochMarker = 61
  kEpochDelete = 62
  kEpochDiscard = 63
  kHeartbeatGroup = 114
  kHeartbeatTimeStamp = 115
  kRestrictUpdateGroup = 119
  kRestrictUpdateIsDeleteOrAddRestrict = 120
  kRestrictUpdateRestrictFileName = 121
  kRestrictUpdateRestrictName = 123
  kRestrictUpdateRestrictType = 135
  kAnchorReload = 128
  kViewstampGroup = 129
  kViewstampViewId = 130
  kViewstampSeqNum = 131
  kContentManagerGroup = 157
  kContentManagerPosition = 156
  kContentManagerTmpPosition = 166
  kContentManagerLabel = 158
  kContentManagerCompressedLength = 163
  kPipelineInfoGroup = 170
  kPipelineInfoIndexSelectionScore_int32_DEPRECATED = 164
  kPipelineInfoLocation = 171
  kPipelineInfoReused_From_Repository = 195
  kPipelineInfoRejectedBy = 172
  kPipelineInfoRejectedReason = 173
  kPipelineInfonum_summaries = 126
  kPipelineInfonum_permredirects = 127
  kPipelineInfoRetainedVersion = 174
  kPipelineInfoSupercededVersion_DEPRECATED = 175
  kPipelineInfoServingVersions = 187
  kPipelineInfoServingDupVersions = 188
  kPipelineInfoPagerankBeforePromotion = 180
  kPipelineInfoPagerankNSBeforePromotion = 294
  kPipelineInfoIsApproximatePagerank = 219
  kPipelineInfoIsApproximatePagerank_NS = 319
  kPipelineInfoApproximatePagerank = 232
  kPipelineInfoApproximatePagerank_NS = 320
  kPipelineInfoMangledRepId = 215
  kPipelineInfoFresherRepIdGroup = 104
  kPipelineInfoFresherRepIdRepresentativeId = 105
  kPipelineInfoFresherRepIdMangledRepId = 106
  kPipelineInfoDupForwarding_DEPRECATEDGroup = 181
  kPipelineInfoDupForwarding_DEPRECATEDUrl = 182
  kPipelineInfoDupForwarding_DEPRECATEDRepresentativeId = 183
  kPipelineInfoDupForwarding_DEPRECATEDPagerank = 186
  kPipelineInfoDupForwarding_DEPRECATEDLocation = 200
  kPipelineInfoAlternateName_DEPRECATEDGroup = 212
  kPipelineInfoAlternateName_DEPRECATEDUrl = 213
  kPipelineInfoAlternateName_DEPRECATEDLocation = 214
  kPipelineInfoDupForwarding = 216
  kPipelineInfoAlternateName = 217
  kPipelineInfoPermRedirects = 218
  kPipelineInfoCanonicalUrl = 197
  kPipelineInfoCanonicalDocid_DEPRECATED = 176
  kPipelineInfoPrevious_CanonicalUrl = 250
  kPipelineInfoCanonical_In_Indices = 209
  kPipelineInfoFinalContentChecksum = 177
  kPipelineInfoIndexSelectionAcceptingSelectors_DEPRECATED = 178
  kPipelineInfoIndexSelectionRejectingFilters_DEPRECATED = 194
  kPipelineInfoCompressedLength = 179
  kPipelineInfoSiteStats = 191
  kPipelineInfoURLStats = 192
  kPipelineInfoHostStats = 234
  kPipelineInfoIndexCoverageStatsGroup = 275
  kPipelineInfoIndexCoverageStatsimpressions = 276
  kPipelineInfoIndexCoverageStatschances = 277
  kPipelineInfoIndexCoverageStatsclicks = 278
  kPipelineInfoIndexSelectionScore_double_DEPRECATED = 193
  kPipelineInfoDiversity_Guarantee_Score = 264
  kPipelineInfoIndyRank_DEPRECATED = 196
  kPipelineInfoHomePagePageRank = 198
  kPipelineInfoHomePagePageRankNS = 298
  kPipelineInfoFoundInBartUrlFpMap = 199
  kPipelineInfoGlobalFactors_DEPRECATED = 204
  kPipelineInfoIndexSpecificFactors_DEPRECATEDGroup = 205
  kPipelineInfoIndexSpecificFactors_DEPRECATEDIndex = 206
  kPipelineInfoIndexSpecificFactors_DEPRECATEDIsSelected = 207
  kPipelineInfoIndexSpecificFactors_DEPRECATEDFactors = 201
  kPipelineInfoIndexSpecificFactors_DEPRECATEDSubIndexFactorsGroup = 279
  kPipelineInfoIndexSpecificFactors_DEPRECATEDSubIndexFactorsSubIndex = 280
  kPipelineInfoIndexSpecificFactors_DEPRECATEDSubIndexFactorsIsSelected = 281
  kPipelineInfoIndexSpecificFactors_DEPRECATEDSubIndexFactorsFactors = 282
  kPipelineInfoIndexSpecificFactors_DEPRECATEDRank = 288
  kPipelineInfoHistoricalFactors = 233
  kPipelineInfoReuseTimestamp = 203
  kPipelineInfoMicroRepmap = 211
  kPipelineInfoLinkRecord = 295
  kPipelineInfoDFA_Labels = 224
  kPipelineInfonon_terminal_timerange = 228
  kPipelineInfonon_terminal_count = 229
  kPipelineInfocrypto404_info = 263
  kPipelineInfoTraceGroup = 240
  kPipelineInfoTraceTracer_Queue = 241
  kPipelineInfoTraceTracer_SegId = 242
  kPipelineInfoTraceTracer_Timestamp = 243
  kPipelineInfoTraceTracer_Score = 244
  kPipelineInfoSkipDuringIndexing = 252
  kPipelineInfoSkipDuringCollapse = 253
  kPipelineInfoSelectionOutput = 267
  kPipelineInfoFinalLogicalTarget = 283
  kPipelineInfoFirstCrawledTimestamp_DEPRECATED = 289
  kPipelineInfoIsBouncepad = 321
  kPipelineInfoTargetFromToolbar = 323
  kPipelineInfoPenalizeSources = 324
  kPipelineInfoIsPenalizedSource = 325

  _TEXT = (
   "ErrorCode",  #   0
   None,  #   1
   "Doc",  #   2
   "Docid",  #   3
   "Url",  #   4
   "UrlAfterRedirects",  #   5
   "Contents",  #   6
   "UncompressedLength",  #   7
   "IpAddr",  #   8
   "ContentType",  #   9
   "Language",  #  10
   "Encoding",  #  11
   "ReplaceBody",  #  12
   "ReplaceAnchors",  #  13
   "Pagerank",  #  14
   "Locale",  #  15
   "TitleFP_DEPRECATED",  #  16
   "Pagerank_NS",  #  17
   "CountryCode",  #  18
   None,  #  19
   None,  #  20
   None,  #  21
   None,  #  22
   "UrlMatchings",  #  23
   None,  #  24
   None,  #  25
   None,  #  26
   None,  #  27
   None,  #  28
   None,  #  29
   "DeleteDoc",  #  30
   "Docid",  #  31
   "Body",  #  32
   "Anchors",  #  33
   None,  #  34
   None,  #  35
   None,  #  36
   None,  #  37
   None,  #  38
   None,  #  39
   "Data",  #  40
   "Key",  #  41
   "Property",  #  42
   "IntValue",  #  43
   "FloatValue",  #  44
   "DoubleValue",  #  45
   "StringValue",  #  46
   None,  #  47
   None,  #  48
   None,  #  49
   "Link",  #  50
   "SourceID",  #  51
   "SourceIP",  #  52
   "SourceOrg",  #  53
   "SourceLinkHash",  #  54
   "SourceLanguage",  #  55
   "Anchor",  #  56
   "TargetID",  #  57
   "LinkText",  #  58
   "LinkFontSize",  #  59
   "Flush",  #  60
   "EpochMarker",  #  61
   "EpochDelete",  #  62
   "EpochDiscard",  #  63
   "LinkWeight",  #  64
   "SourceDocLength",  #  65
   "SourcePR",  #  66
   "SourceOutdegree",  #  67
   "LinkDemotionReason",  #  68
   "Timestamp",  #  69
   "IndexData",  #  70
   "TermFP",  #  71
   "Position",  #  72
   "Attribute",  #  73
   "Timestamp",  #  74
   "Directory",  #  75
   "Identifier",  #  76
   "Category",  #  77
   "Title",  #  78
   "Description",  #  79
   "Anchor",  #  80
   "SourceID",  #  81
   "SourceIP",  #  82
   "SourceOrg",  #  83
   "SourceLinkHash",  #  84
   "SourceLanguage",  #  85
   "SourceDocLength",  #  86
   "SourceOutDegree",  #  87
   "LinkText",  #  88
   "LinkFontSize",  #  89
   "LinkWeight",  #  90
   "TargetID",  #  91
   "SourcePR",  #  92
   "LinkDemotionReason",  #  93
   "Deleted",  #  94
   "TimeStamp",  #  95
   "SourceIndyRank",  #  96
   "SourceSiteName",  #  97
   "SourceClusterID",  #  98
   None,  #  99
   "RequestMarker",  # 100
   "DataRequest",  # 101
   "LogFilename",  # 102
   "Marker",  # 103
   "FresherRepId",  # 104
   "RepresentativeId",  # 105
   "MangledRepId",  # 106
   None,  # 107
   None,  # 108
   None,  # 109
   "AnchorIndexData",  # 110
   "AnchorID",  # 111
   "OnDomain",  # 112
   "OnDomain",  # 113
   "Heartbeat",  # 114
   "TimeStamp",  # 115
   "UrlHistoryUpdate",  # 116
   "LCASourceIP",  # 117
   "LookupID",  # 118
   "RestrictUpdate",  # 119
   "IsDeleteOrAddRestrict",  # 120
   "RestrictFileName",  # 121
   "BeforeCreationTime",  # 122
   "RestrictName",  # 123
   "TargetHostID",  # 124
   "Pagerank",  # 125
   "num_summaries",  # 126
   "num_permredirects",  # 127
   "AnchorReload",  # 128
   "Viewstamp",  # 129
   "ViewId",  # 130
   "SeqNum",  # 131
   "LCASourceHostID",  # 132
   "SyncViaAnchorRPCLog",  # 133
   "EchoRTUpdate",  # 134
   "RestrictType",  # 135
   "DuplicateDocids",  # 136
   "AuthMethod",  # 137
   "RawAnchorData",  # 138
   "RespDataType",  # 139
   "LookupID",  # 140
   "RawAnchors",  # 141
   "FragmentID",  # 142
   "NumFragments",  # 143
   "TargetOrg",  # 144
   "ContentChecksum",  # 145
   "RTDupHistoryUpdate",  # 146
   "IsPermanentRedirect",  # 147
   "IsDupHint",  # 148
   "Redirects",  # 149
   "Type",  # 150
   "TargetUrl",  # 151
   "RawTargetUrl",  # 152
   "RefreshTime",  # 153
   "IPAddress",  # 154
   "DownloadTime",  # 155
   "Position",  # 156
   "ContentManager",  # 157
   "Label",  # 158
   "OriginalDoc",  # 159
   "Contents",  # 160
   "UncompressedLength",  # 161
   "UseHtmlCompressDictionary",  # 162
   "CompressedLength",  # 163
   "IndexSelectionScore_int32_DEPRECATED",  # 164
   "RepresentativeId",  # 165
   "TmpPosition",  # 166
   "TrawlerFetchState",  # 167
   "TrawlerFetchReason",  # 168
   "TrawlerConversionFailed",  # 169
   "PipelineInfo",  # 170
   "Location",  # 171
   "RejectedBy",  # 172
   "RejectedReason",  # 173
   "RetainedVersion",  # 174
   "SupercededVersion_DEPRECATED",  # 175
   "CanonicalDocid_DEPRECATED",  # 176
   "FinalContentChecksum",  # 177
   "IndexSelectionAcceptingSelectors_DEPRECATED",  # 178
   "CompressedLength",  # 179
   "PagerankBeforePromotion",  # 180
   "DupForwarding_DEPRECATED",  # 181
   "Url",  # 182
   "RepresentativeId",  # 183
   "IsAdditionalDoc",  # 184
   "TermForDebug",  # 185
   "Pagerank",  # 186
   "ServingVersions",  # 187
   "ServingDupVersions",  # 188
   "WebMirrorSource",  # 189
   "CrawlLoopTimeStamp",  # 190
   "SiteStats",  # 191
   "URLStats",  # 192
   "IndexSelectionScore_double_DEPRECATED",  # 193
   "IndexSelectionRejectingFilters_DEPRECATED",  # 194
   "Reused_From_Repository",  # 195
   "IndyRank_DEPRECATED",  # 196
   "CanonicalUrl",  # 197
   "HomePagePageRank",  # 198
   "FoundInBartUrlFpMap",  # 199
   "Location",  # 200
   "Factors",  # 201
   "ResponseCode",  # 202
   "ReuseTimestamp",  # 203
   "GlobalFactors_DEPRECATED",  # 204
   "IndexSpecificFactors_DEPRECATED",  # 205
   "Index",  # 206
   "IsSelected",  # 207
   "IsLink",  # 208
   "Canonical_In_Indices",  # 209
   "FinalUrlAfterRedirects",  # 210
   "MicroRepmap",  # 211
   "AlternateName_DEPRECATED",  # 212
   "Url",  # 213
   "Location",  # 214
   "MangledRepId",  # 215
   "DupForwarding",  # 216
   "AlternateName",  # 217
   "PermRedirects",  # 218
   "IsApproximatePagerank",  # 219
   "PremiumData",  # 220
   "PremiumPerDocData",  # 221
   "PageRank",  # 222
   "Metadata",  # 223
   "DFA_Labels",  # 224
   "Embedding",  # 225
   "IsEmbedding",  # 226
   "FinalRepIdAfterRedirects",  # 227
   "non_terminal_timerange",  # 228
   "non_terminal_count",  # 229
   "IsPagerankDemoted_DEPRECATED",  # 230
   "LangNormalizedPagerank",  # 231
   "ApproximatePagerank",  # 232
   "HistoricalFactors",  # 233
   "HostStats",  # 234
   "LogicalTargetIndex",  # 235
   "LogicalTargetChoices",  # 236
   "TargetType",  # 237
   "TargetString",  # 238
   "IsTracer",  # 239
   "Trace",  # 240
   "Tracer_Queue",  # 241
   "Tracer_SegId",  # 242
   "Tracer_Timestamp",  # 243
   "Tracer_Score",  # 244
   "WikipediaTitle",  # 245
   "AdditionalChecksums",  # 246
   "ExperimentalChecksum",  # 247
   "RelaxedChecksum",  # 248
   "NoIndexReason",  # 249
   "Previous_CanonicalUrl",  # 250
   "LogicalTargetLocation",  # 251
   "SkipDuringIndexing",  # 252
   "SkipDuringCollapse",  # 253
   "ContentExpiryTime",  # 254
   "doc_attachments",  # 255
   "DisplayUrl",  # 256
   "TrawlerRobotsState",  # 257
   "TrawlerRobotsReason",  # 258
   "DebugInfo",  # 259
   "FetchlogFile",  # 260
   "Offset",  # 261
   "Url",  # 262
   "crypto404_info",  # 263
   "Diversity_Guarantee_Score",  # 264
   "NearDupChecksum",  # 265
   "NumTokens",  # 266
   "SelectionOutput",  # 267
   "HourlyInfo",  # 268
   "RequestorID",  # 269
   "SeedFiles",  # 270
   "IncludedContent",  # 271
   "Content",  # 272
   "UncompressedLength",  # 273
   "SourceTypeBitfield",  # 274
   "IndexCoverageStats",  # 275
   "impressions",  # 276
   "chances",  # 277
   "clicks",  # 278
   "SubIndexFactors",  # 279
   "SubIndex",  # 280
   "IsSelected",  # 281
   "Factors",  # 282
   "FinalLogicalTarget",  # 283
   "NoArchiveReason",  # 284
   "NoFollowReason",  # 285
   "NoSnippetReason",  # 286
   "SimHash",  # 287
   "Rank",  # 288
   "FirstCrawledTimestamp_DEPRECATED",  # 289
   "SimHashIsTrusted",  # 290
   "ConverterRanClassifiers",  # 291
   "MobileData",  # 292
   "summary_doc_attachments",  # 293
   "PagerankNSBeforePromotion",  # 294
   "LinkRecord",  # 295
   "IsUndesirableSource",  # 296
   "TargetRepid",  # 297
   "HomePagePageRankNS",  # 298
   "RepIdAfterRedirects",  # 299
   "converter_doc_attachments",  # 300
   "VisualType",  # 301
   "IsFlashProcessed",  # 302
   "Position",  # 303
   "IsTruncated",  # 304
   "FlashProcessingTimestamp",  # 305
   "FlashSkipIntroUrl",  # 306
   "required_for_cse",  # 307
   "cse_id",  # 308
   "richsnippet",  # 309
   "NoSearchResultsPage",  # 310
   None,  # 311
   None,  # 312
   None,  # 313
   None,  # 314
   None,  # 315
   None,  # 316
   None,  # 317
   None,  # 318
   "IsApproximatePagerank_NS",  # 319
   "ApproximatePagerank_NS",  # 320
   "IsBouncepad",  # 321
   "Bouncepad302ConvertedTo301",  # 322
   "TargetFromToolbar",  # 323
   "PenalizeSources",  # 324
   "IsPenalizedSource",  # 325
   "NoTransientChecksum",  # 326
   "LinkextractorRanClassifiers",  # 327
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.MAX_TYPE,  #   1

   ProtocolBuffer.Encoder.STARTGROUP,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.NUMERIC,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.NUMERIC,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.NUMERIC,  #  18

   ProtocolBuffer.Encoder.MAX_TYPE,  #  19

   ProtocolBuffer.Encoder.MAX_TYPE,  #  20

   ProtocolBuffer.Encoder.MAX_TYPE,  #  21

   ProtocolBuffer.Encoder.MAX_TYPE,  #  22

   ProtocolBuffer.Encoder.NUMERIC,  #  23

   ProtocolBuffer.Encoder.MAX_TYPE,  #  24

   ProtocolBuffer.Encoder.MAX_TYPE,  #  25

   ProtocolBuffer.Encoder.MAX_TYPE,  #  26

   ProtocolBuffer.Encoder.MAX_TYPE,  #  27

   ProtocolBuffer.Encoder.MAX_TYPE,  #  28

   ProtocolBuffer.Encoder.MAX_TYPE,  #  29

   ProtocolBuffer.Encoder.STARTGROUP,  #  30

   ProtocolBuffer.Encoder.NUMERIC,  #  31

   ProtocolBuffer.Encoder.NUMERIC,  #  32

   ProtocolBuffer.Encoder.NUMERIC,  #  33

   ProtocolBuffer.Encoder.MAX_TYPE,  #  34

   ProtocolBuffer.Encoder.MAX_TYPE,  #  35

   ProtocolBuffer.Encoder.MAX_TYPE,  #  36

   ProtocolBuffer.Encoder.MAX_TYPE,  #  37

   ProtocolBuffer.Encoder.MAX_TYPE,  #  38

   ProtocolBuffer.Encoder.MAX_TYPE,  #  39

   ProtocolBuffer.Encoder.STARTGROUP,  #  40

   ProtocolBuffer.Encoder.NUMERIC,  #  41

   ProtocolBuffer.Encoder.NUMERIC,  #  42

   ProtocolBuffer.Encoder.NUMERIC,  #  43

   ProtocolBuffer.Encoder.FLOAT,  #  44

   ProtocolBuffer.Encoder.DOUBLE,  #  45

   ProtocolBuffer.Encoder.STRING,  #  46

   ProtocolBuffer.Encoder.MAX_TYPE,  #  47

   ProtocolBuffer.Encoder.MAX_TYPE,  #  48

   ProtocolBuffer.Encoder.MAX_TYPE,  #  49

   ProtocolBuffer.Encoder.STARTGROUP,  #  50

   ProtocolBuffer.Encoder.NUMERIC,  #  51

   ProtocolBuffer.Encoder.NUMERIC,  #  52

   ProtocolBuffer.Encoder.STRING,  #  53

   ProtocolBuffer.Encoder.NUMERIC,  #  54

   ProtocolBuffer.Encoder.NUMERIC,  #  55

   ProtocolBuffer.Encoder.STARTGROUP,  #  56

   ProtocolBuffer.Encoder.NUMERIC,  #  57

   ProtocolBuffer.Encoder.STRING,  #  58

   ProtocolBuffer.Encoder.NUMERIC,  #  59

   ProtocolBuffer.Encoder.NUMERIC,  #  60

   ProtocolBuffer.Encoder.NUMERIC,  #  61

   ProtocolBuffer.Encoder.NUMERIC,  #  62

   ProtocolBuffer.Encoder.NUMERIC,  #  63

   ProtocolBuffer.Encoder.FLOAT,  #  64

   ProtocolBuffer.Encoder.NUMERIC,  #  65

   ProtocolBuffer.Encoder.NUMERIC,  #  66

   ProtocolBuffer.Encoder.NUMERIC,  #  67

   ProtocolBuffer.Encoder.NUMERIC,  #  68

   ProtocolBuffer.Encoder.NUMERIC,  #  69

   ProtocolBuffer.Encoder.STARTGROUP,  #  70

   ProtocolBuffer.Encoder.NUMERIC,  #  71

   ProtocolBuffer.Encoder.NUMERIC,  #  72

   ProtocolBuffer.Encoder.NUMERIC,  #  73

   ProtocolBuffer.Encoder.NUMERIC,  #  74

   ProtocolBuffer.Encoder.STARTGROUP,  #  75

   ProtocolBuffer.Encoder.STRING,  #  76

   ProtocolBuffer.Encoder.STRING,  #  77

   ProtocolBuffer.Encoder.STRING,  #  78

   ProtocolBuffer.Encoder.STRING,  #  79

   ProtocolBuffer.Encoder.STARTGROUP,  #  80

   ProtocolBuffer.Encoder.DOUBLE,  #  81

   ProtocolBuffer.Encoder.NUMERIC,  #  82

   ProtocolBuffer.Encoder.STRING,  #  83

   ProtocolBuffer.Encoder.DOUBLE,  #  84

   ProtocolBuffer.Encoder.NUMERIC,  #  85

   ProtocolBuffer.Encoder.NUMERIC,  #  86

   ProtocolBuffer.Encoder.NUMERIC,  #  87

   ProtocolBuffer.Encoder.STRING,  #  88

   ProtocolBuffer.Encoder.NUMERIC,  #  89

   ProtocolBuffer.Encoder.NUMERIC,  #  90

   ProtocolBuffer.Encoder.DOUBLE,  #  91

   ProtocolBuffer.Encoder.NUMERIC,  #  92

   ProtocolBuffer.Encoder.NUMERIC,  #  93

   ProtocolBuffer.Encoder.NUMERIC,  #  94

   ProtocolBuffer.Encoder.NUMERIC,  #  95

   ProtocolBuffer.Encoder.NUMERIC,  #  96

   ProtocolBuffer.Encoder.STRING,  #  97

   ProtocolBuffer.Encoder.NUMERIC,  #  98

   ProtocolBuffer.Encoder.MAX_TYPE,  #  99

   ProtocolBuffer.Encoder.STRING,  # 100

   ProtocolBuffer.Encoder.STARTGROUP,  # 101

   ProtocolBuffer.Encoder.STRING,  # 102

   ProtocolBuffer.Encoder.STRING,  # 103

   ProtocolBuffer.Encoder.STARTGROUP,  # 104

   ProtocolBuffer.Encoder.STRING,  # 105

   ProtocolBuffer.Encoder.STRING,  # 106

   ProtocolBuffer.Encoder.MAX_TYPE,  # 107

   ProtocolBuffer.Encoder.MAX_TYPE,  # 108

   ProtocolBuffer.Encoder.MAX_TYPE,  # 109

   ProtocolBuffer.Encoder.STARTGROUP,  # 110

   ProtocolBuffer.Encoder.NUMERIC,  # 111

   ProtocolBuffer.Encoder.NUMERIC,  # 112

   ProtocolBuffer.Encoder.NUMERIC,  # 113

   ProtocolBuffer.Encoder.STARTGROUP,  # 114

   ProtocolBuffer.Encoder.NUMERIC,  # 115

   ProtocolBuffer.Encoder.STRING,  # 116

   ProtocolBuffer.Encoder.NUMERIC,  # 117

   ProtocolBuffer.Encoder.NUMERIC,  # 118

   ProtocolBuffer.Encoder.STARTGROUP,  # 119

   ProtocolBuffer.Encoder.NUMERIC,  # 120

   ProtocolBuffer.Encoder.STRING,  # 121

   ProtocolBuffer.Encoder.NUMERIC,  # 122

   ProtocolBuffer.Encoder.STRING,  # 123

   ProtocolBuffer.Encoder.NUMERIC,  # 124

   ProtocolBuffer.Encoder.NUMERIC,  # 125

   ProtocolBuffer.Encoder.NUMERIC,  # 126

   ProtocolBuffer.Encoder.NUMERIC,  # 127

   ProtocolBuffer.Encoder.NUMERIC,  # 128

   ProtocolBuffer.Encoder.STARTGROUP,  # 129

   ProtocolBuffer.Encoder.NUMERIC,  # 130

   ProtocolBuffer.Encoder.NUMERIC,  # 131

   ProtocolBuffer.Encoder.NUMERIC,  # 132

   ProtocolBuffer.Encoder.NUMERIC,  # 133

   ProtocolBuffer.Encoder.STRING,  # 134

   ProtocolBuffer.Encoder.NUMERIC,  # 135

   ProtocolBuffer.Encoder.NUMERIC,  # 136

   ProtocolBuffer.Encoder.NUMERIC,  # 137

   ProtocolBuffer.Encoder.STARTGROUP,  # 138

   ProtocolBuffer.Encoder.NUMERIC,  # 139

   ProtocolBuffer.Encoder.NUMERIC,  # 140

   ProtocolBuffer.Encoder.STRING,  # 141

   ProtocolBuffer.Encoder.NUMERIC,  # 142

   ProtocolBuffer.Encoder.NUMERIC,  # 143

   ProtocolBuffer.Encoder.STRING,  # 144

   ProtocolBuffer.Encoder.NUMERIC,  # 145

   ProtocolBuffer.Encoder.STRING,  # 146

   ProtocolBuffer.Encoder.NUMERIC,  # 147

   ProtocolBuffer.Encoder.NUMERIC,  # 148

   ProtocolBuffer.Encoder.STARTGROUP,  # 149

   ProtocolBuffer.Encoder.NUMERIC,  # 150

   ProtocolBuffer.Encoder.STRING,  # 151

   ProtocolBuffer.Encoder.STRING,  # 152

   ProtocolBuffer.Encoder.NUMERIC,  # 153

   ProtocolBuffer.Encoder.NUMERIC,  # 154

   ProtocolBuffer.Encoder.NUMERIC,  # 155

   ProtocolBuffer.Encoder.STRING,  # 156

   ProtocolBuffer.Encoder.STARTGROUP,  # 157

   ProtocolBuffer.Encoder.STRING,  # 158

   ProtocolBuffer.Encoder.STARTGROUP,  # 159

   ProtocolBuffer.Encoder.STRING,  # 160

   ProtocolBuffer.Encoder.NUMERIC,  # 161

   ProtocolBuffer.Encoder.NUMERIC,  # 162

   ProtocolBuffer.Encoder.NUMERIC,  # 163

   ProtocolBuffer.Encoder.NUMERIC,  # 164

   ProtocolBuffer.Encoder.STRING,  # 165

   ProtocolBuffer.Encoder.STRING,  # 166

   ProtocolBuffer.Encoder.NUMERIC,  # 167

   ProtocolBuffer.Encoder.NUMERIC,  # 168

   ProtocolBuffer.Encoder.NUMERIC,  # 169

   ProtocolBuffer.Encoder.STARTGROUP,  # 170

   ProtocolBuffer.Encoder.STRING,  # 171

   ProtocolBuffer.Encoder.NUMERIC,  # 172

   ProtocolBuffer.Encoder.NUMERIC,  # 173

   ProtocolBuffer.Encoder.STRING,  # 174

   ProtocolBuffer.Encoder.STRING,  # 175

   ProtocolBuffer.Encoder.DOUBLE,  # 176

   ProtocolBuffer.Encoder.DOUBLE,  # 177

   ProtocolBuffer.Encoder.NUMERIC,  # 178

   ProtocolBuffer.Encoder.NUMERIC,  # 179

   ProtocolBuffer.Encoder.NUMERIC,  # 180

   ProtocolBuffer.Encoder.STARTGROUP,  # 181

   ProtocolBuffer.Encoder.STRING,  # 182

   ProtocolBuffer.Encoder.STRING,  # 183

   ProtocolBuffer.Encoder.NUMERIC,  # 184

   ProtocolBuffer.Encoder.STRING,  # 185

   ProtocolBuffer.Encoder.NUMERIC,  # 186

   ProtocolBuffer.Encoder.STRING,  # 187

   ProtocolBuffer.Encoder.STRING,  # 188

   ProtocolBuffer.Encoder.NUMERIC,  # 189

   ProtocolBuffer.Encoder.NUMERIC,  # 190

   ProtocolBuffer.Encoder.STRING,  # 191

   ProtocolBuffer.Encoder.STRING,  # 192

   ProtocolBuffer.Encoder.DOUBLE,  # 193

   ProtocolBuffer.Encoder.NUMERIC,  # 194

   ProtocolBuffer.Encoder.NUMERIC,  # 195

   ProtocolBuffer.Encoder.NUMERIC,  # 196

   ProtocolBuffer.Encoder.STRING,  # 197

   ProtocolBuffer.Encoder.NUMERIC,  # 198

   ProtocolBuffer.Encoder.NUMERIC,  # 199

   ProtocolBuffer.Encoder.STRING,  # 200

   ProtocolBuffer.Encoder.STRING,  # 201

   ProtocolBuffer.Encoder.NUMERIC,  # 202

   ProtocolBuffer.Encoder.NUMERIC,  # 203

   ProtocolBuffer.Encoder.STRING,  # 204

   ProtocolBuffer.Encoder.STARTGROUP,  # 205

   ProtocolBuffer.Encoder.NUMERIC,  # 206

   ProtocolBuffer.Encoder.NUMERIC,  # 207

   ProtocolBuffer.Encoder.NUMERIC,  # 208

   ProtocolBuffer.Encoder.NUMERIC,  # 209

   ProtocolBuffer.Encoder.STRING,  # 210

   ProtocolBuffer.Encoder.STRING,  # 211

   ProtocolBuffer.Encoder.STARTGROUP,  # 212

   ProtocolBuffer.Encoder.STRING,  # 213

   ProtocolBuffer.Encoder.STRING,  # 214

   ProtocolBuffer.Encoder.STRING,  # 215

   ProtocolBuffer.Encoder.STRING,  # 216

   ProtocolBuffer.Encoder.STRING,  # 217

   ProtocolBuffer.Encoder.STRING,  # 218

   ProtocolBuffer.Encoder.NUMERIC,  # 219

   ProtocolBuffer.Encoder.STARTGROUP,  # 220

   ProtocolBuffer.Encoder.STRING,  # 221

   ProtocolBuffer.Encoder.NUMERIC,  # 222

   ProtocolBuffer.Encoder.STRING,  # 223

   ProtocolBuffer.Encoder.STRING,  # 224

   ProtocolBuffer.Encoder.STRING,  # 225

   ProtocolBuffer.Encoder.NUMERIC,  # 226

   ProtocolBuffer.Encoder.STRING,  # 227

   ProtocolBuffer.Encoder.NUMERIC,  # 228

   ProtocolBuffer.Encoder.NUMERIC,  # 229

   ProtocolBuffer.Encoder.NUMERIC,  # 230

   ProtocolBuffer.Encoder.NUMERIC,  # 231

   ProtocolBuffer.Encoder.NUMERIC,  # 232

   ProtocolBuffer.Encoder.STRING,  # 233

   ProtocolBuffer.Encoder.STRING,  # 234

   ProtocolBuffer.Encoder.NUMERIC,  # 235

   ProtocolBuffer.Encoder.STARTGROUP,  # 236

   ProtocolBuffer.Encoder.NUMERIC,  # 237

   ProtocolBuffer.Encoder.STRING,  # 238

   ProtocolBuffer.Encoder.NUMERIC,  # 239

   ProtocolBuffer.Encoder.STARTGROUP,  # 240

   ProtocolBuffer.Encoder.NUMERIC,  # 241

   ProtocolBuffer.Encoder.NUMERIC,  # 242

   ProtocolBuffer.Encoder.NUMERIC,  # 243

   ProtocolBuffer.Encoder.DOUBLE,  # 244

   ProtocolBuffer.Encoder.STRING,  # 245

   ProtocolBuffer.Encoder.STARTGROUP,  # 246

   ProtocolBuffer.Encoder.NUMERIC,  # 247

   ProtocolBuffer.Encoder.NUMERIC,  # 248

   ProtocolBuffer.Encoder.NUMERIC,  # 249

   ProtocolBuffer.Encoder.STRING,  # 250

   ProtocolBuffer.Encoder.STRING,  # 251

   ProtocolBuffer.Encoder.NUMERIC,  # 252

   ProtocolBuffer.Encoder.NUMERIC,  # 253

   ProtocolBuffer.Encoder.NUMERIC,  # 254

   ProtocolBuffer.Encoder.STRING,  # 255

   ProtocolBuffer.Encoder.STRING,  # 256

   ProtocolBuffer.Encoder.NUMERIC,  # 257

   ProtocolBuffer.Encoder.NUMERIC,  # 258

   ProtocolBuffer.Encoder.STARTGROUP,  # 259

   ProtocolBuffer.Encoder.STRING,  # 260

   ProtocolBuffer.Encoder.NUMERIC,  # 261

   ProtocolBuffer.Encoder.STRING,  # 262

   ProtocolBuffer.Encoder.NUMERIC,  # 263

   ProtocolBuffer.Encoder.NUMERIC,  # 264

   ProtocolBuffer.Encoder.NUMERIC,  # 265

   ProtocolBuffer.Encoder.NUMERIC,  # 266

   ProtocolBuffer.Encoder.STRING,  # 267

   ProtocolBuffer.Encoder.STARTGROUP,  # 268

   ProtocolBuffer.Encoder.STRING,  # 269

   ProtocolBuffer.Encoder.STRING,  # 270

   ProtocolBuffer.Encoder.STARTGROUP,  # 271

   ProtocolBuffer.Encoder.STRING,  # 272

   ProtocolBuffer.Encoder.NUMERIC,  # 273

   ProtocolBuffer.Encoder.NUMERIC,  # 274

   ProtocolBuffer.Encoder.STARTGROUP,  # 275

   ProtocolBuffer.Encoder.NUMERIC,  # 276

   ProtocolBuffer.Encoder.NUMERIC,  # 277

   ProtocolBuffer.Encoder.NUMERIC,  # 278

   ProtocolBuffer.Encoder.STARTGROUP,  # 279

   ProtocolBuffer.Encoder.NUMERIC,  # 280

   ProtocolBuffer.Encoder.NUMERIC,  # 281

   ProtocolBuffer.Encoder.STRING,  # 282

   ProtocolBuffer.Encoder.STRING,  # 283

   ProtocolBuffer.Encoder.NUMERIC,  # 284

   ProtocolBuffer.Encoder.NUMERIC,  # 285

   ProtocolBuffer.Encoder.NUMERIC,  # 286

   ProtocolBuffer.Encoder.NUMERIC,  # 287

   ProtocolBuffer.Encoder.NUMERIC,  # 288

   ProtocolBuffer.Encoder.NUMERIC,  # 289

   ProtocolBuffer.Encoder.NUMERIC,  # 290

   ProtocolBuffer.Encoder.NUMERIC,  # 291

   ProtocolBuffer.Encoder.STRING,  # 292

   ProtocolBuffer.Encoder.STRING,  # 293

   ProtocolBuffer.Encoder.NUMERIC,  # 294

   ProtocolBuffer.Encoder.STRING,  # 295

   ProtocolBuffer.Encoder.NUMERIC,  # 296

   ProtocolBuffer.Encoder.STRING,  # 297

   ProtocolBuffer.Encoder.NUMERIC,  # 298

   ProtocolBuffer.Encoder.STRING,  # 299

   ProtocolBuffer.Encoder.STRING,  # 300

   ProtocolBuffer.Encoder.NUMERIC,  # 301

   ProtocolBuffer.Encoder.NUMERIC,  # 302

   ProtocolBuffer.Encoder.NUMERIC,  # 303

   ProtocolBuffer.Encoder.NUMERIC,  # 304

   ProtocolBuffer.Encoder.NUMERIC,  # 305

   ProtocolBuffer.Encoder.STRING,  # 306

   ProtocolBuffer.Encoder.NUMERIC,  # 307

   ProtocolBuffer.Encoder.STRING,  # 308

   ProtocolBuffer.Encoder.STRING,  # 309

   ProtocolBuffer.Encoder.NUMERIC,  # 310

   ProtocolBuffer.Encoder.MAX_TYPE,  # 311

   ProtocolBuffer.Encoder.MAX_TYPE,  # 312

   ProtocolBuffer.Encoder.MAX_TYPE,  # 313

   ProtocolBuffer.Encoder.MAX_TYPE,  # 314

   ProtocolBuffer.Encoder.MAX_TYPE,  # 315

   ProtocolBuffer.Encoder.MAX_TYPE,  # 316

   ProtocolBuffer.Encoder.MAX_TYPE,  # 317

   ProtocolBuffer.Encoder.MAX_TYPE,  # 318

   ProtocolBuffer.Encoder.NUMERIC,  # 319

   ProtocolBuffer.Encoder.NUMERIC,  # 320

   ProtocolBuffer.Encoder.NUMERIC,  # 321

   ProtocolBuffer.Encoder.NUMERIC,  # 322

   ProtocolBuffer.Encoder.STRING,  # 323

   ProtocolBuffer.Encoder.NUMERIC,  # 324

   ProtocolBuffer.Encoder.NUMERIC,  # 325

   ProtocolBuffer.Encoder.NUMERIC,  # 326

   ProtocolBuffer.Encoder.NUMERIC,  # 327

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x1b,
    0x72,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x72,
    0x74,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x08,
    0x52,
    0x54,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x13,
    0x1a,
    0x03,
    0x44,
    0x6f,
    0x63,
    0x20,
    0x02,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x49,
    0x64,
    0x20,
    0xa5,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x4a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x4d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x17,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x20,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x44,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x65,
    0x64,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xe6,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x80,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x4e,
    0x53,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x4e,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0xe7,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x75,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x73,
    0x20,
    0x88,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x03,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x95,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x2e,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x96,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x97,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x2e,
    0x52,
    0x61,
    0x77,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x98,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x2e,
    0x52,
    0x65,
    0x66,
    0x72,
    0x65,
    0x73,
    0x68,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x99,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x2e,
    0x49,
    0x50,
    0x41,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x20,
    0x9a,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x2e,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x9b,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x54,
    0x72,
    0x75,
    0x6e,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0xb0,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x55,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x70,
    0x41,
    0x64,
    0x64,
    0x72,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x45,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x12,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x42,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x20,
    0x0d,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x75,
    0x74,
    0x68,
    0x4d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x20,
    0x89,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x20,
    0x91,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x50,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x20,
    0x93,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x44,
    0x75,
    0x70,
    0x48,
    0x69,
    0x6e,
    0x74,
    0x20,
    0x94,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x46,
    0x50,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0x10,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4e,
    0x75,
    0x6d,
    0x54,
    0x6f,
    0x6b,
    0x65,
    0x6e,
    0x73,
    0x20,
    0x8a,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4e,
    0x6f,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0xf9,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4e,
    0x6f,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x9c,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4e,
    0x6f,
    0x46,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x9d,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4e,
    0x6f,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x9e,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x46,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x54,
    0x65,
    0x72,
    0x6d,
    0x46,
    0x50,
    0x20,
    0x47,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x29,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x48,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x29,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x41,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x20,
    0x49,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x29,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x54,
    0x65,
    0x72,
    0x6d,
    0x46,
    0x6f,
    0x72,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x20,
    0xb9,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x29,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x61,
    0x77,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x8a,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x61,
    0x77,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x4c,
    0x6f,
    0x6f,
    0x6b,
    0x75,
    0x70,
    0x49,
    0x44,
    0x20,
    0x8c,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x2e,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x61,
    0x77,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x52,
    0x61,
    0x77,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x20,
    0x8d,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x02,
    0x4a,
    0x08,
    0x47,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x60,
    0x2e,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x61,
    0x77,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x46,
    0x72,
    0x61,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x49,
    0x44,
    0x20,
    0x8e,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2e,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x61,
    0x77,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x4e,
    0x75,
    0x6d,
    0x46,
    0x72,
    0x61,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x8f,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2e,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x4b,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x49,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x65,
    0x72,
    0x20,
    0x4c,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x33,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x4d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x33,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x4e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x33,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x44,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x4f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x33,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x44,
    0x6f,
    0x63,
    0x20,
    0x9f,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0xa0,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x38,
    0x14,
    0x13,
    0x1a,
    0x22,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x55,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0xa1,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x38,
    0x14,
    0x13,
    0x1a,
    0x29,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x48,
    0x74,
    0x6d,
    0x6c,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x44,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x20,
    0xa2,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x38,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x56,
    0x69,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0xad,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x65,
    0x72,
    0x46,
    0x65,
    0x74,
    0x63,
    0x68,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x20,
    0xa7,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x65,
    0x72,
    0x46,
    0x65,
    0x74,
    0x63,
    0x68,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0xa8,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x65,
    0x72,
    0x43,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x46,
    0x61,
    0x69,
    0x6c,
    0x65,
    0x64,
    0x20,
    0xa9,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x65,
    0x72,
    0x52,
    0x6f,
    0x62,
    0x6f,
    0x74,
    0x73,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x20,
    0x81,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x65,
    0x72,
    0x52,
    0x6f,
    0x62,
    0x6f,
    0x74,
    0x73,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x82,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x57,
    0x65,
    0x62,
    0x4d,
    0x69,
    0x72,
    0x72,
    0x6f,
    0x72,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0xbd,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x43,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x4c,
    0x6f,
    0x6f,
    0x70,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x53,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0xbe,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0xca,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x46,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x55,
    0x72,
    0x6c,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0xd2,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0xab,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x46,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0xe3,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x83,
    0x02,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x46,
    0x65,
    0x74,
    0x63,
    0x68,
    0x6c,
    0x6f,
    0x67,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x84,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x48,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4f,
    0x66,
    0x66,
    0x73,
    0x65,
    0x74,
    0x20,
    0x85,
    0x02,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0x48,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x86,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x48,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x48,
    0x6f,
    0x75,
    0x72,
    0x6c,
    0x79,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x8c,
    0x02,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x48,
    0x6f,
    0x75,
    0x72,
    0x6c,
    0x79,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x49,
    0x44,
    0x20,
    0x8d,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x4c,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x48,
    0x6f,
    0x75,
    0x72,
    0x6c,
    0x79,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x65,
    0x65,
    0x64,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x73,
    0x20,
    0x8e,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x60,
    0x4c,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x72,
    0x52,
    0x61,
    0x6e,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x66,
    0x69,
    0x65,
    0x72,
    0x73,
    0x20,
    0xa3,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x65,
    0x78,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x52,
    0x61,
    0x6e,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x66,
    0x69,
    0x65,
    0x72,
    0x73,
    0x20,
    0xc7,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0xeb,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x43,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x20,
    0xec,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x43,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0xed,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x52,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x43,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0xee,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x52,
    0x14,
    0x13,
    0x1a,
    0x2c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x43,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x49,
    0x73,
    0x55,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x69,
    0x72,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0xa8,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x52,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x43,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x52,
    0x65,
    0x70,
    0x69,
    0x64,
    0x20,
    0xa9,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x52,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xfb,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x57,
    0x69,
    0x6b,
    0x69,
    0x70,
    0x65,
    0x64,
    0x69,
    0x61,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0xf5,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x44,
    0x6f,
    0x63,
    0x20,
    0xb8,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0xd0,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x72,
    0x20,
    0xef,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0xdc,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x50,
    0x65,
    0x72,
    0x44,
    0x6f,
    0x63,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0xdd,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x11,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x50,
    0x65,
    0x72,
    0x44,
    0x6f,
    0x63,
    0x44,
    0x61,
    0x74,
    0x61,
    0x60,
    0x5c,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0xde,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x5c,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0xdf,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x5c,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x45,
    0x6d,
    0x62,
    0x65,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0xe1,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x45,
    0x6d,
    0x62,
    0x65,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x45,
    0x6d,
    0x62,
    0x65,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0xe2,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x73,
    0x46,
    0x6c,
    0x61,
    0x73,
    0x68,
    0x50,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x20,
    0xae,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x46,
    0x6c,
    0x61,
    0x73,
    0x68,
    0x50,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0xb1,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x46,
    0x6c,
    0x61,
    0x73,
    0x68,
    0x53,
    0x6b,
    0x69,
    0x70,
    0x49,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x55,
    0x72,
    0x6c,
    0x20,
    0xb2,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x20,
    0xf6,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x2c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x45,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x20,
    0xf7,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x65,
    0x14,
    0x13,
    0x1a,
    0x27,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x52,
    0x65,
    0x6c,
    0x61,
    0x78,
    0x65,
    0x64,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x20,
    0xf8,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x65,
    0x14,
    0x13,
    0x1a,
    0x27,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x4e,
    0x65,
    0x61,
    0x72,
    0x44,
    0x75,
    0x70,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x20,
    0x89,
    0x02,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x65,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x53,
    0x69,
    0x6d,
    0x48,
    0x61,
    0x73,
    0x68,
    0x20,
    0x9f,
    0x02,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x65,
    0x14,
    0x13,
    0x1a,
    0x28,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x53,
    0x69,
    0x6d,
    0x48,
    0x61,
    0x73,
    0x68,
    0x49,
    0x73,
    0x54,
    0x72,
    0x75,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0xa2,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0x60,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x2b,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x4e,
    0x6f,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x20,
    0xc6,
    0x02,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x65,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x42,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x61,
    0x64,
    0x33,
    0x30,
    0x32,
    0x43,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x64,
    0x54,
    0x6f,
    0x33,
    0x30,
    0x31,
    0x20,
    0xc2,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x72,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0xac,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0a,
    0x4d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x53,
    0x65,
    0x74,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x73,
    0x75,
    0x6d,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0xa5,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0a,
    0x4d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x53,
    0x65,
    0x74,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0xff,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0a,
    0x4d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x53,
    0x65,
    0x74,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x45,
    0x78,
    0x70,
    0x69,
    0x72,
    0x79,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0xfe,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4e,
    0x6f,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x50,
    0x61,
    0x67,
    0x65,
    0x20,
    0xb6,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x8f,
    0x02,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x90,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x72,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x55,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x91,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x72,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x42,
    0x69,
    0x74,
    0x66,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x20,
    0x92,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x72,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x49,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xaf,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x72,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0xa4,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0a,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x64,
    0x5f,
    0x66,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x73,
    0x65,
    0x20,
    0xb3,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x63,
    0x73,
    0x65,
    0x5f,
    0x69,
    0x64,
    0x20,
    0xb4,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x18,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x5f,
    0x70,
    0x72,
    0x6f,
    0x73,
    0x65,
    0x2e,
    0x43,
    0x53,
    0x45,
    0x55,
    0x72,
    0x6c,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x72,
    0x69,
    0x63,
    0x68,
    0x73,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x20,
    0xb5,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x14,
    0x72,
    0x69,
    0x63,
    0x68,
    0x73,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x73,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x4d,
    0x61,
    0x70,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x20,
    0x1e,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x1f,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0x7b,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x42,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x20,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0x60,
    0x7b,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x20,
    0x21,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0x60,
    0x7b,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x42,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x43,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x7a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x7b,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x2e,
    0x53,
    0x79,
    0x6e,
    0x63,
    0x56,
    0x69,
    0x61,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x52,
    0x50,
    0x43,
    0x4c,
    0x6f,
    0x67,
    0x20,
    0x85,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x7b,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x28,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x4b,
    0x65,
    0x79,
    0x20,
    0x29,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x81,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x50,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x79,
    0x20,
    0x2a,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x81,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x49,
    0x6e,
    0x74,
    0x56,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x2b,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x81,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x46,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x56,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x2c,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x60,
    0x81,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x44,
    0x6f,
    0x75,
    0x62,
    0x6c,
    0x65,
    0x56,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x2d,
    0x28,
    0x01,
    0x30,
    0x01,
    0x38,
    0x01,
    0x60,
    0x81,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x56,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x2e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x81,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x32,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x45,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x44,
    0x20,
    0x33,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x50,
    0x52,
    0x20,
    0x42,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x50,
    0x20,
    0x34,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x4c,
    0x43,
    0x41,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x50,
    0x20,
    0x75,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x4c,
    0x43,
    0x41,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x49,
    0x44,
    0x20,
    0x84,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x4f,
    0x72,
    0x67,
    0x20,
    0x35,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x48,
    0x61,
    0x73,
    0x68,
    0x20,
    0x36,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x37,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x4f,
    0x75,
    0x74,
    0x64,
    0x65,
    0x67,
    0x72,
    0x65,
    0x65,
    0x20,
    0x43,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x41,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x38,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x88,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x49,
    0x44,
    0x20,
    0x39,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0x94,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x49,
    0x44,
    0x20,
    0x7c,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x94,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x54,
    0x65,
    0x78,
    0x74,
    0x20,
    0x3a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x94,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x46,
    0x6f,
    0x6e,
    0x74,
    0x53,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x3b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x94,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x57,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x40,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0x60,
    0x94,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x44,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x44,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x94,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4f,
    0x6e,
    0x44,
    0x6f,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x20,
    0x70,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x94,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x50,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x53,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x5f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x44,
    0x20,
    0x51,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x02,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x50,
    0x52,
    0x20,
    0x5c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x6e,
    0x64,
    0x79,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x60,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x43,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x49,
    0x44,
    0x20,
    0x62,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x50,
    0x20,
    0x52,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x4f,
    0x72,
    0x67,
    0x20,
    0x53,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x53,
    0x69,
    0x74,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x61,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x48,
    0x61,
    0x73,
    0x68,
    0x20,
    0x54,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x9c,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x55,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x9c,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x44,
    0x6f,
    0x63,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x56,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x4f,
    0x75,
    0x74,
    0x44,
    0x65,
    0x67,
    0x72,
    0x65,
    0x65,
    0x20,
    0x57,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x54,
    0x65,
    0x78,
    0x74,
    0x20,
    0x58,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x46,
    0x6f,
    0x6e,
    0x74,
    0x53,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x59,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x33,
    0x60,
    0x9c,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x33,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x57,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x5a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x32,
    0x37,
    0x60,
    0x9c,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x32,
    0x37,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x44,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x5d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x64,
    0x20,
    0x5e,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x9c,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x49,
    0x44,
    0x20,
    0x5b,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x02,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4f,
    0x6e,
    0x44,
    0x6f,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x20,
    0x71,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x9c,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x55,
    0x72,
    0x6c,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x74,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0d,
    0x55,
    0x72,
    0x6c,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x54,
    0x61,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x54,
    0x44,
    0x75,
    0x70,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x92,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0f,
    0x52,
    0x54,
    0x44,
    0x75,
    0x70,
    0x4c,
    0x6f,
    0x67,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x20,
    0x65,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x4c,
    0x6f,
    0x67,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x66,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0xb2,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x4d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x72,
    0x20,
    0x67,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xb2,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x45,
    0x63,
    0x68,
    0x6f,
    0x52,
    0x54,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x86,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x60,
    0xb2,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0xb2,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x44,
    0x20,
    0x6f,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0xb6,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x4c,
    0x6f,
    0x6f,
    0x6b,
    0x75,
    0x70,
    0x49,
    0x44,
    0x20,
    0x76,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0xb6,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x7d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xb6,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x28,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x70,
    0x44,
    0x61,
    0x74,
    0x61,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x8b,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xb6,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x44,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x2e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x4f,
    0x72,
    0x67,
    0x20,
    0x90,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xb6,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x4d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x72,
    0x20,
    0x64,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x46,
    0x6c,
    0x75,
    0x73,
    0x68,
    0x20,
    0x3c,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x4d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x72,
    0x20,
    0x3d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x20,
    0x3e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x44,
    0x69,
    0x73,
    0x63,
    0x61,
    0x72,
    0x64,
    0x20,
    0x3f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x48,
    0x65,
    0x61,
    0x72,
    0x74,
    0x62,
    0x65,
    0x61,
    0x74,
    0x20,
    0x72,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x48,
    0x65,
    0x61,
    0x72,
    0x74,
    0x62,
    0x65,
    0x61,
    0x74,
    0x2e,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x53,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x73,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0xc1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x77,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x49,
    0x73,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x4f,
    0x72,
    0x41,
    0x64,
    0x64,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x20,
    0x78,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x02,
    0x60,
    0xc3,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x79,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0xc3,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x7b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xc3,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x55,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x87,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0xc3,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x52,
    0x65,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x20,
    0x80,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x56,
    0x69,
    0x65,
    0x77,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x81,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x56,
    0x69,
    0x65,
    0x77,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x2e,
    0x56,
    0x69,
    0x65,
    0x77,
    0x49,
    0x64,
    0x20,
    0x82,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0xc9,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x56,
    0x69,
    0x65,
    0x77,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x2e,
    0x53,
    0x65,
    0x71,
    0x4e,
    0x75,
    0x6d,
    0x20,
    0x83,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0xc9,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x72,
    0x20,
    0x9d,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x72,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x9c,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xcc,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x72,
    0x2e,
    0x54,
    0x6d,
    0x70,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xa6,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xcc,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x72,
    0x2e,
    0x4c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x20,
    0x9e,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xcc,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x72,
    0x2e,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0xa3,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0xcc,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0xaa,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x31,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x5f,
    0x69,
    0x6e,
    0x74,
    0x33,
    0x32,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xa4,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xab,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x52,
    0x65,
    0x75,
    0x73,
    0x65,
    0x64,
    0x5f,
    0x46,
    0x72,
    0x6f,
    0x6d,
    0x5f,
    0x52,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0xc3,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x52,
    0x65,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x42,
    0x79,
    0x20,
    0xac,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x52,
    0x65,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0xad,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x6e,
    0x75,
    0x6d,
    0x5f,
    0x73,
    0x75,
    0x6d,
    0x6d,
    0x61,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x7e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x6e,
    0x75,
    0x6d,
    0x5f,
    0x70,
    0x65,
    0x72,
    0x6d,
    0x72,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x7f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x52,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xae,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x29,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x75,
    0x70,
    0x65,
    0x72,
    0x63,
    0x65,
    0x64,
    0x65,
    0x64,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xaf,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x65,
    0x72,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0xbb,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x65,
    0x72,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x44,
    0x75,
    0x70,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0xbc,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x42,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x50,
    0x72,
    0x6f,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xb4,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x4e,
    0x53,
    0x42,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x50,
    0x72,
    0x6f,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xa6,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x22,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x73,
    0x41,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x78,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0xdb,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x73,
    0x41,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x78,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x4e,
    0x53,
    0x20,
    0xbf,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x20,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x41,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x78,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0xe8,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x41,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x78,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x4e,
    0x53,
    0x20,
    0xc0,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4d,
    0x61,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x64,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x20,
    0xd7,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x46,
    0x72,
    0x65,
    0x73,
    0x68,
    0x65,
    0x72,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x20,
    0x68,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x2a,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x46,
    0x72,
    0x65,
    0x73,
    0x68,
    0x65,
    0x72,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x49,
    0x64,
    0x20,
    0x69,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xe4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x46,
    0x72,
    0x65,
    0x73,
    0x68,
    0x65,
    0x72,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x2e,
    0x4d,
    0x61,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x64,
    0x52,
    0x65,
    0x70,
    0x49,
    0x64,
    0x20,
    0x6a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xe4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x44,
    0x75,
    0x70,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xb5,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x29,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x44,
    0x75,
    0x70,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x20,
    0xb6,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0xe7,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x36,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x44,
    0x75,
    0x70,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x49,
    0x64,
    0x20,
    0xb7,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xe7,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x2e,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x44,
    0x75,
    0x70,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0xba,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xe7,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x2e,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x44,
    0x75,
    0x70,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xc8,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xe7,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x41,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xd4,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x29,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x41,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x20,
    0xd5,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0xec,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x2e,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x41,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xd6,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xec,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x44,
    0x75,
    0x70,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0xd8,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x41,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0xd9,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x50,
    0x65,
    0x72,
    0x6d,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0xda,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x6f,
    0x63,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x43,
    0x61,
    0x6e,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x55,
    0x72,
    0x6c,
    0x20,
    0xc5,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x43,
    0x61,
    0x6e,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x44,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xb0,
    0x01,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x22,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x76,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x5f,
    0x43,
    0x61,
    0x6e,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x55,
    0x72,
    0x6c,
    0x20,
    0xfa,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x43,
    0x61,
    0x6e,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x49,
    0x6e,
    0x5f,
    0x49,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x65,
    0x73,
    0x20,
    0xd1,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x46,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x20,
    0xb1,
    0x01,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x38,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x41,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xb2,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x36,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x52,
    0x65,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x46,
    0x69,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xc2,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0xb3,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x69,
    0x74,
    0x65,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x20,
    0xbf,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x2a,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x69,
    0x74,
    0x65,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x20,
    0xc0,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x29,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x20,
    0xea,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x2a,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x43,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x67,
    0x65,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x20,
    0x93,
    0x02,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x2b,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x43,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x67,
    0x65,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x2e,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x94,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0xfd,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x27,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x43,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x67,
    0x65,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x2e,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x20,
    0x95,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0xfd,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x43,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x67,
    0x65,
    0x53,
    0x74,
    0x61,
    0x74,
    0x73,
    0x2e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x73,
    0x20,
    0x96,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0xfd,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x32,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x5f,
    0x64,
    0x6f,
    0x75,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xc1,
    0x01,
    0x28,
    0x01,
    0x30,
    0x01,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x44,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x5f,
    0x47,
    0x75,
    0x61,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x65,
    0x5f,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x88,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x20,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x79,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xc4,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x6f,
    0x6d,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0xc6,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x6f,
    0x6d,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x4e,
    0x53,
    0x20,
    0xaa,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x20,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x46,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x49,
    0x6e,
    0x42,
    0x61,
    0x72,
    0x74,
    0x55,
    0x72,
    0x6c,
    0x46,
    0x70,
    0x4d,
    0x61,
    0x70,
    0x20,
    0xc7,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x47,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xcc,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x23,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x2c,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xcd,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x32,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0xce,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x88,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x37,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x49,
    0x73,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0xcf,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x02,
    0x60,
    0x88,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x34,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x20,
    0xc9,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x23,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x60,
    0x88,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x3c,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x53,
    0x75,
    0x62,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x20,
    0x97,
    0x02,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x88,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x45,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x53,
    0x75,
    0x62,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x2e,
    0x53,
    0x75,
    0x62,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x98,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x8c,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x47,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x53,
    0x75,
    0x62,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x2e,
    0x49,
    0x73,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x99,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x02,
    0x60,
    0x8c,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x44,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x53,
    0x75,
    0x62,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x2e,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x20,
    0x9a,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x23,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x60,
    0x8c,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x31,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x2e,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0xa0,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x88,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x20,
    0xe9,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x24,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x46,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x52,
    0x65,
    0x75,
    0x73,
    0x65,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0xcb,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4d,
    0x69,
    0x63,
    0x72,
    0x6f,
    0x52,
    0x65,
    0x70,
    0x6d,
    0x61,
    0x70,
    0x20,
    0xd3,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x1e,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x4d,
    0x69,
    0x63,
    0x72,
    0x6f,
    0x52,
    0x65,
    0x70,
    0x6d,
    0x61,
    0x70,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x20,
    0xa7,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x1c,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x44,
    0x46,
    0x41,
    0x5f,
    0x4c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x73,
    0x20,
    0xe0,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x6e,
    0x6f,
    0x6e,
    0x5f,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x5f,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x20,
    0xe4,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x6e,
    0x6f,
    0x6e,
    0x5f,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0xe5,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x63,
    0x72,
    0x79,
    0x70,
    0x74,
    0x6f,
    0x34,
    0x30,
    0x34,
    0x5f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x87,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x20,
    0xf0,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x72,
    0x5f,
    0x51,
    0x75,
    0x65,
    0x75,
    0x65,
    0x20,
    0xf1,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x99,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x72,
    0x5f,
    0x53,
    0x65,
    0x67,
    0x49,
    0x64,
    0x20,
    0xf2,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x99,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x72,
    0x5f,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0xf3,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x99,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x2e,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x72,
    0x5f,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0xf4,
    0x01,
    0x28,
    0x01,
    0x30,
    0x01,
    0x38,
    0x01,
    0x60,
    0x99,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x6b,
    0x69,
    0x70,
    0x44,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x69,
    0x6e,
    0x67,
    0x20,
    0xfc,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x6b,
    0x69,
    0x70,
    0x44,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x43,
    0x6f,
    0x6c,
    0x6c,
    0x61,
    0x70,
    0x73,
    0x65,
    0x20,
    0xfd,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x4f,
    0x75,
    0x74,
    0x70,
    0x75,
    0x74,
    0x20,
    0x8b,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x27,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x5f,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x4f,
    0x75,
    0x74,
    0x70,
    0x75,
    0x74,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x46,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x20,
    0x9b,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0d,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x2d,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x46,
    0x69,
    0x72,
    0x73,
    0x74,
    0x43,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x65,
    0x64,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x20,
    0xa1,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x73,
    0x42,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x61,
    0x64,
    0x20,
    0xc1,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x46,
    0x72,
    0x6f,
    0x6d,
    0x54,
    0x6f,
    0x6f,
    0x6c,
    0x62,
    0x61,
    0x72,
    0x20,
    0xc3,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0xd1,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x50,
    0x65,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x65,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x73,
    0x20,
    0xc4,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x50,
    0x69,
    0x70,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x73,
    0x50,
    0x65,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0xc5,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0xd1,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x10,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x45,
    0x6e,
    0x75,
    0x6d,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x43,
    0x4f,
    0x4c,
    0x4c,
    0x45,
    0x43,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x5f,
    0x52,
    0x45,
    0x53,
    0x54,
    0x52,
    0x49,
    0x43,
    0x54,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x53,
    0x45,
    0x4b,
    0x55,
    0x52,
    0x45,
    0x5f,
    0x52,
    0x45,
    0x53,
    0x54,
    0x52,
    0x49,
    0x43,
    0x54,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x70,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x44,
    0x61,
    0x74,
    0x61,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x41,
    0x4e,
    0x43,
    0x48,
    0x4f,
    0x52,
    0x5f,
    0x49,
    0x4e,
    0x44,
    0x45,
    0x58,
    0x45,
    0x44,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x41,
    0x4e,
    0x43,
    0x48,
    0x4f,
    0x52,
    0x5f,
    0x52,
    0x41,
    0x57,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x41,
    0x4e,
    0x43,
    0x48,
    0x4f,
    0x52,
    0x5f,
    0x49,
    0x4e,
    0x44,
    0x45,
    0x58,
    0x45,
    0x44,
    0x5f,
    0x41,
    0x4e,
    0x44,
    0x5f,
    0x52,
    0x41,
    0x57,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1e,
    0x4e,
    0x55,
    0x4d,
    0x5f,
    0x52,
    0x45,
    0x53,
    0x50,
    0x4f,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x41,
    0x4e,
    0x43,
    0x48,
    0x4f,
    0x52,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x41,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x53,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x11,
    0x55,
    0x72,
    0x6c,
    0x4d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x73,
    0x80,
    0x01,
    0x00,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x56,
    0x45,
    0x52,
    0x54,
    0x45,
    0x52,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x5f,
    0x44,
    0x45,
    0x4d,
    0x4f,
    0x54,
    0x45,
    0x50,
    0x41,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x52,
    0x45,
    0x50,
    0x49,
    0x44,
    0x5f,
    0x4d,
    0x41,
    0x4e,
    0x47,
    0x4c,
    0x45,
    0x5f,
    0x57,
    0x48,
    0x49,
    0x54,
    0x45,
    0x4c,
    0x49,
    0x53,
    0x54,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1d,
    0x46,
    0x49,
    0x4e,
    0x41,
    0x4c,
    0x54,
    0x41,
    0x52,
    0x47,
    0x45,
    0x54,
    0x5f,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x56,
    0x45,
    0x52,
    0x54,
    0x45,
    0x52,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1d,
    0x46,
    0x49,
    0x4e,
    0x41,
    0x4c,
    0x54,
    0x41,
    0x52,
    0x47,
    0x45,
    0x54,
    0x5f,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x5f,
    0x44,
    0x45,
    0x4d,
    0x4f,
    0x54,
    0x45,
    0x50,
    0x41,
    0x54,
    0x98,
    0x01,
    0x10,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x11,
    0x52,
    0x6f,
    0x62,
    0x6f,
    0x74,
    0x65,
    0x64,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x45,
    0x6e,
    0x75,
    0x6d,
    0x80,
    0x01,
    0x00,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x4e,
    0x4f,
    0x5f,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x08,
    0x4d,
    0x45,
    0x54,
    0x41,
    0x5f,
    0x54,
    0x41,
    0x47,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x52,
    0x4f,
    0x42,
    0x4f,
    0x54,
    0x53,
    0x5f,
    0x54,
    0x58,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x5f,
    0x46,
    0x49,
    0x4c,
    0x45,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x52,
    0x4f,
    0x42,
    0x4f,
    0x54,
    0x53,
    0x5f,
    0x48,
    0x54,
    0x54,
    0x50,
    0x5f,
    0x48,
    0x45,
    0x41,
    0x44,
    0x45,
    0x52,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x4f,
    0x54,
    0x48,
    0x45,
    0x52,
    0x5f,
    0x52,
    0x4f,
    0x42,
    0x4f,
    0x54,
    0x53,
    0x5f,
    0x50,
    0x4f,
    0x4c,
    0x49,
    0x43,
    0x59,
    0x98,
    0x01,
    0x10,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x11,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x80,
    0x01,
    0x00,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x57,
    0x49,
    0x4b,
    0x49,
    0x50,
    0x45,
    0x44,
    0x49,
    0x41,
    0x5f,
    0x52,
    0x45,
    0x44,
    0x49,
    0x52,
    0x45,
    0x43,
    0x54,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x4a,
    0x41,
    0x56,
    0x41,
    0x53,
    0x43,
    0x52,
    0x49,
    0x50,
    0x54,
    0x5f,
    0x52,
    0x45,
    0x44,
    0x49,
    0x52,
    0x45,
    0x43,
    0x54,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x53,
    0x49,
    0x4e,
    0x47,
    0x4c,
    0x45,
    0x5f,
    0x46,
    0x52,
    0x41,
    0x4d,
    0x45,
    0x5f,
    0x52,
    0x45,
    0x44,
    0x49,
    0x52,
    0x45,
    0x43,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x4d,
    0x45,
    0x54,
    0x41,
    0x5f,
    0x52,
    0x45,
    0x46,
    0x52,
    0x45,
    0x53,
    0x48,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x52,
    0x53,
    0x53,
    0x5f,
    0x41,
    0x54,
    0x4f,
    0x4d,
    0x5f,
    0x52,
    0x45,
    0x44,
    0x49,
    0x52,
    0x45,
    0x43,
    0x54,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x43,
    0x52,
    0x59,
    0x50,
    0x54,
    0x4f,
    0x33,
    0x30,
    0x31,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['LogicalTarget','MobileData','RTDocReference','RTDocReference_AdditionalChecksums','RTDocEmbedding','RTDocEmbedding_Parent','RTDocEmbedding_Target','RTUpdate','RTUpdate_PipelineInfoIndexSpecificFactors_DEPRECATEDSubIndexFactors','RTUpdate_LinkAnchor','RTUpdate_DocIndexData','RTUpdate_DocDirectory','RTUpdate_PipelineInfoFresherRepId','RTUpdate_DataRequestAnchorIndexData','RTUpdate_DocRawAnchorData','RTUpdate_DocRedirects','RTUpdate_DocOriginalDoc','RTUpdate_PipelineInfoDupForwarding_DEPRECATED','RTUpdate_PipelineInfoIndexSpecificFactors_DEPRECATED','RTUpdate_PipelineInfoAlternateName_DEPRECATED','RTUpdate_DocPremiumData','RTUpdate_DocLogicalTargetChoices','RTUpdate_PipelineInfoTrace','RTUpdate_DocAdditionalChecksums','RTUpdate_DocDebugInfo','RTUpdate_DocHourlyInfo','RTUpdate_DocIncludedContent','RTUpdate_PipelineInfoIndexCoverageStats','RTUpdate_Doc','RTUpdate_DeleteDoc','RTUpdate_Data','RTUpdate_Link','RTUpdate_Anchor','RTUpdate_DataRequest','RTUpdate_Heartbeat','RTUpdate_RestrictUpdate','RTUpdate_Viewstamp','RTUpdate_ContentManager','RTUpdate_PipelineInfo']
