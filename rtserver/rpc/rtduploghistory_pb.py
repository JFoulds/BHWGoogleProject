# This file automatically generated by protocol-compiler from rtserver/rpc/rtduploghistory.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class RTDupLogAction(ProtocolBuffer.ProtocolMessage):

  CONTENTDUP   =    0 
  TEMP_REDIRECT =    1 
  PERM_REDIRECT =    2 
  NUM_REASONS  =    3 

  _Reason_NAMES = {
    0: "CONTENTDUP",
    1: "TEMP_REDIRECT",
    2: "PERM_REDIRECT",
    3: "NUM_REASONS",
  }

  def Reason_Name(cls, x): return cls._Reason_NAMES.get(x, "")
  Reason_Name = classmethod(Reason_Name)

  def __init__(self, contents=None):
    self.sourceurlfp_ = 0
    self.targeturlfp_ = 0
    self.reason_ = 0
    self.contentfp_ = 0
    self.sourcepagerank_ = 0
    self.targetpagerank_ = 0
    self.has_sourceurlfp_ = 0
    self.has_targeturlfp_ = 0
    self.has_reason_ = 0
    self.has_contentfp_ = 0
    self.has_sourcepagerank_ = 0
    self.has_targetpagerank_ = 0
    if contents is not None: self.MergeFromString(contents)

  def sourceurlfp(self): return self.sourceurlfp_

  def set_sourceurlfp(self, x):
    self.has_sourceurlfp_ = 1
    self.sourceurlfp_ = x

  def clear_sourceurlfp(self):
    self.has_sourceurlfp_ = 0
    self.sourceurlfp_ = 0

  def has_sourceurlfp(self): return self.has_sourceurlfp_

  def targeturlfp(self): return self.targeturlfp_

  def set_targeturlfp(self, x):
    self.has_targeturlfp_ = 1
    self.targeturlfp_ = x

  def clear_targeturlfp(self):
    self.has_targeturlfp_ = 0
    self.targeturlfp_ = 0

  def has_targeturlfp(self): return self.has_targeturlfp_

  def reason(self): return self.reason_

  def set_reason(self, x):
    self.has_reason_ = 1
    self.reason_ = x

  def clear_reason(self):
    self.has_reason_ = 0
    self.reason_ = 0

  def has_reason(self): return self.has_reason_

  def contentfp(self): return self.contentfp_

  def set_contentfp(self, x):
    self.has_contentfp_ = 1
    self.contentfp_ = x

  def clear_contentfp(self):
    self.has_contentfp_ = 0
    self.contentfp_ = 0

  def has_contentfp(self): return self.has_contentfp_

  def sourcepagerank(self): return self.sourcepagerank_

  def set_sourcepagerank(self, x):
    self.has_sourcepagerank_ = 1
    self.sourcepagerank_ = x

  def clear_sourcepagerank(self):
    self.has_sourcepagerank_ = 0
    self.sourcepagerank_ = 0

  def has_sourcepagerank(self): return self.has_sourcepagerank_

  def targetpagerank(self): return self.targetpagerank_

  def set_targetpagerank(self, x):
    self.has_targetpagerank_ = 1
    self.targetpagerank_ = x

  def clear_targetpagerank(self):
    self.has_targetpagerank_ = 0
    self.targetpagerank_ = 0

  def has_targetpagerank(self): return self.has_targetpagerank_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_sourceurlfp()): self.set_sourceurlfp(x.sourceurlfp())
    if (x.has_targeturlfp()): self.set_targeturlfp(x.targeturlfp())
    if (x.has_reason()): self.set_reason(x.reason())
    if (x.has_contentfp()): self.set_contentfp(x.contentfp())
    if (x.has_sourcepagerank()): self.set_sourcepagerank(x.sourcepagerank())
    if (x.has_targetpagerank()): self.set_targetpagerank(x.targetpagerank())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDupLogAction', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDupLogAction')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDupLogAction', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDupLogAction', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDupLogAction', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_sourceurlfp_ != x.has_sourceurlfp_: return 0
    if self.has_sourceurlfp_ and self.sourceurlfp_ != x.sourceurlfp_: return 0
    if self.has_targeturlfp_ != x.has_targeturlfp_: return 0
    if self.has_targeturlfp_ and self.targeturlfp_ != x.targeturlfp_: return 0
    if self.has_reason_ != x.has_reason_: return 0
    if self.has_reason_ and self.reason_ != x.reason_: return 0
    if self.has_contentfp_ != x.has_contentfp_: return 0
    if self.has_contentfp_ and self.contentfp_ != x.contentfp_: return 0
    if self.has_sourcepagerank_ != x.has_sourcepagerank_: return 0
    if self.has_sourcepagerank_ and self.sourcepagerank_ != x.sourcepagerank_: return 0
    if self.has_targetpagerank_ != x.has_targetpagerank_: return 0
    if self.has_targetpagerank_ and self.targetpagerank_ != x.targetpagerank_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_sourceurlfp_): n += 1 + self.lengthVarInt64(self.sourceurlfp_)
    if (self.has_targeturlfp_): n += 1 + self.lengthVarInt64(self.targeturlfp_)
    if (self.has_reason_): n += 1 + self.lengthVarInt64(self.reason_)
    if (self.has_contentfp_): n += 1 + self.lengthVarInt64(self.contentfp_)
    if (self.has_sourcepagerank_): n += 1 + self.lengthVarInt64(self.sourcepagerank_)
    if (self.has_targetpagerank_): n += 1 + self.lengthVarInt64(self.targetpagerank_)
    return n + 0

  def Clear(self):
    self.clear_sourceurlfp()
    self.clear_targeturlfp()
    self.clear_reason()
    self.clear_contentfp()
    self.clear_sourcepagerank()
    self.clear_targetpagerank()

  def OutputUnchecked(self, out):
    if (self.has_sourceurlfp_):
      out.putVarInt32(8)
      out.putVarUint64(self.sourceurlfp_)
    if (self.has_targeturlfp_):
      out.putVarInt32(16)
      out.putVarUint64(self.targeturlfp_)
    if (self.has_reason_):
      out.putVarInt32(24)
      out.putVarInt32(self.reason_)
    if (self.has_contentfp_):
      out.putVarInt32(32)
      out.putVarUint64(self.contentfp_)
    if (self.has_sourcepagerank_):
      out.putVarInt32(40)
      out.putVarInt32(self.sourcepagerank_)
    if (self.has_targetpagerank_):
      out.putVarInt32(48)
      out.putVarInt32(self.targetpagerank_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_sourceurlfp(d.getVarUint64())
        continue
      if tt == 16:
        self.set_targeturlfp(d.getVarUint64())
        continue
      if tt == 24:
        self.set_reason(d.getVarInt32())
        continue
      if tt == 32:
        self.set_contentfp(d.getVarUint64())
        continue
      if tt == 40:
        self.set_sourcepagerank(d.getVarInt32())
        continue
      if tt == 48:
        self.set_targetpagerank(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_sourceurlfp_: res+=prefix+("SourceUrlfp: %s\n" % self.DebugFormatInt64(self.sourceurlfp_))
    if self.has_targeturlfp_: res+=prefix+("TargetUrlfp: %s\n" % self.DebugFormatInt64(self.targeturlfp_))
    if self.has_reason_: res+=prefix+("Reason: %s\n" % self.DebugFormatInt32(self.reason_))
    if self.has_contentfp_: res+=prefix+("ContentFP: %s\n" % self.DebugFormatInt64(self.contentfp_))
    if self.has_sourcepagerank_: res+=prefix+("SourcePageRank: %s\n" % self.DebugFormatInt32(self.sourcepagerank_))
    if self.has_targetpagerank_: res+=prefix+("TargetPageRank: %s\n" % self.DebugFormatInt32(self.targetpagerank_))
    return res

  kSourceUrlfp = 1
  kTargetUrlfp = 2
  kReason = 3
  kContentFP = 4
  kSourcePageRank = 5
  kTargetPageRank = 6

  _TEXT = (
   "ErrorCode",  #   0
   "SourceUrlfp",  #   1
   "TargetUrlfp",  #   2
   "Reason",  #   3
   "ContentFP",  #   4
   "SourcePageRank",  #   5
   "TargetPageRank",  #   6
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x22,
    0x72,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x72,
    0x74,
    0x64,
    0x75,
    0x70,
    0x6c,
    0x6f,
    0x67,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x75,
    0x70,
    0x4c,
    0x6f,
    0x67,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x13,
    0x1a,
    0x0b,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x55,
    0x72,
    0x6c,
    0x66,
    0x70,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x55,
    0x72,
    0x6c,
    0x66,
    0x70,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x46,
    0x50,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x50,
    0x61,
    0x67,
    0x65,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x44,
    0x55,
    0x50,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x54,
    0x45,
    0x4d,
    0x50,
    0x5f,
    0x52,
    0x45,
    0x44,
    0x49,
    0x52,
    0x45,
    0x43,
    0x54,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x50,
    0x45,
    0x52,
    0x4d,
    0x5f,
    0x52,
    0x45,
    0x44,
    0x49,
    0x52,
    0x45,
    0x43,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x4e,
    0x55,
    0x4d,
    0x5f,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x53,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class RTDupLogEntry_AdvanceEpoch(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.oldepoch_ = 0
    self.newepoch_ = 0
    self.has_oldepoch_ = 0
    self.has_newepoch_ = 0
    if contents is not None: self.MergeFromString(contents)

  def oldepoch(self): return self.oldepoch_

  def set_oldepoch(self, x):
    self.has_oldepoch_ = 1
    self.oldepoch_ = x

  def clear_oldepoch(self):
    self.has_oldepoch_ = 0
    self.oldepoch_ = 0

  def has_oldepoch(self): return self.has_oldepoch_

  def newepoch(self): return self.newepoch_

  def set_newepoch(self, x):
    self.has_newepoch_ = 1
    self.newepoch_ = x

  def clear_newepoch(self):
    self.has_newepoch_ = 0
    self.newepoch_ = 0

  def has_newepoch(self): return self.has_newepoch_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_oldepoch()): self.set_oldepoch(x.oldepoch())
    if (x.has_newepoch()): self.set_newepoch(x.newepoch())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDupLogEntry', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDupLogEntry')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDupLogEntry', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDupLogEntry', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDupLogEntry', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_oldepoch_ != x.has_oldepoch_: return 0
    if self.has_oldepoch_ and self.oldepoch_ != x.oldepoch_: return 0
    if self.has_newepoch_ != x.has_newepoch_: return 0
    if self.has_newepoch_ and self.newepoch_ != x.newepoch_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_oldepoch_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: oldepoch not set.')
    if (not self.has_newepoch_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: newepoch not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.oldepoch_)
    n += self.lengthVarInt64(self.newepoch_)
    return n + 4

  def Clear(self):
    self.clear_oldepoch()
    self.clear_newepoch()

  def OutputUnchecked(self, out):
    out.putVarInt32(808)
    out.putVarInt64(self.oldepoch_)
    out.putVarInt32(816)
    out.putVarInt64(self.newepoch_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 804: break
      if tt == 808:
        self.set_oldepoch(d.getVarInt64())
        continue
      if tt == 816:
        self.set_newepoch(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_oldepoch_: res+=prefix+("OldEpoch: %s\n" % self.DebugFormatInt64(self.oldepoch_))
    if self.has_newepoch_: res+=prefix+("NewEpoch: %s\n" % self.DebugFormatInt64(self.newepoch_))
    return res

class RTDupLogEntry_DiscardEpochs(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.oldoldestvalidepoch_ = 0
    self.newoldestvalidepoch_ = 0
    self.has_oldoldestvalidepoch_ = 0
    self.has_newoldestvalidepoch_ = 0
    if contents is not None: self.MergeFromString(contents)

  def oldoldestvalidepoch(self): return self.oldoldestvalidepoch_

  def set_oldoldestvalidepoch(self, x):
    self.has_oldoldestvalidepoch_ = 1
    self.oldoldestvalidepoch_ = x

  def clear_oldoldestvalidepoch(self):
    self.has_oldoldestvalidepoch_ = 0
    self.oldoldestvalidepoch_ = 0

  def has_oldoldestvalidepoch(self): return self.has_oldoldestvalidepoch_

  def newoldestvalidepoch(self): return self.newoldestvalidepoch_

  def set_newoldestvalidepoch(self, x):
    self.has_newoldestvalidepoch_ = 1
    self.newoldestvalidepoch_ = x

  def clear_newoldestvalidepoch(self):
    self.has_newoldestvalidepoch_ = 0
    self.newoldestvalidepoch_ = 0

  def has_newoldestvalidepoch(self): return self.has_newoldestvalidepoch_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_oldoldestvalidepoch()): self.set_oldoldestvalidepoch(x.oldoldestvalidepoch())
    if (x.has_newoldestvalidepoch()): self.set_newoldestvalidepoch(x.newoldestvalidepoch())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDupLogEntry', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDupLogEntry')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDupLogEntry', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDupLogEntry', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDupLogEntry', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_oldoldestvalidepoch_ != x.has_oldoldestvalidepoch_: return 0
    if self.has_oldoldestvalidepoch_ and self.oldoldestvalidepoch_ != x.oldoldestvalidepoch_: return 0
    if self.has_newoldestvalidepoch_ != x.has_newoldestvalidepoch_: return 0
    if self.has_newoldestvalidepoch_ and self.newoldestvalidepoch_ != x.newoldestvalidepoch_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_oldoldestvalidepoch_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: oldoldestvalidepoch not set.')
    if (not self.has_newoldestvalidepoch_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: newoldestvalidepoch not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.oldoldestvalidepoch_)
    n += self.lengthVarInt64(self.newoldestvalidepoch_)
    return n + 4

  def Clear(self):
    self.clear_oldoldestvalidepoch()
    self.clear_newoldestvalidepoch()

  def OutputUnchecked(self, out):
    out.putVarInt32(1608)
    out.putVarInt64(self.oldoldestvalidepoch_)
    out.putVarInt32(1616)
    out.putVarInt64(self.newoldestvalidepoch_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 1604: break
      if tt == 1608:
        self.set_oldoldestvalidepoch(d.getVarInt64())
        continue
      if tt == 1616:
        self.set_newoldestvalidepoch(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_oldoldestvalidepoch_: res+=prefix+("OldOldestValidEpoch: %s\n" % self.DebugFormatInt64(self.oldoldestvalidepoch_))
    if self.has_newoldestvalidepoch_: res+=prefix+("NewOldestValidEpoch: %s\n" % self.DebugFormatInt64(self.newoldestvalidepoch_))
    return res

class RTDupLogEntry(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.action_ = None
    self.advanceepoch_ = None
    self.discardepochs_ = None
    self.has_action_ = 0
    self.has_advanceepoch_ = 0
    self.has_discardepochs_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def action(self):
    if self.action_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.action_ is None: self.action_ = RTDupLogAction()
      finally:
        self.lazy_init_lock_.release()
    return self.action_

  def mutable_action(self): self.has_action_ = 1; return self.action()

  def clear_action(self):
    #Warning: this method does not acquire the lock.
    self.has_action_ = 0;
    if self.action_ is not None: self.action_.Clear()

  def has_action(self): return self.has_action_

  def advanceepoch(self):
    if self.advanceepoch_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.advanceepoch_ is None: self.advanceepoch_ = RTDupLogEntry_AdvanceEpoch()
      finally:
        self.lazy_init_lock_.release()
    return self.advanceepoch_

  def mutable_advanceepoch(self): self.has_advanceepoch_ = 1; return self.advanceepoch()

  def clear_advanceepoch(self):
    #Warning: this method does not acquire the lock.
    self.has_advanceepoch_ = 0;
    if self.advanceepoch_ is not None: self.advanceepoch_.Clear()

  def has_advanceepoch(self): return self.has_advanceepoch_

  def discardepochs(self):
    if self.discardepochs_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.discardepochs_ is None: self.discardepochs_ = RTDupLogEntry_DiscardEpochs()
      finally:
        self.lazy_init_lock_.release()
    return self.discardepochs_

  def mutable_discardepochs(self): self.has_discardepochs_ = 1; return self.discardepochs()

  def clear_discardepochs(self):
    #Warning: this method does not acquire the lock.
    self.has_discardepochs_ = 0;
    if self.discardepochs_ is not None: self.discardepochs_.Clear()

  def has_discardepochs(self): return self.has_discardepochs_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_action()): self.mutable_action().MergeFrom(x.action())
    if (x.has_advanceepoch()): self.mutable_advanceepoch().MergeFrom(x.advanceepoch())
    if (x.has_discardepochs()): self.mutable_discardepochs().MergeFrom(x.discardepochs())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDupLogEntry', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDupLogEntry')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDupLogEntry', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDupLogEntry', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDupLogEntry', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_action_ != x.has_action_: return 0
    if self.has_action_ and self.action_ != x.action_: return 0
    if self.has_advanceepoch_ != x.has_advanceepoch_: return 0
    if self.has_advanceepoch_ and self.advanceepoch_ != x.advanceepoch_: return 0
    if self.has_discardepochs_ != x.has_discardepochs_: return 0
    if self.has_discardepochs_ and self.discardepochs_ != x.discardepochs_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (self.has_action_ and not self.action_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_advanceepoch_ and not self.advanceepoch_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_discardepochs_ and not self.discardepochs_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_action_): n += 1 + self.lengthString(self.action_.ByteSize())
    if (self.has_advanceepoch_): n += 4 + self.advanceepoch_.ByteSize()
    if (self.has_discardepochs_): n += 4 + self.discardepochs_.ByteSize()
    return n + 0

  def Clear(self):
    self.clear_action()
    self.clear_advanceepoch()
    self.clear_discardepochs()

  def OutputUnchecked(self, out):
    if (self.has_action_):
      out.putVarInt32(10)
      out.putVarInt32(self.action_.ByteSize())
      self.action_.OutputUnchecked(out)
    if (self.has_advanceepoch_):
      out.putVarInt32(803)
      self.advanceepoch_.OutputUnchecked(out)
      out.putVarInt32(804)
    if (self.has_discardepochs_):
      out.putVarInt32(1603)
      self.discardepochs_.OutputUnchecked(out)
      out.putVarInt32(1604)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_action().TryMerge(tmp)
        continue
      if tt == 803:
        self.mutable_advanceepoch().TryMerge(d)
        continue
      if tt == 1603:
        self.mutable_discardepochs().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_action_:
      res+=prefix+"Action <\n"
      res+=self.action_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_advanceepoch_:
      res+=prefix+"AdvanceEpoch {\n"
      res+=self.advanceepoch_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_discardepochs_:
      res+=prefix+"DiscardEpochs {\n"
      res+=self.discardepochs_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    return res

  kAction = 1
  kAdvanceEpochGroup = 100
  kAdvanceEpochOldEpoch = 101
  kAdvanceEpochNewEpoch = 102
  kDiscardEpochsGroup = 200
  kDiscardEpochsOldOldestValidEpoch = 201
  kDiscardEpochsNewOldestValidEpoch = 202

  _TEXT = (
   "ErrorCode",  #   0
   "Action",  #   1
   None,  #   2
   None,  #   3
   None,  #   4
   None,  #   5
   None,  #   6
   None,  #   7
   None,  #   8
   None,  #   9
   None,  #  10
   None,  #  11
   None,  #  12
   None,  #  13
   None,  #  14
   None,  #  15
   None,  #  16
   None,  #  17
   None,  #  18
   None,  #  19
   None,  #  20
   None,  #  21
   None,  #  22
   None,  #  23
   None,  #  24
   None,  #  25
   None,  #  26
   None,  #  27
   None,  #  28
   None,  #  29
   None,  #  30
   None,  #  31
   None,  #  32
   None,  #  33
   None,  #  34
   None,  #  35
   None,  #  36
   None,  #  37
   None,  #  38
   None,  #  39
   None,  #  40
   None,  #  41
   None,  #  42
   None,  #  43
   None,  #  44
   None,  #  45
   None,  #  46
   None,  #  47
   None,  #  48
   None,  #  49
   None,  #  50
   None,  #  51
   None,  #  52
   None,  #  53
   None,  #  54
   None,  #  55
   None,  #  56
   None,  #  57
   None,  #  58
   None,  #  59
   None,  #  60
   None,  #  61
   None,  #  62
   None,  #  63
   None,  #  64
   None,  #  65
   None,  #  66
   None,  #  67
   None,  #  68
   None,  #  69
   None,  #  70
   None,  #  71
   None,  #  72
   None,  #  73
   None,  #  74
   None,  #  75
   None,  #  76
   None,  #  77
   None,  #  78
   None,  #  79
   None,  #  80
   None,  #  81
   None,  #  82
   None,  #  83
   None,  #  84
   None,  #  85
   None,  #  86
   None,  #  87
   None,  #  88
   None,  #  89
   None,  #  90
   None,  #  91
   None,  #  92
   None,  #  93
   None,  #  94
   None,  #  95
   None,  #  96
   None,  #  97
   None,  #  98
   None,  #  99
   "AdvanceEpoch",  # 100
   "OldEpoch",  # 101
   "NewEpoch",  # 102
   None,  # 103
   None,  # 104
   None,  # 105
   None,  # 106
   None,  # 107
   None,  # 108
   None,  # 109
   None,  # 110
   None,  # 111
   None,  # 112
   None,  # 113
   None,  # 114
   None,  # 115
   None,  # 116
   None,  # 117
   None,  # 118
   None,  # 119
   None,  # 120
   None,  # 121
   None,  # 122
   None,  # 123
   None,  # 124
   None,  # 125
   None,  # 126
   None,  # 127
   None,  # 128
   None,  # 129
   None,  # 130
   None,  # 131
   None,  # 132
   None,  # 133
   None,  # 134
   None,  # 135
   None,  # 136
   None,  # 137
   None,  # 138
   None,  # 139
   None,  # 140
   None,  # 141
   None,  # 142
   None,  # 143
   None,  # 144
   None,  # 145
   None,  # 146
   None,  # 147
   None,  # 148
   None,  # 149
   None,  # 150
   None,  # 151
   None,  # 152
   None,  # 153
   None,  # 154
   None,  # 155
   None,  # 156
   None,  # 157
   None,  # 158
   None,  # 159
   None,  # 160
   None,  # 161
   None,  # 162
   None,  # 163
   None,  # 164
   None,  # 165
   None,  # 166
   None,  # 167
   None,  # 168
   None,  # 169
   None,  # 170
   None,  # 171
   None,  # 172
   None,  # 173
   None,  # 174
   None,  # 175
   None,  # 176
   None,  # 177
   None,  # 178
   None,  # 179
   None,  # 180
   None,  # 181
   None,  # 182
   None,  # 183
   None,  # 184
   None,  # 185
   None,  # 186
   None,  # 187
   None,  # 188
   None,  # 189
   None,  # 190
   None,  # 191
   None,  # 192
   None,  # 193
   None,  # 194
   None,  # 195
   None,  # 196
   None,  # 197
   None,  # 198
   None,  # 199
   "DiscardEpochs",  # 200
   "OldOldestValidEpoch",  # 201
   "NewOldestValidEpoch",  # 202
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.MAX_TYPE,  #   2

   ProtocolBuffer.Encoder.MAX_TYPE,  #   3

   ProtocolBuffer.Encoder.MAX_TYPE,  #   4

   ProtocolBuffer.Encoder.MAX_TYPE,  #   5

   ProtocolBuffer.Encoder.MAX_TYPE,  #   6

   ProtocolBuffer.Encoder.MAX_TYPE,  #   7

   ProtocolBuffer.Encoder.MAX_TYPE,  #   8

   ProtocolBuffer.Encoder.MAX_TYPE,  #   9

   ProtocolBuffer.Encoder.MAX_TYPE,  #  10

   ProtocolBuffer.Encoder.MAX_TYPE,  #  11

   ProtocolBuffer.Encoder.MAX_TYPE,  #  12

   ProtocolBuffer.Encoder.MAX_TYPE,  #  13

   ProtocolBuffer.Encoder.MAX_TYPE,  #  14

   ProtocolBuffer.Encoder.MAX_TYPE,  #  15

   ProtocolBuffer.Encoder.MAX_TYPE,  #  16

   ProtocolBuffer.Encoder.MAX_TYPE,  #  17

   ProtocolBuffer.Encoder.MAX_TYPE,  #  18

   ProtocolBuffer.Encoder.MAX_TYPE,  #  19

   ProtocolBuffer.Encoder.MAX_TYPE,  #  20

   ProtocolBuffer.Encoder.MAX_TYPE,  #  21

   ProtocolBuffer.Encoder.MAX_TYPE,  #  22

   ProtocolBuffer.Encoder.MAX_TYPE,  #  23

   ProtocolBuffer.Encoder.MAX_TYPE,  #  24

   ProtocolBuffer.Encoder.MAX_TYPE,  #  25

   ProtocolBuffer.Encoder.MAX_TYPE,  #  26

   ProtocolBuffer.Encoder.MAX_TYPE,  #  27

   ProtocolBuffer.Encoder.MAX_TYPE,  #  28

   ProtocolBuffer.Encoder.MAX_TYPE,  #  29

   ProtocolBuffer.Encoder.MAX_TYPE,  #  30

   ProtocolBuffer.Encoder.MAX_TYPE,  #  31

   ProtocolBuffer.Encoder.MAX_TYPE,  #  32

   ProtocolBuffer.Encoder.MAX_TYPE,  #  33

   ProtocolBuffer.Encoder.MAX_TYPE,  #  34

   ProtocolBuffer.Encoder.MAX_TYPE,  #  35

   ProtocolBuffer.Encoder.MAX_TYPE,  #  36

   ProtocolBuffer.Encoder.MAX_TYPE,  #  37

   ProtocolBuffer.Encoder.MAX_TYPE,  #  38

   ProtocolBuffer.Encoder.MAX_TYPE,  #  39

   ProtocolBuffer.Encoder.MAX_TYPE,  #  40

   ProtocolBuffer.Encoder.MAX_TYPE,  #  41

   ProtocolBuffer.Encoder.MAX_TYPE,  #  42

   ProtocolBuffer.Encoder.MAX_TYPE,  #  43

   ProtocolBuffer.Encoder.MAX_TYPE,  #  44

   ProtocolBuffer.Encoder.MAX_TYPE,  #  45

   ProtocolBuffer.Encoder.MAX_TYPE,  #  46

   ProtocolBuffer.Encoder.MAX_TYPE,  #  47

   ProtocolBuffer.Encoder.MAX_TYPE,  #  48

   ProtocolBuffer.Encoder.MAX_TYPE,  #  49

   ProtocolBuffer.Encoder.MAX_TYPE,  #  50

   ProtocolBuffer.Encoder.MAX_TYPE,  #  51

   ProtocolBuffer.Encoder.MAX_TYPE,  #  52

   ProtocolBuffer.Encoder.MAX_TYPE,  #  53

   ProtocolBuffer.Encoder.MAX_TYPE,  #  54

   ProtocolBuffer.Encoder.MAX_TYPE,  #  55

   ProtocolBuffer.Encoder.MAX_TYPE,  #  56

   ProtocolBuffer.Encoder.MAX_TYPE,  #  57

   ProtocolBuffer.Encoder.MAX_TYPE,  #  58

   ProtocolBuffer.Encoder.MAX_TYPE,  #  59

   ProtocolBuffer.Encoder.MAX_TYPE,  #  60

   ProtocolBuffer.Encoder.MAX_TYPE,  #  61

   ProtocolBuffer.Encoder.MAX_TYPE,  #  62

   ProtocolBuffer.Encoder.MAX_TYPE,  #  63

   ProtocolBuffer.Encoder.MAX_TYPE,  #  64

   ProtocolBuffer.Encoder.MAX_TYPE,  #  65

   ProtocolBuffer.Encoder.MAX_TYPE,  #  66

   ProtocolBuffer.Encoder.MAX_TYPE,  #  67

   ProtocolBuffer.Encoder.MAX_TYPE,  #  68

   ProtocolBuffer.Encoder.MAX_TYPE,  #  69

   ProtocolBuffer.Encoder.MAX_TYPE,  #  70

   ProtocolBuffer.Encoder.MAX_TYPE,  #  71

   ProtocolBuffer.Encoder.MAX_TYPE,  #  72

   ProtocolBuffer.Encoder.MAX_TYPE,  #  73

   ProtocolBuffer.Encoder.MAX_TYPE,  #  74

   ProtocolBuffer.Encoder.MAX_TYPE,  #  75

   ProtocolBuffer.Encoder.MAX_TYPE,  #  76

   ProtocolBuffer.Encoder.MAX_TYPE,  #  77

   ProtocolBuffer.Encoder.MAX_TYPE,  #  78

   ProtocolBuffer.Encoder.MAX_TYPE,  #  79

   ProtocolBuffer.Encoder.MAX_TYPE,  #  80

   ProtocolBuffer.Encoder.MAX_TYPE,  #  81

   ProtocolBuffer.Encoder.MAX_TYPE,  #  82

   ProtocolBuffer.Encoder.MAX_TYPE,  #  83

   ProtocolBuffer.Encoder.MAX_TYPE,  #  84

   ProtocolBuffer.Encoder.MAX_TYPE,  #  85

   ProtocolBuffer.Encoder.MAX_TYPE,  #  86

   ProtocolBuffer.Encoder.MAX_TYPE,  #  87

   ProtocolBuffer.Encoder.MAX_TYPE,  #  88

   ProtocolBuffer.Encoder.MAX_TYPE,  #  89

   ProtocolBuffer.Encoder.MAX_TYPE,  #  90

   ProtocolBuffer.Encoder.MAX_TYPE,  #  91

   ProtocolBuffer.Encoder.MAX_TYPE,  #  92

   ProtocolBuffer.Encoder.MAX_TYPE,  #  93

   ProtocolBuffer.Encoder.MAX_TYPE,  #  94

   ProtocolBuffer.Encoder.MAX_TYPE,  #  95

   ProtocolBuffer.Encoder.MAX_TYPE,  #  96

   ProtocolBuffer.Encoder.MAX_TYPE,  #  97

   ProtocolBuffer.Encoder.MAX_TYPE,  #  98

   ProtocolBuffer.Encoder.MAX_TYPE,  #  99

   ProtocolBuffer.Encoder.STARTGROUP,  # 100

   ProtocolBuffer.Encoder.NUMERIC,  # 101

   ProtocolBuffer.Encoder.NUMERIC,  # 102

   ProtocolBuffer.Encoder.MAX_TYPE,  # 103

   ProtocolBuffer.Encoder.MAX_TYPE,  # 104

   ProtocolBuffer.Encoder.MAX_TYPE,  # 105

   ProtocolBuffer.Encoder.MAX_TYPE,  # 106

   ProtocolBuffer.Encoder.MAX_TYPE,  # 107

   ProtocolBuffer.Encoder.MAX_TYPE,  # 108

   ProtocolBuffer.Encoder.MAX_TYPE,  # 109

   ProtocolBuffer.Encoder.MAX_TYPE,  # 110

   ProtocolBuffer.Encoder.MAX_TYPE,  # 111

   ProtocolBuffer.Encoder.MAX_TYPE,  # 112

   ProtocolBuffer.Encoder.MAX_TYPE,  # 113

   ProtocolBuffer.Encoder.MAX_TYPE,  # 114

   ProtocolBuffer.Encoder.MAX_TYPE,  # 115

   ProtocolBuffer.Encoder.MAX_TYPE,  # 116

   ProtocolBuffer.Encoder.MAX_TYPE,  # 117

   ProtocolBuffer.Encoder.MAX_TYPE,  # 118

   ProtocolBuffer.Encoder.MAX_TYPE,  # 119

   ProtocolBuffer.Encoder.MAX_TYPE,  # 120

   ProtocolBuffer.Encoder.MAX_TYPE,  # 121

   ProtocolBuffer.Encoder.MAX_TYPE,  # 122

   ProtocolBuffer.Encoder.MAX_TYPE,  # 123

   ProtocolBuffer.Encoder.MAX_TYPE,  # 124

   ProtocolBuffer.Encoder.MAX_TYPE,  # 125

   ProtocolBuffer.Encoder.MAX_TYPE,  # 126

   ProtocolBuffer.Encoder.MAX_TYPE,  # 127

   ProtocolBuffer.Encoder.MAX_TYPE,  # 128

   ProtocolBuffer.Encoder.MAX_TYPE,  # 129

   ProtocolBuffer.Encoder.MAX_TYPE,  # 130

   ProtocolBuffer.Encoder.MAX_TYPE,  # 131

   ProtocolBuffer.Encoder.MAX_TYPE,  # 132

   ProtocolBuffer.Encoder.MAX_TYPE,  # 133

   ProtocolBuffer.Encoder.MAX_TYPE,  # 134

   ProtocolBuffer.Encoder.MAX_TYPE,  # 135

   ProtocolBuffer.Encoder.MAX_TYPE,  # 136

   ProtocolBuffer.Encoder.MAX_TYPE,  # 137

   ProtocolBuffer.Encoder.MAX_TYPE,  # 138

   ProtocolBuffer.Encoder.MAX_TYPE,  # 139

   ProtocolBuffer.Encoder.MAX_TYPE,  # 140

   ProtocolBuffer.Encoder.MAX_TYPE,  # 141

   ProtocolBuffer.Encoder.MAX_TYPE,  # 142

   ProtocolBuffer.Encoder.MAX_TYPE,  # 143

   ProtocolBuffer.Encoder.MAX_TYPE,  # 144

   ProtocolBuffer.Encoder.MAX_TYPE,  # 145

   ProtocolBuffer.Encoder.MAX_TYPE,  # 146

   ProtocolBuffer.Encoder.MAX_TYPE,  # 147

   ProtocolBuffer.Encoder.MAX_TYPE,  # 148

   ProtocolBuffer.Encoder.MAX_TYPE,  # 149

   ProtocolBuffer.Encoder.MAX_TYPE,  # 150

   ProtocolBuffer.Encoder.MAX_TYPE,  # 151

   ProtocolBuffer.Encoder.MAX_TYPE,  # 152

   ProtocolBuffer.Encoder.MAX_TYPE,  # 153

   ProtocolBuffer.Encoder.MAX_TYPE,  # 154

   ProtocolBuffer.Encoder.MAX_TYPE,  # 155

   ProtocolBuffer.Encoder.MAX_TYPE,  # 156

   ProtocolBuffer.Encoder.MAX_TYPE,  # 157

   ProtocolBuffer.Encoder.MAX_TYPE,  # 158

   ProtocolBuffer.Encoder.MAX_TYPE,  # 159

   ProtocolBuffer.Encoder.MAX_TYPE,  # 160

   ProtocolBuffer.Encoder.MAX_TYPE,  # 161

   ProtocolBuffer.Encoder.MAX_TYPE,  # 162

   ProtocolBuffer.Encoder.MAX_TYPE,  # 163

   ProtocolBuffer.Encoder.MAX_TYPE,  # 164

   ProtocolBuffer.Encoder.MAX_TYPE,  # 165

   ProtocolBuffer.Encoder.MAX_TYPE,  # 166

   ProtocolBuffer.Encoder.MAX_TYPE,  # 167

   ProtocolBuffer.Encoder.MAX_TYPE,  # 168

   ProtocolBuffer.Encoder.MAX_TYPE,  # 169

   ProtocolBuffer.Encoder.MAX_TYPE,  # 170

   ProtocolBuffer.Encoder.MAX_TYPE,  # 171

   ProtocolBuffer.Encoder.MAX_TYPE,  # 172

   ProtocolBuffer.Encoder.MAX_TYPE,  # 173

   ProtocolBuffer.Encoder.MAX_TYPE,  # 174

   ProtocolBuffer.Encoder.MAX_TYPE,  # 175

   ProtocolBuffer.Encoder.MAX_TYPE,  # 176

   ProtocolBuffer.Encoder.MAX_TYPE,  # 177

   ProtocolBuffer.Encoder.MAX_TYPE,  # 178

   ProtocolBuffer.Encoder.MAX_TYPE,  # 179

   ProtocolBuffer.Encoder.MAX_TYPE,  # 180

   ProtocolBuffer.Encoder.MAX_TYPE,  # 181

   ProtocolBuffer.Encoder.MAX_TYPE,  # 182

   ProtocolBuffer.Encoder.MAX_TYPE,  # 183

   ProtocolBuffer.Encoder.MAX_TYPE,  # 184

   ProtocolBuffer.Encoder.MAX_TYPE,  # 185

   ProtocolBuffer.Encoder.MAX_TYPE,  # 186

   ProtocolBuffer.Encoder.MAX_TYPE,  # 187

   ProtocolBuffer.Encoder.MAX_TYPE,  # 188

   ProtocolBuffer.Encoder.MAX_TYPE,  # 189

   ProtocolBuffer.Encoder.MAX_TYPE,  # 190

   ProtocolBuffer.Encoder.MAX_TYPE,  # 191

   ProtocolBuffer.Encoder.MAX_TYPE,  # 192

   ProtocolBuffer.Encoder.MAX_TYPE,  # 193

   ProtocolBuffer.Encoder.MAX_TYPE,  # 194

   ProtocolBuffer.Encoder.MAX_TYPE,  # 195

   ProtocolBuffer.Encoder.MAX_TYPE,  # 196

   ProtocolBuffer.Encoder.MAX_TYPE,  # 197

   ProtocolBuffer.Encoder.MAX_TYPE,  # 198

   ProtocolBuffer.Encoder.MAX_TYPE,  # 199

   ProtocolBuffer.Encoder.STARTGROUP,  # 200

   ProtocolBuffer.Encoder.NUMERIC,  # 201

   ProtocolBuffer.Encoder.NUMERIC,  # 202

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x22,
    0x72,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x72,
    0x74,
    0x64,
    0x75,
    0x70,
    0x6c,
    0x6f,
    0x67,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0d,
    0x52,
    0x54,
    0x44,
    0x75,
    0x70,
    0x4c,
    0x6f,
    0x67,
    0x45,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x13,
    0x1a,
    0x06,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x75,
    0x70,
    0x4c,
    0x6f,
    0x67,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x41,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x20,
    0x64,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x2e,
    0x4f,
    0x6c,
    0x64,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x20,
    0x65,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x2e,
    0x4e,
    0x65,
    0x77,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x20,
    0x66,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x69,
    0x73,
    0x63,
    0x61,
    0x72,
    0x64,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x73,
    0x20,
    0xc8,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x44,
    0x69,
    0x73,
    0x63,
    0x61,
    0x72,
    0x64,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x73,
    0x2e,
    0x4f,
    0x6c,
    0x64,
    0x4f,
    0x6c,
    0x64,
    0x65,
    0x73,
    0x74,
    0x56,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x20,
    0xc9,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x44,
    0x69,
    0x73,
    0x63,
    0x61,
    0x72,
    0x64,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x73,
    0x2e,
    0x4e,
    0x65,
    0x77,
    0x4f,
    0x6c,
    0x64,
    0x65,
    0x73,
    0x74,
    0x56,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x20,
    0xca,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x04,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class RTDupLogHistory_Actions(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.action_ = RTDupLogAction()
    self.epoch_ = 0
    self.oldestvalidepoch_ = 0
    self.has_action_ = 0
    self.has_epoch_ = 0
    self.has_oldestvalidepoch_ = 0
    if contents is not None: self.MergeFromString(contents)

  def action(self): return self.action_

  def mutable_action(self): self.has_action_ = 1; return self.action_

  def clear_action(self):self.has_action_ = 0; self.action_.Clear()

  def has_action(self): return self.has_action_

  def epoch(self): return self.epoch_

  def set_epoch(self, x):
    self.has_epoch_ = 1
    self.epoch_ = x

  def clear_epoch(self):
    self.has_epoch_ = 0
    self.epoch_ = 0

  def has_epoch(self): return self.has_epoch_

  def oldestvalidepoch(self): return self.oldestvalidepoch_

  def set_oldestvalidepoch(self, x):
    self.has_oldestvalidepoch_ = 1
    self.oldestvalidepoch_ = x

  def clear_oldestvalidepoch(self):
    self.has_oldestvalidepoch_ = 0
    self.oldestvalidepoch_ = 0

  def has_oldestvalidepoch(self): return self.has_oldestvalidepoch_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_action()): self.mutable_action().MergeFrom(x.action())
    if (x.has_epoch()): self.set_epoch(x.epoch())
    if (x.has_oldestvalidepoch()): self.set_oldestvalidepoch(x.oldestvalidepoch())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDupLogHistory', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDupLogHistory')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDupLogHistory', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDupLogHistory', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDupLogHistory', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_action_ != x.has_action_: return 0
    if self.has_action_ and self.action_ != x.action_: return 0
    if self.has_epoch_ != x.has_epoch_: return 0
    if self.has_epoch_ and self.epoch_ != x.epoch_: return 0
    if self.has_oldestvalidepoch_ != x.has_oldestvalidepoch_: return 0
    if self.has_oldestvalidepoch_ and self.oldestvalidepoch_ != x.oldestvalidepoch_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_action_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: action not set.')
    elif not self.action_.IsInitialized(debug_strs): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(self.action_.ByteSize())
    if (self.has_epoch_): n += 1 + self.lengthVarInt64(self.epoch_)
    if (self.has_oldestvalidepoch_): n += 1 + self.lengthVarInt64(self.oldestvalidepoch_)
    return n + 1

  def Clear(self):
    self.clear_action()
    self.clear_epoch()
    self.clear_oldestvalidepoch()

  def OutputUnchecked(self, out):
    out.putVarInt32(18)
    out.putVarInt32(self.action_.ByteSize())
    self.action_.OutputUnchecked(out)
    if (self.has_epoch_):
      out.putVarInt32(24)
      out.putVarInt64(self.epoch_)
    if (self.has_oldestvalidepoch_):
      out.putVarInt32(32)
      out.putVarInt64(self.oldestvalidepoch_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 18:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_action().TryMerge(tmp)
        continue
      if tt == 24:
        self.set_epoch(d.getVarInt64())
        continue
      if tt == 32:
        self.set_oldestvalidepoch(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_action_:
      res+=prefix+"Action <\n"
      res+=self.action_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_epoch_: res+=prefix+("Epoch: %s\n" % self.DebugFormatInt64(self.epoch_))
    if self.has_oldestvalidepoch_: res+=prefix+("OldestValidEpoch: %s\n" % self.DebugFormatInt64(self.oldestvalidepoch_))
    return res

class RTDupLogHistory(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.actions_ = []
    if contents is not None: self.MergeFromString(contents)

  def actions_size(self): return len(self.actions_)
  def actions_list(self): return self.actions_

  def actions(self, i):
    return self.actions_[i]

  def mutable_actions(self, i):
    return self.actions_[i]

  def add_actions(self):
    x = RTDupLogHistory_Actions()
    self.actions_.append(x)
    return x

  def clear_actions(self):
    self.actions_ = []

  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.actions_size()): self.add_actions().CopyFrom(x.actions(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RTDupLogHistory', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RTDupLogHistory')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RTDupLogHistory', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RTDupLogHistory', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RTDupLogHistory', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.actions_) != len(x.actions_): return 0
    for e1, e2 in zip(self.actions_, x.actions_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.actions_)):
      if (not self.actions_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.actions_)
    for i in xrange(len(self.actions_)): n += self.actions_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_actions()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.actions_)):
      out.putVarInt32(11)
      self.actions_[i].OutputUnchecked(out)
      out.putVarInt32(12)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_actions().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.actions_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Actions%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kActionsGroup = 1
  kActionsAction = 2
  kActionsEpoch = 3
  kActionsOldestValidEpoch = 4

  _TEXT = (
   "ErrorCode",  #   0
   "Actions",  #   1
   "Action",  #   2
   "Epoch",  #   3
   "OldestValidEpoch",  #   4
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x22,
    0x72,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x72,
    0x74,
    0x64,
    0x75,
    0x70,
    0x6c,
    0x6f,
    0x67,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0f,
    0x52,
    0x54,
    0x44,
    0x75,
    0x70,
    0x4c,
    0x6f,
    0x67,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x13,
    0x1a,
    0x07,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x2e,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x02,
    0x4a,
    0x0e,
    0x52,
    0x54,
    0x44,
    0x75,
    0x70,
    0x4c,
    0x6f,
    0x67,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x2e,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x41,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x2e,
    0x4f,
    0x6c,
    0x64,
    0x65,
    0x73,
    0x74,
    0x56,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['RTDupLogAction','RTDupLogEntry','RTDupLogEntry_AdvanceEpoch','RTDupLogEntry_DiscardEpochs','RTDupLogHistory','RTDupLogHistory_Actions']
