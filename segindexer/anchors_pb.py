# This file automatically generated by protocol-compiler from segindexer/anchors.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class Anchors_AnchorSource(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.docid_ = 0
    self.pagerank_ = 0
    self.pagerank_ns_ = 0
    self.indyrank_ = 0
    self.spamscore1_ = 0
    self.spamscore2_ = 0
    self.spamrank_ = 0
    self.ipaddr_ = 0
    self.site_ = ""
    self.linkhash_ = 0
    self.language_ = 0
    self.outdegree_ = 0
    self.outsites_ = 0
    self.doclength_ = 0
    self.cluster_ = 0
    self.seglanguage_ = 0
    self.compressed_url_ = ""
    self.webtable_key_ = ""
    self.home_page_info_ = 0
    self.page_tags_ = []
    self.has_docid_ = 0
    self.has_pagerank_ = 0
    self.has_pagerank_ns_ = 0
    self.has_indyrank_ = 0
    self.has_spamscore1_ = 0
    self.has_spamscore2_ = 0
    self.has_spamrank_ = 0
    self.has_ipaddr_ = 0
    self.has_site_ = 0
    self.has_linkhash_ = 0
    self.has_language_ = 0
    self.has_outdegree_ = 0
    self.has_outsites_ = 0
    self.has_doclength_ = 0
    self.has_cluster_ = 0
    self.has_seglanguage_ = 0
    self.has_compressed_url_ = 0
    self.has_webtable_key_ = 0
    self.has_home_page_info_ = 0
    if contents is not None: self.MergeFromString(contents)

  def docid(self): return self.docid_

  def set_docid(self, x):
    self.has_docid_ = 1
    self.docid_ = x

  def clear_docid(self):
    self.has_docid_ = 0
    self.docid_ = 0

  def has_docid(self): return self.has_docid_

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 0

  def has_pagerank(self): return self.has_pagerank_

  def pagerank_ns(self): return self.pagerank_ns_

  def set_pagerank_ns(self, x):
    self.has_pagerank_ns_ = 1
    self.pagerank_ns_ = x

  def clear_pagerank_ns(self):
    self.has_pagerank_ns_ = 0
    self.pagerank_ns_ = 0

  def has_pagerank_ns(self): return self.has_pagerank_ns_

  def indyrank(self): return self.indyrank_

  def set_indyrank(self, x):
    self.has_indyrank_ = 1
    self.indyrank_ = x

  def clear_indyrank(self):
    self.has_indyrank_ = 0
    self.indyrank_ = 0

  def has_indyrank(self): return self.has_indyrank_

  def spamscore1(self): return self.spamscore1_

  def set_spamscore1(self, x):
    self.has_spamscore1_ = 1
    self.spamscore1_ = x

  def clear_spamscore1(self):
    self.has_spamscore1_ = 0
    self.spamscore1_ = 0

  def has_spamscore1(self): return self.has_spamscore1_

  def spamscore2(self): return self.spamscore2_

  def set_spamscore2(self, x):
    self.has_spamscore2_ = 1
    self.spamscore2_ = x

  def clear_spamscore2(self):
    self.has_spamscore2_ = 0
    self.spamscore2_ = 0

  def has_spamscore2(self): return self.has_spamscore2_

  def spamrank(self): return self.spamrank_

  def set_spamrank(self, x):
    self.has_spamrank_ = 1
    self.spamrank_ = x

  def clear_spamrank(self):
    self.has_spamrank_ = 0
    self.spamrank_ = 0

  def has_spamrank(self): return self.has_spamrank_

  def ipaddr(self): return self.ipaddr_

  def set_ipaddr(self, x):
    self.has_ipaddr_ = 1
    self.ipaddr_ = x

  def clear_ipaddr(self):
    self.has_ipaddr_ = 0
    self.ipaddr_ = 0

  def has_ipaddr(self): return self.has_ipaddr_

  def site(self): return self.site_

  def set_site(self, x):
    self.has_site_ = 1
    self.site_ = x

  def clear_site(self):
    self.has_site_ = 0
    self.site_ = ""

  def has_site(self): return self.has_site_

  def linkhash(self): return self.linkhash_

  def set_linkhash(self, x):
    self.has_linkhash_ = 1
    self.linkhash_ = x

  def clear_linkhash(self):
    self.has_linkhash_ = 0
    self.linkhash_ = 0

  def has_linkhash(self): return self.has_linkhash_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = 0

  def has_language(self): return self.has_language_

  def outdegree(self): return self.outdegree_

  def set_outdegree(self, x):
    self.has_outdegree_ = 1
    self.outdegree_ = x

  def clear_outdegree(self):
    self.has_outdegree_ = 0
    self.outdegree_ = 0

  def has_outdegree(self): return self.has_outdegree_

  def outsites(self): return self.outsites_

  def set_outsites(self, x):
    self.has_outsites_ = 1
    self.outsites_ = x

  def clear_outsites(self):
    self.has_outsites_ = 0
    self.outsites_ = 0

  def has_outsites(self): return self.has_outsites_

  def doclength(self): return self.doclength_

  def set_doclength(self, x):
    self.has_doclength_ = 1
    self.doclength_ = x

  def clear_doclength(self):
    self.has_doclength_ = 0
    self.doclength_ = 0

  def has_doclength(self): return self.has_doclength_

  def cluster(self): return self.cluster_

  def set_cluster(self, x):
    self.has_cluster_ = 1
    self.cluster_ = x

  def clear_cluster(self):
    self.has_cluster_ = 0
    self.cluster_ = 0

  def has_cluster(self): return self.has_cluster_

  def seglanguage(self): return self.seglanguage_

  def set_seglanguage(self, x):
    self.has_seglanguage_ = 1
    self.seglanguage_ = x

  def clear_seglanguage(self):
    self.has_seglanguage_ = 0
    self.seglanguage_ = 0

  def has_seglanguage(self): return self.has_seglanguage_

  def compressed_url(self): return self.compressed_url_

  def set_compressed_url(self, x):
    self.has_compressed_url_ = 1
    self.compressed_url_ = x

  def clear_compressed_url(self):
    self.has_compressed_url_ = 0
    self.compressed_url_ = ""

  def has_compressed_url(self): return self.has_compressed_url_

  def webtable_key(self): return self.webtable_key_

  def set_webtable_key(self, x):
    self.has_webtable_key_ = 1
    self.webtable_key_ = x

  def clear_webtable_key(self):
    self.has_webtable_key_ = 0
    self.webtable_key_ = ""

  def has_webtable_key(self): return self.has_webtable_key_

  def home_page_info(self): return self.home_page_info_

  def set_home_page_info(self, x):
    self.has_home_page_info_ = 1
    self.home_page_info_ = x

  def clear_home_page_info(self):
    self.has_home_page_info_ = 0
    self.home_page_info_ = 0

  def has_home_page_info(self): return self.has_home_page_info_

  def page_tags_size(self): return len(self.page_tags_)
  def page_tags_list(self): return self.page_tags_

  def page_tags(self, i):
    return self.page_tags_[i]

  def set_page_tags(self, i, x):
    self.page_tags_[i] = x

  def add_page_tags(self, x):
    self.page_tags_.append(x)

  def clear_page_tags(self):
    self.page_tags_ = []


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_docid()): self.set_docid(x.docid())
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())
    if (x.has_pagerank_ns()): self.set_pagerank_ns(x.pagerank_ns())
    if (x.has_indyrank()): self.set_indyrank(x.indyrank())
    if (x.has_spamscore1()): self.set_spamscore1(x.spamscore1())
    if (x.has_spamscore2()): self.set_spamscore2(x.spamscore2())
    if (x.has_spamrank()): self.set_spamrank(x.spamrank())
    if (x.has_ipaddr()): self.set_ipaddr(x.ipaddr())
    if (x.has_site()): self.set_site(x.site())
    if (x.has_linkhash()): self.set_linkhash(x.linkhash())
    if (x.has_language()): self.set_language(x.language())
    if (x.has_outdegree()): self.set_outdegree(x.outdegree())
    if (x.has_outsites()): self.set_outsites(x.outsites())
    if (x.has_doclength()): self.set_doclength(x.doclength())
    if (x.has_cluster()): self.set_cluster(x.cluster())
    if (x.has_seglanguage()): self.set_seglanguage(x.seglanguage())
    if (x.has_compressed_url()): self.set_compressed_url(x.compressed_url())
    if (x.has_webtable_key()): self.set_webtable_key(x.webtable_key())
    if (x.has_home_page_info()): self.set_home_page_info(x.home_page_info())
    for i in xrange(x.page_tags_size()): self.add_page_tags(x.page_tags(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'Anchors', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'Anchors')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'Anchors', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'Anchors', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'Anchors', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_docid_ != x.has_docid_: return 0
    if self.has_docid_ and self.docid_ != x.docid_: return 0
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    if self.has_pagerank_ns_ != x.has_pagerank_ns_: return 0
    if self.has_pagerank_ns_ and self.pagerank_ns_ != x.pagerank_ns_: return 0
    if self.has_indyrank_ != x.has_indyrank_: return 0
    if self.has_indyrank_ and self.indyrank_ != x.indyrank_: return 0
    if self.has_spamscore1_ != x.has_spamscore1_: return 0
    if self.has_spamscore1_ and self.spamscore1_ != x.spamscore1_: return 0
    if self.has_spamscore2_ != x.has_spamscore2_: return 0
    if self.has_spamscore2_ and self.spamscore2_ != x.spamscore2_: return 0
    if self.has_spamrank_ != x.has_spamrank_: return 0
    if self.has_spamrank_ and self.spamrank_ != x.spamrank_: return 0
    if self.has_ipaddr_ != x.has_ipaddr_: return 0
    if self.has_ipaddr_ and self.ipaddr_ != x.ipaddr_: return 0
    if self.has_site_ != x.has_site_: return 0
    if self.has_site_ and self.site_ != x.site_: return 0
    if self.has_linkhash_ != x.has_linkhash_: return 0
    if self.has_linkhash_ and self.linkhash_ != x.linkhash_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_outdegree_ != x.has_outdegree_: return 0
    if self.has_outdegree_ and self.outdegree_ != x.outdegree_: return 0
    if self.has_outsites_ != x.has_outsites_: return 0
    if self.has_outsites_ and self.outsites_ != x.outsites_: return 0
    if self.has_doclength_ != x.has_doclength_: return 0
    if self.has_doclength_ and self.doclength_ != x.doclength_: return 0
    if self.has_cluster_ != x.has_cluster_: return 0
    if self.has_cluster_ and self.cluster_ != x.cluster_: return 0
    if self.has_seglanguage_ != x.has_seglanguage_: return 0
    if self.has_seglanguage_ and self.seglanguage_ != x.seglanguage_: return 0
    if self.has_compressed_url_ != x.has_compressed_url_: return 0
    if self.has_compressed_url_ and self.compressed_url_ != x.compressed_url_: return 0
    if self.has_webtable_key_ != x.has_webtable_key_: return 0
    if self.has_webtable_key_ and self.webtable_key_ != x.webtable_key_: return 0
    if self.has_home_page_info_ != x.has_home_page_info_: return 0
    if self.has_home_page_info_ and self.home_page_info_ != x.home_page_info_: return 0
    if len(self.page_tags_) != len(x.page_tags_): return 0
    for e1, e2 in zip(self.page_tags_, x.page_tags_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_docid_): n += 9
    if (self.has_pagerank_): n += 1 + self.lengthVarInt64(self.pagerank_)
    if (self.has_pagerank_ns_): n += 2 + self.lengthVarInt64(self.pagerank_ns_)
    if (self.has_indyrank_): n += 1 + self.lengthVarInt64(self.indyrank_)
    if (self.has_spamscore1_): n += 1 + self.lengthVarInt64(self.spamscore1_)
    if (self.has_spamscore2_): n += 1 + self.lengthVarInt64(self.spamscore2_)
    if (self.has_spamrank_): n += 2 + self.lengthVarInt64(self.spamrank_)
    if (self.has_ipaddr_): n += 1 + self.lengthVarInt64(self.ipaddr_)
    if (self.has_site_): n += 1 + self.lengthString(len(self.site_))
    if (self.has_linkhash_): n += 9
    if (self.has_language_): n += 1 + self.lengthVarInt64(self.language_)
    if (self.has_outdegree_): n += 1 + self.lengthVarInt64(self.outdegree_)
    if (self.has_outsites_): n += 2 + self.lengthVarInt64(self.outsites_)
    if (self.has_doclength_): n += 2 + self.lengthVarInt64(self.doclength_)
    if (self.has_cluster_): n += 2 + self.lengthVarInt64(self.cluster_)
    if (self.has_seglanguage_): n += 1 + self.lengthVarInt64(self.seglanguage_)
    if (self.has_compressed_url_): n += 2 + self.lengthString(len(self.compressed_url_))
    if (self.has_webtable_key_): n += 2 + self.lengthString(len(self.webtable_key_))
    if (self.has_home_page_info_): n += 2 + self.lengthVarInt64(self.home_page_info_)
    n += 2 * len(self.page_tags_)
    for i in xrange(len(self.page_tags_)): n += self.lengthVarInt64(self.page_tags_[i])
    return n + 0

  def Clear(self):
    self.clear_docid()
    self.clear_pagerank()
    self.clear_pagerank_ns()
    self.clear_indyrank()
    self.clear_spamscore1()
    self.clear_spamscore2()
    self.clear_spamrank()
    self.clear_ipaddr()
    self.clear_site()
    self.clear_linkhash()
    self.clear_language()
    self.clear_outdegree()
    self.clear_outsites()
    self.clear_doclength()
    self.clear_cluster()
    self.clear_seglanguage()
    self.clear_compressed_url()
    self.clear_webtable_key()
    self.clear_home_page_info()
    self.clear_page_tags()

  def OutputUnchecked(self, out):
    if (self.has_docid_):
      out.putVarInt32(41)
      out.put64(self.docid_)
    if (self.has_pagerank_):
      out.putVarInt32(48)
      out.putVarInt32(self.pagerank_)
    if (self.has_indyrank_):
      out.putVarInt32(56)
      out.putVarInt32(self.indyrank_)
    if (self.has_ipaddr_):
      out.putVarInt32(64)
      out.putVarInt32(self.ipaddr_)
    if (self.has_site_):
      out.putVarInt32(74)
      out.putPrefixedString(self.site_)
    if (self.has_linkhash_):
      out.putVarInt32(81)
      out.put64(self.linkhash_)
    if (self.has_language_):
      out.putVarInt32(88)
      out.putVarInt32(self.language_)
    if (self.has_outdegree_):
      out.putVarInt32(96)
      out.putVarInt32(self.outdegree_)
    if (self.has_seglanguage_):
      out.putVarInt32(104)
      out.putVarInt32(self.seglanguage_)
    if (self.has_spamscore1_):
      out.putVarInt32(112)
      out.putVarInt32(self.spamscore1_)
    if (self.has_spamscore2_):
      out.putVarInt32(120)
      out.putVarInt32(self.spamscore2_)
    if (self.has_webtable_key_):
      out.putVarInt32(234)
      out.putPrefixedString(self.webtable_key_)
    if (self.has_doclength_):
      out.putVarInt32(240)
      out.putVarInt32(self.doclength_)
    if (self.has_cluster_):
      out.putVarInt32(248)
      out.putVarInt32(self.cluster_)
    for i in xrange(len(self.page_tags_)):
      out.putVarInt32(256)
      out.putVarInt32(self.page_tags_[i])
    if (self.has_spamrank_):
      out.putVarInt32(280)
      out.putVarInt32(self.spamrank_)
    if (self.has_compressed_url_):
      out.putVarInt32(314)
      out.putPrefixedString(self.compressed_url_)
    if (self.has_outsites_):
      out.putVarInt32(328)
      out.putVarInt32(self.outsites_)
    if (self.has_home_page_info_):
      out.putVarInt32(336)
      out.putVarInt32(self.home_page_info_)
    if (self.has_pagerank_ns_):
      out.putVarInt32(392)
      out.putVarInt32(self.pagerank_ns_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 36: break
      if tt == 41:
        self.set_docid(d.get64())
        continue
      if tt == 48:
        self.set_pagerank(d.getVarInt32())
        continue
      if tt == 56:
        self.set_indyrank(d.getVarInt32())
        continue
      if tt == 64:
        self.set_ipaddr(d.getVarInt32())
        continue
      if tt == 74:
        self.set_site(d.getPrefixedString())
        continue
      if tt == 81:
        self.set_linkhash(d.get64())
        continue
      if tt == 88:
        self.set_language(d.getVarInt32())
        continue
      if tt == 96:
        self.set_outdegree(d.getVarInt32())
        continue
      if tt == 104:
        self.set_seglanguage(d.getVarInt32())
        continue
      if tt == 112:
        self.set_spamscore1(d.getVarInt32())
        continue
      if tt == 120:
        self.set_spamscore2(d.getVarInt32())
        continue
      if tt == 234:
        self.set_webtable_key(d.getPrefixedString())
        continue
      if tt == 240:
        self.set_doclength(d.getVarInt32())
        continue
      if tt == 248:
        self.set_cluster(d.getVarInt32())
        continue
      if tt == 256:
        self.add_page_tags(d.getVarInt32())
        continue
      if tt == 280:
        self.set_spamrank(d.getVarInt32())
        continue
      if tt == 314:
        self.set_compressed_url(d.getPrefixedString())
        continue
      if tt == 328:
        self.set_outsites(d.getVarInt32())
        continue
      if tt == 336:
        self.set_home_page_info(d.getVarInt32())
        continue
      if tt == 392:
        self.set_pagerank_ns(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_docid_: res+=prefix+("docid: %s\n" % self.DebugFormatFixed64(self.docid_))
    if self.has_pagerank_: res+=prefix+("pagerank: %s\n" % self.DebugFormatInt32(self.pagerank_))
    if self.has_pagerank_ns_: res+=prefix+("pagerank_ns: %s\n" % self.DebugFormatInt32(self.pagerank_ns_))
    if self.has_indyrank_: res+=prefix+("indyrank: %s\n" % self.DebugFormatInt32(self.indyrank_))
    if self.has_spamscore1_: res+=prefix+("spamscore1: %s\n" % self.DebugFormatInt32(self.spamscore1_))
    if self.has_spamscore2_: res+=prefix+("spamscore2: %s\n" % self.DebugFormatInt32(self.spamscore2_))
    if self.has_spamrank_: res+=prefix+("spamrank: %s\n" % self.DebugFormatInt32(self.spamrank_))
    if self.has_ipaddr_: res+=prefix+("ipaddr: %s\n" % self.DebugFormatInt32(self.ipaddr_))
    if self.has_site_: res+=prefix+("site: %s\n" % self.DebugFormatString(self.site_))
    if self.has_linkhash_: res+=prefix+("linkhash: %s\n" % self.DebugFormatFixed64(self.linkhash_))
    if self.has_language_: res+=prefix+("language: %s\n" % self.DebugFormatInt32(self.language_))
    if self.has_outdegree_: res+=prefix+("outdegree: %s\n" % self.DebugFormatInt32(self.outdegree_))
    if self.has_outsites_: res+=prefix+("outsites: %s\n" % self.DebugFormatInt32(self.outsites_))
    if self.has_doclength_: res+=prefix+("doclength: %s\n" % self.DebugFormatInt32(self.doclength_))
    if self.has_cluster_: res+=prefix+("cluster: %s\n" % self.DebugFormatInt32(self.cluster_))
    if self.has_seglanguage_: res+=prefix+("seglanguage: %s\n" % self.DebugFormatInt32(self.seglanguage_))
    if self.has_compressed_url_: res+=prefix+("compressed_url: %s\n" % self.DebugFormatString(self.compressed_url_))
    if self.has_webtable_key_: res+=prefix+("webtable_key: %s\n" % self.DebugFormatString(self.webtable_key_))
    if self.has_home_page_info_: res+=prefix+("home_page_info: %s\n" % self.DebugFormatInt32(self.home_page_info_))
    cnt=0
    for e in self.page_tags_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("page_tags%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    return res

class Anchors_Anchor(ProtocolBuffer.ProtocolMessage):

  MIN_WEIGHT   =    0 
  PENALIZED_WEIGHT =    1 
  MAX_WEIGHT   =  127 

  _Weights_NAMES = {
    0: "MIN_WEIGHT",
    1: "PENALIZED_WEIGHT",
    127: "MAX_WEIGHT",
  }

  def Weights_Name(cls, x): return cls._Weights_NAMES.get(x, "")
  Weights_Name = classmethod(Weights_Name)


  TYPE_NORMAL  =    0 
  TYPE_SUPPLEMENTAL =    1 

  _SourceType_NAMES = {
    0: "TYPE_NORMAL",
    1: "TYPE_SUPPLEMENTAL",
  }

  def SourceType_Name(cls, x): return cls._SourceType_NAMES.get(x, "")
  SourceType_Name = classmethod(SourceType_Name)

  def __init__(self, contents=None):
    self.timestamp_ = 0
    self.text_ = ""
    self.orig_text_ = ""
    self.fontsize_ = 3
    self.weight_ = 127
    self.demotionreason_ = 0
    self.deleted_ = 0
    self.locality_ = 0
    self.bucket_ = 0
    self.is_local_ = 0
    self.original_target_docid_ = 0
    self.forwarding_types_ = 0
    self.expired_ = 0
    self.type_ = 0
    self.source_type_ = 0
    self.experimental_ = 0
    self.link_tags_ = []
    self.pagerank_weight_ = 1.0
    self.seti_pagerank_weight_ = 1.0
    self.context_ = 0
    self.full_left_context_ = []
    self.full_right_context_ = []
    self.context2_ = 0
    self.offset_ = 0
    self.firstseen_date_ = 0
    self.firstseen_near_creation_ = 0
    self.creation_date_ = 0
    self.deletion_date_ = 0
    self.fragment_ = ""
    self.source_ = Anchors_AnchorSource()
    self.has_timestamp_ = 0
    self.has_text_ = 0
    self.has_orig_text_ = 0
    self.has_fontsize_ = 0
    self.has_weight_ = 0
    self.has_demotionreason_ = 0
    self.has_deleted_ = 0
    self.has_locality_ = 0
    self.has_bucket_ = 0
    self.has_is_local_ = 0
    self.has_original_target_docid_ = 0
    self.has_forwarding_types_ = 0
    self.has_expired_ = 0
    self.has_type_ = 0
    self.has_source_type_ = 0
    self.has_experimental_ = 0
    self.has_pagerank_weight_ = 0
    self.has_seti_pagerank_weight_ = 0
    self.has_context_ = 0
    self.has_context2_ = 0
    self.has_offset_ = 0
    self.has_firstseen_date_ = 0
    self.has_firstseen_near_creation_ = 0
    self.has_creation_date_ = 0
    self.has_deletion_date_ = 0
    self.has_fragment_ = 0
    self.has_source_ = 0
    if contents is not None: self.MergeFromString(contents)

  def timestamp(self): return self.timestamp_

  def set_timestamp(self, x):
    self.has_timestamp_ = 1
    self.timestamp_ = x

  def clear_timestamp(self):
    self.has_timestamp_ = 0
    self.timestamp_ = 0

  def has_timestamp(self): return self.has_timestamp_

  def text(self): return self.text_

  def set_text(self, x):
    self.has_text_ = 1
    self.text_ = x

  def clear_text(self):
    self.has_text_ = 0
    self.text_ = ""

  def has_text(self): return self.has_text_

  def orig_text(self): return self.orig_text_

  def set_orig_text(self, x):
    self.has_orig_text_ = 1
    self.orig_text_ = x

  def clear_orig_text(self):
    self.has_orig_text_ = 0
    self.orig_text_ = ""

  def has_orig_text(self): return self.has_orig_text_

  def fontsize(self): return self.fontsize_

  def set_fontsize(self, x):
    self.has_fontsize_ = 1
    self.fontsize_ = x

  def clear_fontsize(self):
    self.has_fontsize_ = 0
    self.fontsize_ = 3

  def has_fontsize(self): return self.has_fontsize_

  def weight(self): return self.weight_

  def set_weight(self, x):
    self.has_weight_ = 1
    self.weight_ = x

  def clear_weight(self):
    self.has_weight_ = 0
    self.weight_ = 127

  def has_weight(self): return self.has_weight_

  def demotionreason(self): return self.demotionreason_

  def set_demotionreason(self, x):
    self.has_demotionreason_ = 1
    self.demotionreason_ = x

  def clear_demotionreason(self):
    self.has_demotionreason_ = 0
    self.demotionreason_ = 0

  def has_demotionreason(self): return self.has_demotionreason_

  def deleted(self): return self.deleted_

  def set_deleted(self, x):
    self.has_deleted_ = 1
    self.deleted_ = x

  def clear_deleted(self):
    self.has_deleted_ = 0
    self.deleted_ = 0

  def has_deleted(self): return self.has_deleted_

  def locality(self): return self.locality_

  def set_locality(self, x):
    self.has_locality_ = 1
    self.locality_ = x

  def clear_locality(self):
    self.has_locality_ = 0
    self.locality_ = 0

  def has_locality(self): return self.has_locality_

  def bucket(self): return self.bucket_

  def set_bucket(self, x):
    self.has_bucket_ = 1
    self.bucket_ = x

  def clear_bucket(self):
    self.has_bucket_ = 0
    self.bucket_ = 0

  def has_bucket(self): return self.has_bucket_

  def is_local(self): return self.is_local_

  def set_is_local(self, x):
    self.has_is_local_ = 1
    self.is_local_ = x

  def clear_is_local(self):
    self.has_is_local_ = 0
    self.is_local_ = 0

  def has_is_local(self): return self.has_is_local_

  def original_target_docid(self): return self.original_target_docid_

  def set_original_target_docid(self, x):
    self.has_original_target_docid_ = 1
    self.original_target_docid_ = x

  def clear_original_target_docid(self):
    self.has_original_target_docid_ = 0
    self.original_target_docid_ = 0

  def has_original_target_docid(self): return self.has_original_target_docid_

  def forwarding_types(self): return self.forwarding_types_

  def set_forwarding_types(self, x):
    self.has_forwarding_types_ = 1
    self.forwarding_types_ = x

  def clear_forwarding_types(self):
    self.has_forwarding_types_ = 0
    self.forwarding_types_ = 0

  def has_forwarding_types(self): return self.has_forwarding_types_

  def expired(self): return self.expired_

  def set_expired(self, x):
    self.has_expired_ = 1
    self.expired_ = x

  def clear_expired(self):
    self.has_expired_ = 0
    self.expired_ = 0

  def has_expired(self): return self.has_expired_

  def type(self): return self.type_

  def set_type(self, x):
    self.has_type_ = 1
    self.type_ = x

  def clear_type(self):
    self.has_type_ = 0
    self.type_ = 0

  def has_type(self): return self.has_type_

  def source_type(self): return self.source_type_

  def set_source_type(self, x):
    self.has_source_type_ = 1
    self.source_type_ = x

  def clear_source_type(self):
    self.has_source_type_ = 0
    self.source_type_ = 0

  def has_source_type(self): return self.has_source_type_

  def experimental(self): return self.experimental_

  def set_experimental(self, x):
    self.has_experimental_ = 1
    self.experimental_ = x

  def clear_experimental(self):
    self.has_experimental_ = 0
    self.experimental_ = 0

  def has_experimental(self): return self.has_experimental_

  def link_tags_size(self): return len(self.link_tags_)
  def link_tags_list(self): return self.link_tags_

  def link_tags(self, i):
    return self.link_tags_[i]

  def set_link_tags(self, i, x):
    self.link_tags_[i] = x

  def add_link_tags(self, x):
    self.link_tags_.append(x)

  def clear_link_tags(self):
    self.link_tags_ = []

  def pagerank_weight(self): return self.pagerank_weight_

  def set_pagerank_weight(self, x):
    self.has_pagerank_weight_ = 1
    self.pagerank_weight_ = x

  def clear_pagerank_weight(self):
    self.has_pagerank_weight_ = 0
    self.pagerank_weight_ = 1.0

  def has_pagerank_weight(self): return self.has_pagerank_weight_

  def seti_pagerank_weight(self): return self.seti_pagerank_weight_

  def set_seti_pagerank_weight(self, x):
    self.has_seti_pagerank_weight_ = 1
    self.seti_pagerank_weight_ = x

  def clear_seti_pagerank_weight(self):
    self.has_seti_pagerank_weight_ = 0
    self.seti_pagerank_weight_ = 1.0

  def has_seti_pagerank_weight(self): return self.has_seti_pagerank_weight_

  def context(self): return self.context_

  def set_context(self, x):
    self.has_context_ = 1
    self.context_ = x

  def clear_context(self):
    self.has_context_ = 0
    self.context_ = 0

  def has_context(self): return self.has_context_

  def full_left_context_size(self): return len(self.full_left_context_)
  def full_left_context_list(self): return self.full_left_context_

  def full_left_context(self, i):
    return self.full_left_context_[i]

  def set_full_left_context(self, i, x):
    self.full_left_context_[i] = x

  def add_full_left_context(self, x):
    self.full_left_context_.append(x)

  def clear_full_left_context(self):
    self.full_left_context_ = []

  def full_right_context_size(self): return len(self.full_right_context_)
  def full_right_context_list(self): return self.full_right_context_

  def full_right_context(self, i):
    return self.full_right_context_[i]

  def set_full_right_context(self, i, x):
    self.full_right_context_[i] = x

  def add_full_right_context(self, x):
    self.full_right_context_.append(x)

  def clear_full_right_context(self):
    self.full_right_context_ = []

  def context2(self): return self.context2_

  def set_context2(self, x):
    self.has_context2_ = 1
    self.context2_ = x

  def clear_context2(self):
    self.has_context2_ = 0
    self.context2_ = 0

  def has_context2(self): return self.has_context2_

  def offset(self): return self.offset_

  def set_offset(self, x):
    self.has_offset_ = 1
    self.offset_ = x

  def clear_offset(self):
    self.has_offset_ = 0
    self.offset_ = 0

  def has_offset(self): return self.has_offset_

  def firstseen_date(self): return self.firstseen_date_

  def set_firstseen_date(self, x):
    self.has_firstseen_date_ = 1
    self.firstseen_date_ = x

  def clear_firstseen_date(self):
    self.has_firstseen_date_ = 0
    self.firstseen_date_ = 0

  def has_firstseen_date(self): return self.has_firstseen_date_

  def firstseen_near_creation(self): return self.firstseen_near_creation_

  def set_firstseen_near_creation(self, x):
    self.has_firstseen_near_creation_ = 1
    self.firstseen_near_creation_ = x

  def clear_firstseen_near_creation(self):
    self.has_firstseen_near_creation_ = 0
    self.firstseen_near_creation_ = 0

  def has_firstseen_near_creation(self): return self.has_firstseen_near_creation_

  def creation_date(self): return self.creation_date_

  def set_creation_date(self, x):
    self.has_creation_date_ = 1
    self.creation_date_ = x

  def clear_creation_date(self):
    self.has_creation_date_ = 0
    self.creation_date_ = 0

  def has_creation_date(self): return self.has_creation_date_

  def deletion_date(self): return self.deletion_date_

  def set_deletion_date(self, x):
    self.has_deletion_date_ = 1
    self.deletion_date_ = x

  def clear_deletion_date(self):
    self.has_deletion_date_ = 0
    self.deletion_date_ = 0

  def has_deletion_date(self): return self.has_deletion_date_

  def fragment(self): return self.fragment_

  def set_fragment(self, x):
    self.has_fragment_ = 1
    self.fragment_ = x

  def clear_fragment(self):
    self.has_fragment_ = 0
    self.fragment_ = ""

  def has_fragment(self): return self.has_fragment_

  def source(self): return self.source_

  def mutable_source(self): self.has_source_ = 1; return self.source_

  def clear_source(self):self.has_source_ = 0; self.source_.Clear()

  def has_source(self): return self.has_source_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_timestamp()): self.set_timestamp(x.timestamp())
    if (x.has_text()): self.set_text(x.text())
    if (x.has_orig_text()): self.set_orig_text(x.orig_text())
    if (x.has_fontsize()): self.set_fontsize(x.fontsize())
    if (x.has_weight()): self.set_weight(x.weight())
    if (x.has_demotionreason()): self.set_demotionreason(x.demotionreason())
    if (x.has_deleted()): self.set_deleted(x.deleted())
    if (x.has_locality()): self.set_locality(x.locality())
    if (x.has_bucket()): self.set_bucket(x.bucket())
    if (x.has_is_local()): self.set_is_local(x.is_local())
    if (x.has_original_target_docid()): self.set_original_target_docid(x.original_target_docid())
    if (x.has_forwarding_types()): self.set_forwarding_types(x.forwarding_types())
    if (x.has_expired()): self.set_expired(x.expired())
    if (x.has_type()): self.set_type(x.type())
    if (x.has_source_type()): self.set_source_type(x.source_type())
    if (x.has_experimental()): self.set_experimental(x.experimental())
    for i in xrange(x.link_tags_size()): self.add_link_tags(x.link_tags(i))
    if (x.has_pagerank_weight()): self.set_pagerank_weight(x.pagerank_weight())
    if (x.has_seti_pagerank_weight()): self.set_seti_pagerank_weight(x.seti_pagerank_weight())
    if (x.has_context()): self.set_context(x.context())
    for i in xrange(x.full_left_context_size()): self.add_full_left_context(x.full_left_context(i))
    for i in xrange(x.full_right_context_size()): self.add_full_right_context(x.full_right_context(i))
    if (x.has_context2()): self.set_context2(x.context2())
    if (x.has_offset()): self.set_offset(x.offset())
    if (x.has_firstseen_date()): self.set_firstseen_date(x.firstseen_date())
    if (x.has_firstseen_near_creation()): self.set_firstseen_near_creation(x.firstseen_near_creation())
    if (x.has_creation_date()): self.set_creation_date(x.creation_date())
    if (x.has_deletion_date()): self.set_deletion_date(x.deletion_date())
    if (x.has_fragment()): self.set_fragment(x.fragment())
    if (x.has_source()): self.mutable_source().MergeFrom(x.source())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'Anchors', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'Anchors')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'Anchors', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'Anchors', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'Anchors', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_timestamp_ != x.has_timestamp_: return 0
    if self.has_timestamp_ and self.timestamp_ != x.timestamp_: return 0
    if self.has_text_ != x.has_text_: return 0
    if self.has_text_ and self.text_ != x.text_: return 0
    if self.has_orig_text_ != x.has_orig_text_: return 0
    if self.has_orig_text_ and self.orig_text_ != x.orig_text_: return 0
    if self.has_fontsize_ != x.has_fontsize_: return 0
    if self.has_fontsize_ and self.fontsize_ != x.fontsize_: return 0
    if self.has_weight_ != x.has_weight_: return 0
    if self.has_weight_ and self.weight_ != x.weight_: return 0
    if self.has_demotionreason_ != x.has_demotionreason_: return 0
    if self.has_demotionreason_ and self.demotionreason_ != x.demotionreason_: return 0
    if self.has_deleted_ != x.has_deleted_: return 0
    if self.has_deleted_ and self.deleted_ != x.deleted_: return 0
    if self.has_locality_ != x.has_locality_: return 0
    if self.has_locality_ and self.locality_ != x.locality_: return 0
    if self.has_bucket_ != x.has_bucket_: return 0
    if self.has_bucket_ and self.bucket_ != x.bucket_: return 0
    if self.has_is_local_ != x.has_is_local_: return 0
    if self.has_is_local_ and self.is_local_ != x.is_local_: return 0
    if self.has_original_target_docid_ != x.has_original_target_docid_: return 0
    if self.has_original_target_docid_ and self.original_target_docid_ != x.original_target_docid_: return 0
    if self.has_forwarding_types_ != x.has_forwarding_types_: return 0
    if self.has_forwarding_types_ and self.forwarding_types_ != x.forwarding_types_: return 0
    if self.has_expired_ != x.has_expired_: return 0
    if self.has_expired_ and self.expired_ != x.expired_: return 0
    if self.has_type_ != x.has_type_: return 0
    if self.has_type_ and self.type_ != x.type_: return 0
    if self.has_source_type_ != x.has_source_type_: return 0
    if self.has_source_type_ and self.source_type_ != x.source_type_: return 0
    if self.has_experimental_ != x.has_experimental_: return 0
    if self.has_experimental_ and self.experimental_ != x.experimental_: return 0
    if len(self.link_tags_) != len(x.link_tags_): return 0
    for e1, e2 in zip(self.link_tags_, x.link_tags_):
      if e1 != e2: return 0
    if self.has_pagerank_weight_ != x.has_pagerank_weight_: return 0
    if self.has_pagerank_weight_ and self.pagerank_weight_ != x.pagerank_weight_: return 0
    if self.has_seti_pagerank_weight_ != x.has_seti_pagerank_weight_: return 0
    if self.has_seti_pagerank_weight_ and self.seti_pagerank_weight_ != x.seti_pagerank_weight_: return 0
    if self.has_context_ != x.has_context_: return 0
    if self.has_context_ and self.context_ != x.context_: return 0
    if len(self.full_left_context_) != len(x.full_left_context_): return 0
    for e1, e2 in zip(self.full_left_context_, x.full_left_context_):
      if e1 != e2: return 0
    if len(self.full_right_context_) != len(x.full_right_context_): return 0
    for e1, e2 in zip(self.full_right_context_, x.full_right_context_):
      if e1 != e2: return 0
    if self.has_context2_ != x.has_context2_: return 0
    if self.has_context2_ and self.context2_ != x.context2_: return 0
    if self.has_offset_ != x.has_offset_: return 0
    if self.has_offset_ and self.offset_ != x.offset_: return 0
    if self.has_firstseen_date_ != x.has_firstseen_date_: return 0
    if self.has_firstseen_date_ and self.firstseen_date_ != x.firstseen_date_: return 0
    if self.has_firstseen_near_creation_ != x.has_firstseen_near_creation_: return 0
    if self.has_firstseen_near_creation_ and self.firstseen_near_creation_ != x.firstseen_near_creation_: return 0
    if self.has_creation_date_ != x.has_creation_date_: return 0
    if self.has_creation_date_ and self.creation_date_ != x.creation_date_: return 0
    if self.has_deletion_date_ != x.has_deletion_date_: return 0
    if self.has_deletion_date_ and self.deletion_date_ != x.deletion_date_: return 0
    if self.has_fragment_ != x.has_fragment_: return 0
    if self.has_fragment_ and self.fragment_ != x.fragment_: return 0
    if self.has_source_ != x.has_source_: return 0
    if self.has_source_ and self.source_ != x.source_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_source_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: source not set.')
    elif not self.source_.IsInitialized(debug_strs): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_timestamp_): n += 1 + self.lengthVarInt64(self.timestamp_)
    if (self.has_text_): n += 1 + self.lengthString(len(self.text_))
    if (self.has_orig_text_): n += 2 + self.lengthString(len(self.orig_text_))
    if (self.has_fontsize_): n += 2 + self.lengthVarInt64(self.fontsize_)
    if (self.has_weight_): n += 2 + self.lengthVarInt64(self.weight_)
    if (self.has_demotionreason_): n += 2 + self.lengthVarInt64(self.demotionreason_)
    if (self.has_deleted_): n += 3
    if (self.has_locality_): n += 2 + self.lengthVarInt64(self.locality_)
    if (self.has_bucket_): n += 2 + self.lengthVarInt64(self.bucket_)
    if (self.has_is_local_): n += 3
    if (self.has_original_target_docid_): n += 10
    if (self.has_forwarding_types_): n += 6
    if (self.has_expired_): n += 3
    if (self.has_type_): n += 2 + self.lengthVarInt64(self.type_)
    if (self.has_source_type_): n += 2 + self.lengthVarInt64(self.source_type_)
    if (self.has_experimental_): n += 3
    n += 2 * len(self.link_tags_)
    for i in xrange(len(self.link_tags_)): n += self.lengthVarInt64(self.link_tags_[i])
    if (self.has_pagerank_weight_): n += 6
    if (self.has_seti_pagerank_weight_): n += 6
    if (self.has_context_): n += 2 + self.lengthVarInt64(self.context_)
    n += 10 * len(self.full_left_context_)
    n += 10 * len(self.full_right_context_)
    if (self.has_context2_): n += 2 + self.lengthVarInt64(self.context2_)
    if (self.has_offset_): n += 2 + self.lengthVarInt64(self.offset_)
    if (self.has_firstseen_date_): n += 2 + self.lengthVarInt64(self.firstseen_date_)
    if (self.has_firstseen_near_creation_): n += 3
    if (self.has_creation_date_): n += 2 + self.lengthVarInt64(self.creation_date_)
    if (self.has_deletion_date_): n += 2 + self.lengthVarInt64(self.deletion_date_)
    if (self.has_fragment_): n += 2 + self.lengthString(len(self.fragment_))
    n += self.source_.ByteSize()
    return n + 2

  def Clear(self):
    self.clear_timestamp()
    self.clear_text()
    self.clear_orig_text()
    self.clear_fontsize()
    self.clear_weight()
    self.clear_demotionreason()
    self.clear_deleted()
    self.clear_locality()
    self.clear_bucket()
    self.clear_is_local()
    self.clear_original_target_docid()
    self.clear_forwarding_types()
    self.clear_expired()
    self.clear_type()
    self.clear_source_type()
    self.clear_experimental()
    self.clear_link_tags()
    self.clear_pagerank_weight()
    self.clear_seti_pagerank_weight()
    self.clear_context()
    self.clear_full_left_context()
    self.clear_full_right_context()
    self.clear_context2()
    self.clear_offset()
    self.clear_firstseen_date()
    self.clear_firstseen_near_creation()
    self.clear_creation_date()
    self.clear_deletion_date()
    self.clear_fragment()
    self.clear_source()

  def OutputUnchecked(self, out):
    if (self.has_timestamp_):
      out.putVarInt32(16)
      out.putVarInt64(self.timestamp_)
    if (self.has_text_):
      out.putVarInt32(26)
      out.putPrefixedString(self.text_)
    out.putVarInt32(35)
    self.source_.OutputUnchecked(out)
    out.putVarInt32(36)
    if (self.has_source_type_):
      out.putVarInt32(136)
      out.putVarInt32(self.source_type_)
    if (self.has_orig_text_):
      out.putVarInt32(154)
      out.putPrefixedString(self.orig_text_)
    if (self.has_fontsize_):
      out.putVarInt32(160)
      out.putVarInt32(self.fontsize_)
    if (self.has_weight_):
      out.putVarInt32(168)
      out.putVarInt32(self.weight_)
    if (self.has_demotionreason_):
      out.putVarInt32(176)
      out.putVarInt32(self.demotionreason_)
    if (self.has_deleted_):
      out.putVarInt32(184)
      out.putBoolean(self.deleted_)
    if (self.has_is_local_):
      out.putVarInt32(192)
      out.putBoolean(self.is_local_)
    if (self.has_original_target_docid_):
      out.putVarInt32(201)
      out.put64(self.original_target_docid_)
    if (self.has_expired_):
      out.putVarInt32(208)
      out.putBoolean(self.expired_)
    if (self.has_type_):
      out.putVarInt32(216)
      out.putVarInt32(self.type_)
    if (self.has_context_):
      out.putVarInt32(224)
      out.putVarInt32(self.context_)
    for i in xrange(len(self.link_tags_)):
      out.putVarInt32(264)
      out.putVarInt32(self.link_tags_[i])
    if (self.has_pagerank_weight_):
      out.putVarInt32(277)
      out.putFloat(self.pagerank_weight_)
    if (self.has_offset_):
      out.putVarInt32(288)
      out.putVarInt32(self.offset_)
    if (self.has_creation_date_):
      out.putVarInt32(296)
      out.putVarInt32(self.creation_date_)
    if (self.has_deletion_date_):
      out.putVarInt32(304)
      out.putVarInt32(self.deletion_date_)
    if (self.has_firstseen_date_):
      out.putVarInt32(320)
      out.putVarInt32(self.firstseen_date_)
    if (self.has_forwarding_types_):
      out.putVarInt32(349)
      out.put32(self.forwarding_types_)
    if (self.has_context2_):
      out.putVarInt32(352)
      out.putVarInt32(self.context2_)
    if (self.has_experimental_):
      out.putVarInt32(360)
      out.putBoolean(self.experimental_)
    if (self.has_fragment_):
      out.putVarInt32(370)
      out.putPrefixedString(self.fragment_)
    if (self.has_locality_):
      out.putVarInt32(376)
      out.putVarInt32(self.locality_)
    if (self.has_bucket_):
      out.putVarInt32(384)
      out.putVarInt32(self.bucket_)
    for i in xrange(len(self.full_left_context_)):
      out.putVarInt32(8009)
      out.put64(self.full_left_context_[i])
    for i in xrange(len(self.full_right_context_)):
      out.putVarInt32(8017)
      out.put64(self.full_right_context_[i])
    if (self.has_seti_pagerank_weight_):
      out.putVarInt32(8077)
      out.putFloat(self.seti_pagerank_weight_)
    if (self.has_firstseen_near_creation_):
      out.putVarInt32(8080)
      out.putBoolean(self.firstseen_near_creation_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 16:
        self.set_timestamp(d.getVarInt64())
        continue
      if tt == 26:
        self.set_text(d.getPrefixedString())
        continue
      if tt == 35:
        self.mutable_source().TryMerge(d)
        continue
      if tt == 136:
        self.set_source_type(d.getVarInt32())
        continue
      if tt == 154:
        self.set_orig_text(d.getPrefixedString())
        continue
      if tt == 160:
        self.set_fontsize(d.getVarInt32())
        continue
      if tt == 168:
        self.set_weight(d.getVarInt32())
        continue
      if tt == 176:
        self.set_demotionreason(d.getVarInt32())
        continue
      if tt == 184:
        self.set_deleted(d.getBoolean())
        continue
      if tt == 192:
        self.set_is_local(d.getBoolean())
        continue
      if tt == 201:
        self.set_original_target_docid(d.get64())
        continue
      if tt == 208:
        self.set_expired(d.getBoolean())
        continue
      if tt == 216:
        self.set_type(d.getVarInt32())
        continue
      if tt == 224:
        self.set_context(d.getVarInt32())
        continue
      if tt == 264:
        self.add_link_tags(d.getVarInt32())
        continue
      if tt == 277:
        self.set_pagerank_weight(d.getFloat())
        continue
      if tt == 288:
        self.set_offset(d.getVarInt32())
        continue
      if tt == 296:
        self.set_creation_date(d.getVarInt32())
        continue
      if tt == 304:
        self.set_deletion_date(d.getVarInt32())
        continue
      if tt == 320:
        self.set_firstseen_date(d.getVarInt32())
        continue
      if tt == 349:
        self.set_forwarding_types(d.get32())
        continue
      if tt == 352:
        self.set_context2(d.getVarInt32())
        continue
      if tt == 360:
        self.set_experimental(d.getBoolean())
        continue
      if tt == 370:
        self.set_fragment(d.getPrefixedString())
        continue
      if tt == 376:
        self.set_locality(d.getVarInt32())
        continue
      if tt == 384:
        self.set_bucket(d.getVarInt32())
        continue
      if tt == 8009:
        self.add_full_left_context(d.get64())
        continue
      if tt == 8017:
        self.add_full_right_context(d.get64())
        continue
      if tt == 8077:
        self.set_seti_pagerank_weight(d.getFloat())
        continue
      if tt == 8080:
        self.set_firstseen_near_creation(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_timestamp_: res+=prefix+("timestamp: %s\n" % self.DebugFormatInt64(self.timestamp_))
    if self.has_text_: res+=prefix+("text: %s\n" % self.DebugFormatString(self.text_))
    if self.has_orig_text_: res+=prefix+("orig_text: %s\n" % self.DebugFormatString(self.orig_text_))
    if self.has_fontsize_: res+=prefix+("fontsize: %s\n" % self.DebugFormatInt32(self.fontsize_))
    if self.has_weight_: res+=prefix+("weight: %s\n" % self.DebugFormatInt32(self.weight_))
    if self.has_demotionreason_: res+=prefix+("demotionreason: %s\n" % self.DebugFormatInt32(self.demotionreason_))
    if self.has_deleted_: res+=prefix+("deleted: %s\n" % self.DebugFormatBool(self.deleted_))
    if self.has_locality_: res+=prefix+("locality: %s\n" % self.DebugFormatInt32(self.locality_))
    if self.has_bucket_: res+=prefix+("bucket: %s\n" % self.DebugFormatInt32(self.bucket_))
    if self.has_is_local_: res+=prefix+("is_local: %s\n" % self.DebugFormatBool(self.is_local_))
    if self.has_original_target_docid_: res+=prefix+("original_target_docid: %s\n" % self.DebugFormatFixed64(self.original_target_docid_))
    if self.has_forwarding_types_: res+=prefix+("forwarding_types: %s\n" % self.DebugFormatFixed32(self.forwarding_types_))
    if self.has_expired_: res+=prefix+("expired: %s\n" % self.DebugFormatBool(self.expired_))
    if self.has_type_: res+=prefix+("type: %s\n" % self.DebugFormatInt32(self.type_))
    if self.has_source_type_: res+=prefix+("source_type: %s\n" % self.DebugFormatInt32(self.source_type_))
    if self.has_experimental_: res+=prefix+("experimental: %s\n" % self.DebugFormatBool(self.experimental_))
    cnt=0
    for e in self.link_tags_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("link_tags%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    if self.has_pagerank_weight_: res+=prefix+("pagerank_weight: %s\n" % self.DebugFormatFloat(self.pagerank_weight_))
    if self.has_seti_pagerank_weight_: res+=prefix+("seti_pagerank_weight: %s\n" % self.DebugFormatFloat(self.seti_pagerank_weight_))
    if self.has_context_: res+=prefix+("context: %s\n" % self.DebugFormatInt32(self.context_))
    cnt=0
    for e in self.full_left_context_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("full_left_context%s: %s\n" % (elm, self.DebugFormatFixed64(e)))
      cnt+=1
    cnt=0
    for e in self.full_right_context_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("full_right_context%s: %s\n" % (elm, self.DebugFormatFixed64(e)))
      cnt+=1
    if self.has_context2_: res+=prefix+("context2: %s\n" % self.DebugFormatInt32(self.context2_))
    if self.has_offset_: res+=prefix+("offset: %s\n" % self.DebugFormatInt32(self.offset_))
    if self.has_firstseen_date_: res+=prefix+("firstseen_date: %s\n" % self.DebugFormatInt32(self.firstseen_date_))
    if self.has_firstseen_near_creation_: res+=prefix+("firstseen_near_creation: %s\n" % self.DebugFormatBool(self.firstseen_near_creation_))
    if self.has_creation_date_: res+=prefix+("creation_date: %s\n" % self.DebugFormatInt32(self.creation_date_))
    if self.has_deletion_date_: res+=prefix+("deletion_date: %s\n" % self.DebugFormatInt32(self.deletion_date_))
    if self.has_fragment_: res+=prefix+("fragment: %s\n" % self.DebugFormatString(self.fragment_))
    if self.has_source_:
      res+=prefix+"Source {\n"
      res+=self.source_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    return res

class Anchors_RedundantAnchorInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.domain_ = ""
    self.text_ = ""
    self.anchors_dropped_ = 0
    self.has_domain_ = 0
    self.has_text_ = 0
    self.has_anchors_dropped_ = 0
    if contents is not None: self.MergeFromString(contents)

  def domain(self): return self.domain_

  def set_domain(self, x):
    self.has_domain_ = 1
    self.domain_ = x

  def clear_domain(self):
    self.has_domain_ = 0
    self.domain_ = ""

  def has_domain(self): return self.has_domain_

  def text(self): return self.text_

  def set_text(self, x):
    self.has_text_ = 1
    self.text_ = x

  def clear_text(self):
    self.has_text_ = 0
    self.text_ = ""

  def has_text(self): return self.has_text_

  def anchors_dropped(self): return self.anchors_dropped_

  def set_anchors_dropped(self, x):
    self.has_anchors_dropped_ = 1
    self.anchors_dropped_ = x

  def clear_anchors_dropped(self):
    self.has_anchors_dropped_ = 0
    self.anchors_dropped_ = 0

  def has_anchors_dropped(self): return self.has_anchors_dropped_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_domain()): self.set_domain(x.domain())
    if (x.has_text()): self.set_text(x.text())
    if (x.has_anchors_dropped()): self.set_anchors_dropped(x.anchors_dropped())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'Anchors', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'Anchors')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'Anchors', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'Anchors', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'Anchors', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_domain_ != x.has_domain_: return 0
    if self.has_domain_ and self.domain_ != x.domain_: return 0
    if self.has_text_ != x.has_text_: return 0
    if self.has_text_ and self.text_ != x.text_: return 0
    if self.has_anchors_dropped_ != x.has_anchors_dropped_: return 0
    if self.has_anchors_dropped_ and self.anchors_dropped_ != x.anchors_dropped_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_domain_): n += 2 + self.lengthString(len(self.domain_))
    if (self.has_text_): n += 2 + self.lengthString(len(self.text_))
    if (self.has_anchors_dropped_): n += 2 + self.lengthVarInt64(self.anchors_dropped_)
    return n + 0

  def Clear(self):
    self.clear_domain()
    self.clear_text()
    self.clear_anchors_dropped()

  def OutputUnchecked(self, out):
    if (self.has_domain_):
      out.putVarInt32(8106)
      out.putPrefixedString(self.domain_)
    if (self.has_text_):
      out.putVarInt32(8114)
      out.putPrefixedString(self.text_)
    if (self.has_anchors_dropped_):
      out.putVarInt32(8120)
      out.putVarInt64(self.anchors_dropped_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 8100: break
      if tt == 8106:
        self.set_domain(d.getPrefixedString())
        continue
      if tt == 8114:
        self.set_text(d.getPrefixedString())
        continue
      if tt == 8120:
        self.set_anchors_dropped(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_domain_: res+=prefix+("domain: %s\n" % self.DebugFormatString(self.domain_))
    if self.has_text_: res+=prefix+("text: %s\n" % self.DebugFormatString(self.text_))
    if self.has_anchors_dropped_: res+=prefix+("anchors_dropped: %s\n" % self.DebugFormatInt64(self.anchors_dropped_))
    return res

class Anchors(ProtocolBuffer.ProtocolMessage):

  PAGE_GUESTBOOK =    0 
  PAGE_FORUM   =   16 
  PAGE_MAILING_LIST =    2 
  PAGE_BLOG_COMMENTS =    3 
  PAGE_BLOG    =    4 
  PAGE_PPC     =    5 
  PAGE_SPAM_SIGNATURE_KILL =   19 
  PAGE_SPAM_SIGNATURE_NOPROP =   21 
  PAGE_AFFILIATE =    7 
  PAGE_WIKI    =   17 
  PAGE_BLOG_COMMENTS_TMP_FOR_ALEXIS = 1001 
  PAGE_BLOG_COMMENTS_TMP_FOR_VINEET = 1002 
  PAGE_MOBILE  =    8 
  PAGE_NOFOLLOW =    9 
  PAGE_NOINDEX =   10 
  PAGE_HTTP_BAD =   11 
  PAGE_LINKSPAM =   12 
  PAGE_DEMOTE  =   13 
  PAGE_HAS_FRAMESET =   14 
  PAGE_BADURLS_NOPROP =   15 
  PAGE_BADURLS_NOPROP_ALL =   20 
  PAGE_FRIENDLINK =   22 
  LINK_PAID    =    6 
  LINK_REFERRER =   18 
  LINK_FORUM_COMMERCIAL =    1 
  LINK_BOILERPLATE =   64 
  LINK_ADBANNER =   65 
  LINK_IMAGE   =   66 
  LINK_EXPIRED_PURGATORY =   67 
  LINK_NOFOLLOW =   68 
  LINK_DEMOTE  =   69 
  LINK_LINKDROP =   70 
  LINK_BEFORE_EXPIRATION =   71 
  LINK_BEFORE_CREATION =   72 
  LINK_AFTER_EXPIRATION =   73 
  LINK_IMPORTED =   74 
  LINK_AUTOLEAK =   75 
  LINK_NOSCRIPT =   76 
  LINK_SOURCE_BOILERPLATE =   77 
  LINK_ALL_LINKEXCHANGE =   78 
  LINK_SECTION_LINKEXCHANGE =   79 
  LINK_TRANSIENT_BOILERPLATE =   80 
  LINK_SPAM_SIGNATURE_ALL =   81 
  LINK_SPAM_SIGNATURE_SECTION =   82 
  LINK_FRIENDLINK =   83 
  LINK_FRIENDLINK_COMMERCIAL =   84 
  LINK_BACKLINK_CLUSTER =   85 
  LINK_OUTLINK_CLUSTER =   86 
  LINK_MACHINE_GENERATED =   87 
  LINK_EMBEDED =   88 
  LINK_USER_COMMENT_BOILERPLATE =   89 
  LINK_AFFILIATE =   90 
  TYPE_FRAME   =  128 
  TYPE_AREA    =  129 
  TYPE_METAREFRESH =  130 
  TYPE_LOCATION =  131 
  TYPE_OBJECT  =  132 
  TYPE_EMBED   =  133 
  TYPE_IFRAME  =  134 
  TYPE_FORM    =  135 

  _LinkTags_NAMES = {
    0: "PAGE_GUESTBOOK",
    16: "PAGE_FORUM",
    2: "PAGE_MAILING_LIST",
    3: "PAGE_BLOG_COMMENTS",
    4: "PAGE_BLOG",
    5: "PAGE_PPC",
    19: "PAGE_SPAM_SIGNATURE_KILL",
    21: "PAGE_SPAM_SIGNATURE_NOPROP",
    7: "PAGE_AFFILIATE",
    17: "PAGE_WIKI",
    1001: "PAGE_BLOG_COMMENTS_TMP_FOR_ALEXIS",
    1002: "PAGE_BLOG_COMMENTS_TMP_FOR_VINEET",
    8: "PAGE_MOBILE",
    9: "PAGE_NOFOLLOW",
    10: "PAGE_NOINDEX",
    11: "PAGE_HTTP_BAD",
    12: "PAGE_LINKSPAM",
    13: "PAGE_DEMOTE",
    14: "PAGE_HAS_FRAMESET",
    15: "PAGE_BADURLS_NOPROP",
    20: "PAGE_BADURLS_NOPROP_ALL",
    22: "PAGE_FRIENDLINK",
    6: "LINK_PAID",
    18: "LINK_REFERRER",
    1: "LINK_FORUM_COMMERCIAL",
    64: "LINK_BOILERPLATE",
    65: "LINK_ADBANNER",
    66: "LINK_IMAGE",
    67: "LINK_EXPIRED_PURGATORY",
    68: "LINK_NOFOLLOW",
    69: "LINK_DEMOTE",
    70: "LINK_LINKDROP",
    71: "LINK_BEFORE_EXPIRATION",
    72: "LINK_BEFORE_CREATION",
    73: "LINK_AFTER_EXPIRATION",
    74: "LINK_IMPORTED",
    75: "LINK_AUTOLEAK",
    76: "LINK_NOSCRIPT",
    77: "LINK_SOURCE_BOILERPLATE",
    78: "LINK_ALL_LINKEXCHANGE",
    79: "LINK_SECTION_LINKEXCHANGE",
    80: "LINK_TRANSIENT_BOILERPLATE",
    81: "LINK_SPAM_SIGNATURE_ALL",
    82: "LINK_SPAM_SIGNATURE_SECTION",
    83: "LINK_FRIENDLINK",
    84: "LINK_FRIENDLINK_COMMERCIAL",
    85: "LINK_BACKLINK_CLUSTER",
    86: "LINK_OUTLINK_CLUSTER",
    87: "LINK_MACHINE_GENERATED",
    88: "LINK_EMBEDED",
    89: "LINK_USER_COMMENT_BOILERPLATE",
    90: "LINK_AFFILIATE",
    128: "TYPE_FRAME",
    129: "TYPE_AREA",
    130: "TYPE_METAREFRESH",
    131: "TYPE_LOCATION",
    132: "TYPE_OBJECT",
    133: "TYPE_EMBED",
    134: "TYPE_IFRAME",
    135: "TYPE_FORM",
  }

  def LinkTags_Name(cls, x): return cls._LinkTags_NAMES.get(x, "")
  LinkTags_Name = classmethod(LinkTags_Name)

  def __init__(self, contents=None):
    self.target_docid_ = 0
    self.target_url_ = ""
    self.target_site_ = ""
    self.redundantanchorinfo_ = []
    self.redundant_anchors_dropped_ = 0
    self.homepage_anchors_dropped_ = 0
    self.local_anchors_dropped_ = 0
    self.nonlocal_anchors_dropped_ = 0
    self.supplemental_anchors_dropped_ = 0
    self.anchor_ = []
    self.has_target_docid_ = 0
    self.has_target_url_ = 0
    self.has_target_site_ = 0
    self.has_redundant_anchors_dropped_ = 0
    self.has_homepage_anchors_dropped_ = 0
    self.has_local_anchors_dropped_ = 0
    self.has_nonlocal_anchors_dropped_ = 0
    self.has_supplemental_anchors_dropped_ = 0
    if contents is not None: self.MergeFromString(contents)

  def target_docid(self): return self.target_docid_

  def set_target_docid(self, x):
    self.has_target_docid_ = 1
    self.target_docid_ = x

  def clear_target_docid(self):
    self.has_target_docid_ = 0
    self.target_docid_ = 0

  def has_target_docid(self): return self.has_target_docid_

  def target_url(self): return self.target_url_

  def set_target_url(self, x):
    self.has_target_url_ = 1
    self.target_url_ = x

  def clear_target_url(self):
    self.has_target_url_ = 0
    self.target_url_ = ""

  def has_target_url(self): return self.has_target_url_

  def target_site(self): return self.target_site_

  def set_target_site(self, x):
    self.has_target_site_ = 1
    self.target_site_ = x

  def clear_target_site(self):
    self.has_target_site_ = 0
    self.target_site_ = ""

  def has_target_site(self): return self.has_target_site_

  def redundantanchorinfo_size(self): return len(self.redundantanchorinfo_)
  def redundantanchorinfo_list(self): return self.redundantanchorinfo_

  def redundantanchorinfo(self, i):
    return self.redundantanchorinfo_[i]

  def mutable_redundantanchorinfo(self, i):
    return self.redundantanchorinfo_[i]

  def add_redundantanchorinfo(self):
    x = Anchors_RedundantAnchorInfo()
    self.redundantanchorinfo_.append(x)
    return x

  def clear_redundantanchorinfo(self):
    self.redundantanchorinfo_ = []
  def redundant_anchors_dropped(self): return self.redundant_anchors_dropped_

  def set_redundant_anchors_dropped(self, x):
    self.has_redundant_anchors_dropped_ = 1
    self.redundant_anchors_dropped_ = x

  def clear_redundant_anchors_dropped(self):
    self.has_redundant_anchors_dropped_ = 0
    self.redundant_anchors_dropped_ = 0

  def has_redundant_anchors_dropped(self): return self.has_redundant_anchors_dropped_

  def homepage_anchors_dropped(self): return self.homepage_anchors_dropped_

  def set_homepage_anchors_dropped(self, x):
    self.has_homepage_anchors_dropped_ = 1
    self.homepage_anchors_dropped_ = x

  def clear_homepage_anchors_dropped(self):
    self.has_homepage_anchors_dropped_ = 0
    self.homepage_anchors_dropped_ = 0

  def has_homepage_anchors_dropped(self): return self.has_homepage_anchors_dropped_

  def local_anchors_dropped(self): return self.local_anchors_dropped_

  def set_local_anchors_dropped(self, x):
    self.has_local_anchors_dropped_ = 1
    self.local_anchors_dropped_ = x

  def clear_local_anchors_dropped(self):
    self.has_local_anchors_dropped_ = 0
    self.local_anchors_dropped_ = 0

  def has_local_anchors_dropped(self): return self.has_local_anchors_dropped_

  def nonlocal_anchors_dropped(self): return self.nonlocal_anchors_dropped_

  def set_nonlocal_anchors_dropped(self, x):
    self.has_nonlocal_anchors_dropped_ = 1
    self.nonlocal_anchors_dropped_ = x

  def clear_nonlocal_anchors_dropped(self):
    self.has_nonlocal_anchors_dropped_ = 0
    self.nonlocal_anchors_dropped_ = 0

  def has_nonlocal_anchors_dropped(self): return self.has_nonlocal_anchors_dropped_

  def supplemental_anchors_dropped(self): return self.supplemental_anchors_dropped_

  def set_supplemental_anchors_dropped(self, x):
    self.has_supplemental_anchors_dropped_ = 1
    self.supplemental_anchors_dropped_ = x

  def clear_supplemental_anchors_dropped(self):
    self.has_supplemental_anchors_dropped_ = 0
    self.supplemental_anchors_dropped_ = 0

  def has_supplemental_anchors_dropped(self): return self.has_supplemental_anchors_dropped_

  def anchor_size(self): return len(self.anchor_)
  def anchor_list(self): return self.anchor_

  def anchor(self, i):
    return self.anchor_[i]

  def mutable_anchor(self, i):
    return self.anchor_[i]

  def add_anchor(self):
    x = Anchors_Anchor()
    self.anchor_.append(x)
    return x

  def clear_anchor(self):
    self.anchor_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_target_docid()): self.set_target_docid(x.target_docid())
    if (x.has_target_url()): self.set_target_url(x.target_url())
    if (x.has_target_site()): self.set_target_site(x.target_site())
    for i in xrange(x.redundantanchorinfo_size()): self.add_redundantanchorinfo().CopyFrom(x.redundantanchorinfo(i))
    if (x.has_redundant_anchors_dropped()): self.set_redundant_anchors_dropped(x.redundant_anchors_dropped())
    if (x.has_homepage_anchors_dropped()): self.set_homepage_anchors_dropped(x.homepage_anchors_dropped())
    if (x.has_local_anchors_dropped()): self.set_local_anchors_dropped(x.local_anchors_dropped())
    if (x.has_nonlocal_anchors_dropped()): self.set_nonlocal_anchors_dropped(x.nonlocal_anchors_dropped())
    if (x.has_supplemental_anchors_dropped()): self.set_supplemental_anchors_dropped(x.supplemental_anchors_dropped())
    for i in xrange(x.anchor_size()): self.add_anchor().CopyFrom(x.anchor(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'Anchors', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'Anchors')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'Anchors', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'Anchors', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'Anchors', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_target_docid_ != x.has_target_docid_: return 0
    if self.has_target_docid_ and self.target_docid_ != x.target_docid_: return 0
    if self.has_target_url_ != x.has_target_url_: return 0
    if self.has_target_url_ and self.target_url_ != x.target_url_: return 0
    if self.has_target_site_ != x.has_target_site_: return 0
    if self.has_target_site_ and self.target_site_ != x.target_site_: return 0
    if len(self.redundantanchorinfo_) != len(x.redundantanchorinfo_): return 0
    for e1, e2 in zip(self.redundantanchorinfo_, x.redundantanchorinfo_):
      if e1 != e2: return 0
    if self.has_redundant_anchors_dropped_ != x.has_redundant_anchors_dropped_: return 0
    if self.has_redundant_anchors_dropped_ and self.redundant_anchors_dropped_ != x.redundant_anchors_dropped_: return 0
    if self.has_homepage_anchors_dropped_ != x.has_homepage_anchors_dropped_: return 0
    if self.has_homepage_anchors_dropped_ and self.homepage_anchors_dropped_ != x.homepage_anchors_dropped_: return 0
    if self.has_local_anchors_dropped_ != x.has_local_anchors_dropped_: return 0
    if self.has_local_anchors_dropped_ and self.local_anchors_dropped_ != x.local_anchors_dropped_: return 0
    if self.has_nonlocal_anchors_dropped_ != x.has_nonlocal_anchors_dropped_: return 0
    if self.has_nonlocal_anchors_dropped_ and self.nonlocal_anchors_dropped_ != x.nonlocal_anchors_dropped_: return 0
    if self.has_supplemental_anchors_dropped_ != x.has_supplemental_anchors_dropped_: return 0
    if self.has_supplemental_anchors_dropped_ and self.supplemental_anchors_dropped_ != x.supplemental_anchors_dropped_: return 0
    if len(self.anchor_) != len(x.anchor_): return 0
    for e1, e2 in zip(self.anchor_, x.anchor_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.redundantanchorinfo_)):
      if (not self.redundantanchorinfo_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.anchor_)):
      if (not self.anchor_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_target_docid_): n += 10
    if (self.has_target_url_): n += 2 + self.lengthString(len(self.target_url_))
    if (self.has_target_site_): n += 2 + self.lengthString(len(self.target_site_))
    n += 4 * len(self.redundantanchorinfo_)
    for i in xrange(len(self.redundantanchorinfo_)): n += self.redundantanchorinfo_[i].ByteSize()
    if (self.has_redundant_anchors_dropped_): n += 2 + self.lengthVarInt64(self.redundant_anchors_dropped_)
    if (self.has_homepage_anchors_dropped_): n += 2 + self.lengthVarInt64(self.homepage_anchors_dropped_)
    if (self.has_local_anchors_dropped_): n += 2 + self.lengthVarInt64(self.local_anchors_dropped_)
    if (self.has_nonlocal_anchors_dropped_): n += 2 + self.lengthVarInt64(self.nonlocal_anchors_dropped_)
    if (self.has_supplemental_anchors_dropped_): n += 2 + self.lengthVarInt64(self.supplemental_anchors_dropped_)
    n += 2 * len(self.anchor_)
    for i in xrange(len(self.anchor_)): n += self.anchor_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_target_docid()
    self.clear_target_url()
    self.clear_target_site()
    self.clear_redundantanchorinfo()
    self.clear_redundant_anchors_dropped()
    self.clear_homepage_anchors_dropped()
    self.clear_local_anchors_dropped()
    self.clear_nonlocal_anchors_dropped()
    self.clear_supplemental_anchors_dropped()
    self.clear_anchor()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.anchor_)):
      out.putVarInt32(11)
      self.anchor_[i].OutputUnchecked(out)
      out.putVarInt32(12)
    if (self.has_target_docid_):
      out.putVarInt32(129)
      out.put64(self.target_docid_)
    if (self.has_target_url_):
      out.putVarInt32(8002)
      out.putPrefixedString(self.target_url_)
    if (self.has_target_site_):
      out.putVarInt32(8034)
      out.putPrefixedString(self.target_site_)
    if (self.has_homepage_anchors_dropped_):
      out.putVarInt32(8040)
      out.putVarInt64(self.homepage_anchors_dropped_)
    if (self.has_local_anchors_dropped_):
      out.putVarInt32(8048)
      out.putVarInt64(self.local_anchors_dropped_)
    if (self.has_nonlocal_anchors_dropped_):
      out.putVarInt32(8056)
      out.putVarInt64(self.nonlocal_anchors_dropped_)
    if (self.has_supplemental_anchors_dropped_):
      out.putVarInt32(8064)
      out.putVarInt64(self.supplemental_anchors_dropped_)
    if (self.has_redundant_anchors_dropped_):
      out.putVarInt32(8088)
      out.putVarInt64(self.redundant_anchors_dropped_)
    for i in xrange(len(self.redundantanchorinfo_)):
      out.putVarInt32(8099)
      self.redundantanchorinfo_[i].OutputUnchecked(out)
      out.putVarInt32(8100)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_anchor().TryMerge(d)
        continue
      if tt == 129:
        self.set_target_docid(d.get64())
        continue
      if tt == 8002:
        self.set_target_url(d.getPrefixedString())
        continue
      if tt == 8034:
        self.set_target_site(d.getPrefixedString())
        continue
      if tt == 8040:
        self.set_homepage_anchors_dropped(d.getVarInt64())
        continue
      if tt == 8048:
        self.set_local_anchors_dropped(d.getVarInt64())
        continue
      if tt == 8056:
        self.set_nonlocal_anchors_dropped(d.getVarInt64())
        continue
      if tt == 8064:
        self.set_supplemental_anchors_dropped(d.getVarInt64())
        continue
      if tt == 8088:
        self.set_redundant_anchors_dropped(d.getVarInt64())
        continue
      if tt == 8099:
        self.add_redundantanchorinfo().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_target_docid_: res+=prefix+("target_docid: %s\n" % self.DebugFormatFixed64(self.target_docid_))
    if self.has_target_url_: res+=prefix+("target_url: %s\n" % self.DebugFormatString(self.target_url_))
    if self.has_target_site_: res+=prefix+("target_site: %s\n" % self.DebugFormatString(self.target_site_))
    cnt=0
    for e in self.redundantanchorinfo_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("RedundantAnchorInfo%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_redundant_anchors_dropped_: res+=prefix+("redundant_anchors_dropped: %s\n" % self.DebugFormatInt64(self.redundant_anchors_dropped_))
    if self.has_homepage_anchors_dropped_: res+=prefix+("homepage_anchors_dropped: %s\n" % self.DebugFormatInt64(self.homepage_anchors_dropped_))
    if self.has_local_anchors_dropped_: res+=prefix+("local_anchors_dropped: %s\n" % self.DebugFormatInt64(self.local_anchors_dropped_))
    if self.has_nonlocal_anchors_dropped_: res+=prefix+("nonlocal_anchors_dropped: %s\n" % self.DebugFormatInt64(self.nonlocal_anchors_dropped_))
    if self.has_supplemental_anchors_dropped_: res+=prefix+("supplemental_anchors_dropped: %s\n" % self.DebugFormatInt64(self.supplemental_anchors_dropped_))
    cnt=0
    for e in self.anchor_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Anchor%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  ktarget_docid = 16
  ktarget_url = 1000
  ktarget_site = 1004
  kRedundantAnchorInfoGroup = 1012
  kRedundantAnchorInfodomain = 1013
  kRedundantAnchorInfotext = 1014
  kRedundantAnchorInfoanchors_dropped = 1015
  kredundant_anchors_dropped = 1011
  khomepage_anchors_dropped = 1005
  klocal_anchors_dropped = 1006
  knonlocal_anchors_dropped = 1007
  ksupplemental_anchors_dropped = 1008
  kAnchorGroup = 1
  kAnchortimestamp = 2
  kAnchortext = 3
  kAnchororig_text = 19
  kAnchorfontsize = 20
  kAnchorweight = 21
  kAnchordemotionreason = 22
  kAnchordeleted = 23
  kAnchorlocality = 47
  kAnchorbucket = 48
  kAnchoris_local = 24
  kAnchororiginal_target_docid = 25
  kAnchorforwarding_types = 43
  kAnchorexpired = 26
  kAnchortype = 27
  kAnchorsource_type = 17
  kAnchorexperimental = 45
  kAnchorlink_tags = 33
  kAnchorpagerank_weight = 34
  kAnchorseti_pagerank_weight = 1009
  kAnchorcontext = 28
  kAnchorfull_left_context = 1001
  kAnchorfull_right_context = 1002
  kAnchorcontext2 = 44
  kAnchoroffset = 36
  kAnchorfirstseen_date = 40
  kAnchorfirstseen_near_creation = 1010
  kAnchorcreation_date = 37
  kAnchordeletion_date = 38
  kAnchorfragment = 46
  kAnchorSourceGroup = 4
  kAnchorSourcedocid = 5
  kAnchorSourcepagerank = 6
  kAnchorSourcepagerank_ns = 49
  kAnchorSourceindyrank = 7
  kAnchorSourcespamscore1 = 14
  kAnchorSourcespamscore2 = 15
  kAnchorSourcespamrank = 35
  kAnchorSourceipaddr = 8
  kAnchorSourcesite = 9
  kAnchorSourcelinkhash = 10
  kAnchorSourcelanguage = 11
  kAnchorSourceoutdegree = 12
  kAnchorSourceoutsites = 41
  kAnchorSourcedoclength = 30
  kAnchorSourcecluster = 31
  kAnchorSourceseglanguage = 13
  kAnchorSourcecompressed_url = 39
  kAnchorSourcewebtable_key = 29
  kAnchorSourcehome_page_info = 42
  kAnchorSourcepage_tags = 32

  _TEXT = (
   "ErrorCode",  #   0
   "Anchor",  #   1
   "timestamp",  #   2
   "text",  #   3
   "Source",  #   4
   "docid",  #   5
   "pagerank",  #   6
   "indyrank",  #   7
   "ipaddr",  #   8
   "site",  #   9
   "linkhash",  #  10
   "language",  #  11
   "outdegree",  #  12
   "seglanguage",  #  13
   "spamscore1",  #  14
   "spamscore2",  #  15
   "target_docid",  #  16
   "source_type",  #  17
   None,  #  18
   "orig_text",  #  19
   "fontsize",  #  20
   "weight",  #  21
   "demotionreason",  #  22
   "deleted",  #  23
   "is_local",  #  24
   "original_target_docid",  #  25
   "expired",  #  26
   "type",  #  27
   "context",  #  28
   "webtable_key",  #  29
   "doclength",  #  30
   "cluster",  #  31
   "page_tags",  #  32
   "link_tags",  #  33
   "pagerank_weight",  #  34
   "spamrank",  #  35
   "offset",  #  36
   "creation_date",  #  37
   "deletion_date",  #  38
   "compressed_url",  #  39
   "firstseen_date",  #  40
   "outsites",  #  41
   "home_page_info",  #  42
   "forwarding_types",  #  43
   "context2",  #  44
   "experimental",  #  45
   "fragment",  #  46
   "locality",  #  47
   "bucket",  #  48
   "pagerank_ns",  #  49
   None,  #  50
   None,  #  51
   None,  #  52
   None,  #  53
   None,  #  54
   None,  #  55
   None,  #  56
   None,  #  57
   None,  #  58
   None,  #  59
   None,  #  60
   None,  #  61
   None,  #  62
   None,  #  63
   None,  #  64
   None,  #  65
   None,  #  66
   None,  #  67
   None,  #  68
   None,  #  69
   None,  #  70
   None,  #  71
   None,  #  72
   None,  #  73
   None,  #  74
   None,  #  75
   None,  #  76
   None,  #  77
   None,  #  78
   None,  #  79
   None,  #  80
   None,  #  81
   None,  #  82
   None,  #  83
   None,  #  84
   None,  #  85
   None,  #  86
   None,  #  87
   None,  #  88
   None,  #  89
   None,  #  90
   None,  #  91
   None,  #  92
   None,  #  93
   None,  #  94
   None,  #  95
   None,  #  96
   None,  #  97
   None,  #  98
   None,  #  99
   None,  # 100
   None,  # 101
   None,  # 102
   None,  # 103
   None,  # 104
   None,  # 105
   None,  # 106
   None,  # 107
   None,  # 108
   None,  # 109
   None,  # 110
   None,  # 111
   None,  # 112
   None,  # 113
   None,  # 114
   None,  # 115
   None,  # 116
   None,  # 117
   None,  # 118
   None,  # 119
   None,  # 120
   None,  # 121
   None,  # 122
   None,  # 123
   None,  # 124
   None,  # 125
   None,  # 126
   None,  # 127
   None,  # 128
   None,  # 129
   None,  # 130
   None,  # 131
   None,  # 132
   None,  # 133
   None,  # 134
   None,  # 135
   None,  # 136
   None,  # 137
   None,  # 138
   None,  # 139
   None,  # 140
   None,  # 141
   None,  # 142
   None,  # 143
   None,  # 144
   None,  # 145
   None,  # 146
   None,  # 147
   None,  # 148
   None,  # 149
   None,  # 150
   None,  # 151
   None,  # 152
   None,  # 153
   None,  # 154
   None,  # 155
   None,  # 156
   None,  # 157
   None,  # 158
   None,  # 159
   None,  # 160
   None,  # 161
   None,  # 162
   None,  # 163
   None,  # 164
   None,  # 165
   None,  # 166
   None,  # 167
   None,  # 168
   None,  # 169
   None,  # 170
   None,  # 171
   None,  # 172
   None,  # 173
   None,  # 174
   None,  # 175
   None,  # 176
   None,  # 177
   None,  # 178
   None,  # 179
   None,  # 180
   None,  # 181
   None,  # 182
   None,  # 183
   None,  # 184
   None,  # 185
   None,  # 186
   None,  # 187
   None,  # 188
   None,  # 189
   None,  # 190
   None,  # 191
   None,  # 192
   None,  # 193
   None,  # 194
   None,  # 195
   None,  # 196
   None,  # 197
   None,  # 198
   None,  # 199
   None,  # 200
   None,  # 201
   None,  # 202
   None,  # 203
   None,  # 204
   None,  # 205
   None,  # 206
   None,  # 207
   None,  # 208
   None,  # 209
   None,  # 210
   None,  # 211
   None,  # 212
   None,  # 213
   None,  # 214
   None,  # 215
   None,  # 216
   None,  # 217
   None,  # 218
   None,  # 219
   None,  # 220
   None,  # 221
   None,  # 222
   None,  # 223
   None,  # 224
   None,  # 225
   None,  # 226
   None,  # 227
   None,  # 228
   None,  # 229
   None,  # 230
   None,  # 231
   None,  # 232
   None,  # 233
   None,  # 234
   None,  # 235
   None,  # 236
   None,  # 237
   None,  # 238
   None,  # 239
   None,  # 240
   None,  # 241
   None,  # 242
   None,  # 243
   None,  # 244
   None,  # 245
   None,  # 246
   None,  # 247
   None,  # 248
   None,  # 249
   None,  # 250
   None,  # 251
   None,  # 252
   None,  # 253
   None,  # 254
   None,  # 255
   None,  # 256
   None,  # 257
   None,  # 258
   None,  # 259
   None,  # 260
   None,  # 261
   None,  # 262
   None,  # 263
   None,  # 264
   None,  # 265
   None,  # 266
   None,  # 267
   None,  # 268
   None,  # 269
   None,  # 270
   None,  # 271
   None,  # 272
   None,  # 273
   None,  # 274
   None,  # 275
   None,  # 276
   None,  # 277
   None,  # 278
   None,  # 279
   None,  # 280
   None,  # 281
   None,  # 282
   None,  # 283
   None,  # 284
   None,  # 285
   None,  # 286
   None,  # 287
   None,  # 288
   None,  # 289
   None,  # 290
   None,  # 291
   None,  # 292
   None,  # 293
   None,  # 294
   None,  # 295
   None,  # 296
   None,  # 297
   None,  # 298
   None,  # 299
   None,  # 300
   None,  # 301
   None,  # 302
   None,  # 303
   None,  # 304
   None,  # 305
   None,  # 306
   None,  # 307
   None,  # 308
   None,  # 309
   None,  # 310
   None,  # 311
   None,  # 312
   None,  # 313
   None,  # 314
   None,  # 315
   None,  # 316
   None,  # 317
   None,  # 318
   None,  # 319
   None,  # 320
   None,  # 321
   None,  # 322
   None,  # 323
   None,  # 324
   None,  # 325
   None,  # 326
   None,  # 327
   None,  # 328
   None,  # 329
   None,  # 330
   None,  # 331
   None,  # 332
   None,  # 333
   None,  # 334
   None,  # 335
   None,  # 336
   None,  # 337
   None,  # 338
   None,  # 339
   None,  # 340
   None,  # 341
   None,  # 342
   None,  # 343
   None,  # 344
   None,  # 345
   None,  # 346
   None,  # 347
   None,  # 348
   None,  # 349
   None,  # 350
   None,  # 351
   None,  # 352
   None,  # 353
   None,  # 354
   None,  # 355
   None,  # 356
   None,  # 357
   None,  # 358
   None,  # 359
   None,  # 360
   None,  # 361
   None,  # 362
   None,  # 363
   None,  # 364
   None,  # 365
   None,  # 366
   None,  # 367
   None,  # 368
   None,  # 369
   None,  # 370
   None,  # 371
   None,  # 372
   None,  # 373
   None,  # 374
   None,  # 375
   None,  # 376
   None,  # 377
   None,  # 378
   None,  # 379
   None,  # 380
   None,  # 381
   None,  # 382
   None,  # 383
   None,  # 384
   None,  # 385
   None,  # 386
   None,  # 387
   None,  # 388
   None,  # 389
   None,  # 390
   None,  # 391
   None,  # 392
   None,  # 393
   None,  # 394
   None,  # 395
   None,  # 396
   None,  # 397
   None,  # 398
   None,  # 399
   None,  # 400
   None,  # 401
   None,  # 402
   None,  # 403
   None,  # 404
   None,  # 405
   None,  # 406
   None,  # 407
   None,  # 408
   None,  # 409
   None,  # 410
   None,  # 411
   None,  # 412
   None,  # 413
   None,  # 414
   None,  # 415
   None,  # 416
   None,  # 417
   None,  # 418
   None,  # 419
   None,  # 420
   None,  # 421
   None,  # 422
   None,  # 423
   None,  # 424
   None,  # 425
   None,  # 426
   None,  # 427
   None,  # 428
   None,  # 429
   None,  # 430
   None,  # 431
   None,  # 432
   None,  # 433
   None,  # 434
   None,  # 435
   None,  # 436
   None,  # 437
   None,  # 438
   None,  # 439
   None,  # 440
   None,  # 441
   None,  # 442
   None,  # 443
   None,  # 444
   None,  # 445
   None,  # 446
   None,  # 447
   None,  # 448
   None,  # 449
   None,  # 450
   None,  # 451
   None,  # 452
   None,  # 453
   None,  # 454
   None,  # 455
   None,  # 456
   None,  # 457
   None,  # 458
   None,  # 459
   None,  # 460
   None,  # 461
   None,  # 462
   None,  # 463
   None,  # 464
   None,  # 465
   None,  # 466
   None,  # 467
   None,  # 468
   None,  # 469
   None,  # 470
   None,  # 471
   None,  # 472
   None,  # 473
   None,  # 474
   None,  # 475
   None,  # 476
   None,  # 477
   None,  # 478
   None,  # 479
   None,  # 480
   None,  # 481
   None,  # 482
   None,  # 483
   None,  # 484
   None,  # 485
   None,  # 486
   None,  # 487
   None,  # 488
   None,  # 489
   None,  # 490
   None,  # 491
   None,  # 492
   None,  # 493
   None,  # 494
   None,  # 495
   None,  # 496
   None,  # 497
   None,  # 498
   None,  # 499
   None,  # 500
   None,  # 501
   None,  # 502
   None,  # 503
   None,  # 504
   None,  # 505
   None,  # 506
   None,  # 507
   None,  # 508
   None,  # 509
   None,  # 510
   None,  # 511
   None,  # 512
   None,  # 513
   None,  # 514
   None,  # 515
   None,  # 516
   None,  # 517
   None,  # 518
   None,  # 519
   None,  # 520
   None,  # 521
   None,  # 522
   None,  # 523
   None,  # 524
   None,  # 525
   None,  # 526
   None,  # 527
   None,  # 528
   None,  # 529
   None,  # 530
   None,  # 531
   None,  # 532
   None,  # 533
   None,  # 534
   None,  # 535
   None,  # 536
   None,  # 537
   None,  # 538
   None,  # 539
   None,  # 540
   None,  # 541
   None,  # 542
   None,  # 543
   None,  # 544
   None,  # 545
   None,  # 546
   None,  # 547
   None,  # 548
   None,  # 549
   None,  # 550
   None,  # 551
   None,  # 552
   None,  # 553
   None,  # 554
   None,  # 555
   None,  # 556
   None,  # 557
   None,  # 558
   None,  # 559
   None,  # 560
   None,  # 561
   None,  # 562
   None,  # 563
   None,  # 564
   None,  # 565
   None,  # 566
   None,  # 567
   None,  # 568
   None,  # 569
   None,  # 570
   None,  # 571
   None,  # 572
   None,  # 573
   None,  # 574
   None,  # 575
   None,  # 576
   None,  # 577
   None,  # 578
   None,  # 579
   None,  # 580
   None,  # 581
   None,  # 582
   None,  # 583
   None,  # 584
   None,  # 585
   None,  # 586
   None,  # 587
   None,  # 588
   None,  # 589
   None,  # 590
   None,  # 591
   None,  # 592
   None,  # 593
   None,  # 594
   None,  # 595
   None,  # 596
   None,  # 597
   None,  # 598
   None,  # 599
   None,  # 600
   None,  # 601
   None,  # 602
   None,  # 603
   None,  # 604
   None,  # 605
   None,  # 606
   None,  # 607
   None,  # 608
   None,  # 609
   None,  # 610
   None,  # 611
   None,  # 612
   None,  # 613
   None,  # 614
   None,  # 615
   None,  # 616
   None,  # 617
   None,  # 618
   None,  # 619
   None,  # 620
   None,  # 621
   None,  # 622
   None,  # 623
   None,  # 624
   None,  # 625
   None,  # 626
   None,  # 627
   None,  # 628
   None,  # 629
   None,  # 630
   None,  # 631
   None,  # 632
   None,  # 633
   None,  # 634
   None,  # 635
   None,  # 636
   None,  # 637
   None,  # 638
   None,  # 639
   None,  # 640
   None,  # 641
   None,  # 642
   None,  # 643
   None,  # 644
   None,  # 645
   None,  # 646
   None,  # 647
   None,  # 648
   None,  # 649
   None,  # 650
   None,  # 651
   None,  # 652
   None,  # 653
   None,  # 654
   None,  # 655
   None,  # 656
   None,  # 657
   None,  # 658
   None,  # 659
   None,  # 660
   None,  # 661
   None,  # 662
   None,  # 663
   None,  # 664
   None,  # 665
   None,  # 666
   None,  # 667
   None,  # 668
   None,  # 669
   None,  # 670
   None,  # 671
   None,  # 672
   None,  # 673
   None,  # 674
   None,  # 675
   None,  # 676
   None,  # 677
   None,  # 678
   None,  # 679
   None,  # 680
   None,  # 681
   None,  # 682
   None,  # 683
   None,  # 684
   None,  # 685
   None,  # 686
   None,  # 687
   None,  # 688
   None,  # 689
   None,  # 690
   None,  # 691
   None,  # 692
   None,  # 693
   None,  # 694
   None,  # 695
   None,  # 696
   None,  # 697
   None,  # 698
   None,  # 699
   None,  # 700
   None,  # 701
   None,  # 702
   None,  # 703
   None,  # 704
   None,  # 705
   None,  # 706
   None,  # 707
   None,  # 708
   None,  # 709
   None,  # 710
   None,  # 711
   None,  # 712
   None,  # 713
   None,  # 714
   None,  # 715
   None,  # 716
   None,  # 717
   None,  # 718
   None,  # 719
   None,  # 720
   None,  # 721
   None,  # 722
   None,  # 723
   None,  # 724
   None,  # 725
   None,  # 726
   None,  # 727
   None,  # 728
   None,  # 729
   None,  # 730
   None,  # 731
   None,  # 732
   None,  # 733
   None,  # 734
   None,  # 735
   None,  # 736
   None,  # 737
   None,  # 738
   None,  # 739
   None,  # 740
   None,  # 741
   None,  # 742
   None,  # 743
   None,  # 744
   None,  # 745
   None,  # 746
   None,  # 747
   None,  # 748
   None,  # 749
   None,  # 750
   None,  # 751
   None,  # 752
   None,  # 753
   None,  # 754
   None,  # 755
   None,  # 756
   None,  # 757
   None,  # 758
   None,  # 759
   None,  # 760
   None,  # 761
   None,  # 762
   None,  # 763
   None,  # 764
   None,  # 765
   None,  # 766
   None,  # 767
   None,  # 768
   None,  # 769
   None,  # 770
   None,  # 771
   None,  # 772
   None,  # 773
   None,  # 774
   None,  # 775
   None,  # 776
   None,  # 777
   None,  # 778
   None,  # 779
   None,  # 780
   None,  # 781
   None,  # 782
   None,  # 783
   None,  # 784
   None,  # 785
   None,  # 786
   None,  # 787
   None,  # 788
   None,  # 789
   None,  # 790
   None,  # 791
   None,  # 792
   None,  # 793
   None,  # 794
   None,  # 795
   None,  # 796
   None,  # 797
   None,  # 798
   None,  # 799
   None,  # 800
   None,  # 801
   None,  # 802
   None,  # 803
   None,  # 804
   None,  # 805
   None,  # 806
   None,  # 807
   None,  # 808
   None,  # 809
   None,  # 810
   None,  # 811
   None,  # 812
   None,  # 813
   None,  # 814
   None,  # 815
   None,  # 816
   None,  # 817
   None,  # 818
   None,  # 819
   None,  # 820
   None,  # 821
   None,  # 822
   None,  # 823
   None,  # 824
   None,  # 825
   None,  # 826
   None,  # 827
   None,  # 828
   None,  # 829
   None,  # 830
   None,  # 831
   None,  # 832
   None,  # 833
   None,  # 834
   None,  # 835
   None,  # 836
   None,  # 837
   None,  # 838
   None,  # 839
   None,  # 840
   None,  # 841
   None,  # 842
   None,  # 843
   None,  # 844
   None,  # 845
   None,  # 846
   None,  # 847
   None,  # 848
   None,  # 849
   None,  # 850
   None,  # 851
   None,  # 852
   None,  # 853
   None,  # 854
   None,  # 855
   None,  # 856
   None,  # 857
   None,  # 858
   None,  # 859
   None,  # 860
   None,  # 861
   None,  # 862
   None,  # 863
   None,  # 864
   None,  # 865
   None,  # 866
   None,  # 867
   None,  # 868
   None,  # 869
   None,  # 870
   None,  # 871
   None,  # 872
   None,  # 873
   None,  # 874
   None,  # 875
   None,  # 876
   None,  # 877
   None,  # 878
   None,  # 879
   None,  # 880
   None,  # 881
   None,  # 882
   None,  # 883
   None,  # 884
   None,  # 885
   None,  # 886
   None,  # 887
   None,  # 888
   None,  # 889
   None,  # 890
   None,  # 891
   None,  # 892
   None,  # 893
   None,  # 894
   None,  # 895
   None,  # 896
   None,  # 897
   None,  # 898
   None,  # 899
   None,  # 900
   None,  # 901
   None,  # 902
   None,  # 903
   None,  # 904
   None,  # 905
   None,  # 906
   None,  # 907
   None,  # 908
   None,  # 909
   None,  # 910
   None,  # 911
   None,  # 912
   None,  # 913
   None,  # 914
   None,  # 915
   None,  # 916
   None,  # 917
   None,  # 918
   None,  # 919
   None,  # 920
   None,  # 921
   None,  # 922
   None,  # 923
   None,  # 924
   None,  # 925
   None,  # 926
   None,  # 927
   None,  # 928
   None,  # 929
   None,  # 930
   None,  # 931
   None,  # 932
   None,  # 933
   None,  # 934
   None,  # 935
   None,  # 936
   None,  # 937
   None,  # 938
   None,  # 939
   None,  # 940
   None,  # 941
   None,  # 942
   None,  # 943
   None,  # 944
   None,  # 945
   None,  # 946
   None,  # 947
   None,  # 948
   None,  # 949
   None,  # 950
   None,  # 951
   None,  # 952
   None,  # 953
   None,  # 954
   None,  # 955
   None,  # 956
   None,  # 957
   None,  # 958
   None,  # 959
   None,  # 960
   None,  # 961
   None,  # 962
   None,  # 963
   None,  # 964
   None,  # 965
   None,  # 966
   None,  # 967
   None,  # 968
   None,  # 969
   None,  # 970
   None,  # 971
   None,  # 972
   None,  # 973
   None,  # 974
   None,  # 975
   None,  # 976
   None,  # 977
   None,  # 978
   None,  # 979
   None,  # 980
   None,  # 981
   None,  # 982
   None,  # 983
   None,  # 984
   None,  # 985
   None,  # 986
   None,  # 987
   None,  # 988
   None,  # 989
   None,  # 990
   None,  # 991
   None,  # 992
   None,  # 993
   None,  # 994
   None,  # 995
   None,  # 996
   None,  # 997
   None,  # 998
   None,  # 999
   "target_url",  # 1000
   "full_left_context",  # 1001
   "full_right_context",  # 1002
   None,  # 1003
   "target_site",  # 1004
   "homepage_anchors_dropped",  # 1005
   "local_anchors_dropped",  # 1006
   "nonlocal_anchors_dropped",  # 1007
   "supplemental_anchors_dropped",  # 1008
   "seti_pagerank_weight",  # 1009
   "firstseen_near_creation",  # 1010
   "redundant_anchors_dropped",  # 1011
   "RedundantAnchorInfo",  # 1012
   "domain",  # 1013
   "text",  # 1014
   "anchors_dropped",  # 1015
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.STARTGROUP,  #   4

   ProtocolBuffer.Encoder.DOUBLE,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.DOUBLE,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.NUMERIC,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.DOUBLE,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.MAX_TYPE,  #  18

   ProtocolBuffer.Encoder.STRING,  #  19

   ProtocolBuffer.Encoder.NUMERIC,  #  20

   ProtocolBuffer.Encoder.NUMERIC,  #  21

   ProtocolBuffer.Encoder.NUMERIC,  #  22

   ProtocolBuffer.Encoder.NUMERIC,  #  23

   ProtocolBuffer.Encoder.NUMERIC,  #  24

   ProtocolBuffer.Encoder.DOUBLE,  #  25

   ProtocolBuffer.Encoder.NUMERIC,  #  26

   ProtocolBuffer.Encoder.NUMERIC,  #  27

   ProtocolBuffer.Encoder.NUMERIC,  #  28

   ProtocolBuffer.Encoder.STRING,  #  29

   ProtocolBuffer.Encoder.NUMERIC,  #  30

   ProtocolBuffer.Encoder.NUMERIC,  #  31

   ProtocolBuffer.Encoder.NUMERIC,  #  32

   ProtocolBuffer.Encoder.NUMERIC,  #  33

   ProtocolBuffer.Encoder.FLOAT,  #  34

   ProtocolBuffer.Encoder.NUMERIC,  #  35

   ProtocolBuffer.Encoder.NUMERIC,  #  36

   ProtocolBuffer.Encoder.NUMERIC,  #  37

   ProtocolBuffer.Encoder.NUMERIC,  #  38

   ProtocolBuffer.Encoder.STRING,  #  39

   ProtocolBuffer.Encoder.NUMERIC,  #  40

   ProtocolBuffer.Encoder.NUMERIC,  #  41

   ProtocolBuffer.Encoder.NUMERIC,  #  42

   ProtocolBuffer.Encoder.FLOAT,  #  43

   ProtocolBuffer.Encoder.NUMERIC,  #  44

   ProtocolBuffer.Encoder.NUMERIC,  #  45

   ProtocolBuffer.Encoder.STRING,  #  46

   ProtocolBuffer.Encoder.NUMERIC,  #  47

   ProtocolBuffer.Encoder.NUMERIC,  #  48

   ProtocolBuffer.Encoder.NUMERIC,  #  49

   ProtocolBuffer.Encoder.MAX_TYPE,  #  50

   ProtocolBuffer.Encoder.MAX_TYPE,  #  51

   ProtocolBuffer.Encoder.MAX_TYPE,  #  52

   ProtocolBuffer.Encoder.MAX_TYPE,  #  53

   ProtocolBuffer.Encoder.MAX_TYPE,  #  54

   ProtocolBuffer.Encoder.MAX_TYPE,  #  55

   ProtocolBuffer.Encoder.MAX_TYPE,  #  56

   ProtocolBuffer.Encoder.MAX_TYPE,  #  57

   ProtocolBuffer.Encoder.MAX_TYPE,  #  58

   ProtocolBuffer.Encoder.MAX_TYPE,  #  59

   ProtocolBuffer.Encoder.MAX_TYPE,  #  60

   ProtocolBuffer.Encoder.MAX_TYPE,  #  61

   ProtocolBuffer.Encoder.MAX_TYPE,  #  62

   ProtocolBuffer.Encoder.MAX_TYPE,  #  63

   ProtocolBuffer.Encoder.MAX_TYPE,  #  64

   ProtocolBuffer.Encoder.MAX_TYPE,  #  65

   ProtocolBuffer.Encoder.MAX_TYPE,  #  66

   ProtocolBuffer.Encoder.MAX_TYPE,  #  67

   ProtocolBuffer.Encoder.MAX_TYPE,  #  68

   ProtocolBuffer.Encoder.MAX_TYPE,  #  69

   ProtocolBuffer.Encoder.MAX_TYPE,  #  70

   ProtocolBuffer.Encoder.MAX_TYPE,  #  71

   ProtocolBuffer.Encoder.MAX_TYPE,  #  72

   ProtocolBuffer.Encoder.MAX_TYPE,  #  73

   ProtocolBuffer.Encoder.MAX_TYPE,  #  74

   ProtocolBuffer.Encoder.MAX_TYPE,  #  75

   ProtocolBuffer.Encoder.MAX_TYPE,  #  76

   ProtocolBuffer.Encoder.MAX_TYPE,  #  77

   ProtocolBuffer.Encoder.MAX_TYPE,  #  78

   ProtocolBuffer.Encoder.MAX_TYPE,  #  79

   ProtocolBuffer.Encoder.MAX_TYPE,  #  80

   ProtocolBuffer.Encoder.MAX_TYPE,  #  81

   ProtocolBuffer.Encoder.MAX_TYPE,  #  82

   ProtocolBuffer.Encoder.MAX_TYPE,  #  83

   ProtocolBuffer.Encoder.MAX_TYPE,  #  84

   ProtocolBuffer.Encoder.MAX_TYPE,  #  85

   ProtocolBuffer.Encoder.MAX_TYPE,  #  86

   ProtocolBuffer.Encoder.MAX_TYPE,  #  87

   ProtocolBuffer.Encoder.MAX_TYPE,  #  88

   ProtocolBuffer.Encoder.MAX_TYPE,  #  89

   ProtocolBuffer.Encoder.MAX_TYPE,  #  90

   ProtocolBuffer.Encoder.MAX_TYPE,  #  91

   ProtocolBuffer.Encoder.MAX_TYPE,  #  92

   ProtocolBuffer.Encoder.MAX_TYPE,  #  93

   ProtocolBuffer.Encoder.MAX_TYPE,  #  94

   ProtocolBuffer.Encoder.MAX_TYPE,  #  95

   ProtocolBuffer.Encoder.MAX_TYPE,  #  96

   ProtocolBuffer.Encoder.MAX_TYPE,  #  97

   ProtocolBuffer.Encoder.MAX_TYPE,  #  98

   ProtocolBuffer.Encoder.MAX_TYPE,  #  99

   ProtocolBuffer.Encoder.MAX_TYPE,  # 100

   ProtocolBuffer.Encoder.MAX_TYPE,  # 101

   ProtocolBuffer.Encoder.MAX_TYPE,  # 102

   ProtocolBuffer.Encoder.MAX_TYPE,  # 103

   ProtocolBuffer.Encoder.MAX_TYPE,  # 104

   ProtocolBuffer.Encoder.MAX_TYPE,  # 105

   ProtocolBuffer.Encoder.MAX_TYPE,  # 106

   ProtocolBuffer.Encoder.MAX_TYPE,  # 107

   ProtocolBuffer.Encoder.MAX_TYPE,  # 108

   ProtocolBuffer.Encoder.MAX_TYPE,  # 109

   ProtocolBuffer.Encoder.MAX_TYPE,  # 110

   ProtocolBuffer.Encoder.MAX_TYPE,  # 111

   ProtocolBuffer.Encoder.MAX_TYPE,  # 112

   ProtocolBuffer.Encoder.MAX_TYPE,  # 113

   ProtocolBuffer.Encoder.MAX_TYPE,  # 114

   ProtocolBuffer.Encoder.MAX_TYPE,  # 115

   ProtocolBuffer.Encoder.MAX_TYPE,  # 116

   ProtocolBuffer.Encoder.MAX_TYPE,  # 117

   ProtocolBuffer.Encoder.MAX_TYPE,  # 118

   ProtocolBuffer.Encoder.MAX_TYPE,  # 119

   ProtocolBuffer.Encoder.MAX_TYPE,  # 120

   ProtocolBuffer.Encoder.MAX_TYPE,  # 121

   ProtocolBuffer.Encoder.MAX_TYPE,  # 122

   ProtocolBuffer.Encoder.MAX_TYPE,  # 123

   ProtocolBuffer.Encoder.MAX_TYPE,  # 124

   ProtocolBuffer.Encoder.MAX_TYPE,  # 125

   ProtocolBuffer.Encoder.MAX_TYPE,  # 126

   ProtocolBuffer.Encoder.MAX_TYPE,  # 127

   ProtocolBuffer.Encoder.MAX_TYPE,  # 128

   ProtocolBuffer.Encoder.MAX_TYPE,  # 129

   ProtocolBuffer.Encoder.MAX_TYPE,  # 130

   ProtocolBuffer.Encoder.MAX_TYPE,  # 131

   ProtocolBuffer.Encoder.MAX_TYPE,  # 132

   ProtocolBuffer.Encoder.MAX_TYPE,  # 133

   ProtocolBuffer.Encoder.MAX_TYPE,  # 134

   ProtocolBuffer.Encoder.MAX_TYPE,  # 135

   ProtocolBuffer.Encoder.MAX_TYPE,  # 136

   ProtocolBuffer.Encoder.MAX_TYPE,  # 137

   ProtocolBuffer.Encoder.MAX_TYPE,  # 138

   ProtocolBuffer.Encoder.MAX_TYPE,  # 139

   ProtocolBuffer.Encoder.MAX_TYPE,  # 140

   ProtocolBuffer.Encoder.MAX_TYPE,  # 141

   ProtocolBuffer.Encoder.MAX_TYPE,  # 142

   ProtocolBuffer.Encoder.MAX_TYPE,  # 143

   ProtocolBuffer.Encoder.MAX_TYPE,  # 144

   ProtocolBuffer.Encoder.MAX_TYPE,  # 145

   ProtocolBuffer.Encoder.MAX_TYPE,  # 146

   ProtocolBuffer.Encoder.MAX_TYPE,  # 147

   ProtocolBuffer.Encoder.MAX_TYPE,  # 148

   ProtocolBuffer.Encoder.MAX_TYPE,  # 149

   ProtocolBuffer.Encoder.MAX_TYPE,  # 150

   ProtocolBuffer.Encoder.MAX_TYPE,  # 151

   ProtocolBuffer.Encoder.MAX_TYPE,  # 152

   ProtocolBuffer.Encoder.MAX_TYPE,  # 153

   ProtocolBuffer.Encoder.MAX_TYPE,  # 154

   ProtocolBuffer.Encoder.MAX_TYPE,  # 155

   ProtocolBuffer.Encoder.MAX_TYPE,  # 156

   ProtocolBuffer.Encoder.MAX_TYPE,  # 157

   ProtocolBuffer.Encoder.MAX_TYPE,  # 158

   ProtocolBuffer.Encoder.MAX_TYPE,  # 159

   ProtocolBuffer.Encoder.MAX_TYPE,  # 160

   ProtocolBuffer.Encoder.MAX_TYPE,  # 161

   ProtocolBuffer.Encoder.MAX_TYPE,  # 162

   ProtocolBuffer.Encoder.MAX_TYPE,  # 163

   ProtocolBuffer.Encoder.MAX_TYPE,  # 164

   ProtocolBuffer.Encoder.MAX_TYPE,  # 165

   ProtocolBuffer.Encoder.MAX_TYPE,  # 166

   ProtocolBuffer.Encoder.MAX_TYPE,  # 167

   ProtocolBuffer.Encoder.MAX_TYPE,  # 168

   ProtocolBuffer.Encoder.MAX_TYPE,  # 169

   ProtocolBuffer.Encoder.MAX_TYPE,  # 170

   ProtocolBuffer.Encoder.MAX_TYPE,  # 171

   ProtocolBuffer.Encoder.MAX_TYPE,  # 172

   ProtocolBuffer.Encoder.MAX_TYPE,  # 173

   ProtocolBuffer.Encoder.MAX_TYPE,  # 174

   ProtocolBuffer.Encoder.MAX_TYPE,  # 175

   ProtocolBuffer.Encoder.MAX_TYPE,  # 176

   ProtocolBuffer.Encoder.MAX_TYPE,  # 177

   ProtocolBuffer.Encoder.MAX_TYPE,  # 178

   ProtocolBuffer.Encoder.MAX_TYPE,  # 179

   ProtocolBuffer.Encoder.MAX_TYPE,  # 180

   ProtocolBuffer.Encoder.MAX_TYPE,  # 181

   ProtocolBuffer.Encoder.MAX_TYPE,  # 182

   ProtocolBuffer.Encoder.MAX_TYPE,  # 183

   ProtocolBuffer.Encoder.MAX_TYPE,  # 184

   ProtocolBuffer.Encoder.MAX_TYPE,  # 185

   ProtocolBuffer.Encoder.MAX_TYPE,  # 186

   ProtocolBuffer.Encoder.MAX_TYPE,  # 187

   ProtocolBuffer.Encoder.MAX_TYPE,  # 188

   ProtocolBuffer.Encoder.MAX_TYPE,  # 189

   ProtocolBuffer.Encoder.MAX_TYPE,  # 190

   ProtocolBuffer.Encoder.MAX_TYPE,  # 191

   ProtocolBuffer.Encoder.MAX_TYPE,  # 192

   ProtocolBuffer.Encoder.MAX_TYPE,  # 193

   ProtocolBuffer.Encoder.MAX_TYPE,  # 194

   ProtocolBuffer.Encoder.MAX_TYPE,  # 195

   ProtocolBuffer.Encoder.MAX_TYPE,  # 196

   ProtocolBuffer.Encoder.MAX_TYPE,  # 197

   ProtocolBuffer.Encoder.MAX_TYPE,  # 198

   ProtocolBuffer.Encoder.MAX_TYPE,  # 199

   ProtocolBuffer.Encoder.MAX_TYPE,  # 200

   ProtocolBuffer.Encoder.MAX_TYPE,  # 201

   ProtocolBuffer.Encoder.MAX_TYPE,  # 202

   ProtocolBuffer.Encoder.MAX_TYPE,  # 203

   ProtocolBuffer.Encoder.MAX_TYPE,  # 204

   ProtocolBuffer.Encoder.MAX_TYPE,  # 205

   ProtocolBuffer.Encoder.MAX_TYPE,  # 206

   ProtocolBuffer.Encoder.MAX_TYPE,  # 207

   ProtocolBuffer.Encoder.MAX_TYPE,  # 208

   ProtocolBuffer.Encoder.MAX_TYPE,  # 209

   ProtocolBuffer.Encoder.MAX_TYPE,  # 210

   ProtocolBuffer.Encoder.MAX_TYPE,  # 211

   ProtocolBuffer.Encoder.MAX_TYPE,  # 212

   ProtocolBuffer.Encoder.MAX_TYPE,  # 213

   ProtocolBuffer.Encoder.MAX_TYPE,  # 214

   ProtocolBuffer.Encoder.MAX_TYPE,  # 215

   ProtocolBuffer.Encoder.MAX_TYPE,  # 216

   ProtocolBuffer.Encoder.MAX_TYPE,  # 217

   ProtocolBuffer.Encoder.MAX_TYPE,  # 218

   ProtocolBuffer.Encoder.MAX_TYPE,  # 219

   ProtocolBuffer.Encoder.MAX_TYPE,  # 220

   ProtocolBuffer.Encoder.MAX_TYPE,  # 221

   ProtocolBuffer.Encoder.MAX_TYPE,  # 222

   ProtocolBuffer.Encoder.MAX_TYPE,  # 223

   ProtocolBuffer.Encoder.MAX_TYPE,  # 224

   ProtocolBuffer.Encoder.MAX_TYPE,  # 225

   ProtocolBuffer.Encoder.MAX_TYPE,  # 226

   ProtocolBuffer.Encoder.MAX_TYPE,  # 227

   ProtocolBuffer.Encoder.MAX_TYPE,  # 228

   ProtocolBuffer.Encoder.MAX_TYPE,  # 229

   ProtocolBuffer.Encoder.MAX_TYPE,  # 230

   ProtocolBuffer.Encoder.MAX_TYPE,  # 231

   ProtocolBuffer.Encoder.MAX_TYPE,  # 232

   ProtocolBuffer.Encoder.MAX_TYPE,  # 233

   ProtocolBuffer.Encoder.MAX_TYPE,  # 234

   ProtocolBuffer.Encoder.MAX_TYPE,  # 235

   ProtocolBuffer.Encoder.MAX_TYPE,  # 236

   ProtocolBuffer.Encoder.MAX_TYPE,  # 237

   ProtocolBuffer.Encoder.MAX_TYPE,  # 238

   ProtocolBuffer.Encoder.MAX_TYPE,  # 239

   ProtocolBuffer.Encoder.MAX_TYPE,  # 240

   ProtocolBuffer.Encoder.MAX_TYPE,  # 241

   ProtocolBuffer.Encoder.MAX_TYPE,  # 242

   ProtocolBuffer.Encoder.MAX_TYPE,  # 243

   ProtocolBuffer.Encoder.MAX_TYPE,  # 244

   ProtocolBuffer.Encoder.MAX_TYPE,  # 245

   ProtocolBuffer.Encoder.MAX_TYPE,  # 246

   ProtocolBuffer.Encoder.MAX_TYPE,  # 247

   ProtocolBuffer.Encoder.MAX_TYPE,  # 248

   ProtocolBuffer.Encoder.MAX_TYPE,  # 249

   ProtocolBuffer.Encoder.MAX_TYPE,  # 250

   ProtocolBuffer.Encoder.MAX_TYPE,  # 251

   ProtocolBuffer.Encoder.MAX_TYPE,  # 252

   ProtocolBuffer.Encoder.MAX_TYPE,  # 253

   ProtocolBuffer.Encoder.MAX_TYPE,  # 254

   ProtocolBuffer.Encoder.MAX_TYPE,  # 255

   ProtocolBuffer.Encoder.MAX_TYPE,  # 256

   ProtocolBuffer.Encoder.MAX_TYPE,  # 257

   ProtocolBuffer.Encoder.MAX_TYPE,  # 258

   ProtocolBuffer.Encoder.MAX_TYPE,  # 259

   ProtocolBuffer.Encoder.MAX_TYPE,  # 260

   ProtocolBuffer.Encoder.MAX_TYPE,  # 261

   ProtocolBuffer.Encoder.MAX_TYPE,  # 262

   ProtocolBuffer.Encoder.MAX_TYPE,  # 263

   ProtocolBuffer.Encoder.MAX_TYPE,  # 264

   ProtocolBuffer.Encoder.MAX_TYPE,  # 265

   ProtocolBuffer.Encoder.MAX_TYPE,  # 266

   ProtocolBuffer.Encoder.MAX_TYPE,  # 267

   ProtocolBuffer.Encoder.MAX_TYPE,  # 268

   ProtocolBuffer.Encoder.MAX_TYPE,  # 269

   ProtocolBuffer.Encoder.MAX_TYPE,  # 270

   ProtocolBuffer.Encoder.MAX_TYPE,  # 271

   ProtocolBuffer.Encoder.MAX_TYPE,  # 272

   ProtocolBuffer.Encoder.MAX_TYPE,  # 273

   ProtocolBuffer.Encoder.MAX_TYPE,  # 274

   ProtocolBuffer.Encoder.MAX_TYPE,  # 275

   ProtocolBuffer.Encoder.MAX_TYPE,  # 276

   ProtocolBuffer.Encoder.MAX_TYPE,  # 277

   ProtocolBuffer.Encoder.MAX_TYPE,  # 278

   ProtocolBuffer.Encoder.MAX_TYPE,  # 279

   ProtocolBuffer.Encoder.MAX_TYPE,  # 280

   ProtocolBuffer.Encoder.MAX_TYPE,  # 281

   ProtocolBuffer.Encoder.MAX_TYPE,  # 282

   ProtocolBuffer.Encoder.MAX_TYPE,  # 283

   ProtocolBuffer.Encoder.MAX_TYPE,  # 284

   ProtocolBuffer.Encoder.MAX_TYPE,  # 285

   ProtocolBuffer.Encoder.MAX_TYPE,  # 286

   ProtocolBuffer.Encoder.MAX_TYPE,  # 287

   ProtocolBuffer.Encoder.MAX_TYPE,  # 288

   ProtocolBuffer.Encoder.MAX_TYPE,  # 289

   ProtocolBuffer.Encoder.MAX_TYPE,  # 290

   ProtocolBuffer.Encoder.MAX_TYPE,  # 291

   ProtocolBuffer.Encoder.MAX_TYPE,  # 292

   ProtocolBuffer.Encoder.MAX_TYPE,  # 293

   ProtocolBuffer.Encoder.MAX_TYPE,  # 294

   ProtocolBuffer.Encoder.MAX_TYPE,  # 295

   ProtocolBuffer.Encoder.MAX_TYPE,  # 296

   ProtocolBuffer.Encoder.MAX_TYPE,  # 297

   ProtocolBuffer.Encoder.MAX_TYPE,  # 298

   ProtocolBuffer.Encoder.MAX_TYPE,  # 299

   ProtocolBuffer.Encoder.MAX_TYPE,  # 300

   ProtocolBuffer.Encoder.MAX_TYPE,  # 301

   ProtocolBuffer.Encoder.MAX_TYPE,  # 302

   ProtocolBuffer.Encoder.MAX_TYPE,  # 303

   ProtocolBuffer.Encoder.MAX_TYPE,  # 304

   ProtocolBuffer.Encoder.MAX_TYPE,  # 305

   ProtocolBuffer.Encoder.MAX_TYPE,  # 306

   ProtocolBuffer.Encoder.MAX_TYPE,  # 307

   ProtocolBuffer.Encoder.MAX_TYPE,  # 308

   ProtocolBuffer.Encoder.MAX_TYPE,  # 309

   ProtocolBuffer.Encoder.MAX_TYPE,  # 310

   ProtocolBuffer.Encoder.MAX_TYPE,  # 311

   ProtocolBuffer.Encoder.MAX_TYPE,  # 312

   ProtocolBuffer.Encoder.MAX_TYPE,  # 313

   ProtocolBuffer.Encoder.MAX_TYPE,  # 314

   ProtocolBuffer.Encoder.MAX_TYPE,  # 315

   ProtocolBuffer.Encoder.MAX_TYPE,  # 316

   ProtocolBuffer.Encoder.MAX_TYPE,  # 317

   ProtocolBuffer.Encoder.MAX_TYPE,  # 318

   ProtocolBuffer.Encoder.MAX_TYPE,  # 319

   ProtocolBuffer.Encoder.MAX_TYPE,  # 320

   ProtocolBuffer.Encoder.MAX_TYPE,  # 321

   ProtocolBuffer.Encoder.MAX_TYPE,  # 322

   ProtocolBuffer.Encoder.MAX_TYPE,  # 323

   ProtocolBuffer.Encoder.MAX_TYPE,  # 324

   ProtocolBuffer.Encoder.MAX_TYPE,  # 325

   ProtocolBuffer.Encoder.MAX_TYPE,  # 326

   ProtocolBuffer.Encoder.MAX_TYPE,  # 327

   ProtocolBuffer.Encoder.MAX_TYPE,  # 328

   ProtocolBuffer.Encoder.MAX_TYPE,  # 329

   ProtocolBuffer.Encoder.MAX_TYPE,  # 330

   ProtocolBuffer.Encoder.MAX_TYPE,  # 331

   ProtocolBuffer.Encoder.MAX_TYPE,  # 332

   ProtocolBuffer.Encoder.MAX_TYPE,  # 333

   ProtocolBuffer.Encoder.MAX_TYPE,  # 334

   ProtocolBuffer.Encoder.MAX_TYPE,  # 335

   ProtocolBuffer.Encoder.MAX_TYPE,  # 336

   ProtocolBuffer.Encoder.MAX_TYPE,  # 337

   ProtocolBuffer.Encoder.MAX_TYPE,  # 338

   ProtocolBuffer.Encoder.MAX_TYPE,  # 339

   ProtocolBuffer.Encoder.MAX_TYPE,  # 340

   ProtocolBuffer.Encoder.MAX_TYPE,  # 341

   ProtocolBuffer.Encoder.MAX_TYPE,  # 342

   ProtocolBuffer.Encoder.MAX_TYPE,  # 343

   ProtocolBuffer.Encoder.MAX_TYPE,  # 344

   ProtocolBuffer.Encoder.MAX_TYPE,  # 345

   ProtocolBuffer.Encoder.MAX_TYPE,  # 346

   ProtocolBuffer.Encoder.MAX_TYPE,  # 347

   ProtocolBuffer.Encoder.MAX_TYPE,  # 348

   ProtocolBuffer.Encoder.MAX_TYPE,  # 349

   ProtocolBuffer.Encoder.MAX_TYPE,  # 350

   ProtocolBuffer.Encoder.MAX_TYPE,  # 351

   ProtocolBuffer.Encoder.MAX_TYPE,  # 352

   ProtocolBuffer.Encoder.MAX_TYPE,  # 353

   ProtocolBuffer.Encoder.MAX_TYPE,  # 354

   ProtocolBuffer.Encoder.MAX_TYPE,  # 355

   ProtocolBuffer.Encoder.MAX_TYPE,  # 356

   ProtocolBuffer.Encoder.MAX_TYPE,  # 357

   ProtocolBuffer.Encoder.MAX_TYPE,  # 358

   ProtocolBuffer.Encoder.MAX_TYPE,  # 359

   ProtocolBuffer.Encoder.MAX_TYPE,  # 360

   ProtocolBuffer.Encoder.MAX_TYPE,  # 361

   ProtocolBuffer.Encoder.MAX_TYPE,  # 362

   ProtocolBuffer.Encoder.MAX_TYPE,  # 363

   ProtocolBuffer.Encoder.MAX_TYPE,  # 364

   ProtocolBuffer.Encoder.MAX_TYPE,  # 365

   ProtocolBuffer.Encoder.MAX_TYPE,  # 366

   ProtocolBuffer.Encoder.MAX_TYPE,  # 367

   ProtocolBuffer.Encoder.MAX_TYPE,  # 368

   ProtocolBuffer.Encoder.MAX_TYPE,  # 369

   ProtocolBuffer.Encoder.MAX_TYPE,  # 370

   ProtocolBuffer.Encoder.MAX_TYPE,  # 371

   ProtocolBuffer.Encoder.MAX_TYPE,  # 372

   ProtocolBuffer.Encoder.MAX_TYPE,  # 373

   ProtocolBuffer.Encoder.MAX_TYPE,  # 374

   ProtocolBuffer.Encoder.MAX_TYPE,  # 375

   ProtocolBuffer.Encoder.MAX_TYPE,  # 376

   ProtocolBuffer.Encoder.MAX_TYPE,  # 377

   ProtocolBuffer.Encoder.MAX_TYPE,  # 378

   ProtocolBuffer.Encoder.MAX_TYPE,  # 379

   ProtocolBuffer.Encoder.MAX_TYPE,  # 380

   ProtocolBuffer.Encoder.MAX_TYPE,  # 381

   ProtocolBuffer.Encoder.MAX_TYPE,  # 382

   ProtocolBuffer.Encoder.MAX_TYPE,  # 383

   ProtocolBuffer.Encoder.MAX_TYPE,  # 384

   ProtocolBuffer.Encoder.MAX_TYPE,  # 385

   ProtocolBuffer.Encoder.MAX_TYPE,  # 386

   ProtocolBuffer.Encoder.MAX_TYPE,  # 387

   ProtocolBuffer.Encoder.MAX_TYPE,  # 388

   ProtocolBuffer.Encoder.MAX_TYPE,  # 389

   ProtocolBuffer.Encoder.MAX_TYPE,  # 390

   ProtocolBuffer.Encoder.MAX_TYPE,  # 391

   ProtocolBuffer.Encoder.MAX_TYPE,  # 392

   ProtocolBuffer.Encoder.MAX_TYPE,  # 393

   ProtocolBuffer.Encoder.MAX_TYPE,  # 394

   ProtocolBuffer.Encoder.MAX_TYPE,  # 395

   ProtocolBuffer.Encoder.MAX_TYPE,  # 396

   ProtocolBuffer.Encoder.MAX_TYPE,  # 397

   ProtocolBuffer.Encoder.MAX_TYPE,  # 398

   ProtocolBuffer.Encoder.MAX_TYPE,  # 399

   ProtocolBuffer.Encoder.MAX_TYPE,  # 400

   ProtocolBuffer.Encoder.MAX_TYPE,  # 401

   ProtocolBuffer.Encoder.MAX_TYPE,  # 402

   ProtocolBuffer.Encoder.MAX_TYPE,  # 403

   ProtocolBuffer.Encoder.MAX_TYPE,  # 404

   ProtocolBuffer.Encoder.MAX_TYPE,  # 405

   ProtocolBuffer.Encoder.MAX_TYPE,  # 406

   ProtocolBuffer.Encoder.MAX_TYPE,  # 407

   ProtocolBuffer.Encoder.MAX_TYPE,  # 408

   ProtocolBuffer.Encoder.MAX_TYPE,  # 409

   ProtocolBuffer.Encoder.MAX_TYPE,  # 410

   ProtocolBuffer.Encoder.MAX_TYPE,  # 411

   ProtocolBuffer.Encoder.MAX_TYPE,  # 412

   ProtocolBuffer.Encoder.MAX_TYPE,  # 413

   ProtocolBuffer.Encoder.MAX_TYPE,  # 414

   ProtocolBuffer.Encoder.MAX_TYPE,  # 415

   ProtocolBuffer.Encoder.MAX_TYPE,  # 416

   ProtocolBuffer.Encoder.MAX_TYPE,  # 417

   ProtocolBuffer.Encoder.MAX_TYPE,  # 418

   ProtocolBuffer.Encoder.MAX_TYPE,  # 419

   ProtocolBuffer.Encoder.MAX_TYPE,  # 420

   ProtocolBuffer.Encoder.MAX_TYPE,  # 421

   ProtocolBuffer.Encoder.MAX_TYPE,  # 422

   ProtocolBuffer.Encoder.MAX_TYPE,  # 423

   ProtocolBuffer.Encoder.MAX_TYPE,  # 424

   ProtocolBuffer.Encoder.MAX_TYPE,  # 425

   ProtocolBuffer.Encoder.MAX_TYPE,  # 426

   ProtocolBuffer.Encoder.MAX_TYPE,  # 427

   ProtocolBuffer.Encoder.MAX_TYPE,  # 428

   ProtocolBuffer.Encoder.MAX_TYPE,  # 429

   ProtocolBuffer.Encoder.MAX_TYPE,  # 430

   ProtocolBuffer.Encoder.MAX_TYPE,  # 431

   ProtocolBuffer.Encoder.MAX_TYPE,  # 432

   ProtocolBuffer.Encoder.MAX_TYPE,  # 433

   ProtocolBuffer.Encoder.MAX_TYPE,  # 434

   ProtocolBuffer.Encoder.MAX_TYPE,  # 435

   ProtocolBuffer.Encoder.MAX_TYPE,  # 436

   ProtocolBuffer.Encoder.MAX_TYPE,  # 437

   ProtocolBuffer.Encoder.MAX_TYPE,  # 438

   ProtocolBuffer.Encoder.MAX_TYPE,  # 439

   ProtocolBuffer.Encoder.MAX_TYPE,  # 440

   ProtocolBuffer.Encoder.MAX_TYPE,  # 441

   ProtocolBuffer.Encoder.MAX_TYPE,  # 442

   ProtocolBuffer.Encoder.MAX_TYPE,  # 443

   ProtocolBuffer.Encoder.MAX_TYPE,  # 444

   ProtocolBuffer.Encoder.MAX_TYPE,  # 445

   ProtocolBuffer.Encoder.MAX_TYPE,  # 446

   ProtocolBuffer.Encoder.MAX_TYPE,  # 447

   ProtocolBuffer.Encoder.MAX_TYPE,  # 448

   ProtocolBuffer.Encoder.MAX_TYPE,  # 449

   ProtocolBuffer.Encoder.MAX_TYPE,  # 450

   ProtocolBuffer.Encoder.MAX_TYPE,  # 451

   ProtocolBuffer.Encoder.MAX_TYPE,  # 452

   ProtocolBuffer.Encoder.MAX_TYPE,  # 453

   ProtocolBuffer.Encoder.MAX_TYPE,  # 454

   ProtocolBuffer.Encoder.MAX_TYPE,  # 455

   ProtocolBuffer.Encoder.MAX_TYPE,  # 456

   ProtocolBuffer.Encoder.MAX_TYPE,  # 457

   ProtocolBuffer.Encoder.MAX_TYPE,  # 458

   ProtocolBuffer.Encoder.MAX_TYPE,  # 459

   ProtocolBuffer.Encoder.MAX_TYPE,  # 460

   ProtocolBuffer.Encoder.MAX_TYPE,  # 461

   ProtocolBuffer.Encoder.MAX_TYPE,  # 462

   ProtocolBuffer.Encoder.MAX_TYPE,  # 463

   ProtocolBuffer.Encoder.MAX_TYPE,  # 464

   ProtocolBuffer.Encoder.MAX_TYPE,  # 465

   ProtocolBuffer.Encoder.MAX_TYPE,  # 466

   ProtocolBuffer.Encoder.MAX_TYPE,  # 467

   ProtocolBuffer.Encoder.MAX_TYPE,  # 468

   ProtocolBuffer.Encoder.MAX_TYPE,  # 469

   ProtocolBuffer.Encoder.MAX_TYPE,  # 470

   ProtocolBuffer.Encoder.MAX_TYPE,  # 471

   ProtocolBuffer.Encoder.MAX_TYPE,  # 472

   ProtocolBuffer.Encoder.MAX_TYPE,  # 473

   ProtocolBuffer.Encoder.MAX_TYPE,  # 474

   ProtocolBuffer.Encoder.MAX_TYPE,  # 475

   ProtocolBuffer.Encoder.MAX_TYPE,  # 476

   ProtocolBuffer.Encoder.MAX_TYPE,  # 477

   ProtocolBuffer.Encoder.MAX_TYPE,  # 478

   ProtocolBuffer.Encoder.MAX_TYPE,  # 479

   ProtocolBuffer.Encoder.MAX_TYPE,  # 480

   ProtocolBuffer.Encoder.MAX_TYPE,  # 481

   ProtocolBuffer.Encoder.MAX_TYPE,  # 482

   ProtocolBuffer.Encoder.MAX_TYPE,  # 483

   ProtocolBuffer.Encoder.MAX_TYPE,  # 484

   ProtocolBuffer.Encoder.MAX_TYPE,  # 485

   ProtocolBuffer.Encoder.MAX_TYPE,  # 486

   ProtocolBuffer.Encoder.MAX_TYPE,  # 487

   ProtocolBuffer.Encoder.MAX_TYPE,  # 488

   ProtocolBuffer.Encoder.MAX_TYPE,  # 489

   ProtocolBuffer.Encoder.MAX_TYPE,  # 490

   ProtocolBuffer.Encoder.MAX_TYPE,  # 491

   ProtocolBuffer.Encoder.MAX_TYPE,  # 492

   ProtocolBuffer.Encoder.MAX_TYPE,  # 493

   ProtocolBuffer.Encoder.MAX_TYPE,  # 494

   ProtocolBuffer.Encoder.MAX_TYPE,  # 495

   ProtocolBuffer.Encoder.MAX_TYPE,  # 496

   ProtocolBuffer.Encoder.MAX_TYPE,  # 497

   ProtocolBuffer.Encoder.MAX_TYPE,  # 498

   ProtocolBuffer.Encoder.MAX_TYPE,  # 499

   ProtocolBuffer.Encoder.MAX_TYPE,  # 500

   ProtocolBuffer.Encoder.MAX_TYPE,  # 501

   ProtocolBuffer.Encoder.MAX_TYPE,  # 502

   ProtocolBuffer.Encoder.MAX_TYPE,  # 503

   ProtocolBuffer.Encoder.MAX_TYPE,  # 504

   ProtocolBuffer.Encoder.MAX_TYPE,  # 505

   ProtocolBuffer.Encoder.MAX_TYPE,  # 506

   ProtocolBuffer.Encoder.MAX_TYPE,  # 507

   ProtocolBuffer.Encoder.MAX_TYPE,  # 508

   ProtocolBuffer.Encoder.MAX_TYPE,  # 509

   ProtocolBuffer.Encoder.MAX_TYPE,  # 510

   ProtocolBuffer.Encoder.MAX_TYPE,  # 511

   ProtocolBuffer.Encoder.MAX_TYPE,  # 512

   ProtocolBuffer.Encoder.MAX_TYPE,  # 513

   ProtocolBuffer.Encoder.MAX_TYPE,  # 514

   ProtocolBuffer.Encoder.MAX_TYPE,  # 515

   ProtocolBuffer.Encoder.MAX_TYPE,  # 516

   ProtocolBuffer.Encoder.MAX_TYPE,  # 517

   ProtocolBuffer.Encoder.MAX_TYPE,  # 518

   ProtocolBuffer.Encoder.MAX_TYPE,  # 519

   ProtocolBuffer.Encoder.MAX_TYPE,  # 520

   ProtocolBuffer.Encoder.MAX_TYPE,  # 521

   ProtocolBuffer.Encoder.MAX_TYPE,  # 522

   ProtocolBuffer.Encoder.MAX_TYPE,  # 523

   ProtocolBuffer.Encoder.MAX_TYPE,  # 524

   ProtocolBuffer.Encoder.MAX_TYPE,  # 525

   ProtocolBuffer.Encoder.MAX_TYPE,  # 526

   ProtocolBuffer.Encoder.MAX_TYPE,  # 527

   ProtocolBuffer.Encoder.MAX_TYPE,  # 528

   ProtocolBuffer.Encoder.MAX_TYPE,  # 529

   ProtocolBuffer.Encoder.MAX_TYPE,  # 530

   ProtocolBuffer.Encoder.MAX_TYPE,  # 531

   ProtocolBuffer.Encoder.MAX_TYPE,  # 532

   ProtocolBuffer.Encoder.MAX_TYPE,  # 533

   ProtocolBuffer.Encoder.MAX_TYPE,  # 534

   ProtocolBuffer.Encoder.MAX_TYPE,  # 535

   ProtocolBuffer.Encoder.MAX_TYPE,  # 536

   ProtocolBuffer.Encoder.MAX_TYPE,  # 537

   ProtocolBuffer.Encoder.MAX_TYPE,  # 538

   ProtocolBuffer.Encoder.MAX_TYPE,  # 539

   ProtocolBuffer.Encoder.MAX_TYPE,  # 540

   ProtocolBuffer.Encoder.MAX_TYPE,  # 541

   ProtocolBuffer.Encoder.MAX_TYPE,  # 542

   ProtocolBuffer.Encoder.MAX_TYPE,  # 543

   ProtocolBuffer.Encoder.MAX_TYPE,  # 544

   ProtocolBuffer.Encoder.MAX_TYPE,  # 545

   ProtocolBuffer.Encoder.MAX_TYPE,  # 546

   ProtocolBuffer.Encoder.MAX_TYPE,  # 547

   ProtocolBuffer.Encoder.MAX_TYPE,  # 548

   ProtocolBuffer.Encoder.MAX_TYPE,  # 549

   ProtocolBuffer.Encoder.MAX_TYPE,  # 550

   ProtocolBuffer.Encoder.MAX_TYPE,  # 551

   ProtocolBuffer.Encoder.MAX_TYPE,  # 552

   ProtocolBuffer.Encoder.MAX_TYPE,  # 553

   ProtocolBuffer.Encoder.MAX_TYPE,  # 554

   ProtocolBuffer.Encoder.MAX_TYPE,  # 555

   ProtocolBuffer.Encoder.MAX_TYPE,  # 556

   ProtocolBuffer.Encoder.MAX_TYPE,  # 557

   ProtocolBuffer.Encoder.MAX_TYPE,  # 558

   ProtocolBuffer.Encoder.MAX_TYPE,  # 559

   ProtocolBuffer.Encoder.MAX_TYPE,  # 560

   ProtocolBuffer.Encoder.MAX_TYPE,  # 561

   ProtocolBuffer.Encoder.MAX_TYPE,  # 562

   ProtocolBuffer.Encoder.MAX_TYPE,  # 563

   ProtocolBuffer.Encoder.MAX_TYPE,  # 564

   ProtocolBuffer.Encoder.MAX_TYPE,  # 565

   ProtocolBuffer.Encoder.MAX_TYPE,  # 566

   ProtocolBuffer.Encoder.MAX_TYPE,  # 567

   ProtocolBuffer.Encoder.MAX_TYPE,  # 568

   ProtocolBuffer.Encoder.MAX_TYPE,  # 569

   ProtocolBuffer.Encoder.MAX_TYPE,  # 570

   ProtocolBuffer.Encoder.MAX_TYPE,  # 571

   ProtocolBuffer.Encoder.MAX_TYPE,  # 572

   ProtocolBuffer.Encoder.MAX_TYPE,  # 573

   ProtocolBuffer.Encoder.MAX_TYPE,  # 574

   ProtocolBuffer.Encoder.MAX_TYPE,  # 575

   ProtocolBuffer.Encoder.MAX_TYPE,  # 576

   ProtocolBuffer.Encoder.MAX_TYPE,  # 577

   ProtocolBuffer.Encoder.MAX_TYPE,  # 578

   ProtocolBuffer.Encoder.MAX_TYPE,  # 579

   ProtocolBuffer.Encoder.MAX_TYPE,  # 580

   ProtocolBuffer.Encoder.MAX_TYPE,  # 581

   ProtocolBuffer.Encoder.MAX_TYPE,  # 582

   ProtocolBuffer.Encoder.MAX_TYPE,  # 583

   ProtocolBuffer.Encoder.MAX_TYPE,  # 584

   ProtocolBuffer.Encoder.MAX_TYPE,  # 585

   ProtocolBuffer.Encoder.MAX_TYPE,  # 586

   ProtocolBuffer.Encoder.MAX_TYPE,  # 587

   ProtocolBuffer.Encoder.MAX_TYPE,  # 588

   ProtocolBuffer.Encoder.MAX_TYPE,  # 589

   ProtocolBuffer.Encoder.MAX_TYPE,  # 590

   ProtocolBuffer.Encoder.MAX_TYPE,  # 591

   ProtocolBuffer.Encoder.MAX_TYPE,  # 592

   ProtocolBuffer.Encoder.MAX_TYPE,  # 593

   ProtocolBuffer.Encoder.MAX_TYPE,  # 594

   ProtocolBuffer.Encoder.MAX_TYPE,  # 595

   ProtocolBuffer.Encoder.MAX_TYPE,  # 596

   ProtocolBuffer.Encoder.MAX_TYPE,  # 597

   ProtocolBuffer.Encoder.MAX_TYPE,  # 598

   ProtocolBuffer.Encoder.MAX_TYPE,  # 599

   ProtocolBuffer.Encoder.MAX_TYPE,  # 600

   ProtocolBuffer.Encoder.MAX_TYPE,  # 601

   ProtocolBuffer.Encoder.MAX_TYPE,  # 602

   ProtocolBuffer.Encoder.MAX_TYPE,  # 603

   ProtocolBuffer.Encoder.MAX_TYPE,  # 604

   ProtocolBuffer.Encoder.MAX_TYPE,  # 605

   ProtocolBuffer.Encoder.MAX_TYPE,  # 606

   ProtocolBuffer.Encoder.MAX_TYPE,  # 607

   ProtocolBuffer.Encoder.MAX_TYPE,  # 608

   ProtocolBuffer.Encoder.MAX_TYPE,  # 609

   ProtocolBuffer.Encoder.MAX_TYPE,  # 610

   ProtocolBuffer.Encoder.MAX_TYPE,  # 611

   ProtocolBuffer.Encoder.MAX_TYPE,  # 612

   ProtocolBuffer.Encoder.MAX_TYPE,  # 613

   ProtocolBuffer.Encoder.MAX_TYPE,  # 614

   ProtocolBuffer.Encoder.MAX_TYPE,  # 615

   ProtocolBuffer.Encoder.MAX_TYPE,  # 616

   ProtocolBuffer.Encoder.MAX_TYPE,  # 617

   ProtocolBuffer.Encoder.MAX_TYPE,  # 618

   ProtocolBuffer.Encoder.MAX_TYPE,  # 619

   ProtocolBuffer.Encoder.MAX_TYPE,  # 620

   ProtocolBuffer.Encoder.MAX_TYPE,  # 621

   ProtocolBuffer.Encoder.MAX_TYPE,  # 622

   ProtocolBuffer.Encoder.MAX_TYPE,  # 623

   ProtocolBuffer.Encoder.MAX_TYPE,  # 624

   ProtocolBuffer.Encoder.MAX_TYPE,  # 625

   ProtocolBuffer.Encoder.MAX_TYPE,  # 626

   ProtocolBuffer.Encoder.MAX_TYPE,  # 627

   ProtocolBuffer.Encoder.MAX_TYPE,  # 628

   ProtocolBuffer.Encoder.MAX_TYPE,  # 629

   ProtocolBuffer.Encoder.MAX_TYPE,  # 630

   ProtocolBuffer.Encoder.MAX_TYPE,  # 631

   ProtocolBuffer.Encoder.MAX_TYPE,  # 632

   ProtocolBuffer.Encoder.MAX_TYPE,  # 633

   ProtocolBuffer.Encoder.MAX_TYPE,  # 634

   ProtocolBuffer.Encoder.MAX_TYPE,  # 635

   ProtocolBuffer.Encoder.MAX_TYPE,  # 636

   ProtocolBuffer.Encoder.MAX_TYPE,  # 637

   ProtocolBuffer.Encoder.MAX_TYPE,  # 638

   ProtocolBuffer.Encoder.MAX_TYPE,  # 639

   ProtocolBuffer.Encoder.MAX_TYPE,  # 640

   ProtocolBuffer.Encoder.MAX_TYPE,  # 641

   ProtocolBuffer.Encoder.MAX_TYPE,  # 642

   ProtocolBuffer.Encoder.MAX_TYPE,  # 643

   ProtocolBuffer.Encoder.MAX_TYPE,  # 644

   ProtocolBuffer.Encoder.MAX_TYPE,  # 645

   ProtocolBuffer.Encoder.MAX_TYPE,  # 646

   ProtocolBuffer.Encoder.MAX_TYPE,  # 647

   ProtocolBuffer.Encoder.MAX_TYPE,  # 648

   ProtocolBuffer.Encoder.MAX_TYPE,  # 649

   ProtocolBuffer.Encoder.MAX_TYPE,  # 650

   ProtocolBuffer.Encoder.MAX_TYPE,  # 651

   ProtocolBuffer.Encoder.MAX_TYPE,  # 652

   ProtocolBuffer.Encoder.MAX_TYPE,  # 653

   ProtocolBuffer.Encoder.MAX_TYPE,  # 654

   ProtocolBuffer.Encoder.MAX_TYPE,  # 655

   ProtocolBuffer.Encoder.MAX_TYPE,  # 656

   ProtocolBuffer.Encoder.MAX_TYPE,  # 657

   ProtocolBuffer.Encoder.MAX_TYPE,  # 658

   ProtocolBuffer.Encoder.MAX_TYPE,  # 659

   ProtocolBuffer.Encoder.MAX_TYPE,  # 660

   ProtocolBuffer.Encoder.MAX_TYPE,  # 661

   ProtocolBuffer.Encoder.MAX_TYPE,  # 662

   ProtocolBuffer.Encoder.MAX_TYPE,  # 663

   ProtocolBuffer.Encoder.MAX_TYPE,  # 664

   ProtocolBuffer.Encoder.MAX_TYPE,  # 665

   ProtocolBuffer.Encoder.MAX_TYPE,  # 666

   ProtocolBuffer.Encoder.MAX_TYPE,  # 667

   ProtocolBuffer.Encoder.MAX_TYPE,  # 668

   ProtocolBuffer.Encoder.MAX_TYPE,  # 669

   ProtocolBuffer.Encoder.MAX_TYPE,  # 670

   ProtocolBuffer.Encoder.MAX_TYPE,  # 671

   ProtocolBuffer.Encoder.MAX_TYPE,  # 672

   ProtocolBuffer.Encoder.MAX_TYPE,  # 673

   ProtocolBuffer.Encoder.MAX_TYPE,  # 674

   ProtocolBuffer.Encoder.MAX_TYPE,  # 675

   ProtocolBuffer.Encoder.MAX_TYPE,  # 676

   ProtocolBuffer.Encoder.MAX_TYPE,  # 677

   ProtocolBuffer.Encoder.MAX_TYPE,  # 678

   ProtocolBuffer.Encoder.MAX_TYPE,  # 679

   ProtocolBuffer.Encoder.MAX_TYPE,  # 680

   ProtocolBuffer.Encoder.MAX_TYPE,  # 681

   ProtocolBuffer.Encoder.MAX_TYPE,  # 682

   ProtocolBuffer.Encoder.MAX_TYPE,  # 683

   ProtocolBuffer.Encoder.MAX_TYPE,  # 684

   ProtocolBuffer.Encoder.MAX_TYPE,  # 685

   ProtocolBuffer.Encoder.MAX_TYPE,  # 686

   ProtocolBuffer.Encoder.MAX_TYPE,  # 687

   ProtocolBuffer.Encoder.MAX_TYPE,  # 688

   ProtocolBuffer.Encoder.MAX_TYPE,  # 689

   ProtocolBuffer.Encoder.MAX_TYPE,  # 690

   ProtocolBuffer.Encoder.MAX_TYPE,  # 691

   ProtocolBuffer.Encoder.MAX_TYPE,  # 692

   ProtocolBuffer.Encoder.MAX_TYPE,  # 693

   ProtocolBuffer.Encoder.MAX_TYPE,  # 694

   ProtocolBuffer.Encoder.MAX_TYPE,  # 695

   ProtocolBuffer.Encoder.MAX_TYPE,  # 696

   ProtocolBuffer.Encoder.MAX_TYPE,  # 697

   ProtocolBuffer.Encoder.MAX_TYPE,  # 698

   ProtocolBuffer.Encoder.MAX_TYPE,  # 699

   ProtocolBuffer.Encoder.MAX_TYPE,  # 700

   ProtocolBuffer.Encoder.MAX_TYPE,  # 701

   ProtocolBuffer.Encoder.MAX_TYPE,  # 702

   ProtocolBuffer.Encoder.MAX_TYPE,  # 703

   ProtocolBuffer.Encoder.MAX_TYPE,  # 704

   ProtocolBuffer.Encoder.MAX_TYPE,  # 705

   ProtocolBuffer.Encoder.MAX_TYPE,  # 706

   ProtocolBuffer.Encoder.MAX_TYPE,  # 707

   ProtocolBuffer.Encoder.MAX_TYPE,  # 708

   ProtocolBuffer.Encoder.MAX_TYPE,  # 709

   ProtocolBuffer.Encoder.MAX_TYPE,  # 710

   ProtocolBuffer.Encoder.MAX_TYPE,  # 711

   ProtocolBuffer.Encoder.MAX_TYPE,  # 712

   ProtocolBuffer.Encoder.MAX_TYPE,  # 713

   ProtocolBuffer.Encoder.MAX_TYPE,  # 714

   ProtocolBuffer.Encoder.MAX_TYPE,  # 715

   ProtocolBuffer.Encoder.MAX_TYPE,  # 716

   ProtocolBuffer.Encoder.MAX_TYPE,  # 717

   ProtocolBuffer.Encoder.MAX_TYPE,  # 718

   ProtocolBuffer.Encoder.MAX_TYPE,  # 719

   ProtocolBuffer.Encoder.MAX_TYPE,  # 720

   ProtocolBuffer.Encoder.MAX_TYPE,  # 721

   ProtocolBuffer.Encoder.MAX_TYPE,  # 722

   ProtocolBuffer.Encoder.MAX_TYPE,  # 723

   ProtocolBuffer.Encoder.MAX_TYPE,  # 724

   ProtocolBuffer.Encoder.MAX_TYPE,  # 725

   ProtocolBuffer.Encoder.MAX_TYPE,  # 726

   ProtocolBuffer.Encoder.MAX_TYPE,  # 727

   ProtocolBuffer.Encoder.MAX_TYPE,  # 728

   ProtocolBuffer.Encoder.MAX_TYPE,  # 729

   ProtocolBuffer.Encoder.MAX_TYPE,  # 730

   ProtocolBuffer.Encoder.MAX_TYPE,  # 731

   ProtocolBuffer.Encoder.MAX_TYPE,  # 732

   ProtocolBuffer.Encoder.MAX_TYPE,  # 733

   ProtocolBuffer.Encoder.MAX_TYPE,  # 734

   ProtocolBuffer.Encoder.MAX_TYPE,  # 735

   ProtocolBuffer.Encoder.MAX_TYPE,  # 736

   ProtocolBuffer.Encoder.MAX_TYPE,  # 737

   ProtocolBuffer.Encoder.MAX_TYPE,  # 738

   ProtocolBuffer.Encoder.MAX_TYPE,  # 739

   ProtocolBuffer.Encoder.MAX_TYPE,  # 740

   ProtocolBuffer.Encoder.MAX_TYPE,  # 741

   ProtocolBuffer.Encoder.MAX_TYPE,  # 742

   ProtocolBuffer.Encoder.MAX_TYPE,  # 743

   ProtocolBuffer.Encoder.MAX_TYPE,  # 744

   ProtocolBuffer.Encoder.MAX_TYPE,  # 745

   ProtocolBuffer.Encoder.MAX_TYPE,  # 746

   ProtocolBuffer.Encoder.MAX_TYPE,  # 747

   ProtocolBuffer.Encoder.MAX_TYPE,  # 748

   ProtocolBuffer.Encoder.MAX_TYPE,  # 749

   ProtocolBuffer.Encoder.MAX_TYPE,  # 750

   ProtocolBuffer.Encoder.MAX_TYPE,  # 751

   ProtocolBuffer.Encoder.MAX_TYPE,  # 752

   ProtocolBuffer.Encoder.MAX_TYPE,  # 753

   ProtocolBuffer.Encoder.MAX_TYPE,  # 754

   ProtocolBuffer.Encoder.MAX_TYPE,  # 755

   ProtocolBuffer.Encoder.MAX_TYPE,  # 756

   ProtocolBuffer.Encoder.MAX_TYPE,  # 757

   ProtocolBuffer.Encoder.MAX_TYPE,  # 758

   ProtocolBuffer.Encoder.MAX_TYPE,  # 759

   ProtocolBuffer.Encoder.MAX_TYPE,  # 760

   ProtocolBuffer.Encoder.MAX_TYPE,  # 761

   ProtocolBuffer.Encoder.MAX_TYPE,  # 762

   ProtocolBuffer.Encoder.MAX_TYPE,  # 763

   ProtocolBuffer.Encoder.MAX_TYPE,  # 764

   ProtocolBuffer.Encoder.MAX_TYPE,  # 765

   ProtocolBuffer.Encoder.MAX_TYPE,  # 766

   ProtocolBuffer.Encoder.MAX_TYPE,  # 767

   ProtocolBuffer.Encoder.MAX_TYPE,  # 768

   ProtocolBuffer.Encoder.MAX_TYPE,  # 769

   ProtocolBuffer.Encoder.MAX_TYPE,  # 770

   ProtocolBuffer.Encoder.MAX_TYPE,  # 771

   ProtocolBuffer.Encoder.MAX_TYPE,  # 772

   ProtocolBuffer.Encoder.MAX_TYPE,  # 773

   ProtocolBuffer.Encoder.MAX_TYPE,  # 774

   ProtocolBuffer.Encoder.MAX_TYPE,  # 775

   ProtocolBuffer.Encoder.MAX_TYPE,  # 776

   ProtocolBuffer.Encoder.MAX_TYPE,  # 777

   ProtocolBuffer.Encoder.MAX_TYPE,  # 778

   ProtocolBuffer.Encoder.MAX_TYPE,  # 779

   ProtocolBuffer.Encoder.MAX_TYPE,  # 780

   ProtocolBuffer.Encoder.MAX_TYPE,  # 781

   ProtocolBuffer.Encoder.MAX_TYPE,  # 782

   ProtocolBuffer.Encoder.MAX_TYPE,  # 783

   ProtocolBuffer.Encoder.MAX_TYPE,  # 784

   ProtocolBuffer.Encoder.MAX_TYPE,  # 785

   ProtocolBuffer.Encoder.MAX_TYPE,  # 786

   ProtocolBuffer.Encoder.MAX_TYPE,  # 787

   ProtocolBuffer.Encoder.MAX_TYPE,  # 788

   ProtocolBuffer.Encoder.MAX_TYPE,  # 789

   ProtocolBuffer.Encoder.MAX_TYPE,  # 790

   ProtocolBuffer.Encoder.MAX_TYPE,  # 791

   ProtocolBuffer.Encoder.MAX_TYPE,  # 792

   ProtocolBuffer.Encoder.MAX_TYPE,  # 793

   ProtocolBuffer.Encoder.MAX_TYPE,  # 794

   ProtocolBuffer.Encoder.MAX_TYPE,  # 795

   ProtocolBuffer.Encoder.MAX_TYPE,  # 796

   ProtocolBuffer.Encoder.MAX_TYPE,  # 797

   ProtocolBuffer.Encoder.MAX_TYPE,  # 798

   ProtocolBuffer.Encoder.MAX_TYPE,  # 799

   ProtocolBuffer.Encoder.MAX_TYPE,  # 800

   ProtocolBuffer.Encoder.MAX_TYPE,  # 801

   ProtocolBuffer.Encoder.MAX_TYPE,  # 802

   ProtocolBuffer.Encoder.MAX_TYPE,  # 803

   ProtocolBuffer.Encoder.MAX_TYPE,  # 804

   ProtocolBuffer.Encoder.MAX_TYPE,  # 805

   ProtocolBuffer.Encoder.MAX_TYPE,  # 806

   ProtocolBuffer.Encoder.MAX_TYPE,  # 807

   ProtocolBuffer.Encoder.MAX_TYPE,  # 808

   ProtocolBuffer.Encoder.MAX_TYPE,  # 809

   ProtocolBuffer.Encoder.MAX_TYPE,  # 810

   ProtocolBuffer.Encoder.MAX_TYPE,  # 811

   ProtocolBuffer.Encoder.MAX_TYPE,  # 812

   ProtocolBuffer.Encoder.MAX_TYPE,  # 813

   ProtocolBuffer.Encoder.MAX_TYPE,  # 814

   ProtocolBuffer.Encoder.MAX_TYPE,  # 815

   ProtocolBuffer.Encoder.MAX_TYPE,  # 816

   ProtocolBuffer.Encoder.MAX_TYPE,  # 817

   ProtocolBuffer.Encoder.MAX_TYPE,  # 818

   ProtocolBuffer.Encoder.MAX_TYPE,  # 819

   ProtocolBuffer.Encoder.MAX_TYPE,  # 820

   ProtocolBuffer.Encoder.MAX_TYPE,  # 821

   ProtocolBuffer.Encoder.MAX_TYPE,  # 822

   ProtocolBuffer.Encoder.MAX_TYPE,  # 823

   ProtocolBuffer.Encoder.MAX_TYPE,  # 824

   ProtocolBuffer.Encoder.MAX_TYPE,  # 825

   ProtocolBuffer.Encoder.MAX_TYPE,  # 826

   ProtocolBuffer.Encoder.MAX_TYPE,  # 827

   ProtocolBuffer.Encoder.MAX_TYPE,  # 828

   ProtocolBuffer.Encoder.MAX_TYPE,  # 829

   ProtocolBuffer.Encoder.MAX_TYPE,  # 830

   ProtocolBuffer.Encoder.MAX_TYPE,  # 831

   ProtocolBuffer.Encoder.MAX_TYPE,  # 832

   ProtocolBuffer.Encoder.MAX_TYPE,  # 833

   ProtocolBuffer.Encoder.MAX_TYPE,  # 834

   ProtocolBuffer.Encoder.MAX_TYPE,  # 835

   ProtocolBuffer.Encoder.MAX_TYPE,  # 836

   ProtocolBuffer.Encoder.MAX_TYPE,  # 837

   ProtocolBuffer.Encoder.MAX_TYPE,  # 838

   ProtocolBuffer.Encoder.MAX_TYPE,  # 839

   ProtocolBuffer.Encoder.MAX_TYPE,  # 840

   ProtocolBuffer.Encoder.MAX_TYPE,  # 841

   ProtocolBuffer.Encoder.MAX_TYPE,  # 842

   ProtocolBuffer.Encoder.MAX_TYPE,  # 843

   ProtocolBuffer.Encoder.MAX_TYPE,  # 844

   ProtocolBuffer.Encoder.MAX_TYPE,  # 845

   ProtocolBuffer.Encoder.MAX_TYPE,  # 846

   ProtocolBuffer.Encoder.MAX_TYPE,  # 847

   ProtocolBuffer.Encoder.MAX_TYPE,  # 848

   ProtocolBuffer.Encoder.MAX_TYPE,  # 849

   ProtocolBuffer.Encoder.MAX_TYPE,  # 850

   ProtocolBuffer.Encoder.MAX_TYPE,  # 851

   ProtocolBuffer.Encoder.MAX_TYPE,  # 852

   ProtocolBuffer.Encoder.MAX_TYPE,  # 853

   ProtocolBuffer.Encoder.MAX_TYPE,  # 854

   ProtocolBuffer.Encoder.MAX_TYPE,  # 855

   ProtocolBuffer.Encoder.MAX_TYPE,  # 856

   ProtocolBuffer.Encoder.MAX_TYPE,  # 857

   ProtocolBuffer.Encoder.MAX_TYPE,  # 858

   ProtocolBuffer.Encoder.MAX_TYPE,  # 859

   ProtocolBuffer.Encoder.MAX_TYPE,  # 860

   ProtocolBuffer.Encoder.MAX_TYPE,  # 861

   ProtocolBuffer.Encoder.MAX_TYPE,  # 862

   ProtocolBuffer.Encoder.MAX_TYPE,  # 863

   ProtocolBuffer.Encoder.MAX_TYPE,  # 864

   ProtocolBuffer.Encoder.MAX_TYPE,  # 865

   ProtocolBuffer.Encoder.MAX_TYPE,  # 866

   ProtocolBuffer.Encoder.MAX_TYPE,  # 867

   ProtocolBuffer.Encoder.MAX_TYPE,  # 868

   ProtocolBuffer.Encoder.MAX_TYPE,  # 869

   ProtocolBuffer.Encoder.MAX_TYPE,  # 870

   ProtocolBuffer.Encoder.MAX_TYPE,  # 871

   ProtocolBuffer.Encoder.MAX_TYPE,  # 872

   ProtocolBuffer.Encoder.MAX_TYPE,  # 873

   ProtocolBuffer.Encoder.MAX_TYPE,  # 874

   ProtocolBuffer.Encoder.MAX_TYPE,  # 875

   ProtocolBuffer.Encoder.MAX_TYPE,  # 876

   ProtocolBuffer.Encoder.MAX_TYPE,  # 877

   ProtocolBuffer.Encoder.MAX_TYPE,  # 878

   ProtocolBuffer.Encoder.MAX_TYPE,  # 879

   ProtocolBuffer.Encoder.MAX_TYPE,  # 880

   ProtocolBuffer.Encoder.MAX_TYPE,  # 881

   ProtocolBuffer.Encoder.MAX_TYPE,  # 882

   ProtocolBuffer.Encoder.MAX_TYPE,  # 883

   ProtocolBuffer.Encoder.MAX_TYPE,  # 884

   ProtocolBuffer.Encoder.MAX_TYPE,  # 885

   ProtocolBuffer.Encoder.MAX_TYPE,  # 886

   ProtocolBuffer.Encoder.MAX_TYPE,  # 887

   ProtocolBuffer.Encoder.MAX_TYPE,  # 888

   ProtocolBuffer.Encoder.MAX_TYPE,  # 889

   ProtocolBuffer.Encoder.MAX_TYPE,  # 890

   ProtocolBuffer.Encoder.MAX_TYPE,  # 891

   ProtocolBuffer.Encoder.MAX_TYPE,  # 892

   ProtocolBuffer.Encoder.MAX_TYPE,  # 893

   ProtocolBuffer.Encoder.MAX_TYPE,  # 894

   ProtocolBuffer.Encoder.MAX_TYPE,  # 895

   ProtocolBuffer.Encoder.MAX_TYPE,  # 896

   ProtocolBuffer.Encoder.MAX_TYPE,  # 897

   ProtocolBuffer.Encoder.MAX_TYPE,  # 898

   ProtocolBuffer.Encoder.MAX_TYPE,  # 899

   ProtocolBuffer.Encoder.MAX_TYPE,  # 900

   ProtocolBuffer.Encoder.MAX_TYPE,  # 901

   ProtocolBuffer.Encoder.MAX_TYPE,  # 902

   ProtocolBuffer.Encoder.MAX_TYPE,  # 903

   ProtocolBuffer.Encoder.MAX_TYPE,  # 904

   ProtocolBuffer.Encoder.MAX_TYPE,  # 905

   ProtocolBuffer.Encoder.MAX_TYPE,  # 906

   ProtocolBuffer.Encoder.MAX_TYPE,  # 907

   ProtocolBuffer.Encoder.MAX_TYPE,  # 908

   ProtocolBuffer.Encoder.MAX_TYPE,  # 909

   ProtocolBuffer.Encoder.MAX_TYPE,  # 910

   ProtocolBuffer.Encoder.MAX_TYPE,  # 911

   ProtocolBuffer.Encoder.MAX_TYPE,  # 912

   ProtocolBuffer.Encoder.MAX_TYPE,  # 913

   ProtocolBuffer.Encoder.MAX_TYPE,  # 914

   ProtocolBuffer.Encoder.MAX_TYPE,  # 915

   ProtocolBuffer.Encoder.MAX_TYPE,  # 916

   ProtocolBuffer.Encoder.MAX_TYPE,  # 917

   ProtocolBuffer.Encoder.MAX_TYPE,  # 918

   ProtocolBuffer.Encoder.MAX_TYPE,  # 919

   ProtocolBuffer.Encoder.MAX_TYPE,  # 920

   ProtocolBuffer.Encoder.MAX_TYPE,  # 921

   ProtocolBuffer.Encoder.MAX_TYPE,  # 922

   ProtocolBuffer.Encoder.MAX_TYPE,  # 923

   ProtocolBuffer.Encoder.MAX_TYPE,  # 924

   ProtocolBuffer.Encoder.MAX_TYPE,  # 925

   ProtocolBuffer.Encoder.MAX_TYPE,  # 926

   ProtocolBuffer.Encoder.MAX_TYPE,  # 927

   ProtocolBuffer.Encoder.MAX_TYPE,  # 928

   ProtocolBuffer.Encoder.MAX_TYPE,  # 929

   ProtocolBuffer.Encoder.MAX_TYPE,  # 930

   ProtocolBuffer.Encoder.MAX_TYPE,  # 931

   ProtocolBuffer.Encoder.MAX_TYPE,  # 932

   ProtocolBuffer.Encoder.MAX_TYPE,  # 933

   ProtocolBuffer.Encoder.MAX_TYPE,  # 934

   ProtocolBuffer.Encoder.MAX_TYPE,  # 935

   ProtocolBuffer.Encoder.MAX_TYPE,  # 936

   ProtocolBuffer.Encoder.MAX_TYPE,  # 937

   ProtocolBuffer.Encoder.MAX_TYPE,  # 938

   ProtocolBuffer.Encoder.MAX_TYPE,  # 939

   ProtocolBuffer.Encoder.MAX_TYPE,  # 940

   ProtocolBuffer.Encoder.MAX_TYPE,  # 941

   ProtocolBuffer.Encoder.MAX_TYPE,  # 942

   ProtocolBuffer.Encoder.MAX_TYPE,  # 943

   ProtocolBuffer.Encoder.MAX_TYPE,  # 944

   ProtocolBuffer.Encoder.MAX_TYPE,  # 945

   ProtocolBuffer.Encoder.MAX_TYPE,  # 946

   ProtocolBuffer.Encoder.MAX_TYPE,  # 947

   ProtocolBuffer.Encoder.MAX_TYPE,  # 948

   ProtocolBuffer.Encoder.MAX_TYPE,  # 949

   ProtocolBuffer.Encoder.MAX_TYPE,  # 950

   ProtocolBuffer.Encoder.MAX_TYPE,  # 951

   ProtocolBuffer.Encoder.MAX_TYPE,  # 952

   ProtocolBuffer.Encoder.MAX_TYPE,  # 953

   ProtocolBuffer.Encoder.MAX_TYPE,  # 954

   ProtocolBuffer.Encoder.MAX_TYPE,  # 955

   ProtocolBuffer.Encoder.MAX_TYPE,  # 956

   ProtocolBuffer.Encoder.MAX_TYPE,  # 957

   ProtocolBuffer.Encoder.MAX_TYPE,  # 958

   ProtocolBuffer.Encoder.MAX_TYPE,  # 959

   ProtocolBuffer.Encoder.MAX_TYPE,  # 960

   ProtocolBuffer.Encoder.MAX_TYPE,  # 961

   ProtocolBuffer.Encoder.MAX_TYPE,  # 962

   ProtocolBuffer.Encoder.MAX_TYPE,  # 963

   ProtocolBuffer.Encoder.MAX_TYPE,  # 964

   ProtocolBuffer.Encoder.MAX_TYPE,  # 965

   ProtocolBuffer.Encoder.MAX_TYPE,  # 966

   ProtocolBuffer.Encoder.MAX_TYPE,  # 967

   ProtocolBuffer.Encoder.MAX_TYPE,  # 968

   ProtocolBuffer.Encoder.MAX_TYPE,  # 969

   ProtocolBuffer.Encoder.MAX_TYPE,  # 970

   ProtocolBuffer.Encoder.MAX_TYPE,  # 971

   ProtocolBuffer.Encoder.MAX_TYPE,  # 972

   ProtocolBuffer.Encoder.MAX_TYPE,  # 973

   ProtocolBuffer.Encoder.MAX_TYPE,  # 974

   ProtocolBuffer.Encoder.MAX_TYPE,  # 975

   ProtocolBuffer.Encoder.MAX_TYPE,  # 976

   ProtocolBuffer.Encoder.MAX_TYPE,  # 977

   ProtocolBuffer.Encoder.MAX_TYPE,  # 978

   ProtocolBuffer.Encoder.MAX_TYPE,  # 979

   ProtocolBuffer.Encoder.MAX_TYPE,  # 980

   ProtocolBuffer.Encoder.MAX_TYPE,  # 981

   ProtocolBuffer.Encoder.MAX_TYPE,  # 982

   ProtocolBuffer.Encoder.MAX_TYPE,  # 983

   ProtocolBuffer.Encoder.MAX_TYPE,  # 984

   ProtocolBuffer.Encoder.MAX_TYPE,  # 985

   ProtocolBuffer.Encoder.MAX_TYPE,  # 986

   ProtocolBuffer.Encoder.MAX_TYPE,  # 987

   ProtocolBuffer.Encoder.MAX_TYPE,  # 988

   ProtocolBuffer.Encoder.MAX_TYPE,  # 989

   ProtocolBuffer.Encoder.MAX_TYPE,  # 990

   ProtocolBuffer.Encoder.MAX_TYPE,  # 991

   ProtocolBuffer.Encoder.MAX_TYPE,  # 992

   ProtocolBuffer.Encoder.MAX_TYPE,  # 993

   ProtocolBuffer.Encoder.MAX_TYPE,  # 994

   ProtocolBuffer.Encoder.MAX_TYPE,  # 995

   ProtocolBuffer.Encoder.MAX_TYPE,  # 996

   ProtocolBuffer.Encoder.MAX_TYPE,  # 997

   ProtocolBuffer.Encoder.MAX_TYPE,  # 998

   ProtocolBuffer.Encoder.MAX_TYPE,  # 999

   ProtocolBuffer.Encoder.STRING,  # 1000

   ProtocolBuffer.Encoder.DOUBLE,  # 1001

   ProtocolBuffer.Encoder.DOUBLE,  # 1002

   ProtocolBuffer.Encoder.MAX_TYPE,  # 1003

   ProtocolBuffer.Encoder.STRING,  # 1004

   ProtocolBuffer.Encoder.NUMERIC,  # 1005

   ProtocolBuffer.Encoder.NUMERIC,  # 1006

   ProtocolBuffer.Encoder.NUMERIC,  # 1007

   ProtocolBuffer.Encoder.NUMERIC,  # 1008

   ProtocolBuffer.Encoder.FLOAT,  # 1009

   ProtocolBuffer.Encoder.NUMERIC,  # 1010

   ProtocolBuffer.Encoder.NUMERIC,  # 1011

   ProtocolBuffer.Encoder.STARTGROUP,  # 1012

   ProtocolBuffer.Encoder.STRING,  # 1013

   ProtocolBuffer.Encoder.STRING,  # 1014

   ProtocolBuffer.Encoder.NUMERIC,  # 1015

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x18,
    0x73,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x07,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x13,
    0x1a,
    0x0c,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x10,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x5f,
    0x75,
    0x72,
    0x6c,
    0x20,
    0xe8,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x5f,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0xec,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x64,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x74,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0xf4,
    0x07,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x52,
    0x65,
    0x64,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x74,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x64,
    0x6f,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x20,
    0xf5,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x52,
    0x65,
    0x64,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x74,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0xf6,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x52,
    0x65,
    0x64,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x74,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x20,
    0xf7,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x72,
    0x65,
    0x64,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x74,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x20,
    0xf3,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x20,
    0xed,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x20,
    0xee,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x6e,
    0x6f,
    0x6e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x20,
    0xef,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x5f,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x20,
    0xf0,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x5f,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0x13,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x14,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x33,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x33,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x15,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x32,
    0x37,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x32,
    0x37,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x16,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x64,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x64,
    0x20,
    0x17,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x2f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x62,
    0x75,
    0x63,
    0x6b,
    0x65,
    0x74,
    0x20,
    0x30,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x69,
    0x73,
    0x5f,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x18,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x5f,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x19,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x66,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x73,
    0x20,
    0x2b,
    0x28,
    0x05,
    0x30,
    0x07,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x65,
    0x78,
    0x70,
    0x69,
    0x72,
    0x65,
    0x64,
    0x20,
    0x1a,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x1b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x2d,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x5f,
    0x74,
    0x61,
    0x67,
    0x73,
    0x20,
    0x21,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x70,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x22,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x73,
    0x65,
    0x74,
    0x69,
    0x5f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0xf1,
    0x07,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0x1c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x66,
    0x75,
    0x6c,
    0x6c,
    0x5f,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0xe9,
    0x07,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x03,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x66,
    0x75,
    0x6c,
    0x6c,
    0x5f,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0xea,
    0x07,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x03,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x32,
    0x20,
    0x2c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x6f,
    0x66,
    0x66,
    0x73,
    0x65,
    0x74,
    0x20,
    0x24,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x28,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x5f,
    0x6e,
    0x65,
    0x61,
    0x72,
    0x5f,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0xf2,
    0x07,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x0c,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x25,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x64,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x26,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x66,
    0x72,
    0x61,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x2e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x04,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x02,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x64,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x05,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x70,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x70,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x6e,
    0x73,
    0x20,
    0x31,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x69,
    0x6e,
    0x64,
    0x79,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x31,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x32,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x23,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x69,
    0x70,
    0x61,
    0x64,
    0x64,
    0x72,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x68,
    0x61,
    0x73,
    0x68,
    0x20,
    0x0a,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x2a,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x2a,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x6f,
    0x75,
    0x74,
    0x64,
    0x65,
    0x67,
    0x72,
    0x65,
    0x65,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x6f,
    0x75,
    0x74,
    0x73,
    0x69,
    0x74,
    0x65,
    0x73,
    0x20,
    0x29,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x64,
    0x6f,
    0x63,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x1e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x63,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x20,
    0x1f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x73,
    0x65,
    0x67,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x0d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x5f,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x27,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x77,
    0x65,
    0x62,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x6b,
    0x65,
    0x79,
    0x20,
    0x1d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x2a,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x5f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x2a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x2a,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x74,
    0x61,
    0x67,
    0x73,
    0x20,
    0x20,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x60,
    0x2a,
    0x14,
    0x73,
    0x7a,
    0x08,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x54,
    0x61,
    0x67,
    0x73,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x47,
    0x55,
    0x45,
    0x53,
    0x54,
    0x42,
    0x4f,
    0x4f,
    0x4b,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x46,
    0x4f,
    0x52,
    0x55,
    0x4d,
    0x98,
    0x01,
    0x10,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x4d,
    0x41,
    0x49,
    0x4c,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x4c,
    0x49,
    0x53,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x42,
    0x4c,
    0x4f,
    0x47,
    0x5f,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x45,
    0x4e,
    0x54,
    0x53,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x42,
    0x4c,
    0x4f,
    0x47,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x08,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x50,
    0x50,
    0x43,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x53,
    0x50,
    0x41,
    0x4d,
    0x5f,
    0x53,
    0x49,
    0x47,
    0x4e,
    0x41,
    0x54,
    0x55,
    0x52,
    0x45,
    0x5f,
    0x4b,
    0x49,
    0x4c,
    0x4c,
    0x98,
    0x01,
    0x13,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x53,
    0x50,
    0x41,
    0x4d,
    0x5f,
    0x53,
    0x49,
    0x47,
    0x4e,
    0x41,
    0x54,
    0x55,
    0x52,
    0x45,
    0x5f,
    0x4e,
    0x4f,
    0x50,
    0x52,
    0x4f,
    0x50,
    0x98,
    0x01,
    0x15,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x41,
    0x46,
    0x46,
    0x49,
    0x4c,
    0x49,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x57,
    0x49,
    0x4b,
    0x49,
    0x98,
    0x01,
    0x11,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x21,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x42,
    0x4c,
    0x4f,
    0x47,
    0x5f,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x45,
    0x4e,
    0x54,
    0x53,
    0x5f,
    0x54,
    0x4d,
    0x50,
    0x5f,
    0x46,
    0x4f,
    0x52,
    0x5f,
    0x41,
    0x4c,
    0x45,
    0x58,
    0x49,
    0x53,
    0x98,
    0x01,
    0xe9,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x21,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x42,
    0x4c,
    0x4f,
    0x47,
    0x5f,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x45,
    0x4e,
    0x54,
    0x53,
    0x5f,
    0x54,
    0x4d,
    0x50,
    0x5f,
    0x46,
    0x4f,
    0x52,
    0x5f,
    0x56,
    0x49,
    0x4e,
    0x45,
    0x45,
    0x54,
    0x98,
    0x01,
    0xea,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x4d,
    0x4f,
    0x42,
    0x49,
    0x4c,
    0x45,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x4e,
    0x4f,
    0x46,
    0x4f,
    0x4c,
    0x4c,
    0x4f,
    0x57,
    0x98,
    0x01,
    0x09,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x4e,
    0x4f,
    0x49,
    0x4e,
    0x44,
    0x45,
    0x58,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x48,
    0x54,
    0x54,
    0x50,
    0x5f,
    0x42,
    0x41,
    0x44,
    0x98,
    0x01,
    0x0b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x53,
    0x50,
    0x41,
    0x4d,
    0x98,
    0x01,
    0x0c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x44,
    0x45,
    0x4d,
    0x4f,
    0x54,
    0x45,
    0x98,
    0x01,
    0x0d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x48,
    0x41,
    0x53,
    0x5f,
    0x46,
    0x52,
    0x41,
    0x4d,
    0x45,
    0x53,
    0x45,
    0x54,
    0x98,
    0x01,
    0x0e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x5f,
    0x4e,
    0x4f,
    0x50,
    0x52,
    0x4f,
    0x50,
    0x98,
    0x01,
    0x0f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x53,
    0x5f,
    0x4e,
    0x4f,
    0x50,
    0x52,
    0x4f,
    0x50,
    0x5f,
    0x41,
    0x4c,
    0x4c,
    0x98,
    0x01,
    0x14,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x46,
    0x52,
    0x49,
    0x45,
    0x4e,
    0x44,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x98,
    0x01,
    0x16,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x50,
    0x41,
    0x49,
    0x44,
    0x98,
    0x01,
    0x06,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x52,
    0x45,
    0x46,
    0x45,
    0x52,
    0x52,
    0x45,
    0x52,
    0x98,
    0x01,
    0x12,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x46,
    0x4f,
    0x52,
    0x55,
    0x4d,
    0x5f,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x45,
    0x52,
    0x43,
    0x49,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x42,
    0x4f,
    0x49,
    0x4c,
    0x45,
    0x52,
    0x50,
    0x4c,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x40,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x41,
    0x44,
    0x42,
    0x41,
    0x4e,
    0x4e,
    0x45,
    0x52,
    0x98,
    0x01,
    0x41,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x49,
    0x4d,
    0x41,
    0x47,
    0x45,
    0x98,
    0x01,
    0x42,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x45,
    0x58,
    0x50,
    0x49,
    0x52,
    0x45,
    0x44,
    0x5f,
    0x50,
    0x55,
    0x52,
    0x47,
    0x41,
    0x54,
    0x4f,
    0x52,
    0x59,
    0x98,
    0x01,
    0x43,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x4e,
    0x4f,
    0x46,
    0x4f,
    0x4c,
    0x4c,
    0x4f,
    0x57,
    0x98,
    0x01,
    0x44,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x44,
    0x45,
    0x4d,
    0x4f,
    0x54,
    0x45,
    0x98,
    0x01,
    0x45,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x44,
    0x52,
    0x4f,
    0x50,
    0x98,
    0x01,
    0x46,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x42,
    0x45,
    0x46,
    0x4f,
    0x52,
    0x45,
    0x5f,
    0x45,
    0x58,
    0x50,
    0x49,
    0x52,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x47,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x42,
    0x45,
    0x46,
    0x4f,
    0x52,
    0x45,
    0x5f,
    0x43,
    0x52,
    0x45,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x48,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x41,
    0x46,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x45,
    0x58,
    0x50,
    0x49,
    0x52,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x49,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x49,
    0x4d,
    0x50,
    0x4f,
    0x52,
    0x54,
    0x45,
    0x44,
    0x98,
    0x01,
    0x4a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x41,
    0x55,
    0x54,
    0x4f,
    0x4c,
    0x45,
    0x41,
    0x4b,
    0x98,
    0x01,
    0x4b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x4e,
    0x4f,
    0x53,
    0x43,
    0x52,
    0x49,
    0x50,
    0x54,
    0x98,
    0x01,
    0x4c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x42,
    0x4f,
    0x49,
    0x4c,
    0x45,
    0x52,
    0x50,
    0x4c,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x4d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x41,
    0x4c,
    0x4c,
    0x5f,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x45,
    0x58,
    0x43,
    0x48,
    0x41,
    0x4e,
    0x47,
    0x45,
    0x98,
    0x01,
    0x4e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x19,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x53,
    0x45,
    0x43,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x5f,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x45,
    0x58,
    0x43,
    0x48,
    0x41,
    0x4e,
    0x47,
    0x45,
    0x98,
    0x01,
    0x4f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x54,
    0x52,
    0x41,
    0x4e,
    0x53,
    0x49,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x42,
    0x4f,
    0x49,
    0x4c,
    0x45,
    0x52,
    0x50,
    0x4c,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x50,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x53,
    0x50,
    0x41,
    0x4d,
    0x5f,
    0x53,
    0x49,
    0x47,
    0x4e,
    0x41,
    0x54,
    0x55,
    0x52,
    0x45,
    0x5f,
    0x41,
    0x4c,
    0x4c,
    0x98,
    0x01,
    0x51,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x53,
    0x50,
    0x41,
    0x4d,
    0x5f,
    0x53,
    0x49,
    0x47,
    0x4e,
    0x41,
    0x54,
    0x55,
    0x52,
    0x45,
    0x5f,
    0x53,
    0x45,
    0x43,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x52,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x46,
    0x52,
    0x49,
    0x45,
    0x4e,
    0x44,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x98,
    0x01,
    0x53,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x46,
    0x52,
    0x49,
    0x45,
    0x4e,
    0x44,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x45,
    0x52,
    0x43,
    0x49,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x54,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x42,
    0x41,
    0x43,
    0x4b,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x43,
    0x4c,
    0x55,
    0x53,
    0x54,
    0x45,
    0x52,
    0x98,
    0x01,
    0x55,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x4f,
    0x55,
    0x54,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x43,
    0x4c,
    0x55,
    0x53,
    0x54,
    0x45,
    0x52,
    0x98,
    0x01,
    0x56,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x4d,
    0x41,
    0x43,
    0x48,
    0x49,
    0x4e,
    0x45,
    0x5f,
    0x47,
    0x45,
    0x4e,
    0x45,
    0x52,
    0x41,
    0x54,
    0x45,
    0x44,
    0x98,
    0x01,
    0x57,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x45,
    0x4d,
    0x42,
    0x45,
    0x44,
    0x45,
    0x44,
    0x98,
    0x01,
    0x58,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1d,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x55,
    0x53,
    0x45,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x42,
    0x4f,
    0x49,
    0x4c,
    0x45,
    0x52,
    0x50,
    0x4c,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x59,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x4c,
    0x49,
    0x4e,
    0x4b,
    0x5f,
    0x41,
    0x46,
    0x46,
    0x49,
    0x4c,
    0x49,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x5a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x46,
    0x52,
    0x41,
    0x4d,
    0x45,
    0x98,
    0x01,
    0x80,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x41,
    0x52,
    0x45,
    0x41,
    0x98,
    0x01,
    0x81,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x4d,
    0x45,
    0x54,
    0x41,
    0x52,
    0x45,
    0x46,
    0x52,
    0x45,
    0x53,
    0x48,
    0x98,
    0x01,
    0x82,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x4c,
    0x4f,
    0x43,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x83,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x4f,
    0x42,
    0x4a,
    0x45,
    0x43,
    0x54,
    0x98,
    0x01,
    0x84,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x45,
    0x4d,
    0x42,
    0x45,
    0x44,
    0x98,
    0x01,
    0x85,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x46,
    0x52,
    0x41,
    0x4d,
    0x45,
    0x98,
    0x01,
    0x86,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x46,
    0x4f,
    0x52,
    0x4d,
    0x98,
    0x01,
    0x87,
    0x01,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x07,
    0x57,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x80,
    0x01,
    0x0c,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x4d,
    0x49,
    0x4e,
    0x5f,
    0x57,
    0x45,
    0x49,
    0x47,
    0x48,
    0x54,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x50,
    0x45,
    0x4e,
    0x41,
    0x4c,
    0x49,
    0x5a,
    0x45,
    0x44,
    0x5f,
    0x57,
    0x45,
    0x49,
    0x47,
    0x48,
    0x54,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x4d,
    0x41,
    0x58,
    0x5f,
    0x57,
    0x45,
    0x49,
    0x47,
    0x48,
    0x54,
    0x98,
    0x01,
    0x7f,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0a,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x80,
    0x01,
    0x0c,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x4e,
    0x4f,
    0x52,
    0x4d,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x53,
    0x55,
    0x50,
    0x50,
    0x4c,
    0x45,
    0x4d,
    0x45,
    0x4e,
    0x54,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class Links(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.link_ = []
    self.is_email_ = 0
    self.is_guestbook_ = 0
    self.is_blogcomment_ = 0
    self.is_blog_ = 0
    self.has_paid_links_ = 0
    self.has_referrer_links_ = 0
    self.is_forum_ = 0
    self.is_ppc_ = 0
    self.is_wiki_ = 0
    self.is_noindex_ = 0
    self.has_kill_spam_signature_ = 0
    self.has_noprop_spam_signature_ = 0
    self.has_blogcomment_leaks_ = 0
    self.is_friendlink_page_ = 0
    self.num_links_seen_ = 0
    self.num_links_truncated_ = 0
    self.num_links_rewritten_ = 0
    self.num_links_unclickable_ = 0
    self.processed_timestamp_ = 0
    self.deprecated_matched_spam_signature_ = ""
    self.has_is_email_ = 0
    self.has_is_guestbook_ = 0
    self.has_is_blogcomment_ = 0
    self.has_is_blog_ = 0
    self.has_has_paid_links_ = 0
    self.has_has_referrer_links_ = 0
    self.has_is_forum_ = 0
    self.has_is_ppc_ = 0
    self.has_is_wiki_ = 0
    self.has_is_noindex_ = 0
    self.has_has_kill_spam_signature_ = 0
    self.has_has_noprop_spam_signature_ = 0
    self.has_has_blogcomment_leaks_ = 0
    self.has_is_friendlink_page_ = 0
    self.has_num_links_seen_ = 0
    self.has_num_links_truncated_ = 0
    self.has_num_links_rewritten_ = 0
    self.has_num_links_unclickable_ = 0
    self.has_processed_timestamp_ = 0
    self.has_deprecated_matched_spam_signature_ = 0
    if contents is not None: self.MergeFromString(contents)

  def link_size(self): return len(self.link_)
  def link_list(self): return self.link_

  def link(self, i):
    return self.link_[i]

  def mutable_link(self, i):
    return self.link_[i]

  def add_link(self):
    x = Anchors()
    self.link_.append(x)
    return x

  def clear_link(self):
    self.link_ = []
  def is_email(self): return self.is_email_

  def set_is_email(self, x):
    self.has_is_email_ = 1
    self.is_email_ = x

  def clear_is_email(self):
    self.has_is_email_ = 0
    self.is_email_ = 0

  def has_is_email(self): return self.has_is_email_

  def is_guestbook(self): return self.is_guestbook_

  def set_is_guestbook(self, x):
    self.has_is_guestbook_ = 1
    self.is_guestbook_ = x

  def clear_is_guestbook(self):
    self.has_is_guestbook_ = 0
    self.is_guestbook_ = 0

  def has_is_guestbook(self): return self.has_is_guestbook_

  def is_blogcomment(self): return self.is_blogcomment_

  def set_is_blogcomment(self, x):
    self.has_is_blogcomment_ = 1
    self.is_blogcomment_ = x

  def clear_is_blogcomment(self):
    self.has_is_blogcomment_ = 0
    self.is_blogcomment_ = 0

  def has_is_blogcomment(self): return self.has_is_blogcomment_

  def is_blog(self): return self.is_blog_

  def set_is_blog(self, x):
    self.has_is_blog_ = 1
    self.is_blog_ = x

  def clear_is_blog(self):
    self.has_is_blog_ = 0
    self.is_blog_ = 0

  def has_is_blog(self): return self.has_is_blog_

  def has_paid_links(self): return self.has_paid_links_

  def set_has_paid_links(self, x):
    self.has_has_paid_links_ = 1
    self.has_paid_links_ = x

  def clear_has_paid_links(self):
    self.has_has_paid_links_ = 0
    self.has_paid_links_ = 0

  def has_has_paid_links(self): return self.has_has_paid_links_

  def has_referrer_links(self): return self.has_referrer_links_

  def set_has_referrer_links(self, x):
    self.has_has_referrer_links_ = 1
    self.has_referrer_links_ = x

  def clear_has_referrer_links(self):
    self.has_has_referrer_links_ = 0
    self.has_referrer_links_ = 0

  def has_has_referrer_links(self): return self.has_has_referrer_links_

  def is_forum(self): return self.is_forum_

  def set_is_forum(self, x):
    self.has_is_forum_ = 1
    self.is_forum_ = x

  def clear_is_forum(self):
    self.has_is_forum_ = 0
    self.is_forum_ = 0

  def has_is_forum(self): return self.has_is_forum_

  def is_ppc(self): return self.is_ppc_

  def set_is_ppc(self, x):
    self.has_is_ppc_ = 1
    self.is_ppc_ = x

  def clear_is_ppc(self):
    self.has_is_ppc_ = 0
    self.is_ppc_ = 0

  def has_is_ppc(self): return self.has_is_ppc_

  def is_wiki(self): return self.is_wiki_

  def set_is_wiki(self, x):
    self.has_is_wiki_ = 1
    self.is_wiki_ = x

  def clear_is_wiki(self):
    self.has_is_wiki_ = 0
    self.is_wiki_ = 0

  def has_is_wiki(self): return self.has_is_wiki_

  def is_noindex(self): return self.is_noindex_

  def set_is_noindex(self, x):
    self.has_is_noindex_ = 1
    self.is_noindex_ = x

  def clear_is_noindex(self):
    self.has_is_noindex_ = 0
    self.is_noindex_ = 0

  def has_is_noindex(self): return self.has_is_noindex_

  def has_kill_spam_signature(self): return self.has_kill_spam_signature_

  def set_has_kill_spam_signature(self, x):
    self.has_has_kill_spam_signature_ = 1
    self.has_kill_spam_signature_ = x

  def clear_has_kill_spam_signature(self):
    self.has_has_kill_spam_signature_ = 0
    self.has_kill_spam_signature_ = 0

  def has_has_kill_spam_signature(self): return self.has_has_kill_spam_signature_

  def has_noprop_spam_signature(self): return self.has_noprop_spam_signature_

  def set_has_noprop_spam_signature(self, x):
    self.has_has_noprop_spam_signature_ = 1
    self.has_noprop_spam_signature_ = x

  def clear_has_noprop_spam_signature(self):
    self.has_has_noprop_spam_signature_ = 0
    self.has_noprop_spam_signature_ = 0

  def has_has_noprop_spam_signature(self): return self.has_has_noprop_spam_signature_

  def has_blogcomment_leaks(self): return self.has_blogcomment_leaks_

  def set_has_blogcomment_leaks(self, x):
    self.has_has_blogcomment_leaks_ = 1
    self.has_blogcomment_leaks_ = x

  def clear_has_blogcomment_leaks(self):
    self.has_has_blogcomment_leaks_ = 0
    self.has_blogcomment_leaks_ = 0

  def has_has_blogcomment_leaks(self): return self.has_has_blogcomment_leaks_

  def is_friendlink_page(self): return self.is_friendlink_page_

  def set_is_friendlink_page(self, x):
    self.has_is_friendlink_page_ = 1
    self.is_friendlink_page_ = x

  def clear_is_friendlink_page(self):
    self.has_is_friendlink_page_ = 0
    self.is_friendlink_page_ = 0

  def has_is_friendlink_page(self): return self.has_is_friendlink_page_

  def num_links_seen(self): return self.num_links_seen_

  def set_num_links_seen(self, x):
    self.has_num_links_seen_ = 1
    self.num_links_seen_ = x

  def clear_num_links_seen(self):
    self.has_num_links_seen_ = 0
    self.num_links_seen_ = 0

  def has_num_links_seen(self): return self.has_num_links_seen_

  def num_links_truncated(self): return self.num_links_truncated_

  def set_num_links_truncated(self, x):
    self.has_num_links_truncated_ = 1
    self.num_links_truncated_ = x

  def clear_num_links_truncated(self):
    self.has_num_links_truncated_ = 0
    self.num_links_truncated_ = 0

  def has_num_links_truncated(self): return self.has_num_links_truncated_

  def num_links_rewritten(self): return self.num_links_rewritten_

  def set_num_links_rewritten(self, x):
    self.has_num_links_rewritten_ = 1
    self.num_links_rewritten_ = x

  def clear_num_links_rewritten(self):
    self.has_num_links_rewritten_ = 0
    self.num_links_rewritten_ = 0

  def has_num_links_rewritten(self): return self.has_num_links_rewritten_

  def num_links_unclickable(self): return self.num_links_unclickable_

  def set_num_links_unclickable(self, x):
    self.has_num_links_unclickable_ = 1
    self.num_links_unclickable_ = x

  def clear_num_links_unclickable(self):
    self.has_num_links_unclickable_ = 0
    self.num_links_unclickable_ = 0

  def has_num_links_unclickable(self): return self.has_num_links_unclickable_

  def processed_timestamp(self): return self.processed_timestamp_

  def set_processed_timestamp(self, x):
    self.has_processed_timestamp_ = 1
    self.processed_timestamp_ = x

  def clear_processed_timestamp(self):
    self.has_processed_timestamp_ = 0
    self.processed_timestamp_ = 0

  def has_processed_timestamp(self): return self.has_processed_timestamp_

  def deprecated_matched_spam_signature(self): return self.deprecated_matched_spam_signature_

  def set_deprecated_matched_spam_signature(self, x):
    self.has_deprecated_matched_spam_signature_ = 1
    self.deprecated_matched_spam_signature_ = x

  def clear_deprecated_matched_spam_signature(self):
    self.has_deprecated_matched_spam_signature_ = 0
    self.deprecated_matched_spam_signature_ = ""

  def has_deprecated_matched_spam_signature(self): return self.has_deprecated_matched_spam_signature_


  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.link_size()): self.add_link().CopyFrom(x.link(i))
    if (x.has_is_email()): self.set_is_email(x.is_email())
    if (x.has_is_guestbook()): self.set_is_guestbook(x.is_guestbook())
    if (x.has_is_blogcomment()): self.set_is_blogcomment(x.is_blogcomment())
    if (x.has_is_blog()): self.set_is_blog(x.is_blog())
    if (x.has_has_paid_links()): self.set_has_paid_links(x.has_paid_links())
    if (x.has_has_referrer_links()): self.set_has_referrer_links(x.has_referrer_links())
    if (x.has_is_forum()): self.set_is_forum(x.is_forum())
    if (x.has_is_ppc()): self.set_is_ppc(x.is_ppc())
    if (x.has_is_wiki()): self.set_is_wiki(x.is_wiki())
    if (x.has_is_noindex()): self.set_is_noindex(x.is_noindex())
    if (x.has_has_kill_spam_signature()): self.set_has_kill_spam_signature(x.has_kill_spam_signature())
    if (x.has_has_noprop_spam_signature()): self.set_has_noprop_spam_signature(x.has_noprop_spam_signature())
    if (x.has_has_blogcomment_leaks()): self.set_has_blogcomment_leaks(x.has_blogcomment_leaks())
    if (x.has_is_friendlink_page()): self.set_is_friendlink_page(x.is_friendlink_page())
    if (x.has_num_links_seen()): self.set_num_links_seen(x.num_links_seen())
    if (x.has_num_links_truncated()): self.set_num_links_truncated(x.num_links_truncated())
    if (x.has_num_links_rewritten()): self.set_num_links_rewritten(x.num_links_rewritten())
    if (x.has_num_links_unclickable()): self.set_num_links_unclickable(x.num_links_unclickable())
    if (x.has_processed_timestamp()): self.set_processed_timestamp(x.processed_timestamp())
    if (x.has_deprecated_matched_spam_signature()): self.set_deprecated_matched_spam_signature(x.deprecated_matched_spam_signature())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'Links', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'Links')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'Links', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'Links', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'Links', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.link_) != len(x.link_): return 0
    for e1, e2 in zip(self.link_, x.link_):
      if e1 != e2: return 0
    if self.has_is_email_ != x.has_is_email_: return 0
    if self.has_is_email_ and self.is_email_ != x.is_email_: return 0
    if self.has_is_guestbook_ != x.has_is_guestbook_: return 0
    if self.has_is_guestbook_ and self.is_guestbook_ != x.is_guestbook_: return 0
    if self.has_is_blogcomment_ != x.has_is_blogcomment_: return 0
    if self.has_is_blogcomment_ and self.is_blogcomment_ != x.is_blogcomment_: return 0
    if self.has_is_blog_ != x.has_is_blog_: return 0
    if self.has_is_blog_ and self.is_blog_ != x.is_blog_: return 0
    if self.has_has_paid_links_ != x.has_has_paid_links_: return 0
    if self.has_has_paid_links_ and self.has_paid_links_ != x.has_paid_links_: return 0
    if self.has_has_referrer_links_ != x.has_has_referrer_links_: return 0
    if self.has_has_referrer_links_ and self.has_referrer_links_ != x.has_referrer_links_: return 0
    if self.has_is_forum_ != x.has_is_forum_: return 0
    if self.has_is_forum_ and self.is_forum_ != x.is_forum_: return 0
    if self.has_is_ppc_ != x.has_is_ppc_: return 0
    if self.has_is_ppc_ and self.is_ppc_ != x.is_ppc_: return 0
    if self.has_is_wiki_ != x.has_is_wiki_: return 0
    if self.has_is_wiki_ and self.is_wiki_ != x.is_wiki_: return 0
    if self.has_is_noindex_ != x.has_is_noindex_: return 0
    if self.has_is_noindex_ and self.is_noindex_ != x.is_noindex_: return 0
    if self.has_has_kill_spam_signature_ != x.has_has_kill_spam_signature_: return 0
    if self.has_has_kill_spam_signature_ and self.has_kill_spam_signature_ != x.has_kill_spam_signature_: return 0
    if self.has_has_noprop_spam_signature_ != x.has_has_noprop_spam_signature_: return 0
    if self.has_has_noprop_spam_signature_ and self.has_noprop_spam_signature_ != x.has_noprop_spam_signature_: return 0
    if self.has_has_blogcomment_leaks_ != x.has_has_blogcomment_leaks_: return 0
    if self.has_has_blogcomment_leaks_ and self.has_blogcomment_leaks_ != x.has_blogcomment_leaks_: return 0
    if self.has_is_friendlink_page_ != x.has_is_friendlink_page_: return 0
    if self.has_is_friendlink_page_ and self.is_friendlink_page_ != x.is_friendlink_page_: return 0
    if self.has_num_links_seen_ != x.has_num_links_seen_: return 0
    if self.has_num_links_seen_ and self.num_links_seen_ != x.num_links_seen_: return 0
    if self.has_num_links_truncated_ != x.has_num_links_truncated_: return 0
    if self.has_num_links_truncated_ and self.num_links_truncated_ != x.num_links_truncated_: return 0
    if self.has_num_links_rewritten_ != x.has_num_links_rewritten_: return 0
    if self.has_num_links_rewritten_ and self.num_links_rewritten_ != x.num_links_rewritten_: return 0
    if self.has_num_links_unclickable_ != x.has_num_links_unclickable_: return 0
    if self.has_num_links_unclickable_ and self.num_links_unclickable_ != x.num_links_unclickable_: return 0
    if self.has_processed_timestamp_ != x.has_processed_timestamp_: return 0
    if self.has_processed_timestamp_ and self.processed_timestamp_ != x.processed_timestamp_: return 0
    if self.has_deprecated_matched_spam_signature_ != x.has_deprecated_matched_spam_signature_: return 0
    if self.has_deprecated_matched_spam_signature_ and self.deprecated_matched_spam_signature_ != x.deprecated_matched_spam_signature_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.link_)):
      if (not self.link_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 1 * len(self.link_)
    for i in xrange(len(self.link_)): n += self.lengthString(self.link_[i].ByteSize())
    if (self.has_is_email_): n += 2
    if (self.has_is_guestbook_): n += 2
    if (self.has_is_blogcomment_): n += 2
    if (self.has_is_blog_): n += 2
    if (self.has_has_paid_links_): n += 2
    if (self.has_has_referrer_links_): n += 3
    if (self.has_is_forum_): n += 2
    if (self.has_is_ppc_): n += 3
    if (self.has_is_wiki_): n += 3
    if (self.has_is_noindex_): n += 3
    if (self.has_has_kill_spam_signature_): n += 3
    if (self.has_has_noprop_spam_signature_): n += 3
    if (self.has_has_blogcomment_leaks_): n += 3
    if (self.has_is_friendlink_page_): n += 3
    if (self.has_num_links_seen_): n += 2 + self.lengthVarInt64(self.num_links_seen_)
    if (self.has_num_links_truncated_): n += 2 + self.lengthVarInt64(self.num_links_truncated_)
    if (self.has_num_links_rewritten_): n += 2 + self.lengthVarInt64(self.num_links_rewritten_)
    if (self.has_num_links_unclickable_): n += 2 + self.lengthVarInt64(self.num_links_unclickable_)
    if (self.has_processed_timestamp_): n += 2 + self.lengthVarInt64(self.processed_timestamp_)
    if (self.has_deprecated_matched_spam_signature_): n += 2 + self.lengthString(len(self.deprecated_matched_spam_signature_))
    return n + 0

  def Clear(self):
    self.clear_link()
    self.clear_is_email()
    self.clear_is_guestbook()
    self.clear_is_blogcomment()
    self.clear_is_blog()
    self.clear_has_paid_links()
    self.clear_has_referrer_links()
    self.clear_is_forum()
    self.clear_is_ppc()
    self.clear_is_wiki()
    self.clear_is_noindex()
    self.clear_has_kill_spam_signature()
    self.clear_has_noprop_spam_signature()
    self.clear_has_blogcomment_leaks()
    self.clear_is_friendlink_page()
    self.clear_num_links_seen()
    self.clear_num_links_truncated()
    self.clear_num_links_rewritten()
    self.clear_num_links_unclickable()
    self.clear_processed_timestamp()
    self.clear_deprecated_matched_spam_signature()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.link_)):
      out.putVarInt32(10)
      out.putVarInt32(self.link_[i].ByteSize())
      self.link_[i].OutputUnchecked(out)
    if (self.has_is_email_):
      out.putVarInt32(80)
      out.putBoolean(self.is_email_)
    if (self.has_is_guestbook_):
      out.putVarInt32(88)
      out.putBoolean(self.is_guestbook_)
    if (self.has_is_blogcomment_):
      out.putVarInt32(96)
      out.putBoolean(self.is_blogcomment_)
    if (self.has_is_blog_):
      out.putVarInt32(104)
      out.putBoolean(self.is_blog_)
    if (self.has_has_paid_links_):
      out.putVarInt32(112)
      out.putBoolean(self.has_paid_links_)
    if (self.has_is_forum_):
      out.putVarInt32(120)
      out.putBoolean(self.is_forum_)
    if (self.has_is_ppc_):
      out.putVarInt32(128)
      out.putBoolean(self.is_ppc_)
    if (self.has_is_wiki_):
      out.putVarInt32(136)
      out.putBoolean(self.is_wiki_)
    if (self.has_has_referrer_links_):
      out.putVarInt32(144)
      out.putBoolean(self.has_referrer_links_)
    if (self.has_is_noindex_):
      out.putVarInt32(152)
      out.putBoolean(self.is_noindex_)
    if (self.has_has_kill_spam_signature_):
      out.putVarInt32(160)
      out.putBoolean(self.has_kill_spam_signature_)
    if (self.has_has_blogcomment_leaks_):
      out.putVarInt32(168)
      out.putBoolean(self.has_blogcomment_leaks_)
    if (self.has_has_noprop_spam_signature_):
      out.putVarInt32(176)
      out.putBoolean(self.has_noprop_spam_signature_)
    if (self.has_is_friendlink_page_):
      out.putVarInt32(184)
      out.putBoolean(self.is_friendlink_page_)
    if (self.has_num_links_seen_):
      out.putVarInt32(240)
      out.putVarInt32(self.num_links_seen_)
    if (self.has_num_links_truncated_):
      out.putVarInt32(248)
      out.putVarInt32(self.num_links_truncated_)
    if (self.has_num_links_rewritten_):
      out.putVarInt32(256)
      out.putVarInt32(self.num_links_rewritten_)
    if (self.has_num_links_unclickable_):
      out.putVarInt32(264)
      out.putVarInt32(self.num_links_unclickable_)
    if (self.has_processed_timestamp_):
      out.putVarInt32(320)
      out.putVarInt64(self.processed_timestamp_)
    if (self.has_deprecated_matched_spam_signature_):
      out.putVarInt32(362)
      out.putPrefixedString(self.deprecated_matched_spam_signature_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_link().TryMerge(tmp)
        continue
      if tt == 80:
        self.set_is_email(d.getBoolean())
        continue
      if tt == 88:
        self.set_is_guestbook(d.getBoolean())
        continue
      if tt == 96:
        self.set_is_blogcomment(d.getBoolean())
        continue
      if tt == 104:
        self.set_is_blog(d.getBoolean())
        continue
      if tt == 112:
        self.set_has_paid_links(d.getBoolean())
        continue
      if tt == 120:
        self.set_is_forum(d.getBoolean())
        continue
      if tt == 128:
        self.set_is_ppc(d.getBoolean())
        continue
      if tt == 136:
        self.set_is_wiki(d.getBoolean())
        continue
      if tt == 144:
        self.set_has_referrer_links(d.getBoolean())
        continue
      if tt == 152:
        self.set_is_noindex(d.getBoolean())
        continue
      if tt == 160:
        self.set_has_kill_spam_signature(d.getBoolean())
        continue
      if tt == 168:
        self.set_has_blogcomment_leaks(d.getBoolean())
        continue
      if tt == 176:
        self.set_has_noprop_spam_signature(d.getBoolean())
        continue
      if tt == 184:
        self.set_is_friendlink_page(d.getBoolean())
        continue
      if tt == 240:
        self.set_num_links_seen(d.getVarInt32())
        continue
      if tt == 248:
        self.set_num_links_truncated(d.getVarInt32())
        continue
      if tt == 256:
        self.set_num_links_rewritten(d.getVarInt32())
        continue
      if tt == 264:
        self.set_num_links_unclickable(d.getVarInt32())
        continue
      if tt == 320:
        self.set_processed_timestamp(d.getVarInt64())
        continue
      if tt == 362:
        self.set_deprecated_matched_spam_signature(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.link_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("link%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_is_email_: res+=prefix+("is_email: %s\n" % self.DebugFormatBool(self.is_email_))
    if self.has_is_guestbook_: res+=prefix+("is_guestbook: %s\n" % self.DebugFormatBool(self.is_guestbook_))
    if self.has_is_blogcomment_: res+=prefix+("is_blogcomment: %s\n" % self.DebugFormatBool(self.is_blogcomment_))
    if self.has_is_blog_: res+=prefix+("is_blog: %s\n" % self.DebugFormatBool(self.is_blog_))
    if self.has_has_paid_links_: res+=prefix+("has_paid_links: %s\n" % self.DebugFormatBool(self.has_paid_links_))
    if self.has_has_referrer_links_: res+=prefix+("has_referrer_links: %s\n" % self.DebugFormatBool(self.has_referrer_links_))
    if self.has_is_forum_: res+=prefix+("is_forum: %s\n" % self.DebugFormatBool(self.is_forum_))
    if self.has_is_ppc_: res+=prefix+("is_ppc: %s\n" % self.DebugFormatBool(self.is_ppc_))
    if self.has_is_wiki_: res+=prefix+("is_wiki: %s\n" % self.DebugFormatBool(self.is_wiki_))
    if self.has_is_noindex_: res+=prefix+("is_noindex: %s\n" % self.DebugFormatBool(self.is_noindex_))
    if self.has_has_kill_spam_signature_: res+=prefix+("has_kill_spam_signature: %s\n" % self.DebugFormatBool(self.has_kill_spam_signature_))
    if self.has_has_noprop_spam_signature_: res+=prefix+("has_noprop_spam_signature: %s\n" % self.DebugFormatBool(self.has_noprop_spam_signature_))
    if self.has_has_blogcomment_leaks_: res+=prefix+("has_blogcomment_leaks: %s\n" % self.DebugFormatBool(self.has_blogcomment_leaks_))
    if self.has_is_friendlink_page_: res+=prefix+("is_friendlink_page: %s\n" % self.DebugFormatBool(self.is_friendlink_page_))
    if self.has_num_links_seen_: res+=prefix+("num_links_seen: %s\n" % self.DebugFormatInt32(self.num_links_seen_))
    if self.has_num_links_truncated_: res+=prefix+("num_links_truncated: %s\n" % self.DebugFormatInt32(self.num_links_truncated_))
    if self.has_num_links_rewritten_: res+=prefix+("num_links_rewritten: %s\n" % self.DebugFormatInt32(self.num_links_rewritten_))
    if self.has_num_links_unclickable_: res+=prefix+("num_links_unclickable: %s\n" % self.DebugFormatInt32(self.num_links_unclickable_))
    if self.has_processed_timestamp_: res+=prefix+("processed_timestamp: %s\n" % self.DebugFormatInt64(self.processed_timestamp_))
    if self.has_deprecated_matched_spam_signature_: res+=prefix+("DEPRECATED_matched_spam_signature: %s\n" % self.DebugFormatString(self.deprecated_matched_spam_signature_))
    return res

  klink = 1
  kis_email = 10
  kis_guestbook = 11
  kis_blogcomment = 12
  kis_blog = 13
  khas_paid_links = 14
  khas_referrer_links = 18
  kis_forum = 15
  kis_ppc = 16
  kis_wiki = 17
  kis_noindex = 19
  khas_kill_spam_signature = 20
  khas_noprop_spam_signature = 22
  khas_blogcomment_leaks = 21
  kis_friendlink_page = 23
  knum_links_seen = 30
  knum_links_truncated = 31
  knum_links_rewritten = 32
  knum_links_unclickable = 33
  kprocessed_timestamp = 40
  kDEPRECATED_matched_spam_signature = 45

  _TEXT = (
   "ErrorCode",  #   0
   "link",  #   1
   None,  #   2
   None,  #   3
   None,  #   4
   None,  #   5
   None,  #   6
   None,  #   7
   None,  #   8
   None,  #   9
   "is_email",  #  10
   "is_guestbook",  #  11
   "is_blogcomment",  #  12
   "is_blog",  #  13
   "has_paid_links",  #  14
   "is_forum",  #  15
   "is_ppc",  #  16
   "is_wiki",  #  17
   "has_referrer_links",  #  18
   "is_noindex",  #  19
   "has_kill_spam_signature",  #  20
   "has_blogcomment_leaks",  #  21
   "has_noprop_spam_signature",  #  22
   "is_friendlink_page",  #  23
   None,  #  24
   None,  #  25
   None,  #  26
   None,  #  27
   None,  #  28
   None,  #  29
   "num_links_seen",  #  30
   "num_links_truncated",  #  31
   "num_links_rewritten",  #  32
   "num_links_unclickable",  #  33
   None,  #  34
   None,  #  35
   None,  #  36
   None,  #  37
   None,  #  38
   None,  #  39
   "processed_timestamp",  #  40
   None,  #  41
   None,  #  42
   None,  #  43
   None,  #  44
   "DEPRECATED_matched_spam_signature",  #  45
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.MAX_TYPE,  #   2

   ProtocolBuffer.Encoder.MAX_TYPE,  #   3

   ProtocolBuffer.Encoder.MAX_TYPE,  #   4

   ProtocolBuffer.Encoder.MAX_TYPE,  #   5

   ProtocolBuffer.Encoder.MAX_TYPE,  #   6

   ProtocolBuffer.Encoder.MAX_TYPE,  #   7

   ProtocolBuffer.Encoder.MAX_TYPE,  #   8

   ProtocolBuffer.Encoder.MAX_TYPE,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.NUMERIC,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.NUMERIC,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.NUMERIC,  #  18

   ProtocolBuffer.Encoder.NUMERIC,  #  19

   ProtocolBuffer.Encoder.NUMERIC,  #  20

   ProtocolBuffer.Encoder.NUMERIC,  #  21

   ProtocolBuffer.Encoder.NUMERIC,  #  22

   ProtocolBuffer.Encoder.NUMERIC,  #  23

   ProtocolBuffer.Encoder.MAX_TYPE,  #  24

   ProtocolBuffer.Encoder.MAX_TYPE,  #  25

   ProtocolBuffer.Encoder.MAX_TYPE,  #  26

   ProtocolBuffer.Encoder.MAX_TYPE,  #  27

   ProtocolBuffer.Encoder.MAX_TYPE,  #  28

   ProtocolBuffer.Encoder.MAX_TYPE,  #  29

   ProtocolBuffer.Encoder.NUMERIC,  #  30

   ProtocolBuffer.Encoder.NUMERIC,  #  31

   ProtocolBuffer.Encoder.NUMERIC,  #  32

   ProtocolBuffer.Encoder.NUMERIC,  #  33

   ProtocolBuffer.Encoder.MAX_TYPE,  #  34

   ProtocolBuffer.Encoder.MAX_TYPE,  #  35

   ProtocolBuffer.Encoder.MAX_TYPE,  #  36

   ProtocolBuffer.Encoder.MAX_TYPE,  #  37

   ProtocolBuffer.Encoder.MAX_TYPE,  #  38

   ProtocolBuffer.Encoder.MAX_TYPE,  #  39

   ProtocolBuffer.Encoder.NUMERIC,  #  40

   ProtocolBuffer.Encoder.MAX_TYPE,  #  41

   ProtocolBuffer.Encoder.MAX_TYPE,  #  42

   ProtocolBuffer.Encoder.MAX_TYPE,  #  43

   ProtocolBuffer.Encoder.MAX_TYPE,  #  44

   ProtocolBuffer.Encoder.STRING,  #  45

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x18,
    0x73,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x05,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x13,
    0x1a,
    0x04,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x07,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x69,
    0x73,
    0x5f,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x69,
    0x73,
    0x5f,
    0x67,
    0x75,
    0x65,
    0x73,
    0x74,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x69,
    0x73,
    0x5f,
    0x62,
    0x6c,
    0x6f,
    0x67,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x69,
    0x73,
    0x5f,
    0x62,
    0x6c,
    0x6f,
    0x67,
    0x20,
    0x0d,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x68,
    0x61,
    0x73,
    0x5f,
    0x70,
    0x61,
    0x69,
    0x64,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x68,
    0x61,
    0x73,
    0x5f,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x72,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x20,
    0x12,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x69,
    0x73,
    0x5f,
    0x66,
    0x6f,
    0x72,
    0x75,
    0x6d,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x69,
    0x73,
    0x5f,
    0x70,
    0x70,
    0x63,
    0x20,
    0x10,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x69,
    0x73,
    0x5f,
    0x77,
    0x69,
    0x6b,
    0x69,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x69,
    0x73,
    0x5f,
    0x6e,
    0x6f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x13,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x68,
    0x61,
    0x73,
    0x5f,
    0x6b,
    0x69,
    0x6c,
    0x6c,
    0x5f,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x5f,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x14,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x68,
    0x61,
    0x73,
    0x5f,
    0x6e,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x5f,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x5f,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x16,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x68,
    0x61,
    0x73,
    0x5f,
    0x62,
    0x6c,
    0x6f,
    0x67,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x6c,
    0x65,
    0x61,
    0x6b,
    0x73,
    0x20,
    0x15,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x69,
    0x73,
    0x5f,
    0x66,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x5f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x20,
    0x17,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x6e,
    0x75,
    0x6d,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x5f,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x1e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x6e,
    0x75,
    0x6d,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x5f,
    0x74,
    0x72,
    0x75,
    0x6e,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x1f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x6e,
    0x75,
    0x6d,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x5f,
    0x72,
    0x65,
    0x77,
    0x72,
    0x69,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x20,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x6e,
    0x75,
    0x6d,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x5f,
    0x75,
    0x6e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x21,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x5f,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x28,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x6d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x65,
    0x64,
    0x5f,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x5f,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x2d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class AnchorStatistics(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 6841042 

  _TypeId_NAMES = {
    6841042: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.anchor_count_ = 0
    self.local_anchor_count_ = 0
    self.nonlocal_anchor_count_ = 0
    self.normal_anchor_count_ = 0
    self.supplemental_anchor_count_ = 0
    self.experimental_anchor_count_ = 0
    self.dropped_anchor_count_ = 0
    self.dropped_local_anchor_count_ = 0
    self.dropped_nonlocal_anchor_count_ = 0
    self.dropped_normal_anchor_count_ = 0
    self.dropped_supplemental_anchor_count_ = 0
    self.has_anchor_count_ = 0
    self.has_local_anchor_count_ = 0
    self.has_nonlocal_anchor_count_ = 0
    self.has_normal_anchor_count_ = 0
    self.has_supplemental_anchor_count_ = 0
    self.has_experimental_anchor_count_ = 0
    self.has_dropped_anchor_count_ = 0
    self.has_dropped_local_anchor_count_ = 0
    self.has_dropped_nonlocal_anchor_count_ = 0
    self.has_dropped_normal_anchor_count_ = 0
    self.has_dropped_supplemental_anchor_count_ = 0
    if contents is not None: self.MergeFromString(contents)

  def anchor_count(self): return self.anchor_count_

  def set_anchor_count(self, x):
    self.has_anchor_count_ = 1
    self.anchor_count_ = x

  def clear_anchor_count(self):
    self.has_anchor_count_ = 0
    self.anchor_count_ = 0

  def has_anchor_count(self): return self.has_anchor_count_

  def local_anchor_count(self): return self.local_anchor_count_

  def set_local_anchor_count(self, x):
    self.has_local_anchor_count_ = 1
    self.local_anchor_count_ = x

  def clear_local_anchor_count(self):
    self.has_local_anchor_count_ = 0
    self.local_anchor_count_ = 0

  def has_local_anchor_count(self): return self.has_local_anchor_count_

  def nonlocal_anchor_count(self): return self.nonlocal_anchor_count_

  def set_nonlocal_anchor_count(self, x):
    self.has_nonlocal_anchor_count_ = 1
    self.nonlocal_anchor_count_ = x

  def clear_nonlocal_anchor_count(self):
    self.has_nonlocal_anchor_count_ = 0
    self.nonlocal_anchor_count_ = 0

  def has_nonlocal_anchor_count(self): return self.has_nonlocal_anchor_count_

  def normal_anchor_count(self): return self.normal_anchor_count_

  def set_normal_anchor_count(self, x):
    self.has_normal_anchor_count_ = 1
    self.normal_anchor_count_ = x

  def clear_normal_anchor_count(self):
    self.has_normal_anchor_count_ = 0
    self.normal_anchor_count_ = 0

  def has_normal_anchor_count(self): return self.has_normal_anchor_count_

  def supplemental_anchor_count(self): return self.supplemental_anchor_count_

  def set_supplemental_anchor_count(self, x):
    self.has_supplemental_anchor_count_ = 1
    self.supplemental_anchor_count_ = x

  def clear_supplemental_anchor_count(self):
    self.has_supplemental_anchor_count_ = 0
    self.supplemental_anchor_count_ = 0

  def has_supplemental_anchor_count(self): return self.has_supplemental_anchor_count_

  def experimental_anchor_count(self): return self.experimental_anchor_count_

  def set_experimental_anchor_count(self, x):
    self.has_experimental_anchor_count_ = 1
    self.experimental_anchor_count_ = x

  def clear_experimental_anchor_count(self):
    self.has_experimental_anchor_count_ = 0
    self.experimental_anchor_count_ = 0

  def has_experimental_anchor_count(self): return self.has_experimental_anchor_count_

  def dropped_anchor_count(self): return self.dropped_anchor_count_

  def set_dropped_anchor_count(self, x):
    self.has_dropped_anchor_count_ = 1
    self.dropped_anchor_count_ = x

  def clear_dropped_anchor_count(self):
    self.has_dropped_anchor_count_ = 0
    self.dropped_anchor_count_ = 0

  def has_dropped_anchor_count(self): return self.has_dropped_anchor_count_

  def dropped_local_anchor_count(self): return self.dropped_local_anchor_count_

  def set_dropped_local_anchor_count(self, x):
    self.has_dropped_local_anchor_count_ = 1
    self.dropped_local_anchor_count_ = x

  def clear_dropped_local_anchor_count(self):
    self.has_dropped_local_anchor_count_ = 0
    self.dropped_local_anchor_count_ = 0

  def has_dropped_local_anchor_count(self): return self.has_dropped_local_anchor_count_

  def dropped_nonlocal_anchor_count(self): return self.dropped_nonlocal_anchor_count_

  def set_dropped_nonlocal_anchor_count(self, x):
    self.has_dropped_nonlocal_anchor_count_ = 1
    self.dropped_nonlocal_anchor_count_ = x

  def clear_dropped_nonlocal_anchor_count(self):
    self.has_dropped_nonlocal_anchor_count_ = 0
    self.dropped_nonlocal_anchor_count_ = 0

  def has_dropped_nonlocal_anchor_count(self): return self.has_dropped_nonlocal_anchor_count_

  def dropped_normal_anchor_count(self): return self.dropped_normal_anchor_count_

  def set_dropped_normal_anchor_count(self, x):
    self.has_dropped_normal_anchor_count_ = 1
    self.dropped_normal_anchor_count_ = x

  def clear_dropped_normal_anchor_count(self):
    self.has_dropped_normal_anchor_count_ = 0
    self.dropped_normal_anchor_count_ = 0

  def has_dropped_normal_anchor_count(self): return self.has_dropped_normal_anchor_count_

  def dropped_supplemental_anchor_count(self): return self.dropped_supplemental_anchor_count_

  def set_dropped_supplemental_anchor_count(self, x):
    self.has_dropped_supplemental_anchor_count_ = 1
    self.dropped_supplemental_anchor_count_ = x

  def clear_dropped_supplemental_anchor_count(self):
    self.has_dropped_supplemental_anchor_count_ = 0
    self.dropped_supplemental_anchor_count_ = 0

  def has_dropped_supplemental_anchor_count(self): return self.has_dropped_supplemental_anchor_count_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_anchor_count()): self.set_anchor_count(x.anchor_count())
    if (x.has_local_anchor_count()): self.set_local_anchor_count(x.local_anchor_count())
    if (x.has_nonlocal_anchor_count()): self.set_nonlocal_anchor_count(x.nonlocal_anchor_count())
    if (x.has_normal_anchor_count()): self.set_normal_anchor_count(x.normal_anchor_count())
    if (x.has_supplemental_anchor_count()): self.set_supplemental_anchor_count(x.supplemental_anchor_count())
    if (x.has_experimental_anchor_count()): self.set_experimental_anchor_count(x.experimental_anchor_count())
    if (x.has_dropped_anchor_count()): self.set_dropped_anchor_count(x.dropped_anchor_count())
    if (x.has_dropped_local_anchor_count()): self.set_dropped_local_anchor_count(x.dropped_local_anchor_count())
    if (x.has_dropped_nonlocal_anchor_count()): self.set_dropped_nonlocal_anchor_count(x.dropped_nonlocal_anchor_count())
    if (x.has_dropped_normal_anchor_count()): self.set_dropped_normal_anchor_count(x.dropped_normal_anchor_count())
    if (x.has_dropped_supplemental_anchor_count()): self.set_dropped_supplemental_anchor_count(x.dropped_supplemental_anchor_count())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'AnchorStatistics', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'AnchorStatistics')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'AnchorStatistics', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'AnchorStatistics', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'AnchorStatistics', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_anchor_count_ != x.has_anchor_count_: return 0
    if self.has_anchor_count_ and self.anchor_count_ != x.anchor_count_: return 0
    if self.has_local_anchor_count_ != x.has_local_anchor_count_: return 0
    if self.has_local_anchor_count_ and self.local_anchor_count_ != x.local_anchor_count_: return 0
    if self.has_nonlocal_anchor_count_ != x.has_nonlocal_anchor_count_: return 0
    if self.has_nonlocal_anchor_count_ and self.nonlocal_anchor_count_ != x.nonlocal_anchor_count_: return 0
    if self.has_normal_anchor_count_ != x.has_normal_anchor_count_: return 0
    if self.has_normal_anchor_count_ and self.normal_anchor_count_ != x.normal_anchor_count_: return 0
    if self.has_supplemental_anchor_count_ != x.has_supplemental_anchor_count_: return 0
    if self.has_supplemental_anchor_count_ and self.supplemental_anchor_count_ != x.supplemental_anchor_count_: return 0
    if self.has_experimental_anchor_count_ != x.has_experimental_anchor_count_: return 0
    if self.has_experimental_anchor_count_ and self.experimental_anchor_count_ != x.experimental_anchor_count_: return 0
    if self.has_dropped_anchor_count_ != x.has_dropped_anchor_count_: return 0
    if self.has_dropped_anchor_count_ and self.dropped_anchor_count_ != x.dropped_anchor_count_: return 0
    if self.has_dropped_local_anchor_count_ != x.has_dropped_local_anchor_count_: return 0
    if self.has_dropped_local_anchor_count_ and self.dropped_local_anchor_count_ != x.dropped_local_anchor_count_: return 0
    if self.has_dropped_nonlocal_anchor_count_ != x.has_dropped_nonlocal_anchor_count_: return 0
    if self.has_dropped_nonlocal_anchor_count_ and self.dropped_nonlocal_anchor_count_ != x.dropped_nonlocal_anchor_count_: return 0
    if self.has_dropped_normal_anchor_count_ != x.has_dropped_normal_anchor_count_: return 0
    if self.has_dropped_normal_anchor_count_ and self.dropped_normal_anchor_count_ != x.dropped_normal_anchor_count_: return 0
    if self.has_dropped_supplemental_anchor_count_ != x.has_dropped_supplemental_anchor_count_: return 0
    if self.has_dropped_supplemental_anchor_count_ and self.dropped_supplemental_anchor_count_ != x.dropped_supplemental_anchor_count_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_anchor_count_): n += 1 + self.lengthVarInt64(self.anchor_count_)
    if (self.has_local_anchor_count_): n += 1 + self.lengthVarInt64(self.local_anchor_count_)
    if (self.has_nonlocal_anchor_count_): n += 1 + self.lengthVarInt64(self.nonlocal_anchor_count_)
    if (self.has_normal_anchor_count_): n += 1 + self.lengthVarInt64(self.normal_anchor_count_)
    if (self.has_supplemental_anchor_count_): n += 1 + self.lengthVarInt64(self.supplemental_anchor_count_)
    if (self.has_experimental_anchor_count_): n += 1 + self.lengthVarInt64(self.experimental_anchor_count_)
    if (self.has_dropped_anchor_count_): n += 1 + self.lengthVarInt64(self.dropped_anchor_count_)
    if (self.has_dropped_local_anchor_count_): n += 1 + self.lengthVarInt64(self.dropped_local_anchor_count_)
    if (self.has_dropped_nonlocal_anchor_count_): n += 1 + self.lengthVarInt64(self.dropped_nonlocal_anchor_count_)
    if (self.has_dropped_normal_anchor_count_): n += 1 + self.lengthVarInt64(self.dropped_normal_anchor_count_)
    if (self.has_dropped_supplemental_anchor_count_): n += 1 + self.lengthVarInt64(self.dropped_supplemental_anchor_count_)
    return n + 0

  def Clear(self):
    self.clear_anchor_count()
    self.clear_local_anchor_count()
    self.clear_nonlocal_anchor_count()
    self.clear_normal_anchor_count()
    self.clear_supplemental_anchor_count()
    self.clear_experimental_anchor_count()
    self.clear_dropped_anchor_count()
    self.clear_dropped_local_anchor_count()
    self.clear_dropped_nonlocal_anchor_count()
    self.clear_dropped_normal_anchor_count()
    self.clear_dropped_supplemental_anchor_count()

  def OutputUnchecked(self, out):
    if (self.has_anchor_count_):
      out.putVarInt32(8)
      out.putVarInt64(self.anchor_count_)
    if (self.has_local_anchor_count_):
      out.putVarInt32(16)
      out.putVarInt64(self.local_anchor_count_)
    if (self.has_nonlocal_anchor_count_):
      out.putVarInt32(24)
      out.putVarInt64(self.nonlocal_anchor_count_)
    if (self.has_normal_anchor_count_):
      out.putVarInt32(32)
      out.putVarInt64(self.normal_anchor_count_)
    if (self.has_supplemental_anchor_count_):
      out.putVarInt32(40)
      out.putVarInt64(self.supplemental_anchor_count_)
    if (self.has_experimental_anchor_count_):
      out.putVarInt32(56)
      out.putVarInt64(self.experimental_anchor_count_)
    if (self.has_dropped_anchor_count_):
      out.putVarInt32(64)
      out.putVarInt64(self.dropped_anchor_count_)
    if (self.has_dropped_local_anchor_count_):
      out.putVarInt32(72)
      out.putVarInt64(self.dropped_local_anchor_count_)
    if (self.has_dropped_nonlocal_anchor_count_):
      out.putVarInt32(80)
      out.putVarInt64(self.dropped_nonlocal_anchor_count_)
    if (self.has_dropped_normal_anchor_count_):
      out.putVarInt32(88)
      out.putVarInt64(self.dropped_normal_anchor_count_)
    if (self.has_dropped_supplemental_anchor_count_):
      out.putVarInt32(96)
      out.putVarInt64(self.dropped_supplemental_anchor_count_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_anchor_count(d.getVarInt64())
        continue
      if tt == 16:
        self.set_local_anchor_count(d.getVarInt64())
        continue
      if tt == 24:
        self.set_nonlocal_anchor_count(d.getVarInt64())
        continue
      if tt == 32:
        self.set_normal_anchor_count(d.getVarInt64())
        continue
      if tt == 40:
        self.set_supplemental_anchor_count(d.getVarInt64())
        continue
      if tt == 56:
        self.set_experimental_anchor_count(d.getVarInt64())
        continue
      if tt == 64:
        self.set_dropped_anchor_count(d.getVarInt64())
        continue
      if tt == 72:
        self.set_dropped_local_anchor_count(d.getVarInt64())
        continue
      if tt == 80:
        self.set_dropped_nonlocal_anchor_count(d.getVarInt64())
        continue
      if tt == 88:
        self.set_dropped_normal_anchor_count(d.getVarInt64())
        continue
      if tt == 96:
        self.set_dropped_supplemental_anchor_count(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_anchor_count_: res+=prefix+("anchor_count: %s\n" % self.DebugFormatInt64(self.anchor_count_))
    if self.has_local_anchor_count_: res+=prefix+("local_anchor_count: %s\n" % self.DebugFormatInt64(self.local_anchor_count_))
    if self.has_nonlocal_anchor_count_: res+=prefix+("nonlocal_anchor_count: %s\n" % self.DebugFormatInt64(self.nonlocal_anchor_count_))
    if self.has_normal_anchor_count_: res+=prefix+("normal_anchor_count: %s\n" % self.DebugFormatInt64(self.normal_anchor_count_))
    if self.has_supplemental_anchor_count_: res+=prefix+("supplemental_anchor_count: %s\n" % self.DebugFormatInt64(self.supplemental_anchor_count_))
    if self.has_experimental_anchor_count_: res+=prefix+("experimental_anchor_count: %s\n" % self.DebugFormatInt64(self.experimental_anchor_count_))
    if self.has_dropped_anchor_count_: res+=prefix+("dropped_anchor_count: %s\n" % self.DebugFormatInt64(self.dropped_anchor_count_))
    if self.has_dropped_local_anchor_count_: res+=prefix+("dropped_local_anchor_count: %s\n" % self.DebugFormatInt64(self.dropped_local_anchor_count_))
    if self.has_dropped_nonlocal_anchor_count_: res+=prefix+("dropped_nonlocal_anchor_count: %s\n" % self.DebugFormatInt64(self.dropped_nonlocal_anchor_count_))
    if self.has_dropped_normal_anchor_count_: res+=prefix+("dropped_normal_anchor_count: %s\n" % self.DebugFormatInt64(self.dropped_normal_anchor_count_))
    if self.has_dropped_supplemental_anchor_count_: res+=prefix+("dropped_supplemental_anchor_count: %s\n" % self.DebugFormatInt64(self.dropped_supplemental_anchor_count_))
    return res

  kanchor_count = 1
  klocal_anchor_count = 2
  knonlocal_anchor_count = 3
  knormal_anchor_count = 4
  ksupplemental_anchor_count = 5
  kexperimental_anchor_count = 7
  kdropped_anchor_count = 8
  kdropped_local_anchor_count = 9
  kdropped_nonlocal_anchor_count = 10
  kdropped_normal_anchor_count = 11
  kdropped_supplemental_anchor_count = 12

  _TEXT = (
   "ErrorCode",  #   0
   "anchor_count",  #   1
   "local_anchor_count",  #   2
   "nonlocal_anchor_count",  #   3
   "normal_anchor_count",  #   4
   "supplemental_anchor_count",  #   5
   None,  #   6
   "experimental_anchor_count",  #   7
   "dropped_anchor_count",  #   8
   "dropped_local_anchor_count",  #   9
   "dropped_nonlocal_anchor_count",  #  10
   "dropped_normal_anchor_count",  #  11
   "dropped_supplemental_anchor_count",  #  12
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.MAX_TYPE,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x18,
    0x73,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x10,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x53,
    0x74,
    0x61,
    0x74,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x73,
    0x13,
    0x1a,
    0x0c,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x6e,
    0x6f,
    0x6e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x6e,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x5f,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x5f,
    0x6e,
    0x6f,
    0x6e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x5f,
    0x6e,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x5f,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xd2,
    0xc5,
    0xa1,
    0x03,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['Anchors','Anchors_AnchorSource','Anchors_Anchor','Anchors_RedundantAnchorInfo','Links','AnchorStatistics']
