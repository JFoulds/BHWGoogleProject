# This file automatically generated by protocol-compiler from science_search/citation/science_citation.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

from google3.science_search.citation.legal_citation_pb import LegalCitation
from google3.science_search.citation.legal_citation_pb import LegalDate
from google3.science_search.citation.legal_citation_pb import LegalPerson
class ScienceCitationAnchor(ProtocolBuffer.ProtocolMessage):

  UNKNOWN_TYPE =    0 
  LEADING_TEXT =    1 
  CITATION_TEXT =    2 
  TRAILING_TEXT =    3 
  FORMAL_COMMENT =    4 
  SUMMARY      =    5 

  _Type_NAMES = {
    0: "UNKNOWN_TYPE",
    1: "LEADING_TEXT",
    2: "CITATION_TEXT",
    3: "TRAILING_TEXT",
    4: "FORMAL_COMMENT",
    5: "SUMMARY",
  }

  def Type_Name(cls, x): return cls._Type_NAMES.get(x, "")
  Type_Name = classmethod(Type_Name)


  MIN_WEIGHT   =    1 
  MAX_WEIGHT   =  128 

  _Weights_NAMES = {
    1: "MIN_WEIGHT",
    128: "MAX_WEIGHT",
  }

  def Weights_Name(cls, x): return cls._Weights_NAMES.get(x, "")
  Weights_Name = classmethod(Weights_Name)

  def __init__(self, contents=None):
    self.text_ = ""
    self.face_ = 0
    self.size_ = 0
    self.type_ = 0
    self.weight_ = 0
    self.srcfp_ = 0
    self.count_ = 1
    self.has_text_ = 0
    self.has_face_ = 0
    self.has_size_ = 0
    self.has_type_ = 0
    self.has_weight_ = 0
    self.has_srcfp_ = 0
    self.has_count_ = 0
    if contents is not None: self.MergeFromString(contents)

  def text(self): return self.text_

  def set_text(self, x):
    self.has_text_ = 1
    self.text_ = x

  def clear_text(self):
    self.has_text_ = 0
    self.text_ = ""

  def has_text(self): return self.has_text_

  def face(self): return self.face_

  def set_face(self, x):
    self.has_face_ = 1
    self.face_ = x

  def clear_face(self):
    self.has_face_ = 0
    self.face_ = 0

  def has_face(self): return self.has_face_

  def size(self): return self.size_

  def set_size(self, x):
    self.has_size_ = 1
    self.size_ = x

  def clear_size(self):
    self.has_size_ = 0
    self.size_ = 0

  def has_size(self): return self.has_size_

  def type(self): return self.type_

  def set_type(self, x):
    self.has_type_ = 1
    self.type_ = x

  def clear_type(self):
    self.has_type_ = 0
    self.type_ = 0

  def has_type(self): return self.has_type_

  def weight(self): return self.weight_

  def set_weight(self, x):
    self.has_weight_ = 1
    self.weight_ = x

  def clear_weight(self):
    self.has_weight_ = 0
    self.weight_ = 0

  def has_weight(self): return self.has_weight_

  def srcfp(self): return self.srcfp_

  def set_srcfp(self, x):
    self.has_srcfp_ = 1
    self.srcfp_ = x

  def clear_srcfp(self):
    self.has_srcfp_ = 0
    self.srcfp_ = 0

  def has_srcfp(self): return self.has_srcfp_

  def count(self): return self.count_

  def set_count(self, x):
    self.has_count_ = 1
    self.count_ = x

  def clear_count(self):
    self.has_count_ = 0
    self.count_ = 1

  def has_count(self): return self.has_count_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_text()): self.set_text(x.text())
    if (x.has_face()): self.set_face(x.face())
    if (x.has_size()): self.set_size(x.size())
    if (x.has_type()): self.set_type(x.type())
    if (x.has_weight()): self.set_weight(x.weight())
    if (x.has_srcfp()): self.set_srcfp(x.srcfp())
    if (x.has_count()): self.set_count(x.count())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceCitationAnchor', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceCitationAnchor')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceCitationAnchor', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceCitationAnchor', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceCitationAnchor', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_text_ != x.has_text_: return 0
    if self.has_text_ and self.text_ != x.text_: return 0
    if self.has_face_ != x.has_face_: return 0
    if self.has_face_ and self.face_ != x.face_: return 0
    if self.has_size_ != x.has_size_: return 0
    if self.has_size_ and self.size_ != x.size_: return 0
    if self.has_type_ != x.has_type_: return 0
    if self.has_type_ and self.type_ != x.type_: return 0
    if self.has_weight_ != x.has_weight_: return 0
    if self.has_weight_ and self.weight_ != x.weight_: return 0
    if self.has_srcfp_ != x.has_srcfp_: return 0
    if self.has_srcfp_ and self.srcfp_ != x.srcfp_: return 0
    if self.has_count_ != x.has_count_: return 0
    if self.has_count_ and self.count_ != x.count_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_text_): n += 1 + self.lengthString(len(self.text_))
    if (self.has_face_): n += 1 + self.lengthVarInt64(self.face_)
    if (self.has_size_): n += 1 + self.lengthVarInt64(self.size_)
    if (self.has_type_): n += 1 + self.lengthVarInt64(self.type_)
    if (self.has_weight_): n += 1 + self.lengthVarInt64(self.weight_)
    if (self.has_srcfp_): n += 1 + self.lengthVarInt64(self.srcfp_)
    if (self.has_count_): n += 1 + self.lengthVarInt64(self.count_)
    return n + 0

  def Clear(self):
    self.clear_text()
    self.clear_face()
    self.clear_size()
    self.clear_type()
    self.clear_weight()
    self.clear_srcfp()
    self.clear_count()

  def OutputUnchecked(self, out):
    if (self.has_text_):
      out.putVarInt32(10)
      out.putPrefixedString(self.text_)
    if (self.has_face_):
      out.putVarInt32(16)
      out.putVarInt32(self.face_)
    if (self.has_size_):
      out.putVarInt32(24)
      out.putVarInt32(self.size_)
    if (self.has_type_):
      out.putVarInt32(32)
      out.putVarInt32(self.type_)
    if (self.has_weight_):
      out.putVarInt32(40)
      out.putVarInt32(self.weight_)
    if (self.has_srcfp_):
      out.putVarInt32(48)
      out.putVarUint64(self.srcfp_)
    if (self.has_count_):
      out.putVarInt32(56)
      out.putVarInt32(self.count_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_text(d.getPrefixedString())
        continue
      if tt == 16:
        self.set_face(d.getVarInt32())
        continue
      if tt == 24:
        self.set_size(d.getVarInt32())
        continue
      if tt == 32:
        self.set_type(d.getVarInt32())
        continue
      if tt == 40:
        self.set_weight(d.getVarInt32())
        continue
      if tt == 48:
        self.set_srcfp(d.getVarUint64())
        continue
      if tt == 56:
        self.set_count(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_text_: res+=prefix+("text: %s\n" % self.DebugFormatString(self.text_))
    if self.has_face_: res+=prefix+("face: %s\n" % self.DebugFormatInt32(self.face_))
    if self.has_size_: res+=prefix+("size: %s\n" % self.DebugFormatInt32(self.size_))
    if self.has_type_: res+=prefix+("type: %s\n" % self.DebugFormatInt32(self.type_))
    if self.has_weight_: res+=prefix+("weight: %s\n" % self.DebugFormatInt32(self.weight_))
    if self.has_srcfp_: res+=prefix+("SrcFP: %s\n" % self.DebugFormatInt64(self.srcfp_))
    if self.has_count_: res+=prefix+("count: %s\n" % self.DebugFormatInt32(self.count_))
    return res

  ktext = 1
  kface = 2
  ksize = 3
  ktype = 4
  kweight = 5
  kSrcFP = 6
  kcount = 7

  _TEXT = (
   "ErrorCode",  #   0
   "text",  #   1
   "face",  #   2
   "size",  #   3
   "type",  #   4
   "weight",  #   5
   "SrcFP",  #   6
   "count",  #   7
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2e,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2f,
    0x63,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2f,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x63,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x15,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x13,
    0x1a,
    0x04,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x66,
    0x61,
    0x63,
    0x65,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x53,
    0x72,
    0x63,
    0x46,
    0x50,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x04,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x55,
    0x4e,
    0x4b,
    0x4e,
    0x4f,
    0x57,
    0x4e,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x4c,
    0x45,
    0x41,
    0x44,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x54,
    0x45,
    0x58,
    0x54,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x43,
    0x49,
    0x54,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x5f,
    0x54,
    0x45,
    0x58,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x54,
    0x52,
    0x41,
    0x49,
    0x4c,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x54,
    0x45,
    0x58,
    0x54,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x46,
    0x4f,
    0x52,
    0x4d,
    0x41,
    0x4c,
    0x5f,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x45,
    0x4e,
    0x54,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x07,
    0x53,
    0x55,
    0x4d,
    0x4d,
    0x41,
    0x52,
    0x59,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x07,
    0x57,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x4d,
    0x49,
    0x4e,
    0x5f,
    0x57,
    0x45,
    0x49,
    0x47,
    0x48,
    0x54,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x4d,
    0x41,
    0x58,
    0x5f,
    0x57,
    0x45,
    0x49,
    0x47,
    0x48,
    0x54,
    0x98,
    0x01,
    0x80,
    0x01,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class ScienceOceanView_CountryView(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.viewtype_ = 0
    self.countrycode_ = ""
    self.has_viewtype_ = 0
    self.has_countrycode_ = 0
    if contents is not None: self.MergeFromString(contents)

  def viewtype(self): return self.viewtype_

  def set_viewtype(self, x):
    self.has_viewtype_ = 1
    self.viewtype_ = x

  def clear_viewtype(self):
    self.has_viewtype_ = 0
    self.viewtype_ = 0

  def has_viewtype(self): return self.has_viewtype_

  def countrycode(self): return self.countrycode_

  def set_countrycode(self, x):
    self.has_countrycode_ = 1
    self.countrycode_ = x

  def clear_countrycode(self):
    self.has_countrycode_ = 0
    self.countrycode_ = ""

  def has_countrycode(self): return self.has_countrycode_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_viewtype()): self.set_viewtype(x.viewtype())
    if (x.has_countrycode()): self.set_countrycode(x.countrycode())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceOceanView', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceOceanView')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceOceanView', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceOceanView', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceOceanView', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_viewtype_ != x.has_viewtype_: return 0
    if self.has_viewtype_ and self.viewtype_ != x.viewtype_: return 0
    if self.has_countrycode_ != x.has_countrycode_: return 0
    if self.has_countrycode_ and self.countrycode_ != x.countrycode_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_viewtype_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: viewtype not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.viewtype_)
    if (self.has_countrycode_): n += 1 + self.lengthString(len(self.countrycode_))
    return n + 1

  def Clear(self):
    self.clear_viewtype()
    self.clear_countrycode()

  def OutputUnchecked(self, out):
    out.putVarInt32(16)
    out.putVarInt32(self.viewtype_)
    if (self.has_countrycode_):
      out.putVarInt32(26)
      out.putPrefixedString(self.countrycode_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 16:
        self.set_viewtype(d.getVarInt32())
        continue
      if tt == 26:
        self.set_countrycode(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_viewtype_: res+=prefix+("ViewType: %s\n" % self.DebugFormatInt32(self.viewtype_))
    if self.has_countrycode_: res+=prefix+("CountryCode: %s\n" % self.DebugFormatString(self.countrycode_))
    return res

class ScienceOceanView(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.countryview_ = []
    if contents is not None: self.MergeFromString(contents)

  def countryview_size(self): return len(self.countryview_)
  def countryview_list(self): return self.countryview_

  def countryview(self, i):
    return self.countryview_[i]

  def mutable_countryview(self, i):
    return self.countryview_[i]

  def add_countryview(self):
    x = ScienceOceanView_CountryView()
    self.countryview_.append(x)
    return x

  def clear_countryview(self):
    self.countryview_ = []

  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.countryview_size()): self.add_countryview().CopyFrom(x.countryview(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceOceanView', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceOceanView')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceOceanView', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceOceanView', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceOceanView', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.countryview_) != len(x.countryview_): return 0
    for e1, e2 in zip(self.countryview_, x.countryview_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.countryview_)):
      if (not self.countryview_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.countryview_)
    for i in xrange(len(self.countryview_)): n += self.countryview_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_countryview()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.countryview_)):
      out.putVarInt32(11)
      self.countryview_[i].OutputUnchecked(out)
      out.putVarInt32(12)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_countryview().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.countryview_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("CountryView%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kCountryViewGroup = 1
  kCountryViewViewType = 2
  kCountryViewCountryCode = 3

  _TEXT = (
   "ErrorCode",  #   0
   "CountryView",  #   1
   "ViewType",  #   2
   "CountryCode",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2e,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2f,
    0x63,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2f,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x63,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x10,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x4f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x56,
    0x69,
    0x65,
    0x77,
    0x13,
    0x1a,
    0x0b,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x56,
    0x69,
    0x65,
    0x77,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x56,
    0x69,
    0x65,
    0x77,
    0x2e,
    0x56,
    0x69,
    0x65,
    0x77,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x56,
    0x69,
    0x65,
    0x77,
    0x2e,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class ScienceCitation_Author(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.lastname_ = ""
    self.othernames_ = ""
    self.department_ = ""
    self.institution_ = ""
    self.email_ = ""
    self.comment_ = ""
    self.iscjkforeignname_ = 0
    self.type_ = 0
    self.has_lastname_ = 0
    self.has_othernames_ = 0
    self.has_department_ = 0
    self.has_institution_ = 0
    self.has_email_ = 0
    self.has_comment_ = 0
    self.has_iscjkforeignname_ = 0
    self.has_type_ = 0
    if contents is not None: self.MergeFromString(contents)

  def lastname(self): return self.lastname_

  def set_lastname(self, x):
    self.has_lastname_ = 1
    self.lastname_ = x

  def clear_lastname(self):
    self.has_lastname_ = 0
    self.lastname_ = ""

  def has_lastname(self): return self.has_lastname_

  def othernames(self): return self.othernames_

  def set_othernames(self, x):
    self.has_othernames_ = 1
    self.othernames_ = x

  def clear_othernames(self):
    self.has_othernames_ = 0
    self.othernames_ = ""

  def has_othernames(self): return self.has_othernames_

  def department(self): return self.department_

  def set_department(self, x):
    self.has_department_ = 1
    self.department_ = x

  def clear_department(self):
    self.has_department_ = 0
    self.department_ = ""

  def has_department(self): return self.has_department_

  def institution(self): return self.institution_

  def set_institution(self, x):
    self.has_institution_ = 1
    self.institution_ = x

  def clear_institution(self):
    self.has_institution_ = 0
    self.institution_ = ""

  def has_institution(self): return self.has_institution_

  def email(self): return self.email_

  def set_email(self, x):
    self.has_email_ = 1
    self.email_ = x

  def clear_email(self):
    self.has_email_ = 0
    self.email_ = ""

  def has_email(self): return self.has_email_

  def comment(self): return self.comment_

  def set_comment(self, x):
    self.has_comment_ = 1
    self.comment_ = x

  def clear_comment(self):
    self.has_comment_ = 0
    self.comment_ = ""

  def has_comment(self): return self.has_comment_

  def iscjkforeignname(self): return self.iscjkforeignname_

  def set_iscjkforeignname(self, x):
    self.has_iscjkforeignname_ = 1
    self.iscjkforeignname_ = x

  def clear_iscjkforeignname(self):
    self.has_iscjkforeignname_ = 0
    self.iscjkforeignname_ = 0

  def has_iscjkforeignname(self): return self.has_iscjkforeignname_

  def type(self): return self.type_

  def set_type(self, x):
    self.has_type_ = 1
    self.type_ = x

  def clear_type(self):
    self.has_type_ = 0
    self.type_ = 0

  def has_type(self): return self.has_type_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_lastname()): self.set_lastname(x.lastname())
    if (x.has_othernames()): self.set_othernames(x.othernames())
    if (x.has_department()): self.set_department(x.department())
    if (x.has_institution()): self.set_institution(x.institution())
    if (x.has_email()): self.set_email(x.email())
    if (x.has_comment()): self.set_comment(x.comment())
    if (x.has_iscjkforeignname()): self.set_iscjkforeignname(x.iscjkforeignname())
    if (x.has_type()): self.set_type(x.type())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceCitation', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceCitation')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceCitation', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceCitation', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceCitation', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_lastname_ != x.has_lastname_: return 0
    if self.has_lastname_ and self.lastname_ != x.lastname_: return 0
    if self.has_othernames_ != x.has_othernames_: return 0
    if self.has_othernames_ and self.othernames_ != x.othernames_: return 0
    if self.has_department_ != x.has_department_: return 0
    if self.has_department_ and self.department_ != x.department_: return 0
    if self.has_institution_ != x.has_institution_: return 0
    if self.has_institution_ and self.institution_ != x.institution_: return 0
    if self.has_email_ != x.has_email_: return 0
    if self.has_email_ and self.email_ != x.email_: return 0
    if self.has_comment_ != x.has_comment_: return 0
    if self.has_comment_ and self.comment_ != x.comment_: return 0
    if self.has_iscjkforeignname_ != x.has_iscjkforeignname_: return 0
    if self.has_iscjkforeignname_ and self.iscjkforeignname_ != x.iscjkforeignname_: return 0
    if self.has_type_ != x.has_type_: return 0
    if self.has_type_ and self.type_ != x.type_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_lastname_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: lastname not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.lastname_))
    if (self.has_othernames_): n += 1 + self.lengthString(len(self.othernames_))
    if (self.has_department_): n += 1 + self.lengthString(len(self.department_))
    if (self.has_institution_): n += 1 + self.lengthString(len(self.institution_))
    if (self.has_email_): n += 2 + self.lengthString(len(self.email_))
    if (self.has_comment_): n += 2 + self.lengthString(len(self.comment_))
    if (self.has_iscjkforeignname_): n += 3
    if (self.has_type_): n += 2 + self.lengthVarInt64(self.type_)
    return n + 1

  def Clear(self):
    self.clear_lastname()
    self.clear_othernames()
    self.clear_department()
    self.clear_institution()
    self.clear_email()
    self.clear_comment()
    self.clear_iscjkforeignname()
    self.clear_type()

  def OutputUnchecked(self, out):
    out.putVarInt32(34)
    out.putPrefixedString(self.lastname_)
    if (self.has_othernames_):
      out.putVarInt32(42)
      out.putPrefixedString(self.othernames_)
    if (self.has_department_):
      out.putVarInt32(50)
      out.putPrefixedString(self.department_)
    if (self.has_institution_):
      out.putVarInt32(58)
      out.putPrefixedString(self.institution_)
    if (self.has_email_):
      out.putVarInt32(282)
      out.putPrefixedString(self.email_)
    if (self.has_comment_):
      out.putVarInt32(666)
      out.putPrefixedString(self.comment_)
    if (self.has_iscjkforeignname_):
      out.putVarInt32(688)
      out.putBoolean(self.iscjkforeignname_)
    if (self.has_type_):
      out.putVarInt32(768)
      out.putVarInt32(self.type_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 28: break
      if tt == 34:
        self.set_lastname(d.getPrefixedString())
        continue
      if tt == 42:
        self.set_othernames(d.getPrefixedString())
        continue
      if tt == 50:
        self.set_department(d.getPrefixedString())
        continue
      if tt == 58:
        self.set_institution(d.getPrefixedString())
        continue
      if tt == 282:
        self.set_email(d.getPrefixedString())
        continue
      if tt == 666:
        self.set_comment(d.getPrefixedString())
        continue
      if tt == 688:
        self.set_iscjkforeignname(d.getBoolean())
        continue
      if tt == 768:
        self.set_type(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_lastname_: res+=prefix+("LastName: %s\n" % self.DebugFormatString(self.lastname_))
    if self.has_othernames_: res+=prefix+("OtherNames: %s\n" % self.DebugFormatString(self.othernames_))
    if self.has_department_: res+=prefix+("Department: %s\n" % self.DebugFormatString(self.department_))
    if self.has_institution_: res+=prefix+("Institution: %s\n" % self.DebugFormatString(self.institution_))
    if self.has_email_: res+=prefix+("Email: %s\n" % self.DebugFormatString(self.email_))
    if self.has_comment_: res+=prefix+("Comment: %s\n" % self.DebugFormatString(self.comment_))
    if self.has_iscjkforeignname_: res+=prefix+("IsCJKForeignName: %s\n" % self.DebugFormatBool(self.iscjkforeignname_))
    if self.has_type_: res+=prefix+("Type: %s\n" % self.DebugFormatInt32(self.type_))
    return res

class ScienceCitation_DownloadURL(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.urlstr_ = ""
    self.downloadmonth_ = 0
    self.downloadday_ = 0
    self.downloadyear_ = 0
    self.contenttype_ = 0
    self.wordcount_ = 0
    self.noindex_ = 0
    self.mustinclude_ = 0
    self.legalmustinclude_ = 0
    self.indexpriority_ = 0
    self.displaypriority_ = 0
    self.displayorg_ = ""
    self.metadataurl_ = ""
    self.pagecount_ = 0
    self.excerptcontent_ = ""
    self.excerptdebuglabel_ = ""
    self.brokenlandingpage_ = 0
    self.oceanview_ = None
    self.has_urlstr_ = 0
    self.has_downloadmonth_ = 0
    self.has_downloadday_ = 0
    self.has_downloadyear_ = 0
    self.has_contenttype_ = 0
    self.has_wordcount_ = 0
    self.has_noindex_ = 0
    self.has_mustinclude_ = 0
    self.has_legalmustinclude_ = 0
    self.has_indexpriority_ = 0
    self.has_displaypriority_ = 0
    self.has_displayorg_ = 0
    self.has_metadataurl_ = 0
    self.has_pagecount_ = 0
    self.has_excerptcontent_ = 0
    self.has_excerptdebuglabel_ = 0
    self.has_brokenlandingpage_ = 0
    self.has_oceanview_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def urlstr(self): return self.urlstr_

  def set_urlstr(self, x):
    self.has_urlstr_ = 1
    self.urlstr_ = x

  def clear_urlstr(self):
    self.has_urlstr_ = 0
    self.urlstr_ = ""

  def has_urlstr(self): return self.has_urlstr_

  def downloadmonth(self): return self.downloadmonth_

  def set_downloadmonth(self, x):
    self.has_downloadmonth_ = 1
    self.downloadmonth_ = x

  def clear_downloadmonth(self):
    self.has_downloadmonth_ = 0
    self.downloadmonth_ = 0

  def has_downloadmonth(self): return self.has_downloadmonth_

  def downloadday(self): return self.downloadday_

  def set_downloadday(self, x):
    self.has_downloadday_ = 1
    self.downloadday_ = x

  def clear_downloadday(self):
    self.has_downloadday_ = 0
    self.downloadday_ = 0

  def has_downloadday(self): return self.has_downloadday_

  def downloadyear(self): return self.downloadyear_

  def set_downloadyear(self, x):
    self.has_downloadyear_ = 1
    self.downloadyear_ = x

  def clear_downloadyear(self):
    self.has_downloadyear_ = 0
    self.downloadyear_ = 0

  def has_downloadyear(self): return self.has_downloadyear_

  def contenttype(self): return self.contenttype_

  def set_contenttype(self, x):
    self.has_contenttype_ = 1
    self.contenttype_ = x

  def clear_contenttype(self):
    self.has_contenttype_ = 0
    self.contenttype_ = 0

  def has_contenttype(self): return self.has_contenttype_

  def wordcount(self): return self.wordcount_

  def set_wordcount(self, x):
    self.has_wordcount_ = 1
    self.wordcount_ = x

  def clear_wordcount(self):
    self.has_wordcount_ = 0
    self.wordcount_ = 0

  def has_wordcount(self): return self.has_wordcount_

  def noindex(self): return self.noindex_

  def set_noindex(self, x):
    self.has_noindex_ = 1
    self.noindex_ = x

  def clear_noindex(self):
    self.has_noindex_ = 0
    self.noindex_ = 0

  def has_noindex(self): return self.has_noindex_

  def mustinclude(self): return self.mustinclude_

  def set_mustinclude(self, x):
    self.has_mustinclude_ = 1
    self.mustinclude_ = x

  def clear_mustinclude(self):
    self.has_mustinclude_ = 0
    self.mustinclude_ = 0

  def has_mustinclude(self): return self.has_mustinclude_

  def legalmustinclude(self): return self.legalmustinclude_

  def set_legalmustinclude(self, x):
    self.has_legalmustinclude_ = 1
    self.legalmustinclude_ = x

  def clear_legalmustinclude(self):
    self.has_legalmustinclude_ = 0
    self.legalmustinclude_ = 0

  def has_legalmustinclude(self): return self.has_legalmustinclude_

  def indexpriority(self): return self.indexpriority_

  def set_indexpriority(self, x):
    self.has_indexpriority_ = 1
    self.indexpriority_ = x

  def clear_indexpriority(self):
    self.has_indexpriority_ = 0
    self.indexpriority_ = 0

  def has_indexpriority(self): return self.has_indexpriority_

  def displaypriority(self): return self.displaypriority_

  def set_displaypriority(self, x):
    self.has_displaypriority_ = 1
    self.displaypriority_ = x

  def clear_displaypriority(self):
    self.has_displaypriority_ = 0
    self.displaypriority_ = 0

  def has_displaypriority(self): return self.has_displaypriority_

  def displayorg(self): return self.displayorg_

  def set_displayorg(self, x):
    self.has_displayorg_ = 1
    self.displayorg_ = x

  def clear_displayorg(self):
    self.has_displayorg_ = 0
    self.displayorg_ = ""

  def has_displayorg(self): return self.has_displayorg_

  def metadataurl(self): return self.metadataurl_

  def set_metadataurl(self, x):
    self.has_metadataurl_ = 1
    self.metadataurl_ = x

  def clear_metadataurl(self):
    self.has_metadataurl_ = 0
    self.metadataurl_ = ""

  def has_metadataurl(self): return self.has_metadataurl_

  def pagecount(self): return self.pagecount_

  def set_pagecount(self, x):
    self.has_pagecount_ = 1
    self.pagecount_ = x

  def clear_pagecount(self):
    self.has_pagecount_ = 0
    self.pagecount_ = 0

  def has_pagecount(self): return self.has_pagecount_

  def excerptcontent(self): return self.excerptcontent_

  def set_excerptcontent(self, x):
    self.has_excerptcontent_ = 1
    self.excerptcontent_ = x

  def clear_excerptcontent(self):
    self.has_excerptcontent_ = 0
    self.excerptcontent_ = ""

  def has_excerptcontent(self): return self.has_excerptcontent_

  def excerptdebuglabel(self): return self.excerptdebuglabel_

  def set_excerptdebuglabel(self, x):
    self.has_excerptdebuglabel_ = 1
    self.excerptdebuglabel_ = x

  def clear_excerptdebuglabel(self):
    self.has_excerptdebuglabel_ = 0
    self.excerptdebuglabel_ = ""

  def has_excerptdebuglabel(self): return self.has_excerptdebuglabel_

  def brokenlandingpage(self): return self.brokenlandingpage_

  def set_brokenlandingpage(self, x):
    self.has_brokenlandingpage_ = 1
    self.brokenlandingpage_ = x

  def clear_brokenlandingpage(self):
    self.has_brokenlandingpage_ = 0
    self.brokenlandingpage_ = 0

  def has_brokenlandingpage(self): return self.has_brokenlandingpage_

  def oceanview(self):
    if self.oceanview_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.oceanview_ is None: self.oceanview_ = ScienceOceanView()
      finally:
        self.lazy_init_lock_.release()
    return self.oceanview_

  def mutable_oceanview(self): self.has_oceanview_ = 1; return self.oceanview()

  def clear_oceanview(self):
    #Warning: this method does not acquire the lock.
    self.has_oceanview_ = 0;
    if self.oceanview_ is not None: self.oceanview_.Clear()

  def has_oceanview(self): return self.has_oceanview_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_urlstr()): self.set_urlstr(x.urlstr())
    if (x.has_downloadmonth()): self.set_downloadmonth(x.downloadmonth())
    if (x.has_downloadday()): self.set_downloadday(x.downloadday())
    if (x.has_downloadyear()): self.set_downloadyear(x.downloadyear())
    if (x.has_contenttype()): self.set_contenttype(x.contenttype())
    if (x.has_wordcount()): self.set_wordcount(x.wordcount())
    if (x.has_noindex()): self.set_noindex(x.noindex())
    if (x.has_mustinclude()): self.set_mustinclude(x.mustinclude())
    if (x.has_legalmustinclude()): self.set_legalmustinclude(x.legalmustinclude())
    if (x.has_indexpriority()): self.set_indexpriority(x.indexpriority())
    if (x.has_displaypriority()): self.set_displaypriority(x.displaypriority())
    if (x.has_displayorg()): self.set_displayorg(x.displayorg())
    if (x.has_metadataurl()): self.set_metadataurl(x.metadataurl())
    if (x.has_pagecount()): self.set_pagecount(x.pagecount())
    if (x.has_excerptcontent()): self.set_excerptcontent(x.excerptcontent())
    if (x.has_excerptdebuglabel()): self.set_excerptdebuglabel(x.excerptdebuglabel())
    if (x.has_brokenlandingpage()): self.set_brokenlandingpage(x.brokenlandingpage())
    if (x.has_oceanview()): self.mutable_oceanview().MergeFrom(x.oceanview())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceCitation', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceCitation')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceCitation', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceCitation', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceCitation', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_urlstr_ != x.has_urlstr_: return 0
    if self.has_urlstr_ and self.urlstr_ != x.urlstr_: return 0
    if self.has_downloadmonth_ != x.has_downloadmonth_: return 0
    if self.has_downloadmonth_ and self.downloadmonth_ != x.downloadmonth_: return 0
    if self.has_downloadday_ != x.has_downloadday_: return 0
    if self.has_downloadday_ and self.downloadday_ != x.downloadday_: return 0
    if self.has_downloadyear_ != x.has_downloadyear_: return 0
    if self.has_downloadyear_ and self.downloadyear_ != x.downloadyear_: return 0
    if self.has_contenttype_ != x.has_contenttype_: return 0
    if self.has_contenttype_ and self.contenttype_ != x.contenttype_: return 0
    if self.has_wordcount_ != x.has_wordcount_: return 0
    if self.has_wordcount_ and self.wordcount_ != x.wordcount_: return 0
    if self.has_noindex_ != x.has_noindex_: return 0
    if self.has_noindex_ and self.noindex_ != x.noindex_: return 0
    if self.has_mustinclude_ != x.has_mustinclude_: return 0
    if self.has_mustinclude_ and self.mustinclude_ != x.mustinclude_: return 0
    if self.has_legalmustinclude_ != x.has_legalmustinclude_: return 0
    if self.has_legalmustinclude_ and self.legalmustinclude_ != x.legalmustinclude_: return 0
    if self.has_indexpriority_ != x.has_indexpriority_: return 0
    if self.has_indexpriority_ and self.indexpriority_ != x.indexpriority_: return 0
    if self.has_displaypriority_ != x.has_displaypriority_: return 0
    if self.has_displaypriority_ and self.displaypriority_ != x.displaypriority_: return 0
    if self.has_displayorg_ != x.has_displayorg_: return 0
    if self.has_displayorg_ and self.displayorg_ != x.displayorg_: return 0
    if self.has_metadataurl_ != x.has_metadataurl_: return 0
    if self.has_metadataurl_ and self.metadataurl_ != x.metadataurl_: return 0
    if self.has_pagecount_ != x.has_pagecount_: return 0
    if self.has_pagecount_ and self.pagecount_ != x.pagecount_: return 0
    if self.has_excerptcontent_ != x.has_excerptcontent_: return 0
    if self.has_excerptcontent_ and self.excerptcontent_ != x.excerptcontent_: return 0
    if self.has_excerptdebuglabel_ != x.has_excerptdebuglabel_: return 0
    if self.has_excerptdebuglabel_ and self.excerptdebuglabel_ != x.excerptdebuglabel_: return 0
    if self.has_brokenlandingpage_ != x.has_brokenlandingpage_: return 0
    if self.has_brokenlandingpage_ and self.brokenlandingpage_ != x.brokenlandingpage_: return 0
    if self.has_oceanview_ != x.has_oceanview_: return 0
    if self.has_oceanview_ and self.oceanview_ != x.oceanview_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_urlstr_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: urlstr not set.')
    if (self.has_oceanview_ and not self.oceanview_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.urlstr_))
    if (self.has_downloadmonth_): n += 2 + self.lengthVarInt64(self.downloadmonth_)
    if (self.has_downloadday_): n += 2 + self.lengthVarInt64(self.downloadday_)
    if (self.has_downloadyear_): n += 2 + self.lengthVarInt64(self.downloadyear_)
    if (self.has_contenttype_): n += 2 + self.lengthVarInt64(self.contenttype_)
    if (self.has_wordcount_): n += 2 + self.lengthVarInt64(self.wordcount_)
    if (self.has_noindex_): n += 3
    if (self.has_mustinclude_): n += 3
    if (self.has_legalmustinclude_): n += 3
    if (self.has_indexpriority_): n += 2 + self.lengthVarInt64(self.indexpriority_)
    if (self.has_displaypriority_): n += 2 + self.lengthVarInt64(self.displaypriority_)
    if (self.has_displayorg_): n += 2 + self.lengthString(len(self.displayorg_))
    if (self.has_metadataurl_): n += 2 + self.lengthString(len(self.metadataurl_))
    if (self.has_pagecount_): n += 2 + self.lengthVarInt64(self.pagecount_)
    if (self.has_excerptcontent_): n += 2 + self.lengthString(len(self.excerptcontent_))
    if (self.has_excerptdebuglabel_): n += 2 + self.lengthString(len(self.excerptdebuglabel_))
    if (self.has_brokenlandingpage_): n += 3
    if (self.has_oceanview_): n += 2 + self.lengthString(self.oceanview_.ByteSize())
    return n + 2

  def Clear(self):
    self.clear_urlstr()
    self.clear_downloadmonth()
    self.clear_downloadday()
    self.clear_downloadyear()
    self.clear_contenttype()
    self.clear_wordcount()
    self.clear_noindex()
    self.clear_mustinclude()
    self.clear_legalmustinclude()
    self.clear_indexpriority()
    self.clear_displaypriority()
    self.clear_displayorg()
    self.clear_metadataurl()
    self.clear_pagecount()
    self.clear_excerptcontent()
    self.clear_excerptdebuglabel()
    self.clear_brokenlandingpage()
    self.clear_oceanview()

  def OutputUnchecked(self, out):
    out.putVarInt32(234)
    out.putPrefixedString(self.urlstr_)
    if (self.has_downloadmonth_):
      out.putVarInt32(240)
      out.putVarInt32(self.downloadmonth_)
    if (self.has_downloadday_):
      out.putVarInt32(248)
      out.putVarInt32(self.downloadday_)
    if (self.has_downloadyear_):
      out.putVarInt32(256)
      out.putVarInt32(self.downloadyear_)
    if (self.has_contenttype_):
      out.putVarInt32(320)
      out.putVarInt32(self.contenttype_)
    if (self.has_wordcount_):
      out.putVarInt32(352)
      out.putVarInt32(self.wordcount_)
    if (self.has_noindex_):
      out.putVarInt32(360)
      out.putBoolean(self.noindex_)
    if (self.has_mustinclude_):
      out.putVarInt32(496)
      out.putBoolean(self.mustinclude_)
    if (self.has_displaypriority_):
      out.putVarInt32(648)
      out.putVarInt32(self.displaypriority_)
    if (self.has_displayorg_):
      out.putVarInt32(674)
      out.putPrefixedString(self.displayorg_)
    if (self.has_metadataurl_):
      out.putVarInt32(682)
      out.putPrefixedString(self.metadataurl_)
    if (self.has_indexpriority_):
      out.putVarInt32(752)
      out.putVarInt32(self.indexpriority_)
    if (self.has_pagecount_):
      out.putVarInt32(816)
      out.putVarInt32(self.pagecount_)
    if (self.has_excerptcontent_):
      out.putVarInt32(826)
      out.putPrefixedString(self.excerptcontent_)
    if (self.has_excerptdebuglabel_):
      out.putVarInt32(834)
      out.putPrefixedString(self.excerptdebuglabel_)
    if (self.has_legalmustinclude_):
      out.putVarInt32(864)
      out.putBoolean(self.legalmustinclude_)
    if (self.has_brokenlandingpage_):
      out.putVarInt32(920)
      out.putBoolean(self.brokenlandingpage_)
    if (self.has_oceanview_):
      out.putVarInt32(930)
      out.putVarInt32(self.oceanview_.ByteSize())
      self.oceanview_.OutputUnchecked(out)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 228: break
      if tt == 234:
        self.set_urlstr(d.getPrefixedString())
        continue
      if tt == 240:
        self.set_downloadmonth(d.getVarInt32())
        continue
      if tt == 248:
        self.set_downloadday(d.getVarInt32())
        continue
      if tt == 256:
        self.set_downloadyear(d.getVarInt32())
        continue
      if tt == 320:
        self.set_contenttype(d.getVarInt32())
        continue
      if tt == 352:
        self.set_wordcount(d.getVarInt32())
        continue
      if tt == 360:
        self.set_noindex(d.getBoolean())
        continue
      if tt == 496:
        self.set_mustinclude(d.getBoolean())
        continue
      if tt == 648:
        self.set_displaypriority(d.getVarInt32())
        continue
      if tt == 674:
        self.set_displayorg(d.getPrefixedString())
        continue
      if tt == 682:
        self.set_metadataurl(d.getPrefixedString())
        continue
      if tt == 752:
        self.set_indexpriority(d.getVarInt32())
        continue
      if tt == 816:
        self.set_pagecount(d.getVarInt32())
        continue
      if tt == 826:
        self.set_excerptcontent(d.getPrefixedString())
        continue
      if tt == 834:
        self.set_excerptdebuglabel(d.getPrefixedString())
        continue
      if tt == 864:
        self.set_legalmustinclude(d.getBoolean())
        continue
      if tt == 920:
        self.set_brokenlandingpage(d.getBoolean())
        continue
      if tt == 930:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_oceanview().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_urlstr_: res+=prefix+("UrlStr: %s\n" % self.DebugFormatString(self.urlstr_))
    if self.has_downloadmonth_: res+=prefix+("DownloadMonth: %s\n" % self.DebugFormatInt32(self.downloadmonth_))
    if self.has_downloadday_: res+=prefix+("DownloadDay: %s\n" % self.DebugFormatInt32(self.downloadday_))
    if self.has_downloadyear_: res+=prefix+("DownloadYear: %s\n" % self.DebugFormatInt32(self.downloadyear_))
    if self.has_contenttype_: res+=prefix+("ContentType: %s\n" % self.DebugFormatInt32(self.contenttype_))
    if self.has_wordcount_: res+=prefix+("WordCount: %s\n" % self.DebugFormatInt32(self.wordcount_))
    if self.has_noindex_: res+=prefix+("NoIndex: %s\n" % self.DebugFormatBool(self.noindex_))
    if self.has_mustinclude_: res+=prefix+("MustInclude: %s\n" % self.DebugFormatBool(self.mustinclude_))
    if self.has_legalmustinclude_: res+=prefix+("LegalMustInclude: %s\n" % self.DebugFormatBool(self.legalmustinclude_))
    if self.has_indexpriority_: res+=prefix+("IndexPriority: %s\n" % self.DebugFormatInt32(self.indexpriority_))
    if self.has_displaypriority_: res+=prefix+("DisplayPriority: %s\n" % self.DebugFormatInt32(self.displaypriority_))
    if self.has_displayorg_: res+=prefix+("DisplayOrg: %s\n" % self.DebugFormatString(self.displayorg_))
    if self.has_metadataurl_: res+=prefix+("MetadataUrl: %s\n" % self.DebugFormatString(self.metadataurl_))
    if self.has_pagecount_: res+=prefix+("PageCount: %s\n" % self.DebugFormatInt32(self.pagecount_))
    if self.has_excerptcontent_: res+=prefix+("ExcerptContent: %s\n" % self.DebugFormatString(self.excerptcontent_))
    if self.has_excerptdebuglabel_: res+=prefix+("ExcerptDebugLabel: %s\n" % self.DebugFormatString(self.excerptdebuglabel_))
    if self.has_brokenlandingpage_: res+=prefix+("BrokenLandingPage: %s\n" % self.DebugFormatBool(self.brokenlandingpage_))
    if self.has_oceanview_:
      res+=prefix+"OceanView <\n"
      res+=self.oceanview_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

class ScienceCitation_Subject(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.name_ = ""
    self.probability_ = 0.0
    self.has_name_ = 0
    self.has_probability_ = 0
    if contents is not None: self.MergeFromString(contents)

  def name(self): return self.name_

  def set_name(self, x):
    self.has_name_ = 1
    self.name_ = x

  def clear_name(self):
    self.has_name_ = 0
    self.name_ = ""

  def has_name(self): return self.has_name_

  def probability(self): return self.probability_

  def set_probability(self, x):
    self.has_probability_ = 1
    self.probability_ = x

  def clear_probability(self):
    self.has_probability_ = 0
    self.probability_ = 0.0

  def has_probability(self): return self.has_probability_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_name()): self.set_name(x.name())
    if (x.has_probability()): self.set_probability(x.probability())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceCitation', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceCitation')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceCitation', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceCitation', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceCitation', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_name_ != x.has_name_: return 0
    if self.has_name_ and self.name_ != x.name_: return 0
    if self.has_probability_ != x.has_probability_: return 0
    if self.has_probability_ and self.probability_ != x.probability_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_name_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: name not set.')
    if (not self.has_probability_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: probability not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.name_))
    return n + 12

  def Clear(self):
    self.clear_name()
    self.clear_probability()

  def OutputUnchecked(self, out):
    out.putVarInt32(458)
    out.putPrefixedString(self.name_)
    out.putVarInt32(465)
    out.putDouble(self.probability_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 452: break
      if tt == 458:
        self.set_name(d.getPrefixedString())
        continue
      if tt == 465:
        self.set_probability(d.getDouble())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_name_: res+=prefix+("Name: %s\n" % self.DebugFormatString(self.name_))
    if self.has_probability_: res+=prefix+("Probability: %s\n" % self.DebugFormat(self.probability_))
    return res

class ScienceCitation_AlternateTitle(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.title_ = ""
    self.language_ = ""
    self.has_title_ = 0
    self.has_language_ = 0
    if contents is not None: self.MergeFromString(contents)

  def title(self): return self.title_

  def set_title(self, x):
    self.has_title_ = 1
    self.title_ = x

  def clear_title(self):
    self.has_title_ = 0
    self.title_ = ""

  def has_title(self): return self.has_title_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = ""

  def has_language(self): return self.has_language_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_title()): self.set_title(x.title())
    if (x.has_language()): self.set_language(x.language())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceCitation', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceCitation')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceCitation', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceCitation', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceCitation', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_title_ != x.has_title_: return 0
    if self.has_title_ and self.title_ != x.title_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_title_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: title not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.title_))
    if (self.has_language_): n += 2 + self.lengthString(len(self.language_))
    return n + 2

  def Clear(self):
    self.clear_title()
    self.clear_language()

  def OutputUnchecked(self, out):
    out.putVarInt32(482)
    out.putPrefixedString(self.title_)
    if (self.has_language_):
      out.putVarInt32(490)
      out.putPrefixedString(self.language_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 476: break
      if tt == 482:
        self.set_title(d.getPrefixedString())
        continue
      if tt == 490:
        self.set_language(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_title_: res+=prefix+("Title: %s\n" % self.DebugFormatString(self.title_))
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatString(self.language_))
    return res

class ScienceCitation_TranslatedAuthor(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.lastname_ = ""
    self.othernames_ = ""
    self.department_ = ""
    self.institution_ = ""
    self.email_ = ""
    self.language_ = ""
    self.type_ = 0
    self.has_lastname_ = 0
    self.has_othernames_ = 0
    self.has_department_ = 0
    self.has_institution_ = 0
    self.has_email_ = 0
    self.has_language_ = 0
    self.has_type_ = 0
    if contents is not None: self.MergeFromString(contents)

  def lastname(self): return self.lastname_

  def set_lastname(self, x):
    self.has_lastname_ = 1
    self.lastname_ = x

  def clear_lastname(self):
    self.has_lastname_ = 0
    self.lastname_ = ""

  def has_lastname(self): return self.has_lastname_

  def othernames(self): return self.othernames_

  def set_othernames(self, x):
    self.has_othernames_ = 1
    self.othernames_ = x

  def clear_othernames(self):
    self.has_othernames_ = 0
    self.othernames_ = ""

  def has_othernames(self): return self.has_othernames_

  def department(self): return self.department_

  def set_department(self, x):
    self.has_department_ = 1
    self.department_ = x

  def clear_department(self):
    self.has_department_ = 0
    self.department_ = ""

  def has_department(self): return self.has_department_

  def institution(self): return self.institution_

  def set_institution(self, x):
    self.has_institution_ = 1
    self.institution_ = x

  def clear_institution(self):
    self.has_institution_ = 0
    self.institution_ = ""

  def has_institution(self): return self.has_institution_

  def email(self): return self.email_

  def set_email(self, x):
    self.has_email_ = 1
    self.email_ = x

  def clear_email(self):
    self.has_email_ = 0
    self.email_ = ""

  def has_email(self): return self.has_email_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = ""

  def has_language(self): return self.has_language_

  def type(self): return self.type_

  def set_type(self, x):
    self.has_type_ = 1
    self.type_ = x

  def clear_type(self):
    self.has_type_ = 0
    self.type_ = 0

  def has_type(self): return self.has_type_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_lastname()): self.set_lastname(x.lastname())
    if (x.has_othernames()): self.set_othernames(x.othernames())
    if (x.has_department()): self.set_department(x.department())
    if (x.has_institution()): self.set_institution(x.institution())
    if (x.has_email()): self.set_email(x.email())
    if (x.has_language()): self.set_language(x.language())
    if (x.has_type()): self.set_type(x.type())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceCitation', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceCitation')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceCitation', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceCitation', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceCitation', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_lastname_ != x.has_lastname_: return 0
    if self.has_lastname_ and self.lastname_ != x.lastname_: return 0
    if self.has_othernames_ != x.has_othernames_: return 0
    if self.has_othernames_ and self.othernames_ != x.othernames_: return 0
    if self.has_department_ != x.has_department_: return 0
    if self.has_department_ and self.department_ != x.department_: return 0
    if self.has_institution_ != x.has_institution_: return 0
    if self.has_institution_ and self.institution_ != x.institution_: return 0
    if self.has_email_ != x.has_email_: return 0
    if self.has_email_ and self.email_ != x.email_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_type_ != x.has_type_: return 0
    if self.has_type_ and self.type_ != x.type_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_lastname_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: lastname not set.')
    if (not self.has_language_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: language not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.lastname_))
    if (self.has_othernames_): n += 2 + self.lengthString(len(self.othernames_))
    if (self.has_department_): n += 2 + self.lengthString(len(self.department_))
    if (self.has_institution_): n += 2 + self.lengthString(len(self.institution_))
    if (self.has_email_): n += 2 + self.lengthString(len(self.email_))
    n += self.lengthString(len(self.language_))
    if (self.has_type_): n += 2 + self.lengthVarInt64(self.type_)
    return n + 4

  def Clear(self):
    self.clear_lastname()
    self.clear_othernames()
    self.clear_department()
    self.clear_institution()
    self.clear_email()
    self.clear_language()
    self.clear_type()

  def OutputUnchecked(self, out):
    out.putVarInt32(514)
    out.putPrefixedString(self.lastname_)
    if (self.has_othernames_):
      out.putVarInt32(522)
      out.putPrefixedString(self.othernames_)
    if (self.has_department_):
      out.putVarInt32(530)
      out.putPrefixedString(self.department_)
    if (self.has_institution_):
      out.putVarInt32(538)
      out.putPrefixedString(self.institution_)
    if (self.has_email_):
      out.putVarInt32(546)
      out.putPrefixedString(self.email_)
    out.putVarInt32(554)
    out.putPrefixedString(self.language_)
    if (self.has_type_):
      out.putVarInt32(776)
      out.putVarInt32(self.type_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 508: break
      if tt == 514:
        self.set_lastname(d.getPrefixedString())
        continue
      if tt == 522:
        self.set_othernames(d.getPrefixedString())
        continue
      if tt == 530:
        self.set_department(d.getPrefixedString())
        continue
      if tt == 538:
        self.set_institution(d.getPrefixedString())
        continue
      if tt == 546:
        self.set_email(d.getPrefixedString())
        continue
      if tt == 554:
        self.set_language(d.getPrefixedString())
        continue
      if tt == 776:
        self.set_type(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_lastname_: res+=prefix+("LastName: %s\n" % self.DebugFormatString(self.lastname_))
    if self.has_othernames_: res+=prefix+("OtherNames: %s\n" % self.DebugFormatString(self.othernames_))
    if self.has_department_: res+=prefix+("Department: %s\n" % self.DebugFormatString(self.department_))
    if self.has_institution_: res+=prefix+("Institution: %s\n" % self.DebugFormatString(self.institution_))
    if self.has_email_: res+=prefix+("Email: %s\n" % self.DebugFormatString(self.email_))
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatString(self.language_))
    if self.has_type_: res+=prefix+("Type: %s\n" % self.DebugFormatInt32(self.type_))
    return res

class ScienceCitation_UnionCatalog(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.url_ = ""
    self.numlibraries_ = 0
    self.metadataurl_ = ""
    self.subject_ = []
    self.has_url_ = 0
    self.has_numlibraries_ = 0
    self.has_metadataurl_ = 0
    if contents is not None: self.MergeFromString(contents)

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def numlibraries(self): return self.numlibraries_

  def set_numlibraries(self, x):
    self.has_numlibraries_ = 1
    self.numlibraries_ = x

  def clear_numlibraries(self):
    self.has_numlibraries_ = 0
    self.numlibraries_ = 0

  def has_numlibraries(self): return self.has_numlibraries_

  def metadataurl(self): return self.metadataurl_

  def set_metadataurl(self, x):
    self.has_metadataurl_ = 1
    self.metadataurl_ = x

  def clear_metadataurl(self):
    self.has_metadataurl_ = 0
    self.metadataurl_ = ""

  def has_metadataurl(self): return self.has_metadataurl_

  def subject_size(self): return len(self.subject_)
  def subject_list(self): return self.subject_

  def subject(self, i):
    return self.subject_[i]

  def set_subject(self, i, x):
    self.subject_[i] = x

  def add_subject(self, x):
    self.subject_.append(x)

  def clear_subject(self):
    self.subject_ = []


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_url()): self.set_url(x.url())
    if (x.has_numlibraries()): self.set_numlibraries(x.numlibraries())
    if (x.has_metadataurl()): self.set_metadataurl(x.metadataurl())
    for i in xrange(x.subject_size()): self.add_subject(x.subject(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceCitation', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceCitation')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceCitation', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceCitation', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceCitation', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_numlibraries_ != x.has_numlibraries_: return 0
    if self.has_numlibraries_ and self.numlibraries_ != x.numlibraries_: return 0
    if self.has_metadataurl_ != x.has_metadataurl_: return 0
    if self.has_metadataurl_ and self.metadataurl_ != x.metadataurl_: return 0
    if len(self.subject_) != len(x.subject_): return 0
    for e1, e2 in zip(self.subject_, x.subject_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_url_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: url not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.url_))
    if (self.has_numlibraries_): n += 2 + self.lengthVarInt64(self.numlibraries_)
    if (self.has_metadataurl_): n += 2 + self.lengthString(len(self.metadataurl_))
    n += 2 * len(self.subject_)
    for i in xrange(len(self.subject_)): n += self.lengthString(len(self.subject_[i]))
    return n + 2

  def Clear(self):
    self.clear_url()
    self.clear_numlibraries()
    self.clear_metadataurl()
    self.clear_subject()

  def OutputUnchecked(self, out):
    out.putVarInt32(706)
    out.putPrefixedString(self.url_)
    if (self.has_numlibraries_):
      out.putVarInt32(712)
      out.putVarInt32(self.numlibraries_)
    if (self.has_metadataurl_):
      out.putVarInt32(722)
      out.putPrefixedString(self.metadataurl_)
    for i in xrange(len(self.subject_)):
      out.putVarInt32(730)
      out.putPrefixedString(self.subject_[i])

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 700: break
      if tt == 706:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 712:
        self.set_numlibraries(d.getVarInt32())
        continue
      if tt == 722:
        self.set_metadataurl(d.getPrefixedString())
        continue
      if tt == 730:
        self.add_subject(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_url_: res+=prefix+("Url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_numlibraries_: res+=prefix+("NumLibraries: %s\n" % self.DebugFormatInt32(self.numlibraries_))
    if self.has_metadataurl_: res+=prefix+("MetadataUrl: %s\n" % self.DebugFormatString(self.metadataurl_))
    cnt=0
    for e in self.subject_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Subject%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    return res

class ScienceCitation(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 2479042 

  _TypeId_NAMES = {
    2479042: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)


  FIRST_ARTICLE_TYPE =    0 
  PAPER        =    0 
  BOOK         =    1 
  BOOKLET      =    2 
  CONFERENCE   =    3 
  INBOOK       =    4 
  INCOLLECTION =    5 
  MANUAL       =    6 
  MS_THESIS    =    7 
  MISC         =    8 
  PHD_THESIS   =    9 
  TECHREPORT   =   10 
  UNPUBLISHED  =   11 
  PATENT       =   12 
  WEB_SITE     =   13 
  BS_THESIS    =   14 
  REVIEW_ARTICLE =   15 
  JOURNAL      =   16 
  LEGAL_DOC    =   17 
  NUM_ARTICLE_TYPES =   18 

  _ArticleType_NAMES = {
    0: "FIRST_ARTICLE_TYPE",
    0: "PAPER",
    1: "BOOK",
    2: "BOOKLET",
    3: "CONFERENCE",
    4: "INBOOK",
    5: "INCOLLECTION",
    6: "MANUAL",
    7: "MS_THESIS",
    8: "MISC",
    9: "PHD_THESIS",
    10: "TECHREPORT",
    11: "UNPUBLISHED",
    12: "PATENT",
    13: "WEB_SITE",
    14: "BS_THESIS",
    15: "REVIEW_ARTICLE",
    16: "JOURNAL",
    17: "LEGAL_DOC",
    18: "NUM_ARTICLE_TYPES",
  }

  def ArticleType_Name(cls, x): return cls._ArticleType_NAMES.get(x, "")
  ArticleType_Name = classmethod(ArticleType_Name)


  WRITER_CONTRIBUTOR =    0 
  EDITOR_CONTRIBUTOR =    1 
  CREATED_BY_CONTRIBUTOR =    2 
  PHOTOGRAPHER_CONTRIBUTOR =    3 
  PHOTO_TEXT_CONTRIBUTOR =    4 
  TRANSLATOR_CONTRIBUTOR =    5 
  CORPORATION_CONTRIBUTOR =    6 
  COMPILER_CONTRIBUTOR =    7 
  ILLUSTRATOR_CONTRIBUTOR =    8 
  OTHER_CONTRIBUTOR =    9 
  PATENT_INVENTOR_CONTRIBUTOR =   10 
  PATENT_ASSIGNEE_CONTRIBUTOR =   11 
  PATENT_EXAMINER_CONTRIBUTOR =   12 
  PATENT_ATTORNEY_CONTRIBUTOR =   13 
  REVIEWER_CONTRIBUTOR =   14 

  _ContributorType_NAMES = {
    0: "WRITER_CONTRIBUTOR",
    1: "EDITOR_CONTRIBUTOR",
    2: "CREATED_BY_CONTRIBUTOR",
    3: "PHOTOGRAPHER_CONTRIBUTOR",
    4: "PHOTO_TEXT_CONTRIBUTOR",
    5: "TRANSLATOR_CONTRIBUTOR",
    6: "CORPORATION_CONTRIBUTOR",
    7: "COMPILER_CONTRIBUTOR",
    8: "ILLUSTRATOR_CONTRIBUTOR",
    9: "OTHER_CONTRIBUTOR",
    10: "PATENT_INVENTOR_CONTRIBUTOR",
    11: "PATENT_ASSIGNEE_CONTRIBUTOR",
    12: "PATENT_EXAMINER_CONTRIBUTOR",
    13: "PATENT_ATTORNEY_CONTRIBUTOR",
    14: "REVIEWER_CONTRIBUTOR",
  }

  def ContributorType_Name(cls, x): return cls._ContributorType_NAMES.get(x, "")
  ContributorType_Name = classmethod(ContributorType_Name)


  FIRST_SOURCE_TYPE =    0 
  SOURCE_DBLP  =    0 
  SOURCE_XREF  =    1 
  SOURCE_IOP   =    2 
  SOURCE_WEB_PDF =    3 
  SOURCE_WEB_HTML =    4 
  SOURCE_OCLC  =    6 
  SOURCE_INSPEC =    7 
  SOURCE_BIBTEX =    8 
  SOURCE_BLACKWELL =    9 
  SOURCE_SLAC  =   10 
  SOURCE_ONIX_INGRAM =   11 
  SOURCE_ONIX_BAKER_AND_TAYLOR =   12 
  SOURCE_ONIX_OTHER =   13 
  SOURCE_OAI   =   14 
  SOURCE_PUBLISHER_TOC =   15 
  SOURCE_CSA   =   16 
  SOURCE_UNION_CATALOG =   17 
  SOURCE_INIST =   18 
  SOURCE_SPECIAL_HTML =   19 
  SOURCE_ECONIS =   20 
  SOURCE_EMBEDDED_RDF =   21 
  SOURCE_ARBICON =   22 
  NUM_SOURCE_TYPES =   23 

  _CitationSourceType_NAMES = {
    0: "FIRST_SOURCE_TYPE",
    0: "SOURCE_DBLP",
    1: "SOURCE_XREF",
    2: "SOURCE_IOP",
    3: "SOURCE_WEB_PDF",
    4: "SOURCE_WEB_HTML",
    6: "SOURCE_OCLC",
    7: "SOURCE_INSPEC",
    8: "SOURCE_BIBTEX",
    9: "SOURCE_BLACKWELL",
    10: "SOURCE_SLAC",
    11: "SOURCE_ONIX_INGRAM",
    12: "SOURCE_ONIX_BAKER_AND_TAYLOR",
    13: "SOURCE_ONIX_OTHER",
    14: "SOURCE_OAI",
    15: "SOURCE_PUBLISHER_TOC",
    16: "SOURCE_CSA",
    17: "SOURCE_UNION_CATALOG",
    18: "SOURCE_INIST",
    19: "SOURCE_SPECIAL_HTML",
    20: "SOURCE_ECONIS",
    21: "SOURCE_EMBEDDED_RDF",
    22: "SOURCE_ARBICON",
    23: "NUM_SOURCE_TYPES",
  }

  def CitationSourceType_Name(cls, x): return cls._CitationSourceType_NAMES.get(x, "")
  CitationSourceType_Name = classmethod(CitationSourceType_Name)


  FIELD_PUB_DATE =    1 
  FIELD_PUB_VENUE =    2 
  FIELD_PUB_ORG =    4 

  _FieldType_NAMES = {
    1: "FIELD_PUB_DATE",
    2: "FIELD_PUB_VENUE",
    4: "FIELD_PUB_ORG",
  }

  def FieldType_Name(cls, x): return cls._FieldType_NAMES.get(x, "")
  FieldType_Name = classmethod(FieldType_Name)


  PATENT_OFFICE_USPTO =    1 
  PATENT_OFFICE_EPO =    2 
  PATENT_OFFICE_JPO =    3 
  PATENT_OFFICE_WIPO =    4 
  PATENT_OFFICE_ARIPO =    5 
  PATENT_OFFICE_EAPO =    6 
  PATENT_OFFICE_OAPI =    7 
  PATENT_OFFICE_ARPO =    8 
  PATENT_OFFICE_CZPO =    9 
  PATENT_OFFICE_IEPO =   10 
  PATENT_OFFICE_MTPO =   11 
  PATENT_OFFICE_SGPO =   12 
  PATENT_OFFICE_ATPO =   13 
  PATENT_OFFICE_DEPO =   14 
  PATENT_OFFICE_ILPO =   15 
  PATENT_OFFICE_MWPO =   16 
  PATENT_OFFICE_SIPO =   17 
  PATENT_OFFICE_AUPO =   18 
  PATENT_OFFICE_DKPO =   19 
  PATENT_OFFICE_INPO =   20 
  PATENT_OFFICE_MXPO =   21 
  PATENT_OFFICE_SKPO =   22 
  PATENT_OFFICE_BAPO =   23 
  PATENT_OFFICE_EEPO =   24 
  PATENT_OFFICE_ITPO =   25 
  PATENT_OFFICE_MYPO =   26 
  PATENT_OFFICE_SUPO =   27 
  PATENT_OFFICE_BEPO =   28 
  PATENT_OFFICE_EGPO =   29 
  PATENT_OFFICE_NLPO =   30 
  PATENT_OFFICE_TJPO =   31 
  PATENT_OFFICE_BGPO =   32 
  PATENT_OFFICE_ESPO =   33 
  PATENT_OFFICE_KEPO =   34 
  PATENT_OFFICE_NOPO =   35 
  PATENT_OFFICE_TRPO =   36 
  PATENT_OFFICE_BRPO =   37 
  PATENT_OFFICE_FIPO =   38 
  PATENT_OFFICE_KRPO =   39 
  PATENT_OFFICE_NZPO =   40 
  PATENT_OFFICE_TWPO =   41 
  PATENT_OFFICE_CAPO =   42 
  PATENT_OFFICE_FRPO =   43 
  PATENT_OFFICE_LTPO =   44 
  PATENT_OFFICE_PHPO =   45 
  PATENT_OFFICE_CHPO =   46 
  PATENT_OFFICE_GBPO =   47 
  PATENT_OFFICE_LUPO =   48 
  PATENT_OFFICE_PLPO =   49 
  PATENT_OFFICE_VNPO =   50 
  PATENT_OFFICE_CNPO =   51 
  PATENT_OFFICE_GRPO =   52 
  PATENT_OFFICE_LVPO =   53 
  PATENT_OFFICE_PTPO =   54 
  PATENT_OFFICE_YUPO =   55 
  PATENT_OFFICE_CSPO =   56 
  PATENT_OFFICE_HKPO =   57 
  PATENT_OFFICE_MCPO =   58 
  PATENT_OFFICE_ROPO =   59 
  PATENT_OFFICE_ZAPO =   60 
  PATENT_OFFICE_CUPO =   61 
  PATENT_OFFICE_HRPO =   62 
  PATENT_OFFICE_MDPO =   63 
  PATENT_OFFICE_RUPO =   64 
  PATENT_OFFICE_ZMPO =   65 
  PATENT_OFFICE_CYPO =   66 
  PATENT_OFFICE_HUPO =   67 
  PATENT_OFFICE_MNPO =   68 
  PATENT_OFFICE_SEPO =   69 
  PATENT_OFFICE_ZWPO =   70 
  PATENT_OFFICE_IDPO =   71 
  PATENT_OFFICE_DZPO =   72 
  PATENT_OFFICE_GCPO =   73 
  PATENT_OFFICE_MAPO =   74 
  PATENT_OFFICE_UAPO =   75 

  _PatentOfficeId_NAMES = {
    1: "PATENT_OFFICE_USPTO",
    2: "PATENT_OFFICE_EPO",
    3: "PATENT_OFFICE_JPO",
    4: "PATENT_OFFICE_WIPO",
    5: "PATENT_OFFICE_ARIPO",
    6: "PATENT_OFFICE_EAPO",
    7: "PATENT_OFFICE_OAPI",
    8: "PATENT_OFFICE_ARPO",
    9: "PATENT_OFFICE_CZPO",
    10: "PATENT_OFFICE_IEPO",
    11: "PATENT_OFFICE_MTPO",
    12: "PATENT_OFFICE_SGPO",
    13: "PATENT_OFFICE_ATPO",
    14: "PATENT_OFFICE_DEPO",
    15: "PATENT_OFFICE_ILPO",
    16: "PATENT_OFFICE_MWPO",
    17: "PATENT_OFFICE_SIPO",
    18: "PATENT_OFFICE_AUPO",
    19: "PATENT_OFFICE_DKPO",
    20: "PATENT_OFFICE_INPO",
    21: "PATENT_OFFICE_MXPO",
    22: "PATENT_OFFICE_SKPO",
    23: "PATENT_OFFICE_BAPO",
    24: "PATENT_OFFICE_EEPO",
    25: "PATENT_OFFICE_ITPO",
    26: "PATENT_OFFICE_MYPO",
    27: "PATENT_OFFICE_SUPO",
    28: "PATENT_OFFICE_BEPO",
    29: "PATENT_OFFICE_EGPO",
    30: "PATENT_OFFICE_NLPO",
    31: "PATENT_OFFICE_TJPO",
    32: "PATENT_OFFICE_BGPO",
    33: "PATENT_OFFICE_ESPO",
    34: "PATENT_OFFICE_KEPO",
    35: "PATENT_OFFICE_NOPO",
    36: "PATENT_OFFICE_TRPO",
    37: "PATENT_OFFICE_BRPO",
    38: "PATENT_OFFICE_FIPO",
    39: "PATENT_OFFICE_KRPO",
    40: "PATENT_OFFICE_NZPO",
    41: "PATENT_OFFICE_TWPO",
    42: "PATENT_OFFICE_CAPO",
    43: "PATENT_OFFICE_FRPO",
    44: "PATENT_OFFICE_LTPO",
    45: "PATENT_OFFICE_PHPO",
    46: "PATENT_OFFICE_CHPO",
    47: "PATENT_OFFICE_GBPO",
    48: "PATENT_OFFICE_LUPO",
    49: "PATENT_OFFICE_PLPO",
    50: "PATENT_OFFICE_VNPO",
    51: "PATENT_OFFICE_CNPO",
    52: "PATENT_OFFICE_GRPO",
    53: "PATENT_OFFICE_LVPO",
    54: "PATENT_OFFICE_PTPO",
    55: "PATENT_OFFICE_YUPO",
    56: "PATENT_OFFICE_CSPO",
    57: "PATENT_OFFICE_HKPO",
    58: "PATENT_OFFICE_MCPO",
    59: "PATENT_OFFICE_ROPO",
    60: "PATENT_OFFICE_ZAPO",
    61: "PATENT_OFFICE_CUPO",
    62: "PATENT_OFFICE_HRPO",
    63: "PATENT_OFFICE_MDPO",
    64: "PATENT_OFFICE_RUPO",
    65: "PATENT_OFFICE_ZMPO",
    66: "PATENT_OFFICE_CYPO",
    67: "PATENT_OFFICE_HUPO",
    68: "PATENT_OFFICE_MNPO",
    69: "PATENT_OFFICE_SEPO",
    70: "PATENT_OFFICE_ZWPO",
    71: "PATENT_OFFICE_IDPO",
    72: "PATENT_OFFICE_DZPO",
    73: "PATENT_OFFICE_GCPO",
    74: "PATENT_OFFICE_MAPO",
    75: "PATENT_OFFICE_UAPO",
  }

  def PatentOfficeId_Name(cls, x): return cls._PatentOfficeId_NAMES.get(x, "")
  PatentOfficeId_Name = classmethod(PatentOfficeId_Name)

  def __init__(self, contents=None):
    self.title_ = ""
    self.alternatetitle_ = []
    self.author_ = []
    self.translatedauthor_ = []
    self.authorlisthasetal_ = 0
    self.translatedauthorlisthasetal_ = 0
    self.publicationday_ = 0
    self.publicationmonth_ = 0
    self.publicationyear_ = 0
    self.onlineday_ = 0
    self.onlinemonth_ = 0
    self.onlineyear_ = 0
    self.publicationvenue_ = ""
    self.publicationvenuevariant_ = []
    self.pages_ = ""
    self.volume_ = 0
    self.number_ = ""
    self.documentid_ = 0
    self.versionid_ = 0
    self.type_ = 0
    self.publisherorg_ = ""
    self.publisheraddress_ = ""
    self.chapter_ = ""
    self.edition_ = ""
    self.editor_ = []
    self.series_ = ""
    self.isbn_ = ""
    self.issn_ = ""
    self.issnvariant_ = []
    self.language_ = ""
    self.keywords_ = []
    self.lccn_ = ""
    self.downloadurl_ = []
    self.otherid_ = ""
    self.note_ = ""
    self.doi_ = ""
    self.citationsrc_ = ""
    self.numforwardlinks_ = 0
    self.numbackwardlinks_ = 0
    self.numversions_ = 0
    self.numrelated_ = 0
    self.pmid_ = ""
    self.dspaceid_ = ""
    self.pmcid_ = ""
    self.sici_ = ""
    self.publisherid_ = ""
    self.joi_ = ""
    self.pubvenueid_ = ""
    self.citationsource_ = 0
    self.borrowedfields_ = 0
    self.borrowedauthors_ = 0
    self.subject_ = []
    self.patentclassification_ = []
    self.deprecated_publisherdisplayname_ = ""
    self.deprecated_metadatasourcefile_ = ""
    self.unioncatalog_ = []
    self.patentcountry_ = []
    self.patentoffice_ = 0
    self.patentnumber_ = ""
    self.anchors_ = []
    self.numhostedpages_ = 0
    self.legalcitation_ = None
    self.has_title_ = 0
    self.has_authorlisthasetal_ = 0
    self.has_translatedauthorlisthasetal_ = 0
    self.has_publicationday_ = 0
    self.has_publicationmonth_ = 0
    self.has_publicationyear_ = 0
    self.has_onlineday_ = 0
    self.has_onlinemonth_ = 0
    self.has_onlineyear_ = 0
    self.has_publicationvenue_ = 0
    self.has_pages_ = 0
    self.has_volume_ = 0
    self.has_number_ = 0
    self.has_documentid_ = 0
    self.has_versionid_ = 0
    self.has_type_ = 0
    self.has_publisherorg_ = 0
    self.has_publisheraddress_ = 0
    self.has_chapter_ = 0
    self.has_edition_ = 0
    self.has_series_ = 0
    self.has_isbn_ = 0
    self.has_issn_ = 0
    self.has_language_ = 0
    self.has_lccn_ = 0
    self.has_otherid_ = 0
    self.has_note_ = 0
    self.has_doi_ = 0
    self.has_citationsrc_ = 0
    self.has_numforwardlinks_ = 0
    self.has_numbackwardlinks_ = 0
    self.has_numversions_ = 0
    self.has_numrelated_ = 0
    self.has_pmid_ = 0
    self.has_dspaceid_ = 0
    self.has_pmcid_ = 0
    self.has_sici_ = 0
    self.has_publisherid_ = 0
    self.has_joi_ = 0
    self.has_pubvenueid_ = 0
    self.has_citationsource_ = 0
    self.has_borrowedfields_ = 0
    self.has_borrowedauthors_ = 0
    self.has_deprecated_publisherdisplayname_ = 0
    self.has_deprecated_metadatasourcefile_ = 0
    self.has_patentoffice_ = 0
    self.has_patentnumber_ = 0
    self.has_numhostedpages_ = 0
    self.has_legalcitation_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def title(self): return self.title_

  def set_title(self, x):
    self.has_title_ = 1
    self.title_ = x

  def clear_title(self):
    self.has_title_ = 0
    self.title_ = ""

  def has_title(self): return self.has_title_

  def alternatetitle_size(self): return len(self.alternatetitle_)
  def alternatetitle_list(self): return self.alternatetitle_

  def alternatetitle(self, i):
    return self.alternatetitle_[i]

  def mutable_alternatetitle(self, i):
    return self.alternatetitle_[i]

  def add_alternatetitle(self):
    x = ScienceCitation_AlternateTitle()
    self.alternatetitle_.append(x)
    return x

  def clear_alternatetitle(self):
    self.alternatetitle_ = []
  def author_size(self): return len(self.author_)
  def author_list(self): return self.author_

  def author(self, i):
    return self.author_[i]

  def mutable_author(self, i):
    return self.author_[i]

  def add_author(self):
    x = ScienceCitation_Author()
    self.author_.append(x)
    return x

  def clear_author(self):
    self.author_ = []
  def translatedauthor_size(self): return len(self.translatedauthor_)
  def translatedauthor_list(self): return self.translatedauthor_

  def translatedauthor(self, i):
    return self.translatedauthor_[i]

  def mutable_translatedauthor(self, i):
    return self.translatedauthor_[i]

  def add_translatedauthor(self):
    x = ScienceCitation_TranslatedAuthor()
    self.translatedauthor_.append(x)
    return x

  def clear_translatedauthor(self):
    self.translatedauthor_ = []
  def authorlisthasetal(self): return self.authorlisthasetal_

  def set_authorlisthasetal(self, x):
    self.has_authorlisthasetal_ = 1
    self.authorlisthasetal_ = x

  def clear_authorlisthasetal(self):
    self.has_authorlisthasetal_ = 0
    self.authorlisthasetal_ = 0

  def has_authorlisthasetal(self): return self.has_authorlisthasetal_

  def translatedauthorlisthasetal(self): return self.translatedauthorlisthasetal_

  def set_translatedauthorlisthasetal(self, x):
    self.has_translatedauthorlisthasetal_ = 1
    self.translatedauthorlisthasetal_ = x

  def clear_translatedauthorlisthasetal(self):
    self.has_translatedauthorlisthasetal_ = 0
    self.translatedauthorlisthasetal_ = 0

  def has_translatedauthorlisthasetal(self): return self.has_translatedauthorlisthasetal_

  def publicationday(self): return self.publicationday_

  def set_publicationday(self, x):
    self.has_publicationday_ = 1
    self.publicationday_ = x

  def clear_publicationday(self):
    self.has_publicationday_ = 0
    self.publicationday_ = 0

  def has_publicationday(self): return self.has_publicationday_

  def publicationmonth(self): return self.publicationmonth_

  def set_publicationmonth(self, x):
    self.has_publicationmonth_ = 1
    self.publicationmonth_ = x

  def clear_publicationmonth(self):
    self.has_publicationmonth_ = 0
    self.publicationmonth_ = 0

  def has_publicationmonth(self): return self.has_publicationmonth_

  def publicationyear(self): return self.publicationyear_

  def set_publicationyear(self, x):
    self.has_publicationyear_ = 1
    self.publicationyear_ = x

  def clear_publicationyear(self):
    self.has_publicationyear_ = 0
    self.publicationyear_ = 0

  def has_publicationyear(self): return self.has_publicationyear_

  def onlineday(self): return self.onlineday_

  def set_onlineday(self, x):
    self.has_onlineday_ = 1
    self.onlineday_ = x

  def clear_onlineday(self):
    self.has_onlineday_ = 0
    self.onlineday_ = 0

  def has_onlineday(self): return self.has_onlineday_

  def onlinemonth(self): return self.onlinemonth_

  def set_onlinemonth(self, x):
    self.has_onlinemonth_ = 1
    self.onlinemonth_ = x

  def clear_onlinemonth(self):
    self.has_onlinemonth_ = 0
    self.onlinemonth_ = 0

  def has_onlinemonth(self): return self.has_onlinemonth_

  def onlineyear(self): return self.onlineyear_

  def set_onlineyear(self, x):
    self.has_onlineyear_ = 1
    self.onlineyear_ = x

  def clear_onlineyear(self):
    self.has_onlineyear_ = 0
    self.onlineyear_ = 0

  def has_onlineyear(self): return self.has_onlineyear_

  def publicationvenue(self): return self.publicationvenue_

  def set_publicationvenue(self, x):
    self.has_publicationvenue_ = 1
    self.publicationvenue_ = x

  def clear_publicationvenue(self):
    self.has_publicationvenue_ = 0
    self.publicationvenue_ = ""

  def has_publicationvenue(self): return self.has_publicationvenue_

  def publicationvenuevariant_size(self): return len(self.publicationvenuevariant_)
  def publicationvenuevariant_list(self): return self.publicationvenuevariant_

  def publicationvenuevariant(self, i):
    return self.publicationvenuevariant_[i]

  def set_publicationvenuevariant(self, i, x):
    self.publicationvenuevariant_[i] = x

  def add_publicationvenuevariant(self, x):
    self.publicationvenuevariant_.append(x)

  def clear_publicationvenuevariant(self):
    self.publicationvenuevariant_ = []

  def pages(self): return self.pages_

  def set_pages(self, x):
    self.has_pages_ = 1
    self.pages_ = x

  def clear_pages(self):
    self.has_pages_ = 0
    self.pages_ = ""

  def has_pages(self): return self.has_pages_

  def volume(self): return self.volume_

  def set_volume(self, x):
    self.has_volume_ = 1
    self.volume_ = x

  def clear_volume(self):
    self.has_volume_ = 0
    self.volume_ = 0

  def has_volume(self): return self.has_volume_

  def number(self): return self.number_

  def set_number(self, x):
    self.has_number_ = 1
    self.number_ = x

  def clear_number(self):
    self.has_number_ = 0
    self.number_ = ""

  def has_number(self): return self.has_number_

  def documentid(self): return self.documentid_

  def set_documentid(self, x):
    self.has_documentid_ = 1
    self.documentid_ = x

  def clear_documentid(self):
    self.has_documentid_ = 0
    self.documentid_ = 0

  def has_documentid(self): return self.has_documentid_

  def versionid(self): return self.versionid_

  def set_versionid(self, x):
    self.has_versionid_ = 1
    self.versionid_ = x

  def clear_versionid(self):
    self.has_versionid_ = 0
    self.versionid_ = 0

  def has_versionid(self): return self.has_versionid_

  def type(self): return self.type_

  def set_type(self, x):
    self.has_type_ = 1
    self.type_ = x

  def clear_type(self):
    self.has_type_ = 0
    self.type_ = 0

  def has_type(self): return self.has_type_

  def publisherorg(self): return self.publisherorg_

  def set_publisherorg(self, x):
    self.has_publisherorg_ = 1
    self.publisherorg_ = x

  def clear_publisherorg(self):
    self.has_publisherorg_ = 0
    self.publisherorg_ = ""

  def has_publisherorg(self): return self.has_publisherorg_

  def publisheraddress(self): return self.publisheraddress_

  def set_publisheraddress(self, x):
    self.has_publisheraddress_ = 1
    self.publisheraddress_ = x

  def clear_publisheraddress(self):
    self.has_publisheraddress_ = 0
    self.publisheraddress_ = ""

  def has_publisheraddress(self): return self.has_publisheraddress_

  def chapter(self): return self.chapter_

  def set_chapter(self, x):
    self.has_chapter_ = 1
    self.chapter_ = x

  def clear_chapter(self):
    self.has_chapter_ = 0
    self.chapter_ = ""

  def has_chapter(self): return self.has_chapter_

  def edition(self): return self.edition_

  def set_edition(self, x):
    self.has_edition_ = 1
    self.edition_ = x

  def clear_edition(self):
    self.has_edition_ = 0
    self.edition_ = ""

  def has_edition(self): return self.has_edition_

  def editor_size(self): return len(self.editor_)
  def editor_list(self): return self.editor_

  def editor(self, i):
    return self.editor_[i]

  def set_editor(self, i, x):
    self.editor_[i] = x

  def add_editor(self, x):
    self.editor_.append(x)

  def clear_editor(self):
    self.editor_ = []

  def series(self): return self.series_

  def set_series(self, x):
    self.has_series_ = 1
    self.series_ = x

  def clear_series(self):
    self.has_series_ = 0
    self.series_ = ""

  def has_series(self): return self.has_series_

  def isbn(self): return self.isbn_

  def set_isbn(self, x):
    self.has_isbn_ = 1
    self.isbn_ = x

  def clear_isbn(self):
    self.has_isbn_ = 0
    self.isbn_ = ""

  def has_isbn(self): return self.has_isbn_

  def issn(self): return self.issn_

  def set_issn(self, x):
    self.has_issn_ = 1
    self.issn_ = x

  def clear_issn(self):
    self.has_issn_ = 0
    self.issn_ = ""

  def has_issn(self): return self.has_issn_

  def issnvariant_size(self): return len(self.issnvariant_)
  def issnvariant_list(self): return self.issnvariant_

  def issnvariant(self, i):
    return self.issnvariant_[i]

  def set_issnvariant(self, i, x):
    self.issnvariant_[i] = x

  def add_issnvariant(self, x):
    self.issnvariant_.append(x)

  def clear_issnvariant(self):
    self.issnvariant_ = []

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = ""

  def has_language(self): return self.has_language_

  def keywords_size(self): return len(self.keywords_)
  def keywords_list(self): return self.keywords_

  def keywords(self, i):
    return self.keywords_[i]

  def set_keywords(self, i, x):
    self.keywords_[i] = x

  def add_keywords(self, x):
    self.keywords_.append(x)

  def clear_keywords(self):
    self.keywords_ = []

  def lccn(self): return self.lccn_

  def set_lccn(self, x):
    self.has_lccn_ = 1
    self.lccn_ = x

  def clear_lccn(self):
    self.has_lccn_ = 0
    self.lccn_ = ""

  def has_lccn(self): return self.has_lccn_

  def downloadurl_size(self): return len(self.downloadurl_)
  def downloadurl_list(self): return self.downloadurl_

  def downloadurl(self, i):
    return self.downloadurl_[i]

  def mutable_downloadurl(self, i):
    return self.downloadurl_[i]

  def add_downloadurl(self):
    x = ScienceCitation_DownloadURL()
    self.downloadurl_.append(x)
    return x

  def clear_downloadurl(self):
    self.downloadurl_ = []
  def otherid(self): return self.otherid_

  def set_otherid(self, x):
    self.has_otherid_ = 1
    self.otherid_ = x

  def clear_otherid(self):
    self.has_otherid_ = 0
    self.otherid_ = ""

  def has_otherid(self): return self.has_otherid_

  def note(self): return self.note_

  def set_note(self, x):
    self.has_note_ = 1
    self.note_ = x

  def clear_note(self):
    self.has_note_ = 0
    self.note_ = ""

  def has_note(self): return self.has_note_

  def doi(self): return self.doi_

  def set_doi(self, x):
    self.has_doi_ = 1
    self.doi_ = x

  def clear_doi(self):
    self.has_doi_ = 0
    self.doi_ = ""

  def has_doi(self): return self.has_doi_

  def citationsrc(self): return self.citationsrc_

  def set_citationsrc(self, x):
    self.has_citationsrc_ = 1
    self.citationsrc_ = x

  def clear_citationsrc(self):
    self.has_citationsrc_ = 0
    self.citationsrc_ = ""

  def has_citationsrc(self): return self.has_citationsrc_

  def numforwardlinks(self): return self.numforwardlinks_

  def set_numforwardlinks(self, x):
    self.has_numforwardlinks_ = 1
    self.numforwardlinks_ = x

  def clear_numforwardlinks(self):
    self.has_numforwardlinks_ = 0
    self.numforwardlinks_ = 0

  def has_numforwardlinks(self): return self.has_numforwardlinks_

  def numbackwardlinks(self): return self.numbackwardlinks_

  def set_numbackwardlinks(self, x):
    self.has_numbackwardlinks_ = 1
    self.numbackwardlinks_ = x

  def clear_numbackwardlinks(self):
    self.has_numbackwardlinks_ = 0
    self.numbackwardlinks_ = 0

  def has_numbackwardlinks(self): return self.has_numbackwardlinks_

  def numversions(self): return self.numversions_

  def set_numversions(self, x):
    self.has_numversions_ = 1
    self.numversions_ = x

  def clear_numversions(self):
    self.has_numversions_ = 0
    self.numversions_ = 0

  def has_numversions(self): return self.has_numversions_

  def numrelated(self): return self.numrelated_

  def set_numrelated(self, x):
    self.has_numrelated_ = 1
    self.numrelated_ = x

  def clear_numrelated(self):
    self.has_numrelated_ = 0
    self.numrelated_ = 0

  def has_numrelated(self): return self.has_numrelated_

  def pmid(self): return self.pmid_

  def set_pmid(self, x):
    self.has_pmid_ = 1
    self.pmid_ = x

  def clear_pmid(self):
    self.has_pmid_ = 0
    self.pmid_ = ""

  def has_pmid(self): return self.has_pmid_

  def dspaceid(self): return self.dspaceid_

  def set_dspaceid(self, x):
    self.has_dspaceid_ = 1
    self.dspaceid_ = x

  def clear_dspaceid(self):
    self.has_dspaceid_ = 0
    self.dspaceid_ = ""

  def has_dspaceid(self): return self.has_dspaceid_

  def pmcid(self): return self.pmcid_

  def set_pmcid(self, x):
    self.has_pmcid_ = 1
    self.pmcid_ = x

  def clear_pmcid(self):
    self.has_pmcid_ = 0
    self.pmcid_ = ""

  def has_pmcid(self): return self.has_pmcid_

  def sici(self): return self.sici_

  def set_sici(self, x):
    self.has_sici_ = 1
    self.sici_ = x

  def clear_sici(self):
    self.has_sici_ = 0
    self.sici_ = ""

  def has_sici(self): return self.has_sici_

  def publisherid(self): return self.publisherid_

  def set_publisherid(self, x):
    self.has_publisherid_ = 1
    self.publisherid_ = x

  def clear_publisherid(self):
    self.has_publisherid_ = 0
    self.publisherid_ = ""

  def has_publisherid(self): return self.has_publisherid_

  def joi(self): return self.joi_

  def set_joi(self, x):
    self.has_joi_ = 1
    self.joi_ = x

  def clear_joi(self):
    self.has_joi_ = 0
    self.joi_ = ""

  def has_joi(self): return self.has_joi_

  def pubvenueid(self): return self.pubvenueid_

  def set_pubvenueid(self, x):
    self.has_pubvenueid_ = 1
    self.pubvenueid_ = x

  def clear_pubvenueid(self):
    self.has_pubvenueid_ = 0
    self.pubvenueid_ = ""

  def has_pubvenueid(self): return self.has_pubvenueid_

  def citationsource(self): return self.citationsource_

  def set_citationsource(self, x):
    self.has_citationsource_ = 1
    self.citationsource_ = x

  def clear_citationsource(self):
    self.has_citationsource_ = 0
    self.citationsource_ = 0

  def has_citationsource(self): return self.has_citationsource_

  def borrowedfields(self): return self.borrowedfields_

  def set_borrowedfields(self, x):
    self.has_borrowedfields_ = 1
    self.borrowedfields_ = x

  def clear_borrowedfields(self):
    self.has_borrowedfields_ = 0
    self.borrowedfields_ = 0

  def has_borrowedfields(self): return self.has_borrowedfields_

  def borrowedauthors(self): return self.borrowedauthors_

  def set_borrowedauthors(self, x):
    self.has_borrowedauthors_ = 1
    self.borrowedauthors_ = x

  def clear_borrowedauthors(self):
    self.has_borrowedauthors_ = 0
    self.borrowedauthors_ = 0

  def has_borrowedauthors(self): return self.has_borrowedauthors_

  def subject_size(self): return len(self.subject_)
  def subject_list(self): return self.subject_

  def subject(self, i):
    return self.subject_[i]

  def mutable_subject(self, i):
    return self.subject_[i]

  def add_subject(self):
    x = ScienceCitation_Subject()
    self.subject_.append(x)
    return x

  def clear_subject(self):
    self.subject_ = []
  def patentclassification_size(self): return len(self.patentclassification_)
  def patentclassification_list(self): return self.patentclassification_

  def patentclassification(self, i):
    return self.patentclassification_[i]

  def set_patentclassification(self, i, x):
    self.patentclassification_[i] = x

  def add_patentclassification(self, x):
    self.patentclassification_.append(x)

  def clear_patentclassification(self):
    self.patentclassification_ = []

  def deprecated_publisherdisplayname(self): return self.deprecated_publisherdisplayname_

  def set_deprecated_publisherdisplayname(self, x):
    self.has_deprecated_publisherdisplayname_ = 1
    self.deprecated_publisherdisplayname_ = x

  def clear_deprecated_publisherdisplayname(self):
    self.has_deprecated_publisherdisplayname_ = 0
    self.deprecated_publisherdisplayname_ = ""

  def has_deprecated_publisherdisplayname(self): return self.has_deprecated_publisherdisplayname_

  def deprecated_metadatasourcefile(self): return self.deprecated_metadatasourcefile_

  def set_deprecated_metadatasourcefile(self, x):
    self.has_deprecated_metadatasourcefile_ = 1
    self.deprecated_metadatasourcefile_ = x

  def clear_deprecated_metadatasourcefile(self):
    self.has_deprecated_metadatasourcefile_ = 0
    self.deprecated_metadatasourcefile_ = ""

  def has_deprecated_metadatasourcefile(self): return self.has_deprecated_metadatasourcefile_

  def unioncatalog_size(self): return len(self.unioncatalog_)
  def unioncatalog_list(self): return self.unioncatalog_

  def unioncatalog(self, i):
    return self.unioncatalog_[i]

  def mutable_unioncatalog(self, i):
    return self.unioncatalog_[i]

  def add_unioncatalog(self):
    x = ScienceCitation_UnionCatalog()
    self.unioncatalog_.append(x)
    return x

  def clear_unioncatalog(self):
    self.unioncatalog_ = []
  def patentcountry_size(self): return len(self.patentcountry_)
  def patentcountry_list(self): return self.patentcountry_

  def patentcountry(self, i):
    return self.patentcountry_[i]

  def set_patentcountry(self, i, x):
    self.patentcountry_[i] = x

  def add_patentcountry(self, x):
    self.patentcountry_.append(x)

  def clear_patentcountry(self):
    self.patentcountry_ = []

  def patentoffice(self): return self.patentoffice_

  def set_patentoffice(self, x):
    self.has_patentoffice_ = 1
    self.patentoffice_ = x

  def clear_patentoffice(self):
    self.has_patentoffice_ = 0
    self.patentoffice_ = 0

  def has_patentoffice(self): return self.has_patentoffice_

  def patentnumber(self): return self.patentnumber_

  def set_patentnumber(self, x):
    self.has_patentnumber_ = 1
    self.patentnumber_ = x

  def clear_patentnumber(self):
    self.has_patentnumber_ = 0
    self.patentnumber_ = ""

  def has_patentnumber(self): return self.has_patentnumber_

  def anchors_size(self): return len(self.anchors_)
  def anchors_list(self): return self.anchors_

  def anchors(self, i):
    return self.anchors_[i]

  def mutable_anchors(self, i):
    return self.anchors_[i]

  def add_anchors(self):
    x = ScienceCitationAnchor()
    self.anchors_.append(x)
    return x

  def clear_anchors(self):
    self.anchors_ = []
  def numhostedpages(self): return self.numhostedpages_

  def set_numhostedpages(self, x):
    self.has_numhostedpages_ = 1
    self.numhostedpages_ = x

  def clear_numhostedpages(self):
    self.has_numhostedpages_ = 0
    self.numhostedpages_ = 0

  def has_numhostedpages(self): return self.has_numhostedpages_

  def legalcitation(self):
    if self.legalcitation_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.legalcitation_ is None: self.legalcitation_ = LegalCitation()
      finally:
        self.lazy_init_lock_.release()
    return self.legalcitation_

  def mutable_legalcitation(self): self.has_legalcitation_ = 1; return self.legalcitation()

  def clear_legalcitation(self):
    #Warning: this method does not acquire the lock.
    self.has_legalcitation_ = 0;
    if self.legalcitation_ is not None: self.legalcitation_.Clear()

  def has_legalcitation(self): return self.has_legalcitation_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_title()): self.set_title(x.title())
    for i in xrange(x.alternatetitle_size()): self.add_alternatetitle().CopyFrom(x.alternatetitle(i))
    for i in xrange(x.author_size()): self.add_author().CopyFrom(x.author(i))
    for i in xrange(x.translatedauthor_size()): self.add_translatedauthor().CopyFrom(x.translatedauthor(i))
    if (x.has_authorlisthasetal()): self.set_authorlisthasetal(x.authorlisthasetal())
    if (x.has_translatedauthorlisthasetal()): self.set_translatedauthorlisthasetal(x.translatedauthorlisthasetal())
    if (x.has_publicationday()): self.set_publicationday(x.publicationday())
    if (x.has_publicationmonth()): self.set_publicationmonth(x.publicationmonth())
    if (x.has_publicationyear()): self.set_publicationyear(x.publicationyear())
    if (x.has_onlineday()): self.set_onlineday(x.onlineday())
    if (x.has_onlinemonth()): self.set_onlinemonth(x.onlinemonth())
    if (x.has_onlineyear()): self.set_onlineyear(x.onlineyear())
    if (x.has_publicationvenue()): self.set_publicationvenue(x.publicationvenue())
    for i in xrange(x.publicationvenuevariant_size()): self.add_publicationvenuevariant(x.publicationvenuevariant(i))
    if (x.has_pages()): self.set_pages(x.pages())
    if (x.has_volume()): self.set_volume(x.volume())
    if (x.has_number()): self.set_number(x.number())
    if (x.has_documentid()): self.set_documentid(x.documentid())
    if (x.has_versionid()): self.set_versionid(x.versionid())
    if (x.has_type()): self.set_type(x.type())
    if (x.has_publisherorg()): self.set_publisherorg(x.publisherorg())
    if (x.has_publisheraddress()): self.set_publisheraddress(x.publisheraddress())
    if (x.has_chapter()): self.set_chapter(x.chapter())
    if (x.has_edition()): self.set_edition(x.edition())
    for i in xrange(x.editor_size()): self.add_editor(x.editor(i))
    if (x.has_series()): self.set_series(x.series())
    if (x.has_isbn()): self.set_isbn(x.isbn())
    if (x.has_issn()): self.set_issn(x.issn())
    for i in xrange(x.issnvariant_size()): self.add_issnvariant(x.issnvariant(i))
    if (x.has_language()): self.set_language(x.language())
    for i in xrange(x.keywords_size()): self.add_keywords(x.keywords(i))
    if (x.has_lccn()): self.set_lccn(x.lccn())
    for i in xrange(x.downloadurl_size()): self.add_downloadurl().CopyFrom(x.downloadurl(i))
    if (x.has_otherid()): self.set_otherid(x.otherid())
    if (x.has_note()): self.set_note(x.note())
    if (x.has_doi()): self.set_doi(x.doi())
    if (x.has_citationsrc()): self.set_citationsrc(x.citationsrc())
    if (x.has_numforwardlinks()): self.set_numforwardlinks(x.numforwardlinks())
    if (x.has_numbackwardlinks()): self.set_numbackwardlinks(x.numbackwardlinks())
    if (x.has_numversions()): self.set_numversions(x.numversions())
    if (x.has_numrelated()): self.set_numrelated(x.numrelated())
    if (x.has_pmid()): self.set_pmid(x.pmid())
    if (x.has_dspaceid()): self.set_dspaceid(x.dspaceid())
    if (x.has_pmcid()): self.set_pmcid(x.pmcid())
    if (x.has_sici()): self.set_sici(x.sici())
    if (x.has_publisherid()): self.set_publisherid(x.publisherid())
    if (x.has_joi()): self.set_joi(x.joi())
    if (x.has_pubvenueid()): self.set_pubvenueid(x.pubvenueid())
    if (x.has_citationsource()): self.set_citationsource(x.citationsource())
    if (x.has_borrowedfields()): self.set_borrowedfields(x.borrowedfields())
    if (x.has_borrowedauthors()): self.set_borrowedauthors(x.borrowedauthors())
    for i in xrange(x.subject_size()): self.add_subject().CopyFrom(x.subject(i))
    for i in xrange(x.patentclassification_size()): self.add_patentclassification(x.patentclassification(i))
    if (x.has_deprecated_publisherdisplayname()): self.set_deprecated_publisherdisplayname(x.deprecated_publisherdisplayname())
    if (x.has_deprecated_metadatasourcefile()): self.set_deprecated_metadatasourcefile(x.deprecated_metadatasourcefile())
    for i in xrange(x.unioncatalog_size()): self.add_unioncatalog().CopyFrom(x.unioncatalog(i))
    for i in xrange(x.patentcountry_size()): self.add_patentcountry(x.patentcountry(i))
    if (x.has_patentoffice()): self.set_patentoffice(x.patentoffice())
    if (x.has_patentnumber()): self.set_patentnumber(x.patentnumber())
    for i in xrange(x.anchors_size()): self.add_anchors().CopyFrom(x.anchors(i))
    if (x.has_numhostedpages()): self.set_numhostedpages(x.numhostedpages())
    if (x.has_legalcitation()): self.mutable_legalcitation().MergeFrom(x.legalcitation())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ScienceCitation', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ScienceCitation')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ScienceCitation', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ScienceCitation', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ScienceCitation', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_title_ != x.has_title_: return 0
    if self.has_title_ and self.title_ != x.title_: return 0
    if len(self.alternatetitle_) != len(x.alternatetitle_): return 0
    for e1, e2 in zip(self.alternatetitle_, x.alternatetitle_):
      if e1 != e2: return 0
    if len(self.author_) != len(x.author_): return 0
    for e1, e2 in zip(self.author_, x.author_):
      if e1 != e2: return 0
    if len(self.translatedauthor_) != len(x.translatedauthor_): return 0
    for e1, e2 in zip(self.translatedauthor_, x.translatedauthor_):
      if e1 != e2: return 0
    if self.has_authorlisthasetal_ != x.has_authorlisthasetal_: return 0
    if self.has_authorlisthasetal_ and self.authorlisthasetal_ != x.authorlisthasetal_: return 0
    if self.has_translatedauthorlisthasetal_ != x.has_translatedauthorlisthasetal_: return 0
    if self.has_translatedauthorlisthasetal_ and self.translatedauthorlisthasetal_ != x.translatedauthorlisthasetal_: return 0
    if self.has_publicationday_ != x.has_publicationday_: return 0
    if self.has_publicationday_ and self.publicationday_ != x.publicationday_: return 0
    if self.has_publicationmonth_ != x.has_publicationmonth_: return 0
    if self.has_publicationmonth_ and self.publicationmonth_ != x.publicationmonth_: return 0
    if self.has_publicationyear_ != x.has_publicationyear_: return 0
    if self.has_publicationyear_ and self.publicationyear_ != x.publicationyear_: return 0
    if self.has_onlineday_ != x.has_onlineday_: return 0
    if self.has_onlineday_ and self.onlineday_ != x.onlineday_: return 0
    if self.has_onlinemonth_ != x.has_onlinemonth_: return 0
    if self.has_onlinemonth_ and self.onlinemonth_ != x.onlinemonth_: return 0
    if self.has_onlineyear_ != x.has_onlineyear_: return 0
    if self.has_onlineyear_ and self.onlineyear_ != x.onlineyear_: return 0
    if self.has_publicationvenue_ != x.has_publicationvenue_: return 0
    if self.has_publicationvenue_ and self.publicationvenue_ != x.publicationvenue_: return 0
    if len(self.publicationvenuevariant_) != len(x.publicationvenuevariant_): return 0
    for e1, e2 in zip(self.publicationvenuevariant_, x.publicationvenuevariant_):
      if e1 != e2: return 0
    if self.has_pages_ != x.has_pages_: return 0
    if self.has_pages_ and self.pages_ != x.pages_: return 0
    if self.has_volume_ != x.has_volume_: return 0
    if self.has_volume_ and self.volume_ != x.volume_: return 0
    if self.has_number_ != x.has_number_: return 0
    if self.has_number_ and self.number_ != x.number_: return 0
    if self.has_documentid_ != x.has_documentid_: return 0
    if self.has_documentid_ and self.documentid_ != x.documentid_: return 0
    if self.has_versionid_ != x.has_versionid_: return 0
    if self.has_versionid_ and self.versionid_ != x.versionid_: return 0
    if self.has_type_ != x.has_type_: return 0
    if self.has_type_ and self.type_ != x.type_: return 0
    if self.has_publisherorg_ != x.has_publisherorg_: return 0
    if self.has_publisherorg_ and self.publisherorg_ != x.publisherorg_: return 0
    if self.has_publisheraddress_ != x.has_publisheraddress_: return 0
    if self.has_publisheraddress_ and self.publisheraddress_ != x.publisheraddress_: return 0
    if self.has_chapter_ != x.has_chapter_: return 0
    if self.has_chapter_ and self.chapter_ != x.chapter_: return 0
    if self.has_edition_ != x.has_edition_: return 0
    if self.has_edition_ and self.edition_ != x.edition_: return 0
    if len(self.editor_) != len(x.editor_): return 0
    for e1, e2 in zip(self.editor_, x.editor_):
      if e1 != e2: return 0
    if self.has_series_ != x.has_series_: return 0
    if self.has_series_ and self.series_ != x.series_: return 0
    if self.has_isbn_ != x.has_isbn_: return 0
    if self.has_isbn_ and self.isbn_ != x.isbn_: return 0
    if self.has_issn_ != x.has_issn_: return 0
    if self.has_issn_ and self.issn_ != x.issn_: return 0
    if len(self.issnvariant_) != len(x.issnvariant_): return 0
    for e1, e2 in zip(self.issnvariant_, x.issnvariant_):
      if e1 != e2: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if len(self.keywords_) != len(x.keywords_): return 0
    for e1, e2 in zip(self.keywords_, x.keywords_):
      if e1 != e2: return 0
    if self.has_lccn_ != x.has_lccn_: return 0
    if self.has_lccn_ and self.lccn_ != x.lccn_: return 0
    if len(self.downloadurl_) != len(x.downloadurl_): return 0
    for e1, e2 in zip(self.downloadurl_, x.downloadurl_):
      if e1 != e2: return 0
    if self.has_otherid_ != x.has_otherid_: return 0
    if self.has_otherid_ and self.otherid_ != x.otherid_: return 0
    if self.has_note_ != x.has_note_: return 0
    if self.has_note_ and self.note_ != x.note_: return 0
    if self.has_doi_ != x.has_doi_: return 0
    if self.has_doi_ and self.doi_ != x.doi_: return 0
    if self.has_citationsrc_ != x.has_citationsrc_: return 0
    if self.has_citationsrc_ and self.citationsrc_ != x.citationsrc_: return 0
    if self.has_numforwardlinks_ != x.has_numforwardlinks_: return 0
    if self.has_numforwardlinks_ and self.numforwardlinks_ != x.numforwardlinks_: return 0
    if self.has_numbackwardlinks_ != x.has_numbackwardlinks_: return 0
    if self.has_numbackwardlinks_ and self.numbackwardlinks_ != x.numbackwardlinks_: return 0
    if self.has_numversions_ != x.has_numversions_: return 0
    if self.has_numversions_ and self.numversions_ != x.numversions_: return 0
    if self.has_numrelated_ != x.has_numrelated_: return 0
    if self.has_numrelated_ and self.numrelated_ != x.numrelated_: return 0
    if self.has_pmid_ != x.has_pmid_: return 0
    if self.has_pmid_ and self.pmid_ != x.pmid_: return 0
    if self.has_dspaceid_ != x.has_dspaceid_: return 0
    if self.has_dspaceid_ and self.dspaceid_ != x.dspaceid_: return 0
    if self.has_pmcid_ != x.has_pmcid_: return 0
    if self.has_pmcid_ and self.pmcid_ != x.pmcid_: return 0
    if self.has_sici_ != x.has_sici_: return 0
    if self.has_sici_ and self.sici_ != x.sici_: return 0
    if self.has_publisherid_ != x.has_publisherid_: return 0
    if self.has_publisherid_ and self.publisherid_ != x.publisherid_: return 0
    if self.has_joi_ != x.has_joi_: return 0
    if self.has_joi_ and self.joi_ != x.joi_: return 0
    if self.has_pubvenueid_ != x.has_pubvenueid_: return 0
    if self.has_pubvenueid_ and self.pubvenueid_ != x.pubvenueid_: return 0
    if self.has_citationsource_ != x.has_citationsource_: return 0
    if self.has_citationsource_ and self.citationsource_ != x.citationsource_: return 0
    if self.has_borrowedfields_ != x.has_borrowedfields_: return 0
    if self.has_borrowedfields_ and self.borrowedfields_ != x.borrowedfields_: return 0
    if self.has_borrowedauthors_ != x.has_borrowedauthors_: return 0
    if self.has_borrowedauthors_ and self.borrowedauthors_ != x.borrowedauthors_: return 0
    if len(self.subject_) != len(x.subject_): return 0
    for e1, e2 in zip(self.subject_, x.subject_):
      if e1 != e2: return 0
    if len(self.patentclassification_) != len(x.patentclassification_): return 0
    for e1, e2 in zip(self.patentclassification_, x.patentclassification_):
      if e1 != e2: return 0
    if self.has_deprecated_publisherdisplayname_ != x.has_deprecated_publisherdisplayname_: return 0
    if self.has_deprecated_publisherdisplayname_ and self.deprecated_publisherdisplayname_ != x.deprecated_publisherdisplayname_: return 0
    if self.has_deprecated_metadatasourcefile_ != x.has_deprecated_metadatasourcefile_: return 0
    if self.has_deprecated_metadatasourcefile_ and self.deprecated_metadatasourcefile_ != x.deprecated_metadatasourcefile_: return 0
    if len(self.unioncatalog_) != len(x.unioncatalog_): return 0
    for e1, e2 in zip(self.unioncatalog_, x.unioncatalog_):
      if e1 != e2: return 0
    if len(self.patentcountry_) != len(x.patentcountry_): return 0
    for e1, e2 in zip(self.patentcountry_, x.patentcountry_):
      if e1 != e2: return 0
    if self.has_patentoffice_ != x.has_patentoffice_: return 0
    if self.has_patentoffice_ and self.patentoffice_ != x.patentoffice_: return 0
    if self.has_patentnumber_ != x.has_patentnumber_: return 0
    if self.has_patentnumber_ and self.patentnumber_ != x.patentnumber_: return 0
    if len(self.anchors_) != len(x.anchors_): return 0
    for e1, e2 in zip(self.anchors_, x.anchors_):
      if e1 != e2: return 0
    if self.has_numhostedpages_ != x.has_numhostedpages_: return 0
    if self.has_numhostedpages_ and self.numhostedpages_ != x.numhostedpages_: return 0
    if self.has_legalcitation_ != x.has_legalcitation_: return 0
    if self.has_legalcitation_ and self.legalcitation_ != x.legalcitation_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.alternatetitle_)):
      if (not self.alternatetitle_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.author_)):
      if (not self.author_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.translatedauthor_)):
      if (not self.translatedauthor_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.downloadurl_)):
      if (not self.downloadurl_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.subject_)):
      if (not self.subject_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.unioncatalog_)):
      if (not self.unioncatalog_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.anchors_)):
      if (not self.anchors_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_legalcitation_ and not self.legalcitation_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_title_): n += 1 + self.lengthString(len(self.title_))
    n += 4 * len(self.alternatetitle_)
    for i in xrange(len(self.alternatetitle_)): n += self.alternatetitle_[i].ByteSize()
    n += 2 * len(self.author_)
    for i in xrange(len(self.author_)): n += self.author_[i].ByteSize()
    n += 4 * len(self.translatedauthor_)
    for i in xrange(len(self.translatedauthor_)): n += self.translatedauthor_[i].ByteSize()
    if (self.has_authorlisthasetal_): n += 3
    if (self.has_translatedauthorlisthasetal_): n += 3
    if (self.has_publicationday_): n += 2 + self.lengthVarInt64(self.publicationday_)
    if (self.has_publicationmonth_): n += 1 + self.lengthVarInt64(self.publicationmonth_)
    if (self.has_publicationyear_): n += 1 + self.lengthVarInt64(self.publicationyear_)
    if (self.has_onlineday_): n += 2 + self.lengthVarInt64(self.onlineday_)
    if (self.has_onlinemonth_): n += 2 + self.lengthVarInt64(self.onlinemonth_)
    if (self.has_onlineyear_): n += 2 + self.lengthVarInt64(self.onlineyear_)
    if (self.has_publicationvenue_): n += 1 + self.lengthString(len(self.publicationvenue_))
    n += 2 * len(self.publicationvenuevariant_)
    for i in xrange(len(self.publicationvenuevariant_)): n += self.lengthString(len(self.publicationvenuevariant_[i]))
    if (self.has_pages_): n += 1 + self.lengthString(len(self.pages_))
    if (self.has_volume_): n += 1 + self.lengthVarInt64(self.volume_)
    if (self.has_number_): n += 1 + self.lengthString(len(self.number_))
    if (self.has_documentid_): n += 2 + self.lengthVarInt64(self.documentid_)
    if (self.has_versionid_): n += 2 + self.lengthVarInt64(self.versionid_)
    if (self.has_type_): n += 2 + self.lengthVarInt64(self.type_)
    if (self.has_publisherorg_): n += 2 + self.lengthString(len(self.publisherorg_))
    if (self.has_publisheraddress_): n += 2 + self.lengthString(len(self.publisheraddress_))
    if (self.has_chapter_): n += 2 + self.lengthString(len(self.chapter_))
    if (self.has_edition_): n += 2 + self.lengthString(len(self.edition_))
    n += 2 * len(self.editor_)
    for i in xrange(len(self.editor_)): n += self.lengthString(len(self.editor_[i]))
    if (self.has_series_): n += 2 + self.lengthString(len(self.series_))
    if (self.has_isbn_): n += 2 + self.lengthString(len(self.isbn_))
    if (self.has_issn_): n += 2 + self.lengthString(len(self.issn_))
    n += 2 * len(self.issnvariant_)
    for i in xrange(len(self.issnvariant_)): n += self.lengthString(len(self.issnvariant_[i]))
    if (self.has_language_): n += 2 + self.lengthString(len(self.language_))
    n += 2 * len(self.keywords_)
    for i in xrange(len(self.keywords_)): n += self.lengthString(len(self.keywords_[i]))
    if (self.has_lccn_): n += 2 + self.lengthString(len(self.lccn_))
    n += 4 * len(self.downloadurl_)
    for i in xrange(len(self.downloadurl_)): n += self.downloadurl_[i].ByteSize()
    if (self.has_otherid_): n += 2 + self.lengthString(len(self.otherid_))
    if (self.has_note_): n += 2 + self.lengthString(len(self.note_))
    if (self.has_doi_): n += 2 + self.lengthString(len(self.doi_))
    if (self.has_citationsrc_): n += 2 + self.lengthString(len(self.citationsrc_))
    if (self.has_numforwardlinks_): n += 2 + self.lengthVarInt64(self.numforwardlinks_)
    if (self.has_numbackwardlinks_): n += 2 + self.lengthVarInt64(self.numbackwardlinks_)
    if (self.has_numversions_): n += 2 + self.lengthVarInt64(self.numversions_)
    if (self.has_numrelated_): n += 2 + self.lengthVarInt64(self.numrelated_)
    if (self.has_pmid_): n += 2 + self.lengthString(len(self.pmid_))
    if (self.has_dspaceid_): n += 2 + self.lengthString(len(self.dspaceid_))
    if (self.has_pmcid_): n += 2 + self.lengthString(len(self.pmcid_))
    if (self.has_sici_): n += 2 + self.lengthString(len(self.sici_))
    if (self.has_publisherid_): n += 2 + self.lengthString(len(self.publisherid_))
    if (self.has_joi_): n += 2 + self.lengthString(len(self.joi_))
    if (self.has_pubvenueid_): n += 2 + self.lengthString(len(self.pubvenueid_))
    if (self.has_citationsource_): n += 2 + self.lengthVarInt64(self.citationsource_)
    if (self.has_borrowedfields_): n += 2 + self.lengthVarInt64(self.borrowedfields_)
    if (self.has_borrowedauthors_): n += 2 + self.lengthVarInt64(self.borrowedauthors_)
    n += 4 * len(self.subject_)
    for i in xrange(len(self.subject_)): n += self.subject_[i].ByteSize()
    n += 2 * len(self.patentclassification_)
    for i in xrange(len(self.patentclassification_)): n += self.lengthString(len(self.patentclassification_[i]))
    if (self.has_deprecated_publisherdisplayname_): n += 2 + self.lengthString(len(self.deprecated_publisherdisplayname_))
    if (self.has_deprecated_metadatasourcefile_): n += 2 + self.lengthString(len(self.deprecated_metadatasourcefile_))
    n += 4 * len(self.unioncatalog_)
    for i in xrange(len(self.unioncatalog_)): n += self.unioncatalog_[i].ByteSize()
    n += 2 * len(self.patentcountry_)
    for i in xrange(len(self.patentcountry_)): n += self.lengthString(len(self.patentcountry_[i]))
    if (self.has_patentoffice_): n += 2 + self.lengthVarInt64(self.patentoffice_)
    if (self.has_patentnumber_): n += 2 + self.lengthString(len(self.patentnumber_))
    n += 2 * len(self.anchors_)
    for i in xrange(len(self.anchors_)): n += self.lengthString(self.anchors_[i].ByteSize())
    if (self.has_numhostedpages_): n += 2 + self.lengthVarInt64(self.numhostedpages_)
    if (self.has_legalcitation_): n += 2 + self.lengthString(self.legalcitation_.ByteSize())
    return n + 0

  def Clear(self):
    self.clear_title()
    self.clear_alternatetitle()
    self.clear_author()
    self.clear_translatedauthor()
    self.clear_authorlisthasetal()
    self.clear_translatedauthorlisthasetal()
    self.clear_publicationday()
    self.clear_publicationmonth()
    self.clear_publicationyear()
    self.clear_onlineday()
    self.clear_onlinemonth()
    self.clear_onlineyear()
    self.clear_publicationvenue()
    self.clear_publicationvenuevariant()
    self.clear_pages()
    self.clear_volume()
    self.clear_number()
    self.clear_documentid()
    self.clear_versionid()
    self.clear_type()
    self.clear_publisherorg()
    self.clear_publisheraddress()
    self.clear_chapter()
    self.clear_edition()
    self.clear_editor()
    self.clear_series()
    self.clear_isbn()
    self.clear_issn()
    self.clear_issnvariant()
    self.clear_language()
    self.clear_keywords()
    self.clear_lccn()
    self.clear_downloadurl()
    self.clear_otherid()
    self.clear_note()
    self.clear_doi()
    self.clear_citationsrc()
    self.clear_numforwardlinks()
    self.clear_numbackwardlinks()
    self.clear_numversions()
    self.clear_numrelated()
    self.clear_pmid()
    self.clear_dspaceid()
    self.clear_pmcid()
    self.clear_sici()
    self.clear_publisherid()
    self.clear_joi()
    self.clear_pubvenueid()
    self.clear_citationsource()
    self.clear_borrowedfields()
    self.clear_borrowedauthors()
    self.clear_subject()
    self.clear_patentclassification()
    self.clear_deprecated_publisherdisplayname()
    self.clear_deprecated_metadatasourcefile()
    self.clear_unioncatalog()
    self.clear_patentcountry()
    self.clear_patentoffice()
    self.clear_patentnumber()
    self.clear_anchors()
    self.clear_numhostedpages()
    self.clear_legalcitation()

  def OutputUnchecked(self, out):
    if (self.has_title_):
      out.putVarInt32(18)
      out.putPrefixedString(self.title_)
    for i in xrange(len(self.author_)):
      out.putVarInt32(27)
      self.author_[i].OutputUnchecked(out)
      out.putVarInt32(28)
    if (self.has_publicationmonth_):
      out.putVarInt32(64)
      out.putVarInt32(self.publicationmonth_)
    if (self.has_publicationyear_):
      out.putVarInt32(72)
      out.putVarInt32(self.publicationyear_)
    if (self.has_publicationvenue_):
      out.putVarInt32(82)
      out.putPrefixedString(self.publicationvenue_)
    if (self.has_pages_):
      out.putVarInt32(90)
      out.putPrefixedString(self.pages_)
    if (self.has_volume_):
      out.putVarInt32(96)
      out.putVarInt32(self.volume_)
    if (self.has_number_):
      out.putVarInt32(106)
      out.putPrefixedString(self.number_)
    if (self.has_type_):
      out.putVarInt32(128)
      out.putVarInt32(self.type_)
    if (self.has_publisherorg_):
      out.putVarInt32(138)
      out.putPrefixedString(self.publisherorg_)
    if (self.has_publisheraddress_):
      out.putVarInt32(146)
      out.putPrefixedString(self.publisheraddress_)
    if (self.has_chapter_):
      out.putVarInt32(154)
      out.putPrefixedString(self.chapter_)
    if (self.has_edition_):
      out.putVarInt32(162)
      out.putPrefixedString(self.edition_)
    for i in xrange(len(self.editor_)):
      out.putVarInt32(170)
      out.putPrefixedString(self.editor_[i])
    if (self.has_series_):
      out.putVarInt32(178)
      out.putPrefixedString(self.series_)
    if (self.has_isbn_):
      out.putVarInt32(186)
      out.putPrefixedString(self.isbn_)
    if (self.has_issn_):
      out.putVarInt32(194)
      out.putPrefixedString(self.issn_)
    if (self.has_language_):
      out.putVarInt32(202)
      out.putPrefixedString(self.language_)
    for i in xrange(len(self.keywords_)):
      out.putVarInt32(210)
      out.putPrefixedString(self.keywords_[i])
    if (self.has_lccn_):
      out.putVarInt32(218)
      out.putPrefixedString(self.lccn_)
    for i in xrange(len(self.downloadurl_)):
      out.putVarInt32(227)
      self.downloadurl_[i].OutputUnchecked(out)
      out.putVarInt32(228)
    if (self.has_otherid_):
      out.putVarInt32(266)
      out.putPrefixedString(self.otherid_)
    if (self.has_note_):
      out.putVarInt32(274)
      out.putPrefixedString(self.note_)
    if (self.has_doi_):
      out.putVarInt32(290)
      out.putPrefixedString(self.doi_)
    if (self.has_documentid_):
      out.putVarInt32(296)
      out.putVarUint64(self.documentid_)
    if (self.has_authorlisthasetal_):
      out.putVarInt32(304)
      out.putBoolean(self.authorlisthasetal_)
    if (self.has_citationsrc_):
      out.putVarInt32(314)
      out.putPrefixedString(self.citationsrc_)
    if (self.has_numforwardlinks_):
      out.putVarInt32(328)
      out.putVarInt32(self.numforwardlinks_)
    if (self.has_numbackwardlinks_):
      out.putVarInt32(336)
      out.putVarInt32(self.numbackwardlinks_)
    if (self.has_citationsource_):
      out.putVarInt32(344)
      out.putVarInt32(self.citationsource_)
    if (self.has_numversions_):
      out.putVarInt32(368)
      out.putVarInt32(self.numversions_)
    if (self.has_pmid_):
      out.putVarInt32(378)
      out.putPrefixedString(self.pmid_)
    if (self.has_dspaceid_):
      out.putVarInt32(386)
      out.putPrefixedString(self.dspaceid_)
    for i in xrange(len(self.subject_)):
      out.putVarInt32(451)
      self.subject_[i].OutputUnchecked(out)
      out.putVarInt32(452)
    for i in xrange(len(self.alternatetitle_)):
      out.putVarInt32(475)
      self.alternatetitle_[i].OutputUnchecked(out)
      out.putVarInt32(476)
    for i in xrange(len(self.translatedauthor_)):
      out.putVarInt32(507)
      self.translatedauthor_[i].OutputUnchecked(out)
      out.putVarInt32(508)
    if (self.has_translatedauthorlisthasetal_):
      out.putVarInt32(560)
      out.putBoolean(self.translatedauthorlisthasetal_)
    if (self.has_pmcid_):
      out.putVarInt32(570)
      out.putPrefixedString(self.pmcid_)
    if (self.has_sici_):
      out.putVarInt32(578)
      out.putPrefixedString(self.sici_)
    if (self.has_publisherid_):
      out.putVarInt32(586)
      out.putPrefixedString(self.publisherid_)
    if (self.has_joi_):
      out.putVarInt32(594)
      out.putPrefixedString(self.joi_)
    if (self.has_publicationday_):
      out.putVarInt32(600)
      out.putVarInt32(self.publicationday_)
    for i in xrange(len(self.publicationvenuevariant_)):
      out.putVarInt32(610)
      out.putPrefixedString(self.publicationvenuevariant_[i])
    if (self.has_deprecated_publisherdisplayname_):
      out.putVarInt32(634)
      out.putPrefixedString(self.deprecated_publisherdisplayname_)
    if (self.has_deprecated_metadatasourcefile_):
      out.putVarInt32(642)
      out.putPrefixedString(self.deprecated_metadatasourcefile_)
    for i in xrange(len(self.issnvariant_)):
      out.putVarInt32(658)
      out.putPrefixedString(self.issnvariant_[i])
    for i in xrange(len(self.unioncatalog_)):
      out.putVarInt32(699)
      self.unioncatalog_[i].OutputUnchecked(out)
      out.putVarInt32(700)
    if (self.has_borrowedfields_):
      out.putVarInt32(736)
      out.putVarInt32(self.borrowedfields_)
    if (self.has_borrowedauthors_):
      out.putVarInt32(744)
      out.putVarInt32(self.borrowedauthors_)
    if (self.has_versionid_):
      out.putVarInt32(760)
      out.putVarUint64(self.versionid_)
    for i in xrange(len(self.patentcountry_)):
      out.putVarInt32(786)
      out.putPrefixedString(self.patentcountry_[i])
    if (self.has_numrelated_):
      out.putVarInt32(792)
      out.putVarInt32(self.numrelated_)
    if (self.has_patentoffice_):
      out.putVarInt32(800)
      out.putVarInt32(self.patentoffice_)
    if (self.has_patentnumber_):
      out.putVarInt32(810)
      out.putPrefixedString(self.patentnumber_)
    for i in xrange(len(self.patentclassification_)):
      out.putVarInt32(842)
      out.putPrefixedString(self.patentclassification_[i])
    if (self.has_pubvenueid_):
      out.putVarInt32(850)
      out.putPrefixedString(self.pubvenueid_)
    if (self.has_legalcitation_):
      out.putVarInt32(858)
      out.putVarInt32(self.legalcitation_.ByteSize())
      self.legalcitation_.OutputUnchecked(out)
    for i in xrange(len(self.anchors_)):
      out.putVarInt32(882)
      out.putVarInt32(self.anchors_[i].ByteSize())
      self.anchors_[i].OutputUnchecked(out)
    if (self.has_onlineday_):
      out.putVarInt32(888)
      out.putVarInt32(self.onlineday_)
    if (self.has_onlinemonth_):
      out.putVarInt32(896)
      out.putVarInt32(self.onlinemonth_)
    if (self.has_onlineyear_):
      out.putVarInt32(904)
      out.putVarInt32(self.onlineyear_)
    if (self.has_numhostedpages_):
      out.putVarInt32(912)
      out.putVarInt32(self.numhostedpages_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 18:
        self.set_title(d.getPrefixedString())
        continue
      if tt == 27:
        self.add_author().TryMerge(d)
        continue
      if tt == 64:
        self.set_publicationmonth(d.getVarInt32())
        continue
      if tt == 72:
        self.set_publicationyear(d.getVarInt32())
        continue
      if tt == 82:
        self.set_publicationvenue(d.getPrefixedString())
        continue
      if tt == 90:
        self.set_pages(d.getPrefixedString())
        continue
      if tt == 96:
        self.set_volume(d.getVarInt32())
        continue
      if tt == 106:
        self.set_number(d.getPrefixedString())
        continue
      if tt == 128:
        self.set_type(d.getVarInt32())
        continue
      if tt == 138:
        self.set_publisherorg(d.getPrefixedString())
        continue
      if tt == 146:
        self.set_publisheraddress(d.getPrefixedString())
        continue
      if tt == 154:
        self.set_chapter(d.getPrefixedString())
        continue
      if tt == 162:
        self.set_edition(d.getPrefixedString())
        continue
      if tt == 170:
        self.add_editor(d.getPrefixedString())
        continue
      if tt == 178:
        self.set_series(d.getPrefixedString())
        continue
      if tt == 186:
        self.set_isbn(d.getPrefixedString())
        continue
      if tt == 194:
        self.set_issn(d.getPrefixedString())
        continue
      if tt == 202:
        self.set_language(d.getPrefixedString())
        continue
      if tt == 210:
        self.add_keywords(d.getPrefixedString())
        continue
      if tt == 218:
        self.set_lccn(d.getPrefixedString())
        continue
      if tt == 227:
        self.add_downloadurl().TryMerge(d)
        continue
      if tt == 266:
        self.set_otherid(d.getPrefixedString())
        continue
      if tt == 274:
        self.set_note(d.getPrefixedString())
        continue
      if tt == 290:
        self.set_doi(d.getPrefixedString())
        continue
      if tt == 296:
        self.set_documentid(d.getVarUint64())
        continue
      if tt == 304:
        self.set_authorlisthasetal(d.getBoolean())
        continue
      if tt == 314:
        self.set_citationsrc(d.getPrefixedString())
        continue
      if tt == 328:
        self.set_numforwardlinks(d.getVarInt32())
        continue
      if tt == 336:
        self.set_numbackwardlinks(d.getVarInt32())
        continue
      if tt == 344:
        self.set_citationsource(d.getVarInt32())
        continue
      if tt == 368:
        self.set_numversions(d.getVarInt32())
        continue
      if tt == 378:
        self.set_pmid(d.getPrefixedString())
        continue
      if tt == 386:
        self.set_dspaceid(d.getPrefixedString())
        continue
      if tt == 451:
        self.add_subject().TryMerge(d)
        continue
      if tt == 475:
        self.add_alternatetitle().TryMerge(d)
        continue
      if tt == 507:
        self.add_translatedauthor().TryMerge(d)
        continue
      if tt == 560:
        self.set_translatedauthorlisthasetal(d.getBoolean())
        continue
      if tt == 570:
        self.set_pmcid(d.getPrefixedString())
        continue
      if tt == 578:
        self.set_sici(d.getPrefixedString())
        continue
      if tt == 586:
        self.set_publisherid(d.getPrefixedString())
        continue
      if tt == 594:
        self.set_joi(d.getPrefixedString())
        continue
      if tt == 600:
        self.set_publicationday(d.getVarInt32())
        continue
      if tt == 610:
        self.add_publicationvenuevariant(d.getPrefixedString())
        continue
      if tt == 634:
        self.set_deprecated_publisherdisplayname(d.getPrefixedString())
        continue
      if tt == 642:
        self.set_deprecated_metadatasourcefile(d.getPrefixedString())
        continue
      if tt == 658:
        self.add_issnvariant(d.getPrefixedString())
        continue
      if tt == 699:
        self.add_unioncatalog().TryMerge(d)
        continue
      if tt == 736:
        self.set_borrowedfields(d.getVarInt32())
        continue
      if tt == 744:
        self.set_borrowedauthors(d.getVarInt32())
        continue
      if tt == 760:
        self.set_versionid(d.getVarUint64())
        continue
      if tt == 786:
        self.add_patentcountry(d.getPrefixedString())
        continue
      if tt == 792:
        self.set_numrelated(d.getVarInt32())
        continue
      if tt == 800:
        self.set_patentoffice(d.getVarInt32())
        continue
      if tt == 810:
        self.set_patentnumber(d.getPrefixedString())
        continue
      if tt == 842:
        self.add_patentclassification(d.getPrefixedString())
        continue
      if tt == 850:
        self.set_pubvenueid(d.getPrefixedString())
        continue
      if tt == 858:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_legalcitation().TryMerge(tmp)
        continue
      if tt == 882:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_anchors().TryMerge(tmp)
        continue
      if tt == 888:
        self.set_onlineday(d.getVarInt32())
        continue
      if tt == 896:
        self.set_onlinemonth(d.getVarInt32())
        continue
      if tt == 904:
        self.set_onlineyear(d.getVarInt32())
        continue
      if tt == 912:
        self.set_numhostedpages(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_title_: res+=prefix+("Title: %s\n" % self.DebugFormatString(self.title_))
    cnt=0
    for e in self.alternatetitle_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("AlternateTitle%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.author_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Author%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.translatedauthor_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("TranslatedAuthor%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_authorlisthasetal_: res+=prefix+("AuthorListHasEtAl: %s\n" % self.DebugFormatBool(self.authorlisthasetal_))
    if self.has_translatedauthorlisthasetal_: res+=prefix+("TranslatedAuthorListHasEtAl: %s\n" % self.DebugFormatBool(self.translatedauthorlisthasetal_))
    if self.has_publicationday_: res+=prefix+("PublicationDay: %s\n" % self.DebugFormatInt32(self.publicationday_))
    if self.has_publicationmonth_: res+=prefix+("PublicationMonth: %s\n" % self.DebugFormatInt32(self.publicationmonth_))
    if self.has_publicationyear_: res+=prefix+("PublicationYear: %s\n" % self.DebugFormatInt32(self.publicationyear_))
    if self.has_onlineday_: res+=prefix+("OnlineDay: %s\n" % self.DebugFormatInt32(self.onlineday_))
    if self.has_onlinemonth_: res+=prefix+("OnlineMonth: %s\n" % self.DebugFormatInt32(self.onlinemonth_))
    if self.has_onlineyear_: res+=prefix+("OnlineYear: %s\n" % self.DebugFormatInt32(self.onlineyear_))
    if self.has_publicationvenue_: res+=prefix+("PublicationVenue: %s\n" % self.DebugFormatString(self.publicationvenue_))
    cnt=0
    for e in self.publicationvenuevariant_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("PublicationVenueVariant%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_pages_: res+=prefix+("Pages: %s\n" % self.DebugFormatString(self.pages_))
    if self.has_volume_: res+=prefix+("Volume: %s\n" % self.DebugFormatInt32(self.volume_))
    if self.has_number_: res+=prefix+("Number: %s\n" % self.DebugFormatString(self.number_))
    if self.has_documentid_: res+=prefix+("DocumentID: %s\n" % self.DebugFormatInt64(self.documentid_))
    if self.has_versionid_: res+=prefix+("VersionID: %s\n" % self.DebugFormatInt64(self.versionid_))
    if self.has_type_: res+=prefix+("Type: %s\n" % self.DebugFormatInt32(self.type_))
    if self.has_publisherorg_: res+=prefix+("PublisherOrg: %s\n" % self.DebugFormatString(self.publisherorg_))
    if self.has_publisheraddress_: res+=prefix+("PublisherAddress: %s\n" % self.DebugFormatString(self.publisheraddress_))
    if self.has_chapter_: res+=prefix+("Chapter: %s\n" % self.DebugFormatString(self.chapter_))
    if self.has_edition_: res+=prefix+("Edition: %s\n" % self.DebugFormatString(self.edition_))
    cnt=0
    for e in self.editor_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Editor%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_series_: res+=prefix+("Series: %s\n" % self.DebugFormatString(self.series_))
    if self.has_isbn_: res+=prefix+("ISBN: %s\n" % self.DebugFormatString(self.isbn_))
    if self.has_issn_: res+=prefix+("ISSN: %s\n" % self.DebugFormatString(self.issn_))
    cnt=0
    for e in self.issnvariant_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("ISSNVariant%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatString(self.language_))
    cnt=0
    for e in self.keywords_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Keywords%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_lccn_: res+=prefix+("LCCN: %s\n" % self.DebugFormatString(self.lccn_))
    cnt=0
    for e in self.downloadurl_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DownloadURL%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_otherid_: res+=prefix+("OtherID: %s\n" % self.DebugFormatString(self.otherid_))
    if self.has_note_: res+=prefix+("Note: %s\n" % self.DebugFormatString(self.note_))
    if self.has_doi_: res+=prefix+("DOI: %s\n" % self.DebugFormatString(self.doi_))
    if self.has_citationsrc_: res+=prefix+("CitationSrc: %s\n" % self.DebugFormatString(self.citationsrc_))
    if self.has_numforwardlinks_: res+=prefix+("NumForwardLinks: %s\n" % self.DebugFormatInt32(self.numforwardlinks_))
    if self.has_numbackwardlinks_: res+=prefix+("NumBackwardLinks: %s\n" % self.DebugFormatInt32(self.numbackwardlinks_))
    if self.has_numversions_: res+=prefix+("NumVersions: %s\n" % self.DebugFormatInt32(self.numversions_))
    if self.has_numrelated_: res+=prefix+("NumRelated: %s\n" % self.DebugFormatInt32(self.numrelated_))
    if self.has_pmid_: res+=prefix+("PMID: %s\n" % self.DebugFormatString(self.pmid_))
    if self.has_dspaceid_: res+=prefix+("DspaceID: %s\n" % self.DebugFormatString(self.dspaceid_))
    if self.has_pmcid_: res+=prefix+("PMCID: %s\n" % self.DebugFormatString(self.pmcid_))
    if self.has_sici_: res+=prefix+("SICI: %s\n" % self.DebugFormatString(self.sici_))
    if self.has_publisherid_: res+=prefix+("PublisherId: %s\n" % self.DebugFormatString(self.publisherid_))
    if self.has_joi_: res+=prefix+("JOI: %s\n" % self.DebugFormatString(self.joi_))
    if self.has_pubvenueid_: res+=prefix+("PubvenueID: %s\n" % self.DebugFormatString(self.pubvenueid_))
    if self.has_citationsource_: res+=prefix+("CitationSource: %s\n" % self.DebugFormatInt32(self.citationsource_))
    if self.has_borrowedfields_: res+=prefix+("BorrowedFields: %s\n" % self.DebugFormatInt32(self.borrowedfields_))
    if self.has_borrowedauthors_: res+=prefix+("BorrowedAuthors: %s\n" % self.DebugFormatInt32(self.borrowedauthors_))
    cnt=0
    for e in self.subject_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Subject%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.patentclassification_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("PatentClassification%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_deprecated_publisherdisplayname_: res+=prefix+("DEPRECATED_PublisherDisplayName: %s\n" % self.DebugFormatString(self.deprecated_publisherdisplayname_))
    if self.has_deprecated_metadatasourcefile_: res+=prefix+("DEPRECATED_MetadataSourceFile: %s\n" % self.DebugFormatString(self.deprecated_metadatasourcefile_))
    cnt=0
    for e in self.unioncatalog_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("UnionCatalog%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.patentcountry_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("PatentCountry%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_patentoffice_: res+=prefix+("PatentOffice: %s\n" % self.DebugFormatInt32(self.patentoffice_))
    if self.has_patentnumber_: res+=prefix+("PatentNumber: %s\n" % self.DebugFormatString(self.patentnumber_))
    cnt=0
    for e in self.anchors_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Anchors%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_numhostedpages_: res+=prefix+("NumHostedPages: %s\n" % self.DebugFormatInt32(self.numhostedpages_))
    if self.has_legalcitation_:
      res+=prefix+"LegalCitation <\n"
      res+=self.legalcitation_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

  kTitle = 2
  kAlternateTitleGroup = 59
  kAlternateTitleTitle = 60
  kAlternateTitleLanguage = 61
  kAuthorGroup = 3
  kAuthorLastName = 4
  kAuthorOtherNames = 5
  kAuthorDepartment = 6
  kAuthorInstitution = 7
  kAuthorEmail = 35
  kAuthorComment = 83
  kAuthorIsCJKForeignName = 86
  kAuthorType = 96
  kTranslatedAuthorGroup = 63
  kTranslatedAuthorLastName = 64
  kTranslatedAuthorOtherNames = 65
  kTranslatedAuthorDepartment = 66
  kTranslatedAuthorInstitution = 67
  kTranslatedAuthorEmail = 68
  kTranslatedAuthorLanguage = 69
  kTranslatedAuthorType = 97
  kAuthorListHasEtAl = 38
  kTranslatedAuthorListHasEtAl = 70
  kPublicationDay = 75
  kPublicationMonth = 8
  kPublicationYear = 9
  kOnlineDay = 111
  kOnlineMonth = 112
  kOnlineYear = 113
  kPublicationVenue = 10
  kPublicationVenueVariant = 76
  kPages = 11
  kVolume = 12
  kNumber = 13
  kDocumentID = 37
  kVersionID = 95
  kType = 16
  kPublisherOrg = 17
  kPublisherAddress = 18
  kChapter = 19
  kEdition = 20
  kEditor = 21
  kSeries = 22
  kISBN = 23
  kISSN = 24
  kISSNVariant = 82
  kLanguage = 25
  kKeywords = 26
  kLCCN = 27
  kDownloadURLGroup = 28
  kDownloadURLUrlStr = 29
  kDownloadURLDownloadMonth = 30
  kDownloadURLDownloadDay = 31
  kDownloadURLDownloadYear = 32
  kDownloadURLContentType = 40
  kDownloadURLWordCount = 44
  kDownloadURLNoIndex = 45
  kDownloadURLMustInclude = 62
  kDownloadURLLegalMustInclude = 108
  kDownloadURLIndexPriority = 94
  kDownloadURLDisplayPriority = 81
  kDownloadURLDisplayOrg = 84
  kDownloadURLMetadataUrl = 85
  kDownloadURLPageCount = 102
  kDownloadURLExcerptContent = 103
  kDownloadURLExcerptDebugLabel = 104
  kDownloadURLBrokenLandingPage = 115
  kDownloadURLOceanView = 116
  kOtherID = 33
  kNote = 34
  kDOI = 36
  kCitationSrc = 39
  kNumForwardLinks = 41
  kNumBackwardLinks = 42
  kNumVersions = 46
  kNumRelated = 99
  kPMID = 47
  kDspaceID = 48
  kPMCID = 71
  kSICI = 72
  kPublisherId = 73
  kJOI = 74
  kPubvenueID = 106
  kCitationSource = 43
  kBorrowedFields = 92
  kBorrowedAuthors = 93
  kSubjectGroup = 56
  kSubjectName = 57
  kSubjectProbability = 58
  kPatentClassification = 105
  kDEPRECATED_PublisherDisplayName = 79
  kDEPRECATED_MetadataSourceFile = 80
  kUnionCatalogGroup = 87
  kUnionCatalogUrl = 88
  kUnionCatalogNumLibraries = 89
  kUnionCatalogMetadataUrl = 90
  kUnionCatalogSubject = 91
  kPatentCountry = 98
  kPatentOffice = 100
  kPatentNumber = 101
  kAnchors = 110
  kNumHostedPages = 114
  kLegalCitation = 107

  _TEXT = (
   "ErrorCode",  #   0
   None,  #   1
   "Title",  #   2
   "Author",  #   3
   "LastName",  #   4
   "OtherNames",  #   5
   "Department",  #   6
   "Institution",  #   7
   "PublicationMonth",  #   8
   "PublicationYear",  #   9
   "PublicationVenue",  #  10
   "Pages",  #  11
   "Volume",  #  12
   "Number",  #  13
   None,  #  14
   None,  #  15
   "Type",  #  16
   "PublisherOrg",  #  17
   "PublisherAddress",  #  18
   "Chapter",  #  19
   "Edition",  #  20
   "Editor",  #  21
   "Series",  #  22
   "ISBN",  #  23
   "ISSN",  #  24
   "Language",  #  25
   "Keywords",  #  26
   "LCCN",  #  27
   "DownloadURL",  #  28
   "UrlStr",  #  29
   "DownloadMonth",  #  30
   "DownloadDay",  #  31
   "DownloadYear",  #  32
   "OtherID",  #  33
   "Note",  #  34
   "Email",  #  35
   "DOI",  #  36
   "DocumentID",  #  37
   "AuthorListHasEtAl",  #  38
   "CitationSrc",  #  39
   "ContentType",  #  40
   "NumForwardLinks",  #  41
   "NumBackwardLinks",  #  42
   "CitationSource",  #  43
   "WordCount",  #  44
   "NoIndex",  #  45
   "NumVersions",  #  46
   "PMID",  #  47
   "DspaceID",  #  48
   None,  #  49
   None,  #  50
   None,  #  51
   None,  #  52
   None,  #  53
   None,  #  54
   None,  #  55
   "Subject",  #  56
   "Name",  #  57
   "Probability",  #  58
   "AlternateTitle",  #  59
   "Title",  #  60
   "Language",  #  61
   "MustInclude",  #  62
   "TranslatedAuthor",  #  63
   "LastName",  #  64
   "OtherNames",  #  65
   "Department",  #  66
   "Institution",  #  67
   "Email",  #  68
   "Language",  #  69
   "TranslatedAuthorListHasEtAl",  #  70
   "PMCID",  #  71
   "SICI",  #  72
   "PublisherId",  #  73
   "JOI",  #  74
   "PublicationDay",  #  75
   "PublicationVenueVariant",  #  76
   None,  #  77
   None,  #  78
   "DEPRECATED_PublisherDisplayName",  #  79
   "DEPRECATED_MetadataSourceFile",  #  80
   "DisplayPriority",  #  81
   "ISSNVariant",  #  82
   "Comment",  #  83
   "DisplayOrg",  #  84
   "MetadataUrl",  #  85
   "IsCJKForeignName",  #  86
   "UnionCatalog",  #  87
   "Url",  #  88
   "NumLibraries",  #  89
   "MetadataUrl",  #  90
   "Subject",  #  91
   "BorrowedFields",  #  92
   "BorrowedAuthors",  #  93
   "IndexPriority",  #  94
   "VersionID",  #  95
   "Type",  #  96
   "Type",  #  97
   "PatentCountry",  #  98
   "NumRelated",  #  99
   "PatentOffice",  # 100
   "PatentNumber",  # 101
   "PageCount",  # 102
   "ExcerptContent",  # 103
   "ExcerptDebugLabel",  # 104
   "PatentClassification",  # 105
   "PubvenueID",  # 106
   "LegalCitation",  # 107
   "LegalMustInclude",  # 108
   None,  # 109
   "Anchors",  # 110
   "OnlineDay",  # 111
   "OnlineMonth",  # 112
   "OnlineYear",  # 113
   "NumHostedPages",  # 114
   "BrokenLandingPage",  # 115
   "OceanView",  # 116
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.MAX_TYPE,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STARTGROUP,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.STRING,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.STRING,  #  10

   ProtocolBuffer.Encoder.STRING,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.STRING,  #  13

   ProtocolBuffer.Encoder.MAX_TYPE,  #  14

   ProtocolBuffer.Encoder.MAX_TYPE,  #  15

   ProtocolBuffer.Encoder.NUMERIC,  #  16

   ProtocolBuffer.Encoder.STRING,  #  17

   ProtocolBuffer.Encoder.STRING,  #  18

   ProtocolBuffer.Encoder.STRING,  #  19

   ProtocolBuffer.Encoder.STRING,  #  20

   ProtocolBuffer.Encoder.STRING,  #  21

   ProtocolBuffer.Encoder.STRING,  #  22

   ProtocolBuffer.Encoder.STRING,  #  23

   ProtocolBuffer.Encoder.STRING,  #  24

   ProtocolBuffer.Encoder.STRING,  #  25

   ProtocolBuffer.Encoder.STRING,  #  26

   ProtocolBuffer.Encoder.STRING,  #  27

   ProtocolBuffer.Encoder.STARTGROUP,  #  28

   ProtocolBuffer.Encoder.STRING,  #  29

   ProtocolBuffer.Encoder.NUMERIC,  #  30

   ProtocolBuffer.Encoder.NUMERIC,  #  31

   ProtocolBuffer.Encoder.NUMERIC,  #  32

   ProtocolBuffer.Encoder.STRING,  #  33

   ProtocolBuffer.Encoder.STRING,  #  34

   ProtocolBuffer.Encoder.STRING,  #  35

   ProtocolBuffer.Encoder.STRING,  #  36

   ProtocolBuffer.Encoder.NUMERIC,  #  37

   ProtocolBuffer.Encoder.NUMERIC,  #  38

   ProtocolBuffer.Encoder.STRING,  #  39

   ProtocolBuffer.Encoder.NUMERIC,  #  40

   ProtocolBuffer.Encoder.NUMERIC,  #  41

   ProtocolBuffer.Encoder.NUMERIC,  #  42

   ProtocolBuffer.Encoder.NUMERIC,  #  43

   ProtocolBuffer.Encoder.NUMERIC,  #  44

   ProtocolBuffer.Encoder.NUMERIC,  #  45

   ProtocolBuffer.Encoder.NUMERIC,  #  46

   ProtocolBuffer.Encoder.STRING,  #  47

   ProtocolBuffer.Encoder.STRING,  #  48

   ProtocolBuffer.Encoder.MAX_TYPE,  #  49

   ProtocolBuffer.Encoder.MAX_TYPE,  #  50

   ProtocolBuffer.Encoder.MAX_TYPE,  #  51

   ProtocolBuffer.Encoder.MAX_TYPE,  #  52

   ProtocolBuffer.Encoder.MAX_TYPE,  #  53

   ProtocolBuffer.Encoder.MAX_TYPE,  #  54

   ProtocolBuffer.Encoder.MAX_TYPE,  #  55

   ProtocolBuffer.Encoder.STARTGROUP,  #  56

   ProtocolBuffer.Encoder.STRING,  #  57

   ProtocolBuffer.Encoder.DOUBLE,  #  58

   ProtocolBuffer.Encoder.STARTGROUP,  #  59

   ProtocolBuffer.Encoder.STRING,  #  60

   ProtocolBuffer.Encoder.STRING,  #  61

   ProtocolBuffer.Encoder.NUMERIC,  #  62

   ProtocolBuffer.Encoder.STARTGROUP,  #  63

   ProtocolBuffer.Encoder.STRING,  #  64

   ProtocolBuffer.Encoder.STRING,  #  65

   ProtocolBuffer.Encoder.STRING,  #  66

   ProtocolBuffer.Encoder.STRING,  #  67

   ProtocolBuffer.Encoder.STRING,  #  68

   ProtocolBuffer.Encoder.STRING,  #  69

   ProtocolBuffer.Encoder.NUMERIC,  #  70

   ProtocolBuffer.Encoder.STRING,  #  71

   ProtocolBuffer.Encoder.STRING,  #  72

   ProtocolBuffer.Encoder.STRING,  #  73

   ProtocolBuffer.Encoder.STRING,  #  74

   ProtocolBuffer.Encoder.NUMERIC,  #  75

   ProtocolBuffer.Encoder.STRING,  #  76

   ProtocolBuffer.Encoder.MAX_TYPE,  #  77

   ProtocolBuffer.Encoder.MAX_TYPE,  #  78

   ProtocolBuffer.Encoder.STRING,  #  79

   ProtocolBuffer.Encoder.STRING,  #  80

   ProtocolBuffer.Encoder.NUMERIC,  #  81

   ProtocolBuffer.Encoder.STRING,  #  82

   ProtocolBuffer.Encoder.STRING,  #  83

   ProtocolBuffer.Encoder.STRING,  #  84

   ProtocolBuffer.Encoder.STRING,  #  85

   ProtocolBuffer.Encoder.NUMERIC,  #  86

   ProtocolBuffer.Encoder.STARTGROUP,  #  87

   ProtocolBuffer.Encoder.STRING,  #  88

   ProtocolBuffer.Encoder.NUMERIC,  #  89

   ProtocolBuffer.Encoder.STRING,  #  90

   ProtocolBuffer.Encoder.STRING,  #  91

   ProtocolBuffer.Encoder.NUMERIC,  #  92

   ProtocolBuffer.Encoder.NUMERIC,  #  93

   ProtocolBuffer.Encoder.NUMERIC,  #  94

   ProtocolBuffer.Encoder.NUMERIC,  #  95

   ProtocolBuffer.Encoder.NUMERIC,  #  96

   ProtocolBuffer.Encoder.NUMERIC,  #  97

   ProtocolBuffer.Encoder.STRING,  #  98

   ProtocolBuffer.Encoder.NUMERIC,  #  99

   ProtocolBuffer.Encoder.NUMERIC,  # 100

   ProtocolBuffer.Encoder.STRING,  # 101

   ProtocolBuffer.Encoder.NUMERIC,  # 102

   ProtocolBuffer.Encoder.STRING,  # 103

   ProtocolBuffer.Encoder.STRING,  # 104

   ProtocolBuffer.Encoder.STRING,  # 105

   ProtocolBuffer.Encoder.STRING,  # 106

   ProtocolBuffer.Encoder.STRING,  # 107

   ProtocolBuffer.Encoder.NUMERIC,  # 108

   ProtocolBuffer.Encoder.MAX_TYPE,  # 109

   ProtocolBuffer.Encoder.STRING,  # 110

   ProtocolBuffer.Encoder.NUMERIC,  # 111

   ProtocolBuffer.Encoder.NUMERIC,  # 112

   ProtocolBuffer.Encoder.NUMERIC,  # 113

   ProtocolBuffer.Encoder.NUMERIC,  # 114

   ProtocolBuffer.Encoder.NUMERIC,  # 115

   ProtocolBuffer.Encoder.STRING,  # 116

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2e,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2f,
    0x63,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2f,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x63,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0f,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x13,
    0x1a,
    0x05,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x41,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x3b,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x41,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x2e,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x3c,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x41,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x3d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x03,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x61,
    0x73,
    0x74,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x73,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x44,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x49,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x45,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x20,
    0x23,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x53,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x49,
    0x73,
    0x43,
    0x4a,
    0x4b,
    0x46,
    0x6f,
    0x72,
    0x65,
    0x69,
    0x67,
    0x6e,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x56,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x60,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x04,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x3f,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x61,
    0x73,
    0x74,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x40,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x73,
    0x20,
    0x41,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x44,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x42,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x49,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x43,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x45,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x20,
    0x44,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x45,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x2e,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x61,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x0d,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x4c,
    0x69,
    0x73,
    0x74,
    0x48,
    0x61,
    0x73,
    0x45,
    0x74,
    0x41,
    0x6c,
    0x20,
    0x26,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x4c,
    0x69,
    0x73,
    0x74,
    0x48,
    0x61,
    0x73,
    0x45,
    0x74,
    0x41,
    0x6c,
    0x20,
    0x46,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x44,
    0x61,
    0x79,
    0x20,
    0x4b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x4d,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x59,
    0x65,
    0x61,
    0x72,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x4f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x44,
    0x61,
    0x79,
    0x20,
    0x6f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x4f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x4d,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x20,
    0x70,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x4f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x59,
    0x65,
    0x61,
    0x72,
    0x20,
    0x71,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x56,
    0x65,
    0x6e,
    0x75,
    0x65,
    0x20,
    0x0a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x56,
    0x65,
    0x6e,
    0x75,
    0x65,
    0x56,
    0x61,
    0x72,
    0x69,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x4c,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x50,
    0x61,
    0x67,
    0x65,
    0x73,
    0x20,
    0x0b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x56,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x65,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x4e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x0d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x49,
    0x44,
    0x20,
    0x25,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x49,
    0x44,
    0x20,
    0x5f,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x10,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x72,
    0x4f,
    0x72,
    0x67,
    0x20,
    0x11,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x72,
    0x41,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x20,
    0x12,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x43,
    0x68,
    0x61,
    0x70,
    0x74,
    0x65,
    0x72,
    0x20,
    0x13,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x45,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x14,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x45,
    0x64,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x15,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x53,
    0x65,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x16,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x49,
    0x53,
    0x42,
    0x4e,
    0x20,
    0x17,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x49,
    0x53,
    0x53,
    0x4e,
    0x20,
    0x18,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x49,
    0x53,
    0x53,
    0x4e,
    0x56,
    0x61,
    0x72,
    0x69,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x52,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x19,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x4b,
    0x65,
    0x79,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x20,
    0x1a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x4c,
    0x43,
    0x43,
    0x4e,
    0x20,
    0x1b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x20,
    0x1c,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x53,
    0x74,
    0x72,
    0x20,
    0x1d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x4d,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x20,
    0x1e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x44,
    0x61,
    0x79,
    0x20,
    0x1f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x59,
    0x65,
    0x61,
    0x72,
    0x20,
    0x20,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x28,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x57,
    0x6f,
    0x72,
    0x64,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x2c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x4e,
    0x6f,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x2d,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x4d,
    0x75,
    0x73,
    0x74,
    0x49,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x20,
    0x3e,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x4c,
    0x65,
    0x67,
    0x61,
    0x6c,
    0x4d,
    0x75,
    0x73,
    0x74,
    0x49,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x20,
    0x6c,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x50,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x5e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x44,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x50,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x51,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x44,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x4f,
    0x72,
    0x67,
    0x20,
    0x54,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x55,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x66,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x45,
    0x78,
    0x63,
    0x65,
    0x72,
    0x70,
    0x74,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x67,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x45,
    0x78,
    0x63,
    0x65,
    0x72,
    0x70,
    0x74,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x4c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x20,
    0x68,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x42,
    0x72,
    0x6f,
    0x6b,
    0x65,
    0x6e,
    0x4c,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x50,
    0x61,
    0x67,
    0x65,
    0x20,
    0x73,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x55,
    0x52,
    0x4c,
    0x2e,
    0x4f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x56,
    0x69,
    0x65,
    0x77,
    0x20,
    0x74,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x10,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x4f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x56,
    0x69,
    0x65,
    0x77,
    0x60,
    0x31,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x4f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x49,
    0x44,
    0x20,
    0x21,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x4e,
    0x6f,
    0x74,
    0x65,
    0x20,
    0x22,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x44,
    0x4f,
    0x49,
    0x20,
    0x24,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x72,
    0x63,
    0x20,
    0x27,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x4e,
    0x75,
    0x6d,
    0x46,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x20,
    0x29,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x4e,
    0x75,
    0x6d,
    0x42,
    0x61,
    0x63,
    0x6b,
    0x77,
    0x61,
    0x72,
    0x64,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x20,
    0x2a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x4e,
    0x75,
    0x6d,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x2e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x4e,
    0x75,
    0x6d,
    0x52,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x63,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x50,
    0x4d,
    0x49,
    0x44,
    0x20,
    0x2f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x44,
    0x73,
    0x70,
    0x61,
    0x63,
    0x65,
    0x49,
    0x44,
    0x20,
    0x30,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x50,
    0x4d,
    0x43,
    0x49,
    0x44,
    0x20,
    0x47,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x53,
    0x49,
    0x43,
    0x49,
    0x20,
    0x48,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x72,
    0x49,
    0x64,
    0x20,
    0x49,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x4a,
    0x4f,
    0x49,
    0x20,
    0x4a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x50,
    0x75,
    0x62,
    0x76,
    0x65,
    0x6e,
    0x75,
    0x65,
    0x49,
    0x44,
    0x20,
    0x6a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x2b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x42,
    0x6f,
    0x72,
    0x72,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x46,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x73,
    0x20,
    0x5c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x42,
    0x6f,
    0x72,
    0x72,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x20,
    0x5d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x53,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x38,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x53,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x2e,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x39,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x56,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x53,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x2e,
    0x50,
    0x72,
    0x6f,
    0x62,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x3a,
    0x28,
    0x01,
    0x30,
    0x01,
    0x38,
    0x02,
    0x60,
    0x56,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x50,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x69,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x72,
    0x44,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x4f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x50,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x55,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x61,
    0x74,
    0x61,
    0x6c,
    0x6f,
    0x67,
    0x20,
    0x57,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x55,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x61,
    0x74,
    0x61,
    0x6c,
    0x6f,
    0x67,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x58,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x5c,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x55,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x61,
    0x74,
    0x61,
    0x6c,
    0x6f,
    0x67,
    0x2e,
    0x4e,
    0x75,
    0x6d,
    0x4c,
    0x69,
    0x62,
    0x72,
    0x61,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x59,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x5c,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x55,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x61,
    0x74,
    0x61,
    0x6c,
    0x6f,
    0x67,
    0x2e,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x5a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x5c,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x55,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x61,
    0x74,
    0x61,
    0x6c,
    0x6f,
    0x67,
    0x2e,
    0x53,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x5b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x60,
    0x5c,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x50,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x20,
    0x62,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x50,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x65,
    0x20,
    0x64,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x50,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x65,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x20,
    0x6e,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x15,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x4e,
    0x75,
    0x6d,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x65,
    0x64,
    0x50,
    0x61,
    0x67,
    0x65,
    0x73,
    0x20,
    0x72,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4c,
    0x65,
    0x67,
    0x61,
    0x6c,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6b,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0d,
    0x4c,
    0x65,
    0x67,
    0x61,
    0x6c,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xc2,
    0xa7,
    0x97,
    0x01,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0b,
    0x41,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x46,
    0x49,
    0x52,
    0x53,
    0x54,
    0x5f,
    0x41,
    0x52,
    0x54,
    0x49,
    0x43,
    0x4c,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x05,
    0x50,
    0x41,
    0x50,
    0x45,
    0x52,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x04,
    0x42,
    0x4f,
    0x4f,
    0x4b,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x07,
    0x42,
    0x4f,
    0x4f,
    0x4b,
    0x4c,
    0x45,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x43,
    0x4f,
    0x4e,
    0x46,
    0x45,
    0x52,
    0x45,
    0x4e,
    0x43,
    0x45,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x06,
    0x49,
    0x4e,
    0x42,
    0x4f,
    0x4f,
    0x4b,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x49,
    0x4e,
    0x43,
    0x4f,
    0x4c,
    0x4c,
    0x45,
    0x43,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x06,
    0x4d,
    0x41,
    0x4e,
    0x55,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x06,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x4d,
    0x53,
    0x5f,
    0x54,
    0x48,
    0x45,
    0x53,
    0x49,
    0x53,
    0x98,
    0x01,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x04,
    0x4d,
    0x49,
    0x53,
    0x43,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x50,
    0x48,
    0x44,
    0x5f,
    0x54,
    0x48,
    0x45,
    0x53,
    0x49,
    0x53,
    0x98,
    0x01,
    0x09,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x54,
    0x45,
    0x43,
    0x48,
    0x52,
    0x45,
    0x50,
    0x4f,
    0x52,
    0x54,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x55,
    0x4e,
    0x50,
    0x55,
    0x42,
    0x4c,
    0x49,
    0x53,
    0x48,
    0x45,
    0x44,
    0x98,
    0x01,
    0x0b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x06,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x98,
    0x01,
    0x0c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x08,
    0x57,
    0x45,
    0x42,
    0x5f,
    0x53,
    0x49,
    0x54,
    0x45,
    0x98,
    0x01,
    0x0d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x42,
    0x53,
    0x5f,
    0x54,
    0x48,
    0x45,
    0x53,
    0x49,
    0x53,
    0x98,
    0x01,
    0x0e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x52,
    0x45,
    0x56,
    0x49,
    0x45,
    0x57,
    0x5f,
    0x41,
    0x52,
    0x54,
    0x49,
    0x43,
    0x4c,
    0x45,
    0x98,
    0x01,
    0x0f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x07,
    0x4a,
    0x4f,
    0x55,
    0x52,
    0x4e,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x10,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x4c,
    0x45,
    0x47,
    0x41,
    0x4c,
    0x5f,
    0x44,
    0x4f,
    0x43,
    0x98,
    0x01,
    0x11,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x4e,
    0x55,
    0x4d,
    0x5f,
    0x41,
    0x52,
    0x54,
    0x49,
    0x43,
    0x4c,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x53,
    0x98,
    0x01,
    0x12,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0f,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x6f,
    0x72,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x57,
    0x52,
    0x49,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x45,
    0x44,
    0x49,
    0x54,
    0x4f,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x43,
    0x52,
    0x45,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x42,
    0x59,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x50,
    0x48,
    0x4f,
    0x54,
    0x4f,
    0x47,
    0x52,
    0x41,
    0x50,
    0x48,
    0x45,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x50,
    0x48,
    0x4f,
    0x54,
    0x4f,
    0x5f,
    0x54,
    0x45,
    0x58,
    0x54,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x54,
    0x52,
    0x41,
    0x4e,
    0x53,
    0x4c,
    0x41,
    0x54,
    0x4f,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x43,
    0x4f,
    0x52,
    0x50,
    0x4f,
    0x52,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x06,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x43,
    0x4f,
    0x4d,
    0x50,
    0x49,
    0x4c,
    0x45,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x49,
    0x4c,
    0x4c,
    0x55,
    0x53,
    0x54,
    0x52,
    0x41,
    0x54,
    0x4f,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x4f,
    0x54,
    0x48,
    0x45,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x09,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x49,
    0x4e,
    0x56,
    0x45,
    0x4e,
    0x54,
    0x4f,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x41,
    0x53,
    0x53,
    0x49,
    0x47,
    0x4e,
    0x45,
    0x45,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x0b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x45,
    0x58,
    0x41,
    0x4d,
    0x49,
    0x4e,
    0x45,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x0c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x41,
    0x54,
    0x54,
    0x4f,
    0x52,
    0x4e,
    0x45,
    0x59,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x0d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x52,
    0x45,
    0x56,
    0x49,
    0x45,
    0x57,
    0x45,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x49,
    0x42,
    0x55,
    0x54,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x0e,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x12,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x46,
    0x49,
    0x52,
    0x53,
    0x54,
    0x5f,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x44,
    0x42,
    0x4c,
    0x50,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x58,
    0x52,
    0x45,
    0x46,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x49,
    0x4f,
    0x50,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x57,
    0x45,
    0x42,
    0x5f,
    0x50,
    0x44,
    0x46,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x57,
    0x45,
    0x42,
    0x5f,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x4f,
    0x43,
    0x4c,
    0x43,
    0x98,
    0x01,
    0x06,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x49,
    0x4e,
    0x53,
    0x50,
    0x45,
    0x43,
    0x98,
    0x01,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x42,
    0x49,
    0x42,
    0x54,
    0x45,
    0x58,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x42,
    0x4c,
    0x41,
    0x43,
    0x4b,
    0x57,
    0x45,
    0x4c,
    0x4c,
    0x98,
    0x01,
    0x09,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x53,
    0x4c,
    0x41,
    0x43,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x4f,
    0x4e,
    0x49,
    0x58,
    0x5f,
    0x49,
    0x4e,
    0x47,
    0x52,
    0x41,
    0x4d,
    0x98,
    0x01,
    0x0b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1c,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x4f,
    0x4e,
    0x49,
    0x58,
    0x5f,
    0x42,
    0x41,
    0x4b,
    0x45,
    0x52,
    0x5f,
    0x41,
    0x4e,
    0x44,
    0x5f,
    0x54,
    0x41,
    0x59,
    0x4c,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x0c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x4f,
    0x4e,
    0x49,
    0x58,
    0x5f,
    0x4f,
    0x54,
    0x48,
    0x45,
    0x52,
    0x98,
    0x01,
    0x0d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x4f,
    0x41,
    0x49,
    0x98,
    0x01,
    0x0e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x50,
    0x55,
    0x42,
    0x4c,
    0x49,
    0x53,
    0x48,
    0x45,
    0x52,
    0x5f,
    0x54,
    0x4f,
    0x43,
    0x98,
    0x01,
    0x0f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x43,
    0x53,
    0x41,
    0x98,
    0x01,
    0x10,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x55,
    0x4e,
    0x49,
    0x4f,
    0x4e,
    0x5f,
    0x43,
    0x41,
    0x54,
    0x41,
    0x4c,
    0x4f,
    0x47,
    0x98,
    0x01,
    0x11,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x49,
    0x4e,
    0x49,
    0x53,
    0x54,
    0x98,
    0x01,
    0x12,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x53,
    0x50,
    0x45,
    0x43,
    0x49,
    0x41,
    0x4c,
    0x5f,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x98,
    0x01,
    0x13,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x45,
    0x43,
    0x4f,
    0x4e,
    0x49,
    0x53,
    0x98,
    0x01,
    0x14,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x45,
    0x4d,
    0x42,
    0x45,
    0x44,
    0x44,
    0x45,
    0x44,
    0x5f,
    0x52,
    0x44,
    0x46,
    0x98,
    0x01,
    0x15,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x41,
    0x52,
    0x42,
    0x49,
    0x43,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x16,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x4e,
    0x55,
    0x4d,
    0x5f,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x53,
    0x98,
    0x01,
    0x17,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x09,
    0x46,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x46,
    0x49,
    0x45,
    0x4c,
    0x44,
    0x5f,
    0x50,
    0x55,
    0x42,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x46,
    0x49,
    0x45,
    0x4c,
    0x44,
    0x5f,
    0x50,
    0x55,
    0x42,
    0x5f,
    0x56,
    0x45,
    0x4e,
    0x55,
    0x45,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x46,
    0x49,
    0x45,
    0x4c,
    0x44,
    0x5f,
    0x50,
    0x55,
    0x42,
    0x5f,
    0x4f,
    0x52,
    0x47,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0e,
    0x50,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x55,
    0x53,
    0x50,
    0x54,
    0x4f,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x45,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4a,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x57,
    0x49,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x41,
    0x52,
    0x49,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x45,
    0x41,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x06,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4f,
    0x41,
    0x50,
    0x49,
    0x98,
    0x01,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x41,
    0x52,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x43,
    0x5a,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x09,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x49,
    0x45,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4d,
    0x54,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x0b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x53,
    0x47,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x0c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x41,
    0x54,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x0d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x44,
    0x45,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x0e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x49,
    0x4c,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x0f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4d,
    0x57,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x10,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x53,
    0x49,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x11,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x41,
    0x55,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x12,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x44,
    0x4b,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x13,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x49,
    0x4e,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x14,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4d,
    0x58,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x15,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x53,
    0x4b,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x16,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x42,
    0x41,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x17,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x45,
    0x45,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x18,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x49,
    0x54,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x19,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4d,
    0x59,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x1a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x53,
    0x55,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x1b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x42,
    0x45,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x1c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x45,
    0x47,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x1d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4e,
    0x4c,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x1e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x54,
    0x4a,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x1f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x42,
    0x47,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x20,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x45,
    0x53,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x21,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4b,
    0x45,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x22,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4e,
    0x4f,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x23,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x54,
    0x52,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x24,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x42,
    0x52,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x25,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x46,
    0x49,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x26,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4b,
    0x52,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x27,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4e,
    0x5a,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x28,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x54,
    0x57,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x29,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x43,
    0x41,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x2a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x46,
    0x52,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x2b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4c,
    0x54,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x2c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x50,
    0x48,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x2d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x43,
    0x48,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x2e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x47,
    0x42,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x2f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4c,
    0x55,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x30,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x50,
    0x4c,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x31,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x56,
    0x4e,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x32,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x43,
    0x4e,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x33,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x47,
    0x52,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x34,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4c,
    0x56,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x35,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x50,
    0x54,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x36,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x59,
    0x55,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x37,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x43,
    0x53,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x38,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x48,
    0x4b,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x39,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4d,
    0x43,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x3a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x52,
    0x4f,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x3b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x5a,
    0x41,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x3c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x43,
    0x55,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x3d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x48,
    0x52,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x3e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4d,
    0x44,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x3f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x52,
    0x55,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x40,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x5a,
    0x4d,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x41,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x43,
    0x59,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x42,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x48,
    0x55,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x43,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4d,
    0x4e,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x44,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x53,
    0x45,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x45,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x5a,
    0x57,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x46,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x47,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x44,
    0x5a,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x48,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x47,
    0x43,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x49,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x4d,
    0x41,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x4a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x50,
    0x41,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4f,
    0x46,
    0x46,
    0x49,
    0x43,
    0x45,
    0x5f,
    0x55,
    0x41,
    0x50,
    0x4f,
    0x98,
    0x01,
    0x4b,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['ScienceCitationAnchor','ScienceOceanView','ScienceOceanView_CountryView','ScienceCitation','ScienceCitation_Author','ScienceCitation_DownloadURL','ScienceCitation_Subject','ScienceCitation_AlternateTitle','ScienceCitation_TranslatedAuthor','ScienceCitation_UnionCatalog']
