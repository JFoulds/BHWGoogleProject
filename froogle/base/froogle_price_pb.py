# This file automatically generated by protocol-compiler from froogle/base/froogle_price.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class FrooglePrice(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.value_ = 0.0
    self.currency_ = 1
    self.has_value_ = 0
    self.has_currency_ = 0
    if contents is not None: self.MergeFromString(contents)

  def value(self): return self.value_

  def set_value(self, x):
    self.has_value_ = 1
    self.value_ = x

  def clear_value(self):
    self.has_value_ = 0
    self.value_ = 0.0

  def has_value(self): return self.has_value_

  def currency(self): return self.currency_

  def set_currency(self, x):
    self.has_currency_ = 1
    self.currency_ = x

  def clear_currency(self):
    self.has_currency_ = 0
    self.currency_ = 1

  def has_currency(self): return self.has_currency_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_value()): self.set_value(x.value())
    if (x.has_currency()): self.set_currency(x.currency())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FrooglePrice', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FrooglePrice')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FrooglePrice', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FrooglePrice', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FrooglePrice', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_value_ != x.has_value_: return 0
    if self.has_value_ and self.value_ != x.value_: return 0
    if self.has_currency_ != x.has_currency_: return 0
    if self.has_currency_ and self.currency_ != x.currency_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_value_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: value not set.')
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_currency_): n += 1 + self.lengthVarInt64(self.currency_)
    return n + 9

  def Clear(self):
    self.clear_value()
    self.clear_currency()

  def OutputUnchecked(self, out):
    out.putVarInt32(9)
    out.putDouble(self.value_)
    if (self.has_currency_):
      out.putVarInt32(16)
      out.putVarInt32(self.currency_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 9:
        self.set_value(d.getDouble())
        continue
      if tt == 16:
        self.set_currency(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_value_: res+=prefix+("Value: %s\n" % self.DebugFormat(self.value_))
    if self.has_currency_: res+=prefix+("Currency: %s\n" % self.DebugFormatInt32(self.currency_))
    return res

  kValue = 1
  kCurrency = 2

  _TEXT = (
   "ErrorCode",  #   0
   "Value",  #   1
   "Currency",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.DOUBLE,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x2f,
    0x62,
    0x61,
    0x73,
    0x65,
    0x2f,
    0x66,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x5f,
    0x70,
    0x72,
    0x69,
    0x63,
    0x65,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0c,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x50,
    0x72,
    0x69,
    0x63,
    0x65,
    0x13,
    0x1a,
    0x05,
    0x56,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x01,
    0x28,
    0x01,
    0x30,
    0x01,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x43,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['FrooglePrice']
