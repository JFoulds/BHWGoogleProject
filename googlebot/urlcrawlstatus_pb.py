# This file automatically generated by protocol-compiler from googlebot/urlcrawlstatus.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class URLCrawlStatusTag(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.pagerank_ = 1
    self.srcinfo_ = 1
    self.scheduledsource_ = 0
    self.state_ = 4
    self.errorinfo_ = 0
    self.uncrawledinfo_ = 0
    self.fetchtype_ = 1
    self.rtsegment_ = 31
    self.rtlevel_ = 1
    self.trycount_ = 0
    self.isredirect_ = 0
    self.isdup_ = 0
    self.recrawling_ = 0
    self.pendingnewstate_ = 0
    self.urlgroup_ = 0
    self.ispermredirect_ = 0
    self.isdocstored_ = 0
    self.isdrained_ = 0
    self.ismarked_ = 0
    self.isunacceptablelanguage_ = 0
    self.has_pagerank_ = 0
    self.has_srcinfo_ = 0
    self.has_scheduledsource_ = 0
    self.has_state_ = 0
    self.has_errorinfo_ = 0
    self.has_uncrawledinfo_ = 0
    self.has_fetchtype_ = 0
    self.has_rtsegment_ = 0
    self.has_rtlevel_ = 0
    self.has_trycount_ = 0
    self.has_isredirect_ = 0
    self.has_isdup_ = 0
    self.has_recrawling_ = 0
    self.has_pendingnewstate_ = 0
    self.has_urlgroup_ = 0
    self.has_ispermredirect_ = 0
    self.has_isdocstored_ = 0
    self.has_isdrained_ = 0
    self.has_ismarked_ = 0
    self.has_isunacceptablelanguage_ = 0
    if contents is not None: self.MergeFromString(contents)

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 1

  def has_pagerank(self): return self.has_pagerank_

  def srcinfo(self): return self.srcinfo_

  def set_srcinfo(self, x):
    self.has_srcinfo_ = 1
    self.srcinfo_ = x

  def clear_srcinfo(self):
    self.has_srcinfo_ = 0
    self.srcinfo_ = 1

  def has_srcinfo(self): return self.has_srcinfo_

  def scheduledsource(self): return self.scheduledsource_

  def set_scheduledsource(self, x):
    self.has_scheduledsource_ = 1
    self.scheduledsource_ = x

  def clear_scheduledsource(self):
    self.has_scheduledsource_ = 0
    self.scheduledsource_ = 0

  def has_scheduledsource(self): return self.has_scheduledsource_

  def state(self): return self.state_

  def set_state(self, x):
    self.has_state_ = 1
    self.state_ = x

  def clear_state(self):
    self.has_state_ = 0
    self.state_ = 4

  def has_state(self): return self.has_state_

  def errorinfo(self): return self.errorinfo_

  def set_errorinfo(self, x):
    self.has_errorinfo_ = 1
    self.errorinfo_ = x

  def clear_errorinfo(self):
    self.has_errorinfo_ = 0
    self.errorinfo_ = 0

  def has_errorinfo(self): return self.has_errorinfo_

  def uncrawledinfo(self): return self.uncrawledinfo_

  def set_uncrawledinfo(self, x):
    self.has_uncrawledinfo_ = 1
    self.uncrawledinfo_ = x

  def clear_uncrawledinfo(self):
    self.has_uncrawledinfo_ = 0
    self.uncrawledinfo_ = 0

  def has_uncrawledinfo(self): return self.has_uncrawledinfo_

  def fetchtype(self): return self.fetchtype_

  def set_fetchtype(self, x):
    self.has_fetchtype_ = 1
    self.fetchtype_ = x

  def clear_fetchtype(self):
    self.has_fetchtype_ = 0
    self.fetchtype_ = 1

  def has_fetchtype(self): return self.has_fetchtype_

  def rtsegment(self): return self.rtsegment_

  def set_rtsegment(self, x):
    self.has_rtsegment_ = 1
    self.rtsegment_ = x

  def clear_rtsegment(self):
    self.has_rtsegment_ = 0
    self.rtsegment_ = 31

  def has_rtsegment(self): return self.has_rtsegment_

  def rtlevel(self): return self.rtlevel_

  def set_rtlevel(self, x):
    self.has_rtlevel_ = 1
    self.rtlevel_ = x

  def clear_rtlevel(self):
    self.has_rtlevel_ = 0
    self.rtlevel_ = 1

  def has_rtlevel(self): return self.has_rtlevel_

  def trycount(self): return self.trycount_

  def set_trycount(self, x):
    self.has_trycount_ = 1
    self.trycount_ = x

  def clear_trycount(self):
    self.has_trycount_ = 0
    self.trycount_ = 0

  def has_trycount(self): return self.has_trycount_

  def isredirect(self): return self.isredirect_

  def set_isredirect(self, x):
    self.has_isredirect_ = 1
    self.isredirect_ = x

  def clear_isredirect(self):
    self.has_isredirect_ = 0
    self.isredirect_ = 0

  def has_isredirect(self): return self.has_isredirect_

  def isdup(self): return self.isdup_

  def set_isdup(self, x):
    self.has_isdup_ = 1
    self.isdup_ = x

  def clear_isdup(self):
    self.has_isdup_ = 0
    self.isdup_ = 0

  def has_isdup(self): return self.has_isdup_

  def recrawling(self): return self.recrawling_

  def set_recrawling(self, x):
    self.has_recrawling_ = 1
    self.recrawling_ = x

  def clear_recrawling(self):
    self.has_recrawling_ = 0
    self.recrawling_ = 0

  def has_recrawling(self): return self.has_recrawling_

  def pendingnewstate(self): return self.pendingnewstate_

  def set_pendingnewstate(self, x):
    self.has_pendingnewstate_ = 1
    self.pendingnewstate_ = x

  def clear_pendingnewstate(self):
    self.has_pendingnewstate_ = 0
    self.pendingnewstate_ = 0

  def has_pendingnewstate(self): return self.has_pendingnewstate_

  def urlgroup(self): return self.urlgroup_

  def set_urlgroup(self, x):
    self.has_urlgroup_ = 1
    self.urlgroup_ = x

  def clear_urlgroup(self):
    self.has_urlgroup_ = 0
    self.urlgroup_ = 0

  def has_urlgroup(self): return self.has_urlgroup_

  def ispermredirect(self): return self.ispermredirect_

  def set_ispermredirect(self, x):
    self.has_ispermredirect_ = 1
    self.ispermredirect_ = x

  def clear_ispermredirect(self):
    self.has_ispermredirect_ = 0
    self.ispermredirect_ = 0

  def has_ispermredirect(self): return self.has_ispermredirect_

  def isdocstored(self): return self.isdocstored_

  def set_isdocstored(self, x):
    self.has_isdocstored_ = 1
    self.isdocstored_ = x

  def clear_isdocstored(self):
    self.has_isdocstored_ = 0
    self.isdocstored_ = 0

  def has_isdocstored(self): return self.has_isdocstored_

  def isdrained(self): return self.isdrained_

  def set_isdrained(self, x):
    self.has_isdrained_ = 1
    self.isdrained_ = x

  def clear_isdrained(self):
    self.has_isdrained_ = 0
    self.isdrained_ = 0

  def has_isdrained(self): return self.has_isdrained_

  def ismarked(self): return self.ismarked_

  def set_ismarked(self, x):
    self.has_ismarked_ = 1
    self.ismarked_ = x

  def clear_ismarked(self):
    self.has_ismarked_ = 0
    self.ismarked_ = 0

  def has_ismarked(self): return self.has_ismarked_

  def isunacceptablelanguage(self): return self.isunacceptablelanguage_

  def set_isunacceptablelanguage(self, x):
    self.has_isunacceptablelanguage_ = 1
    self.isunacceptablelanguage_ = x

  def clear_isunacceptablelanguage(self):
    self.has_isunacceptablelanguage_ = 0
    self.isunacceptablelanguage_ = 0

  def has_isunacceptablelanguage(self): return self.has_isunacceptablelanguage_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())
    if (x.has_srcinfo()): self.set_srcinfo(x.srcinfo())
    if (x.has_scheduledsource()): self.set_scheduledsource(x.scheduledsource())
    if (x.has_state()): self.set_state(x.state())
    if (x.has_errorinfo()): self.set_errorinfo(x.errorinfo())
    if (x.has_uncrawledinfo()): self.set_uncrawledinfo(x.uncrawledinfo())
    if (x.has_fetchtype()): self.set_fetchtype(x.fetchtype())
    if (x.has_rtsegment()): self.set_rtsegment(x.rtsegment())
    if (x.has_rtlevel()): self.set_rtlevel(x.rtlevel())
    if (x.has_trycount()): self.set_trycount(x.trycount())
    if (x.has_isredirect()): self.set_isredirect(x.isredirect())
    if (x.has_isdup()): self.set_isdup(x.isdup())
    if (x.has_recrawling()): self.set_recrawling(x.recrawling())
    if (x.has_pendingnewstate()): self.set_pendingnewstate(x.pendingnewstate())
    if (x.has_urlgroup()): self.set_urlgroup(x.urlgroup())
    if (x.has_ispermredirect()): self.set_ispermredirect(x.ispermredirect())
    if (x.has_isdocstored()): self.set_isdocstored(x.isdocstored())
    if (x.has_isdrained()): self.set_isdrained(x.isdrained())
    if (x.has_ismarked()): self.set_ismarked(x.ismarked())
    if (x.has_isunacceptablelanguage()): self.set_isunacceptablelanguage(x.isunacceptablelanguage())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'URLCrawlStatusTag', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'URLCrawlStatusTag')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'URLCrawlStatusTag', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'URLCrawlStatusTag', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'URLCrawlStatusTag', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    if self.has_srcinfo_ != x.has_srcinfo_: return 0
    if self.has_srcinfo_ and self.srcinfo_ != x.srcinfo_: return 0
    if self.has_scheduledsource_ != x.has_scheduledsource_: return 0
    if self.has_scheduledsource_ and self.scheduledsource_ != x.scheduledsource_: return 0
    if self.has_state_ != x.has_state_: return 0
    if self.has_state_ and self.state_ != x.state_: return 0
    if self.has_errorinfo_ != x.has_errorinfo_: return 0
    if self.has_errorinfo_ and self.errorinfo_ != x.errorinfo_: return 0
    if self.has_uncrawledinfo_ != x.has_uncrawledinfo_: return 0
    if self.has_uncrawledinfo_ and self.uncrawledinfo_ != x.uncrawledinfo_: return 0
    if self.has_fetchtype_ != x.has_fetchtype_: return 0
    if self.has_fetchtype_ and self.fetchtype_ != x.fetchtype_: return 0
    if self.has_rtsegment_ != x.has_rtsegment_: return 0
    if self.has_rtsegment_ and self.rtsegment_ != x.rtsegment_: return 0
    if self.has_rtlevel_ != x.has_rtlevel_: return 0
    if self.has_rtlevel_ and self.rtlevel_ != x.rtlevel_: return 0
    if self.has_trycount_ != x.has_trycount_: return 0
    if self.has_trycount_ and self.trycount_ != x.trycount_: return 0
    if self.has_isredirect_ != x.has_isredirect_: return 0
    if self.has_isredirect_ and self.isredirect_ != x.isredirect_: return 0
    if self.has_isdup_ != x.has_isdup_: return 0
    if self.has_isdup_ and self.isdup_ != x.isdup_: return 0
    if self.has_recrawling_ != x.has_recrawling_: return 0
    if self.has_recrawling_ and self.recrawling_ != x.recrawling_: return 0
    if self.has_pendingnewstate_ != x.has_pendingnewstate_: return 0
    if self.has_pendingnewstate_ and self.pendingnewstate_ != x.pendingnewstate_: return 0
    if self.has_urlgroup_ != x.has_urlgroup_: return 0
    if self.has_urlgroup_ and self.urlgroup_ != x.urlgroup_: return 0
    if self.has_ispermredirect_ != x.has_ispermredirect_: return 0
    if self.has_ispermredirect_ and self.ispermredirect_ != x.ispermredirect_: return 0
    if self.has_isdocstored_ != x.has_isdocstored_: return 0
    if self.has_isdocstored_ and self.isdocstored_ != x.isdocstored_: return 0
    if self.has_isdrained_ != x.has_isdrained_: return 0
    if self.has_isdrained_ and self.isdrained_ != x.isdrained_: return 0
    if self.has_ismarked_ != x.has_ismarked_: return 0
    if self.has_ismarked_ and self.ismarked_ != x.ismarked_: return 0
    if self.has_isunacceptablelanguage_ != x.has_isunacceptablelanguage_: return 0
    if self.has_isunacceptablelanguage_ and self.isunacceptablelanguage_ != x.isunacceptablelanguage_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_pagerank_): n += 1 + self.lengthVarInt64(self.pagerank_)
    if (self.has_srcinfo_): n += 1 + self.lengthVarInt64(self.srcinfo_)
    if (self.has_scheduledsource_): n += 1 + self.lengthVarInt64(self.scheduledsource_)
    if (self.has_state_): n += 1 + self.lengthVarInt64(self.state_)
    if (self.has_errorinfo_): n += 1 + self.lengthVarInt64(self.errorinfo_)
    if (self.has_uncrawledinfo_): n += 1 + self.lengthVarInt64(self.uncrawledinfo_)
    if (self.has_fetchtype_): n += 1 + self.lengthVarInt64(self.fetchtype_)
    if (self.has_rtsegment_): n += 1 + self.lengthVarInt64(self.rtsegment_)
    if (self.has_rtlevel_): n += 1 + self.lengthVarInt64(self.rtlevel_)
    if (self.has_trycount_): n += 1 + self.lengthVarInt64(self.trycount_)
    if (self.has_isredirect_): n += 2
    if (self.has_isdup_): n += 2
    if (self.has_recrawling_): n += 2
    if (self.has_pendingnewstate_): n += 1 + self.lengthVarInt64(self.pendingnewstate_)
    if (self.has_urlgroup_): n += 1 + self.lengthVarInt64(self.urlgroup_)
    if (self.has_ispermredirect_): n += 3
    if (self.has_isdocstored_): n += 3
    if (self.has_isdrained_): n += 3
    if (self.has_ismarked_): n += 3
    if (self.has_isunacceptablelanguage_): n += 3
    return n + 0

  def Clear(self):
    self.clear_pagerank()
    self.clear_srcinfo()
    self.clear_scheduledsource()
    self.clear_state()
    self.clear_errorinfo()
    self.clear_uncrawledinfo()
    self.clear_fetchtype()
    self.clear_rtsegment()
    self.clear_rtlevel()
    self.clear_trycount()
    self.clear_isredirect()
    self.clear_isdup()
    self.clear_recrawling()
    self.clear_pendingnewstate()
    self.clear_urlgroup()
    self.clear_ispermredirect()
    self.clear_isdocstored()
    self.clear_isdrained()
    self.clear_ismarked()
    self.clear_isunacceptablelanguage()

  def OutputUnchecked(self, out):
    if (self.has_pagerank_):
      out.putVarInt32(8)
      out.putVarInt64(self.pagerank_)
    if (self.has_srcinfo_):
      out.putVarInt32(16)
      out.putVarInt64(self.srcinfo_)
    if (self.has_scheduledsource_):
      out.putVarInt32(24)
      out.putVarInt64(self.scheduledsource_)
    if (self.has_state_):
      out.putVarInt32(32)
      out.putVarInt64(self.state_)
    if (self.has_errorinfo_):
      out.putVarInt32(40)
      out.putVarInt64(self.errorinfo_)
    if (self.has_uncrawledinfo_):
      out.putVarInt32(48)
      out.putVarInt64(self.uncrawledinfo_)
    if (self.has_fetchtype_):
      out.putVarInt32(56)
      out.putVarInt64(self.fetchtype_)
    if (self.has_rtsegment_):
      out.putVarInt32(64)
      out.putVarInt64(self.rtsegment_)
    if (self.has_rtlevel_):
      out.putVarInt32(72)
      out.putVarInt64(self.rtlevel_)
    if (self.has_trycount_):
      out.putVarInt32(80)
      out.putVarInt64(self.trycount_)
    if (self.has_isredirect_):
      out.putVarInt32(88)
      out.putBoolean(self.isredirect_)
    if (self.has_isdup_):
      out.putVarInt32(96)
      out.putBoolean(self.isdup_)
    if (self.has_recrawling_):
      out.putVarInt32(104)
      out.putBoolean(self.recrawling_)
    if (self.has_pendingnewstate_):
      out.putVarInt32(112)
      out.putVarInt64(self.pendingnewstate_)
    if (self.has_urlgroup_):
      out.putVarInt32(120)
      out.putVarInt64(self.urlgroup_)
    if (self.has_ispermredirect_):
      out.putVarInt32(128)
      out.putBoolean(self.ispermredirect_)
    if (self.has_isdocstored_):
      out.putVarInt32(136)
      out.putBoolean(self.isdocstored_)
    if (self.has_isdrained_):
      out.putVarInt32(144)
      out.putBoolean(self.isdrained_)
    if (self.has_ismarked_):
      out.putVarInt32(152)
      out.putBoolean(self.ismarked_)
    if (self.has_isunacceptablelanguage_):
      out.putVarInt32(160)
      out.putBoolean(self.isunacceptablelanguage_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_pagerank(d.getVarInt64())
        continue
      if tt == 16:
        self.set_srcinfo(d.getVarInt64())
        continue
      if tt == 24:
        self.set_scheduledsource(d.getVarInt64())
        continue
      if tt == 32:
        self.set_state(d.getVarInt64())
        continue
      if tt == 40:
        self.set_errorinfo(d.getVarInt64())
        continue
      if tt == 48:
        self.set_uncrawledinfo(d.getVarInt64())
        continue
      if tt == 56:
        self.set_fetchtype(d.getVarInt64())
        continue
      if tt == 64:
        self.set_rtsegment(d.getVarInt64())
        continue
      if tt == 72:
        self.set_rtlevel(d.getVarInt64())
        continue
      if tt == 80:
        self.set_trycount(d.getVarInt64())
        continue
      if tt == 88:
        self.set_isredirect(d.getBoolean())
        continue
      if tt == 96:
        self.set_isdup(d.getBoolean())
        continue
      if tt == 104:
        self.set_recrawling(d.getBoolean())
        continue
      if tt == 112:
        self.set_pendingnewstate(d.getVarInt64())
        continue
      if tt == 120:
        self.set_urlgroup(d.getVarInt64())
        continue
      if tt == 128:
        self.set_ispermredirect(d.getBoolean())
        continue
      if tt == 136:
        self.set_isdocstored(d.getBoolean())
        continue
      if tt == 144:
        self.set_isdrained(d.getBoolean())
        continue
      if tt == 152:
        self.set_ismarked(d.getBoolean())
        continue
      if tt == 160:
        self.set_isunacceptablelanguage(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_pagerank_: res+=prefix+("Pagerank: %s\n" % self.DebugFormatInt64(self.pagerank_))
    if self.has_srcinfo_: res+=prefix+("SrcInfo: %s\n" % self.DebugFormatInt64(self.srcinfo_))
    if self.has_scheduledsource_: res+=prefix+("ScheduledSource: %s\n" % self.DebugFormatInt64(self.scheduledsource_))
    if self.has_state_: res+=prefix+("State: %s\n" % self.DebugFormatInt64(self.state_))
    if self.has_errorinfo_: res+=prefix+("ErrorInfo: %s\n" % self.DebugFormatInt64(self.errorinfo_))
    if self.has_uncrawledinfo_: res+=prefix+("UncrawledInfo: %s\n" % self.DebugFormatInt64(self.uncrawledinfo_))
    if self.has_fetchtype_: res+=prefix+("FetchType: %s\n" % self.DebugFormatInt64(self.fetchtype_))
    if self.has_rtsegment_: res+=prefix+("RtSegment: %s\n" % self.DebugFormatInt64(self.rtsegment_))
    if self.has_rtlevel_: res+=prefix+("RtLevel: %s\n" % self.DebugFormatInt64(self.rtlevel_))
    if self.has_trycount_: res+=prefix+("TryCount: %s\n" % self.DebugFormatInt64(self.trycount_))
    if self.has_isredirect_: res+=prefix+("IsRedirect: %s\n" % self.DebugFormatBool(self.isredirect_))
    if self.has_isdup_: res+=prefix+("IsDup: %s\n" % self.DebugFormatBool(self.isdup_))
    if self.has_recrawling_: res+=prefix+("Recrawling: %s\n" % self.DebugFormatBool(self.recrawling_))
    if self.has_pendingnewstate_: res+=prefix+("PendingNewState: %s\n" % self.DebugFormatInt64(self.pendingnewstate_))
    if self.has_urlgroup_: res+=prefix+("UrlGroup: %s\n" % self.DebugFormatInt64(self.urlgroup_))
    if self.has_ispermredirect_: res+=prefix+("IsPermRedirect: %s\n" % self.DebugFormatBool(self.ispermredirect_))
    if self.has_isdocstored_: res+=prefix+("IsDocStored: %s\n" % self.DebugFormatBool(self.isdocstored_))
    if self.has_isdrained_: res+=prefix+("IsDrained: %s\n" % self.DebugFormatBool(self.isdrained_))
    if self.has_ismarked_: res+=prefix+("IsMarked: %s\n" % self.DebugFormatBool(self.ismarked_))
    if self.has_isunacceptablelanguage_: res+=prefix+("IsUnacceptableLanguage: %s\n" % self.DebugFormatBool(self.isunacceptablelanguage_))
    return res

  kPagerank = 1
  kSrcInfo = 2
  kScheduledSource = 3
  kState = 4
  kErrorInfo = 5
  kUncrawledInfo = 6
  kFetchType = 7
  kRtSegment = 8
  kRtLevel = 9
  kTryCount = 10
  kIsRedirect = 11
  kIsDup = 12
  kRecrawling = 13
  kPendingNewState = 14
  kUrlGroup = 15
  kIsPermRedirect = 16
  kIsDocStored = 17
  kIsDrained = 18
  kIsMarked = 19
  kIsUnacceptableLanguage = 20

  _TEXT = (
   "ErrorCode",  #   0
   "Pagerank",  #   1
   "SrcInfo",  #   2
   "ScheduledSource",  #   3
   "State",  #   4
   "ErrorInfo",  #   5
   "UncrawledInfo",  #   6
   "FetchType",  #   7
   "RtSegment",  #   8
   "RtLevel",  #   9
   "TryCount",  #  10
   "IsRedirect",  #  11
   "IsDup",  #  12
   "Recrawling",  #  13
   "PendingNewState",  #  14
   "UrlGroup",  #  15
   "IsPermRedirect",  #  16
   "IsDocStored",  #  17
   "IsDrained",  #  18
   "IsMarked",  #  19
   "IsUnacceptableLanguage",  #  20
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.NUMERIC,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.NUMERIC,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.NUMERIC,  #  18

   ProtocolBuffer.Encoder.NUMERIC,  #  19

   ProtocolBuffer.Encoder.NUMERIC,  #  20

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x1e,
    0x67,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x62,
    0x6f,
    0x74,
    0x2f,
    0x75,
    0x72,
    0x6c,
    0x63,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x73,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x11,
    0x55,
    0x52,
    0x4c,
    0x43,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x53,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x54,
    0x61,
    0x67,
    0x13,
    0x1a,
    0x08,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x53,
    0x72,
    0x63,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x53,
    0x63,
    0x68,
    0x65,
    0x64,
    0x75,
    0x6c,
    0x65,
    0x64,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x34,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x34,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x45,
    0x72,
    0x72,
    0x6f,
    0x72,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x55,
    0x6e,
    0x63,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x65,
    0x64,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x46,
    0x65,
    0x74,
    0x63,
    0x68,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x52,
    0x74,
    0x53,
    0x65,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x02,
    0x33,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x33,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x52,
    0x74,
    0x4c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x54,
    0x72,
    0x79,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x49,
    0x73,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x49,
    0x73,
    0x44,
    0x75,
    0x70,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x52,
    0x65,
    0x63,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x0d,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x50,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x4e,
    0x65,
    0x77,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x55,
    0x72,
    0x6c,
    0x47,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x49,
    0x73,
    0x50,
    0x65,
    0x72,
    0x6d,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x20,
    0x10,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x49,
    0x73,
    0x44,
    0x6f,
    0x63,
    0x53,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x49,
    0x73,
    0x44,
    0x72,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x12,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x49,
    0x73,
    0x4d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x64,
    0x20,
    0x13,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x49,
    0x73,
    0x55,
    0x6e,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x14,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['URLCrawlStatusTag']
