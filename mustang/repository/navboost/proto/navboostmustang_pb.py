# This file automatically generated by protocol-compiler from mustang/repository/navboost/proto/navboostmustang.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class NavBoostFeature(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.feature_ = 0
    self.deprecated_query_doc_count_ = 0
    self.deprecated_query_count_ = 0
    self.deprecated_lcc_count_ = 0
    self.deprecated_lcc_total_ = 0
    self.deprecated_imp_count_ = 0.0
    self.deprecated_imp_total_ = 0.0
    self.f_query_doc_count_ = 0.0
    self.f_query_count_ = 0.0
    self.f_lcc_count_ = 0.0
    self.f_lcc_total_ = 0.0
    self.f_imp_count_ = 0.0
    self.f_imp_total_ = 0.0
    self.clickr_mu_ = 0.0
    self.clickr_count_ = 0.0
    self.has_feature_ = 0
    self.has_deprecated_query_doc_count_ = 0
    self.has_deprecated_query_count_ = 0
    self.has_deprecated_lcc_count_ = 0
    self.has_deprecated_lcc_total_ = 0
    self.has_deprecated_imp_count_ = 0
    self.has_deprecated_imp_total_ = 0
    self.has_f_query_doc_count_ = 0
    self.has_f_query_count_ = 0
    self.has_f_lcc_count_ = 0
    self.has_f_lcc_total_ = 0
    self.has_f_imp_count_ = 0
    self.has_f_imp_total_ = 0
    self.has_clickr_mu_ = 0
    self.has_clickr_count_ = 0
    if contents is not None: self.MergeFromString(contents)

  def feature(self): return self.feature_

  def set_feature(self, x):
    self.has_feature_ = 1
    self.feature_ = x

  def clear_feature(self):
    self.has_feature_ = 0
    self.feature_ = 0

  def has_feature(self): return self.has_feature_

  def deprecated_query_doc_count(self): return self.deprecated_query_doc_count_

  def set_deprecated_query_doc_count(self, x):
    self.has_deprecated_query_doc_count_ = 1
    self.deprecated_query_doc_count_ = x

  def clear_deprecated_query_doc_count(self):
    self.has_deprecated_query_doc_count_ = 0
    self.deprecated_query_doc_count_ = 0

  def has_deprecated_query_doc_count(self): return self.has_deprecated_query_doc_count_

  def deprecated_query_count(self): return self.deprecated_query_count_

  def set_deprecated_query_count(self, x):
    self.has_deprecated_query_count_ = 1
    self.deprecated_query_count_ = x

  def clear_deprecated_query_count(self):
    self.has_deprecated_query_count_ = 0
    self.deprecated_query_count_ = 0

  def has_deprecated_query_count(self): return self.has_deprecated_query_count_

  def deprecated_lcc_count(self): return self.deprecated_lcc_count_

  def set_deprecated_lcc_count(self, x):
    self.has_deprecated_lcc_count_ = 1
    self.deprecated_lcc_count_ = x

  def clear_deprecated_lcc_count(self):
    self.has_deprecated_lcc_count_ = 0
    self.deprecated_lcc_count_ = 0

  def has_deprecated_lcc_count(self): return self.has_deprecated_lcc_count_

  def deprecated_lcc_total(self): return self.deprecated_lcc_total_

  def set_deprecated_lcc_total(self, x):
    self.has_deprecated_lcc_total_ = 1
    self.deprecated_lcc_total_ = x

  def clear_deprecated_lcc_total(self):
    self.has_deprecated_lcc_total_ = 0
    self.deprecated_lcc_total_ = 0

  def has_deprecated_lcc_total(self): return self.has_deprecated_lcc_total_

  def deprecated_imp_count(self): return self.deprecated_imp_count_

  def set_deprecated_imp_count(self, x):
    self.has_deprecated_imp_count_ = 1
    self.deprecated_imp_count_ = x

  def clear_deprecated_imp_count(self):
    self.has_deprecated_imp_count_ = 0
    self.deprecated_imp_count_ = 0.0

  def has_deprecated_imp_count(self): return self.has_deprecated_imp_count_

  def deprecated_imp_total(self): return self.deprecated_imp_total_

  def set_deprecated_imp_total(self, x):
    self.has_deprecated_imp_total_ = 1
    self.deprecated_imp_total_ = x

  def clear_deprecated_imp_total(self):
    self.has_deprecated_imp_total_ = 0
    self.deprecated_imp_total_ = 0.0

  def has_deprecated_imp_total(self): return self.has_deprecated_imp_total_

  def f_query_doc_count(self): return self.f_query_doc_count_

  def set_f_query_doc_count(self, x):
    self.has_f_query_doc_count_ = 1
    self.f_query_doc_count_ = x

  def clear_f_query_doc_count(self):
    self.has_f_query_doc_count_ = 0
    self.f_query_doc_count_ = 0.0

  def has_f_query_doc_count(self): return self.has_f_query_doc_count_

  def f_query_count(self): return self.f_query_count_

  def set_f_query_count(self, x):
    self.has_f_query_count_ = 1
    self.f_query_count_ = x

  def clear_f_query_count(self):
    self.has_f_query_count_ = 0
    self.f_query_count_ = 0.0

  def has_f_query_count(self): return self.has_f_query_count_

  def f_lcc_count(self): return self.f_lcc_count_

  def set_f_lcc_count(self, x):
    self.has_f_lcc_count_ = 1
    self.f_lcc_count_ = x

  def clear_f_lcc_count(self):
    self.has_f_lcc_count_ = 0
    self.f_lcc_count_ = 0.0

  def has_f_lcc_count(self): return self.has_f_lcc_count_

  def f_lcc_total(self): return self.f_lcc_total_

  def set_f_lcc_total(self, x):
    self.has_f_lcc_total_ = 1
    self.f_lcc_total_ = x

  def clear_f_lcc_total(self):
    self.has_f_lcc_total_ = 0
    self.f_lcc_total_ = 0.0

  def has_f_lcc_total(self): return self.has_f_lcc_total_

  def f_imp_count(self): return self.f_imp_count_

  def set_f_imp_count(self, x):
    self.has_f_imp_count_ = 1
    self.f_imp_count_ = x

  def clear_f_imp_count(self):
    self.has_f_imp_count_ = 0
    self.f_imp_count_ = 0.0

  def has_f_imp_count(self): return self.has_f_imp_count_

  def f_imp_total(self): return self.f_imp_total_

  def set_f_imp_total(self, x):
    self.has_f_imp_total_ = 1
    self.f_imp_total_ = x

  def clear_f_imp_total(self):
    self.has_f_imp_total_ = 0
    self.f_imp_total_ = 0.0

  def has_f_imp_total(self): return self.has_f_imp_total_

  def clickr_mu(self): return self.clickr_mu_

  def set_clickr_mu(self, x):
    self.has_clickr_mu_ = 1
    self.clickr_mu_ = x

  def clear_clickr_mu(self):
    self.has_clickr_mu_ = 0
    self.clickr_mu_ = 0.0

  def has_clickr_mu(self): return self.has_clickr_mu_

  def clickr_count(self): return self.clickr_count_

  def set_clickr_count(self, x):
    self.has_clickr_count_ = 1
    self.clickr_count_ = x

  def clear_clickr_count(self):
    self.has_clickr_count_ = 0
    self.clickr_count_ = 0.0

  def has_clickr_count(self): return self.has_clickr_count_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_feature()): self.set_feature(x.feature())
    if (x.has_deprecated_query_doc_count()): self.set_deprecated_query_doc_count(x.deprecated_query_doc_count())
    if (x.has_deprecated_query_count()): self.set_deprecated_query_count(x.deprecated_query_count())
    if (x.has_deprecated_lcc_count()): self.set_deprecated_lcc_count(x.deprecated_lcc_count())
    if (x.has_deprecated_lcc_total()): self.set_deprecated_lcc_total(x.deprecated_lcc_total())
    if (x.has_deprecated_imp_count()): self.set_deprecated_imp_count(x.deprecated_imp_count())
    if (x.has_deprecated_imp_total()): self.set_deprecated_imp_total(x.deprecated_imp_total())
    if (x.has_f_query_doc_count()): self.set_f_query_doc_count(x.f_query_doc_count())
    if (x.has_f_query_count()): self.set_f_query_count(x.f_query_count())
    if (x.has_f_lcc_count()): self.set_f_lcc_count(x.f_lcc_count())
    if (x.has_f_lcc_total()): self.set_f_lcc_total(x.f_lcc_total())
    if (x.has_f_imp_count()): self.set_f_imp_count(x.f_imp_count())
    if (x.has_f_imp_total()): self.set_f_imp_total(x.f_imp_total())
    if (x.has_clickr_mu()): self.set_clickr_mu(x.clickr_mu())
    if (x.has_clickr_count()): self.set_clickr_count(x.clickr_count())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NavBoostFeature', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NavBoostFeature')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NavBoostFeature', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NavBoostFeature', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NavBoostFeature', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_feature_ != x.has_feature_: return 0
    if self.has_feature_ and self.feature_ != x.feature_: return 0
    if self.has_deprecated_query_doc_count_ != x.has_deprecated_query_doc_count_: return 0
    if self.has_deprecated_query_doc_count_ and self.deprecated_query_doc_count_ != x.deprecated_query_doc_count_: return 0
    if self.has_deprecated_query_count_ != x.has_deprecated_query_count_: return 0
    if self.has_deprecated_query_count_ and self.deprecated_query_count_ != x.deprecated_query_count_: return 0
    if self.has_deprecated_lcc_count_ != x.has_deprecated_lcc_count_: return 0
    if self.has_deprecated_lcc_count_ and self.deprecated_lcc_count_ != x.deprecated_lcc_count_: return 0
    if self.has_deprecated_lcc_total_ != x.has_deprecated_lcc_total_: return 0
    if self.has_deprecated_lcc_total_ and self.deprecated_lcc_total_ != x.deprecated_lcc_total_: return 0
    if self.has_deprecated_imp_count_ != x.has_deprecated_imp_count_: return 0
    if self.has_deprecated_imp_count_ and self.deprecated_imp_count_ != x.deprecated_imp_count_: return 0
    if self.has_deprecated_imp_total_ != x.has_deprecated_imp_total_: return 0
    if self.has_deprecated_imp_total_ and self.deprecated_imp_total_ != x.deprecated_imp_total_: return 0
    if self.has_f_query_doc_count_ != x.has_f_query_doc_count_: return 0
    if self.has_f_query_doc_count_ and self.f_query_doc_count_ != x.f_query_doc_count_: return 0
    if self.has_f_query_count_ != x.has_f_query_count_: return 0
    if self.has_f_query_count_ and self.f_query_count_ != x.f_query_count_: return 0
    if self.has_f_lcc_count_ != x.has_f_lcc_count_: return 0
    if self.has_f_lcc_count_ and self.f_lcc_count_ != x.f_lcc_count_: return 0
    if self.has_f_lcc_total_ != x.has_f_lcc_total_: return 0
    if self.has_f_lcc_total_ and self.f_lcc_total_ != x.f_lcc_total_: return 0
    if self.has_f_imp_count_ != x.has_f_imp_count_: return 0
    if self.has_f_imp_count_ and self.f_imp_count_ != x.f_imp_count_: return 0
    if self.has_f_imp_total_ != x.has_f_imp_total_: return 0
    if self.has_f_imp_total_ and self.f_imp_total_ != x.f_imp_total_: return 0
    if self.has_clickr_mu_ != x.has_clickr_mu_: return 0
    if self.has_clickr_mu_ and self.clickr_mu_ != x.clickr_mu_: return 0
    if self.has_clickr_count_ != x.has_clickr_count_: return 0
    if self.has_clickr_count_ and self.clickr_count_ != x.clickr_count_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_feature_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feature not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.feature_)
    if (self.has_deprecated_query_doc_count_): n += 1 + self.lengthVarInt64(self.deprecated_query_doc_count_)
    if (self.has_deprecated_query_count_): n += 1 + self.lengthVarInt64(self.deprecated_query_count_)
    if (self.has_deprecated_lcc_count_): n += 1 + self.lengthVarInt64(self.deprecated_lcc_count_)
    if (self.has_deprecated_lcc_total_): n += 1 + self.lengthVarInt64(self.deprecated_lcc_total_)
    if (self.has_deprecated_imp_count_): n += 5
    if (self.has_deprecated_imp_total_): n += 5
    if (self.has_f_query_doc_count_): n += 5
    if (self.has_f_query_count_): n += 5
    if (self.has_f_lcc_count_): n += 5
    if (self.has_f_lcc_total_): n += 5
    if (self.has_f_imp_count_): n += 5
    if (self.has_f_imp_total_): n += 5
    if (self.has_clickr_mu_): n += 5
    if (self.has_clickr_count_): n += 5
    return n + 1

  def Clear(self):
    self.clear_feature()
    self.clear_deprecated_query_doc_count()
    self.clear_deprecated_query_count()
    self.clear_deprecated_lcc_count()
    self.clear_deprecated_lcc_total()
    self.clear_deprecated_imp_count()
    self.clear_deprecated_imp_total()
    self.clear_f_query_doc_count()
    self.clear_f_query_count()
    self.clear_f_lcc_count()
    self.clear_f_lcc_total()
    self.clear_f_imp_count()
    self.clear_f_imp_total()
    self.clear_clickr_mu()
    self.clear_clickr_count()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.feature_)
    if (self.has_deprecated_query_doc_count_):
      out.putVarInt32(16)
      out.putVarInt32(self.deprecated_query_doc_count_)
    if (self.has_deprecated_query_count_):
      out.putVarInt32(24)
      out.putVarInt32(self.deprecated_query_count_)
    if (self.has_deprecated_lcc_count_):
      out.putVarInt32(32)
      out.putVarInt32(self.deprecated_lcc_count_)
    if (self.has_deprecated_lcc_total_):
      out.putVarInt32(40)
      out.putVarInt32(self.deprecated_lcc_total_)
    if (self.has_clickr_mu_):
      out.putVarInt32(53)
      out.putFloat(self.clickr_mu_)
    if (self.has_clickr_count_):
      out.putVarInt32(61)
      out.putFloat(self.clickr_count_)
    if (self.has_deprecated_imp_count_):
      out.putVarInt32(69)
      out.putFloat(self.deprecated_imp_count_)
    if (self.has_deprecated_imp_total_):
      out.putVarInt32(77)
      out.putFloat(self.deprecated_imp_total_)
    if (self.has_f_query_doc_count_):
      out.putVarInt32(85)
      out.putFloat(self.f_query_doc_count_)
    if (self.has_f_query_count_):
      out.putVarInt32(93)
      out.putFloat(self.f_query_count_)
    if (self.has_f_lcc_count_):
      out.putVarInt32(101)
      out.putFloat(self.f_lcc_count_)
    if (self.has_f_lcc_total_):
      out.putVarInt32(109)
      out.putFloat(self.f_lcc_total_)
    if (self.has_f_imp_count_):
      out.putVarInt32(117)
      out.putFloat(self.f_imp_count_)
    if (self.has_f_imp_total_):
      out.putVarInt32(125)
      out.putFloat(self.f_imp_total_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_feature(d.getVarInt32())
        continue
      if tt == 16:
        self.set_deprecated_query_doc_count(d.getVarInt32())
        continue
      if tt == 24:
        self.set_deprecated_query_count(d.getVarInt32())
        continue
      if tt == 32:
        self.set_deprecated_lcc_count(d.getVarInt32())
        continue
      if tt == 40:
        self.set_deprecated_lcc_total(d.getVarInt32())
        continue
      if tt == 53:
        self.set_clickr_mu(d.getFloat())
        continue
      if tt == 61:
        self.set_clickr_count(d.getFloat())
        continue
      if tt == 69:
        self.set_deprecated_imp_count(d.getFloat())
        continue
      if tt == 77:
        self.set_deprecated_imp_total(d.getFloat())
        continue
      if tt == 85:
        self.set_f_query_doc_count(d.getFloat())
        continue
      if tt == 93:
        self.set_f_query_count(d.getFloat())
        continue
      if tt == 101:
        self.set_f_lcc_count(d.getFloat())
        continue
      if tt == 109:
        self.set_f_lcc_total(d.getFloat())
        continue
      if tt == 117:
        self.set_f_imp_count(d.getFloat())
        continue
      if tt == 125:
        self.set_f_imp_total(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_feature_: res+=prefix+("feature: %s\n" % self.DebugFormatInt32(self.feature_))
    if self.has_deprecated_query_doc_count_: res+=prefix+("DEPRECATED_query_doc_count: %s\n" % self.DebugFormatInt32(self.deprecated_query_doc_count_))
    if self.has_deprecated_query_count_: res+=prefix+("DEPRECATED_query_count: %s\n" % self.DebugFormatInt32(self.deprecated_query_count_))
    if self.has_deprecated_lcc_count_: res+=prefix+("DEPRECATED_lcc_count: %s\n" % self.DebugFormatInt32(self.deprecated_lcc_count_))
    if self.has_deprecated_lcc_total_: res+=prefix+("DEPRECATED_lcc_total: %s\n" % self.DebugFormatInt32(self.deprecated_lcc_total_))
    if self.has_deprecated_imp_count_: res+=prefix+("DEPRECATED_imp_count: %s\n" % self.DebugFormatFloat(self.deprecated_imp_count_))
    if self.has_deprecated_imp_total_: res+=prefix+("DEPRECATED_imp_total: %s\n" % self.DebugFormatFloat(self.deprecated_imp_total_))
    if self.has_f_query_doc_count_: res+=prefix+("f_query_doc_count: %s\n" % self.DebugFormatFloat(self.f_query_doc_count_))
    if self.has_f_query_count_: res+=prefix+("f_query_count: %s\n" % self.DebugFormatFloat(self.f_query_count_))
    if self.has_f_lcc_count_: res+=prefix+("f_lcc_count: %s\n" % self.DebugFormatFloat(self.f_lcc_count_))
    if self.has_f_lcc_total_: res+=prefix+("f_lcc_total: %s\n" % self.DebugFormatFloat(self.f_lcc_total_))
    if self.has_f_imp_count_: res+=prefix+("f_imp_count: %s\n" % self.DebugFormatFloat(self.f_imp_count_))
    if self.has_f_imp_total_: res+=prefix+("f_imp_total: %s\n" % self.DebugFormatFloat(self.f_imp_total_))
    if self.has_clickr_mu_: res+=prefix+("clickr_mu: %s\n" % self.DebugFormatFloat(self.clickr_mu_))
    if self.has_clickr_count_: res+=prefix+("clickr_count: %s\n" % self.DebugFormatFloat(self.clickr_count_))
    return res

  kfeature = 1
  kDEPRECATED_query_doc_count = 2
  kDEPRECATED_query_count = 3
  kDEPRECATED_lcc_count = 4
  kDEPRECATED_lcc_total = 5
  kDEPRECATED_imp_count = 8
  kDEPRECATED_imp_total = 9
  kf_query_doc_count = 10
  kf_query_count = 11
  kf_lcc_count = 12
  kf_lcc_total = 13
  kf_imp_count = 14
  kf_imp_total = 15
  kclickr_mu = 6
  kclickr_count = 7

  _TEXT = (
   "ErrorCode",  #   0
   "feature",  #   1
   "DEPRECATED_query_doc_count",  #   2
   "DEPRECATED_query_count",  #   3
   "DEPRECATED_lcc_count",  #   4
   "DEPRECATED_lcc_total",  #   5
   "clickr_mu",  #   6
   "clickr_count",  #   7
   "DEPRECATED_imp_count",  #   8
   "DEPRECATED_imp_total",  #   9
   "f_query_doc_count",  #  10
   "f_query_count",  #  11
   "f_lcc_count",  #  12
   "f_lcc_total",  #  13
   "f_imp_count",  #  14
   "f_imp_total",  #  15
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.FLOAT,  #   6

   ProtocolBuffer.Encoder.FLOAT,  #   7

   ProtocolBuffer.Encoder.FLOAT,  #   8

   ProtocolBuffer.Encoder.FLOAT,  #   9

   ProtocolBuffer.Encoder.FLOAT,  #  10

   ProtocolBuffer.Encoder.FLOAT,  #  11

   ProtocolBuffer.Encoder.FLOAT,  #  12

   ProtocolBuffer.Encoder.FLOAT,  #  13

   ProtocolBuffer.Encoder.FLOAT,  #  14

   ProtocolBuffer.Encoder.FLOAT,  #  15

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0f,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x13,
    0x1a,
    0x07,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x08,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x09,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x66,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x0a,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x66,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x0b,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x5f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x0c,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x5f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x0d,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x5f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x0e,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x5f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x0f,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x6d,
    0x75,
    0x20,
    0x06,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x07,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NavBoostQueryForCorpus(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.corpus_name_ = ""
    self.corpus_data_ = ""
    self.corpus_feature_ = []
    self.has_corpus_name_ = 0
    self.has_corpus_data_ = 0
    if contents is not None: self.MergeFromString(contents)

  def corpus_name(self): return self.corpus_name_

  def set_corpus_name(self, x):
    self.has_corpus_name_ = 1
    self.corpus_name_ = x

  def clear_corpus_name(self):
    self.has_corpus_name_ = 0
    self.corpus_name_ = ""

  def has_corpus_name(self): return self.has_corpus_name_

  def corpus_data(self): return self.corpus_data_

  def set_corpus_data(self, x):
    self.has_corpus_data_ = 1
    self.corpus_data_ = x

  def clear_corpus_data(self):
    self.has_corpus_data_ = 0
    self.corpus_data_ = ""

  def has_corpus_data(self): return self.has_corpus_data_

  def corpus_feature_size(self): return len(self.corpus_feature_)
  def corpus_feature_list(self): return self.corpus_feature_

  def corpus_feature(self, i):
    return self.corpus_feature_[i]

  def mutable_corpus_feature(self, i):
    return self.corpus_feature_[i]

  def add_corpus_feature(self):
    x = NavBoostFeature()
    self.corpus_feature_.append(x)
    return x

  def clear_corpus_feature(self):
    self.corpus_feature_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_corpus_name()): self.set_corpus_name(x.corpus_name())
    if (x.has_corpus_data()): self.set_corpus_data(x.corpus_data())
    for i in xrange(x.corpus_feature_size()): self.add_corpus_feature().CopyFrom(x.corpus_feature(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NavBoostQueryForCorpus', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NavBoostQueryForCorpus')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NavBoostQueryForCorpus', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NavBoostQueryForCorpus', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NavBoostQueryForCorpus', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_corpus_name_ != x.has_corpus_name_: return 0
    if self.has_corpus_name_ and self.corpus_name_ != x.corpus_name_: return 0
    if self.has_corpus_data_ != x.has_corpus_data_: return 0
    if self.has_corpus_data_ and self.corpus_data_ != x.corpus_data_: return 0
    if len(self.corpus_feature_) != len(x.corpus_feature_): return 0
    for e1, e2 in zip(self.corpus_feature_, x.corpus_feature_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.corpus_feature_)):
      if (not self.corpus_feature_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_corpus_name_): n += 1 + self.lengthString(len(self.corpus_name_))
    if (self.has_corpus_data_): n += 1 + self.lengthString(len(self.corpus_data_))
    n += 1 * len(self.corpus_feature_)
    for i in xrange(len(self.corpus_feature_)): n += self.lengthString(self.corpus_feature_[i].ByteSize())
    return n + 0

  def Clear(self):
    self.clear_corpus_name()
    self.clear_corpus_data()
    self.clear_corpus_feature()

  def OutputUnchecked(self, out):
    if (self.has_corpus_name_):
      out.putVarInt32(10)
      out.putPrefixedString(self.corpus_name_)
    if (self.has_corpus_data_):
      out.putVarInt32(18)
      out.putPrefixedString(self.corpus_data_)
    for i in xrange(len(self.corpus_feature_)):
      out.putVarInt32(26)
      out.putVarInt32(self.corpus_feature_[i].ByteSize())
      self.corpus_feature_[i].OutputUnchecked(out)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_corpus_name(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_corpus_data(d.getPrefixedString())
        continue
      if tt == 26:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_corpus_feature().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_corpus_name_: res+=prefix+("corpus_name: %s\n" % self.DebugFormatString(self.corpus_name_))
    if self.has_corpus_data_: res+=prefix+("corpus_data: %s\n" % self.DebugFormatString(self.corpus_data_))
    cnt=0
    for e in self.corpus_feature_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("corpus_feature%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    return res

  kcorpus_name = 1
  kcorpus_data = 2
  kcorpus_feature = 3

  _TEXT = (
   "ErrorCode",  #   0
   "corpus_name",  #   1
   "corpus_data",  #   2
   "corpus_feature",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x16,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x46,
    0x6f,
    0x72,
    0x43,
    0x6f,
    0x72,
    0x70,
    0x75,
    0x73,
    0x13,
    0x1a,
    0x0b,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x75,
    0x73,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x75,
    0x73,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x75,
    0x73,
    0x5f,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0f,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NavBoostQuery(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.deprecated_query_doc_count_ = 0
    self.deprecated_query_count_ = 0
    self.deprecated_lcc_count_ = 0
    self.deprecated_lcc_total_ = 0
    self.deprecated_imp_count_ = 0.0
    self.deprecated_imp_total_ = 0.0
    self.f_query_doc_count_ = 0.0
    self.f_query_count_ = 0.0
    self.f_lcc_count_ = 0.0
    self.f_lcc_total_ = 0.0
    self.f_imp_count_ = 0.0
    self.f_imp_total_ = 0.0
    self.clickr_mu_ = 0.0
    self.clickr_count_ = 0.0
    self.features_ = []
    self.query_ = ""
    self.video_original_query_ = ""
    self.tier_id_ = 0
    self.stale_ = 0
    self.corpus_data_ = []
    self.has_deprecated_query_doc_count_ = 0
    self.has_deprecated_query_count_ = 0
    self.has_deprecated_lcc_count_ = 0
    self.has_deprecated_lcc_total_ = 0
    self.has_deprecated_imp_count_ = 0
    self.has_deprecated_imp_total_ = 0
    self.has_f_query_doc_count_ = 0
    self.has_f_query_count_ = 0
    self.has_f_lcc_count_ = 0
    self.has_f_lcc_total_ = 0
    self.has_f_imp_count_ = 0
    self.has_f_imp_total_ = 0
    self.has_clickr_mu_ = 0
    self.has_clickr_count_ = 0
    self.has_query_ = 0
    self.has_video_original_query_ = 0
    self.has_tier_id_ = 0
    self.has_stale_ = 0
    if contents is not None: self.MergeFromString(contents)

  def deprecated_query_doc_count(self): return self.deprecated_query_doc_count_

  def set_deprecated_query_doc_count(self, x):
    self.has_deprecated_query_doc_count_ = 1
    self.deprecated_query_doc_count_ = x

  def clear_deprecated_query_doc_count(self):
    self.has_deprecated_query_doc_count_ = 0
    self.deprecated_query_doc_count_ = 0

  def has_deprecated_query_doc_count(self): return self.has_deprecated_query_doc_count_

  def deprecated_query_count(self): return self.deprecated_query_count_

  def set_deprecated_query_count(self, x):
    self.has_deprecated_query_count_ = 1
    self.deprecated_query_count_ = x

  def clear_deprecated_query_count(self):
    self.has_deprecated_query_count_ = 0
    self.deprecated_query_count_ = 0

  def has_deprecated_query_count(self): return self.has_deprecated_query_count_

  def deprecated_lcc_count(self): return self.deprecated_lcc_count_

  def set_deprecated_lcc_count(self, x):
    self.has_deprecated_lcc_count_ = 1
    self.deprecated_lcc_count_ = x

  def clear_deprecated_lcc_count(self):
    self.has_deprecated_lcc_count_ = 0
    self.deprecated_lcc_count_ = 0

  def has_deprecated_lcc_count(self): return self.has_deprecated_lcc_count_

  def deprecated_lcc_total(self): return self.deprecated_lcc_total_

  def set_deprecated_lcc_total(self, x):
    self.has_deprecated_lcc_total_ = 1
    self.deprecated_lcc_total_ = x

  def clear_deprecated_lcc_total(self):
    self.has_deprecated_lcc_total_ = 0
    self.deprecated_lcc_total_ = 0

  def has_deprecated_lcc_total(self): return self.has_deprecated_lcc_total_

  def deprecated_imp_count(self): return self.deprecated_imp_count_

  def set_deprecated_imp_count(self, x):
    self.has_deprecated_imp_count_ = 1
    self.deprecated_imp_count_ = x

  def clear_deprecated_imp_count(self):
    self.has_deprecated_imp_count_ = 0
    self.deprecated_imp_count_ = 0.0

  def has_deprecated_imp_count(self): return self.has_deprecated_imp_count_

  def deprecated_imp_total(self): return self.deprecated_imp_total_

  def set_deprecated_imp_total(self, x):
    self.has_deprecated_imp_total_ = 1
    self.deprecated_imp_total_ = x

  def clear_deprecated_imp_total(self):
    self.has_deprecated_imp_total_ = 0
    self.deprecated_imp_total_ = 0.0

  def has_deprecated_imp_total(self): return self.has_deprecated_imp_total_

  def f_query_doc_count(self): return self.f_query_doc_count_

  def set_f_query_doc_count(self, x):
    self.has_f_query_doc_count_ = 1
    self.f_query_doc_count_ = x

  def clear_f_query_doc_count(self):
    self.has_f_query_doc_count_ = 0
    self.f_query_doc_count_ = 0.0

  def has_f_query_doc_count(self): return self.has_f_query_doc_count_

  def f_query_count(self): return self.f_query_count_

  def set_f_query_count(self, x):
    self.has_f_query_count_ = 1
    self.f_query_count_ = x

  def clear_f_query_count(self):
    self.has_f_query_count_ = 0
    self.f_query_count_ = 0.0

  def has_f_query_count(self): return self.has_f_query_count_

  def f_lcc_count(self): return self.f_lcc_count_

  def set_f_lcc_count(self, x):
    self.has_f_lcc_count_ = 1
    self.f_lcc_count_ = x

  def clear_f_lcc_count(self):
    self.has_f_lcc_count_ = 0
    self.f_lcc_count_ = 0.0

  def has_f_lcc_count(self): return self.has_f_lcc_count_

  def f_lcc_total(self): return self.f_lcc_total_

  def set_f_lcc_total(self, x):
    self.has_f_lcc_total_ = 1
    self.f_lcc_total_ = x

  def clear_f_lcc_total(self):
    self.has_f_lcc_total_ = 0
    self.f_lcc_total_ = 0.0

  def has_f_lcc_total(self): return self.has_f_lcc_total_

  def f_imp_count(self): return self.f_imp_count_

  def set_f_imp_count(self, x):
    self.has_f_imp_count_ = 1
    self.f_imp_count_ = x

  def clear_f_imp_count(self):
    self.has_f_imp_count_ = 0
    self.f_imp_count_ = 0.0

  def has_f_imp_count(self): return self.has_f_imp_count_

  def f_imp_total(self): return self.f_imp_total_

  def set_f_imp_total(self, x):
    self.has_f_imp_total_ = 1
    self.f_imp_total_ = x

  def clear_f_imp_total(self):
    self.has_f_imp_total_ = 0
    self.f_imp_total_ = 0.0

  def has_f_imp_total(self): return self.has_f_imp_total_

  def clickr_mu(self): return self.clickr_mu_

  def set_clickr_mu(self, x):
    self.has_clickr_mu_ = 1
    self.clickr_mu_ = x

  def clear_clickr_mu(self):
    self.has_clickr_mu_ = 0
    self.clickr_mu_ = 0.0

  def has_clickr_mu(self): return self.has_clickr_mu_

  def clickr_count(self): return self.clickr_count_

  def set_clickr_count(self, x):
    self.has_clickr_count_ = 1
    self.clickr_count_ = x

  def clear_clickr_count(self):
    self.has_clickr_count_ = 0
    self.clickr_count_ = 0.0

  def has_clickr_count(self): return self.has_clickr_count_

  def features_size(self): return len(self.features_)
  def features_list(self): return self.features_

  def features(self, i):
    return self.features_[i]

  def mutable_features(self, i):
    return self.features_[i]

  def add_features(self):
    x = NavBoostFeature()
    self.features_.append(x)
    return x

  def clear_features(self):
    self.features_ = []
  def query(self): return self.query_

  def set_query(self, x):
    self.has_query_ = 1
    self.query_ = x

  def clear_query(self):
    self.has_query_ = 0
    self.query_ = ""

  def has_query(self): return self.has_query_

  def video_original_query(self): return self.video_original_query_

  def set_video_original_query(self, x):
    self.has_video_original_query_ = 1
    self.video_original_query_ = x

  def clear_video_original_query(self):
    self.has_video_original_query_ = 0
    self.video_original_query_ = ""

  def has_video_original_query(self): return self.has_video_original_query_

  def tier_id(self): return self.tier_id_

  def set_tier_id(self, x):
    self.has_tier_id_ = 1
    self.tier_id_ = x

  def clear_tier_id(self):
    self.has_tier_id_ = 0
    self.tier_id_ = 0

  def has_tier_id(self): return self.has_tier_id_

  def stale(self): return self.stale_

  def set_stale(self, x):
    self.has_stale_ = 1
    self.stale_ = x

  def clear_stale(self):
    self.has_stale_ = 0
    self.stale_ = 0

  def has_stale(self): return self.has_stale_

  def corpus_data_size(self): return len(self.corpus_data_)
  def corpus_data_list(self): return self.corpus_data_

  def corpus_data(self, i):
    return self.corpus_data_[i]

  def mutable_corpus_data(self, i):
    return self.corpus_data_[i]

  def add_corpus_data(self):
    x = NavBoostQueryForCorpus()
    self.corpus_data_.append(x)
    return x

  def clear_corpus_data(self):
    self.corpus_data_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_deprecated_query_doc_count()): self.set_deprecated_query_doc_count(x.deprecated_query_doc_count())
    if (x.has_deprecated_query_count()): self.set_deprecated_query_count(x.deprecated_query_count())
    if (x.has_deprecated_lcc_count()): self.set_deprecated_lcc_count(x.deprecated_lcc_count())
    if (x.has_deprecated_lcc_total()): self.set_deprecated_lcc_total(x.deprecated_lcc_total())
    if (x.has_deprecated_imp_count()): self.set_deprecated_imp_count(x.deprecated_imp_count())
    if (x.has_deprecated_imp_total()): self.set_deprecated_imp_total(x.deprecated_imp_total())
    if (x.has_f_query_doc_count()): self.set_f_query_doc_count(x.f_query_doc_count())
    if (x.has_f_query_count()): self.set_f_query_count(x.f_query_count())
    if (x.has_f_lcc_count()): self.set_f_lcc_count(x.f_lcc_count())
    if (x.has_f_lcc_total()): self.set_f_lcc_total(x.f_lcc_total())
    if (x.has_f_imp_count()): self.set_f_imp_count(x.f_imp_count())
    if (x.has_f_imp_total()): self.set_f_imp_total(x.f_imp_total())
    if (x.has_clickr_mu()): self.set_clickr_mu(x.clickr_mu())
    if (x.has_clickr_count()): self.set_clickr_count(x.clickr_count())
    for i in xrange(x.features_size()): self.add_features().CopyFrom(x.features(i))
    if (x.has_query()): self.set_query(x.query())
    if (x.has_video_original_query()): self.set_video_original_query(x.video_original_query())
    if (x.has_tier_id()): self.set_tier_id(x.tier_id())
    if (x.has_stale()): self.set_stale(x.stale())
    for i in xrange(x.corpus_data_size()): self.add_corpus_data().CopyFrom(x.corpus_data(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NavBoostQuery', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NavBoostQuery')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NavBoostQuery', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NavBoostQuery', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NavBoostQuery', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_deprecated_query_doc_count_ != x.has_deprecated_query_doc_count_: return 0
    if self.has_deprecated_query_doc_count_ and self.deprecated_query_doc_count_ != x.deprecated_query_doc_count_: return 0
    if self.has_deprecated_query_count_ != x.has_deprecated_query_count_: return 0
    if self.has_deprecated_query_count_ and self.deprecated_query_count_ != x.deprecated_query_count_: return 0
    if self.has_deprecated_lcc_count_ != x.has_deprecated_lcc_count_: return 0
    if self.has_deprecated_lcc_count_ and self.deprecated_lcc_count_ != x.deprecated_lcc_count_: return 0
    if self.has_deprecated_lcc_total_ != x.has_deprecated_lcc_total_: return 0
    if self.has_deprecated_lcc_total_ and self.deprecated_lcc_total_ != x.deprecated_lcc_total_: return 0
    if self.has_deprecated_imp_count_ != x.has_deprecated_imp_count_: return 0
    if self.has_deprecated_imp_count_ and self.deprecated_imp_count_ != x.deprecated_imp_count_: return 0
    if self.has_deprecated_imp_total_ != x.has_deprecated_imp_total_: return 0
    if self.has_deprecated_imp_total_ and self.deprecated_imp_total_ != x.deprecated_imp_total_: return 0
    if self.has_f_query_doc_count_ != x.has_f_query_doc_count_: return 0
    if self.has_f_query_doc_count_ and self.f_query_doc_count_ != x.f_query_doc_count_: return 0
    if self.has_f_query_count_ != x.has_f_query_count_: return 0
    if self.has_f_query_count_ and self.f_query_count_ != x.f_query_count_: return 0
    if self.has_f_lcc_count_ != x.has_f_lcc_count_: return 0
    if self.has_f_lcc_count_ and self.f_lcc_count_ != x.f_lcc_count_: return 0
    if self.has_f_lcc_total_ != x.has_f_lcc_total_: return 0
    if self.has_f_lcc_total_ and self.f_lcc_total_ != x.f_lcc_total_: return 0
    if self.has_f_imp_count_ != x.has_f_imp_count_: return 0
    if self.has_f_imp_count_ and self.f_imp_count_ != x.f_imp_count_: return 0
    if self.has_f_imp_total_ != x.has_f_imp_total_: return 0
    if self.has_f_imp_total_ and self.f_imp_total_ != x.f_imp_total_: return 0
    if self.has_clickr_mu_ != x.has_clickr_mu_: return 0
    if self.has_clickr_mu_ and self.clickr_mu_ != x.clickr_mu_: return 0
    if self.has_clickr_count_ != x.has_clickr_count_: return 0
    if self.has_clickr_count_ and self.clickr_count_ != x.clickr_count_: return 0
    if len(self.features_) != len(x.features_): return 0
    for e1, e2 in zip(self.features_, x.features_):
      if e1 != e2: return 0
    if self.has_query_ != x.has_query_: return 0
    if self.has_query_ and self.query_ != x.query_: return 0
    if self.has_video_original_query_ != x.has_video_original_query_: return 0
    if self.has_video_original_query_ and self.video_original_query_ != x.video_original_query_: return 0
    if self.has_tier_id_ != x.has_tier_id_: return 0
    if self.has_tier_id_ and self.tier_id_ != x.tier_id_: return 0
    if self.has_stale_ != x.has_stale_: return 0
    if self.has_stale_ and self.stale_ != x.stale_: return 0
    if len(self.corpus_data_) != len(x.corpus_data_): return 0
    for e1, e2 in zip(self.corpus_data_, x.corpus_data_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.features_)):
      if (not self.features_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.corpus_data_)):
      if (not self.corpus_data_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_deprecated_query_doc_count_): n += 1 + self.lengthVarInt64(self.deprecated_query_doc_count_)
    if (self.has_deprecated_query_count_): n += 1 + self.lengthVarInt64(self.deprecated_query_count_)
    if (self.has_deprecated_lcc_count_): n += 1 + self.lengthVarInt64(self.deprecated_lcc_count_)
    if (self.has_deprecated_lcc_total_): n += 1 + self.lengthVarInt64(self.deprecated_lcc_total_)
    if (self.has_deprecated_imp_count_): n += 6
    if (self.has_deprecated_imp_total_): n += 6
    if (self.has_f_query_doc_count_): n += 6
    if (self.has_f_query_count_): n += 6
    if (self.has_f_lcc_count_): n += 6
    if (self.has_f_lcc_total_): n += 6
    if (self.has_f_imp_count_): n += 6
    if (self.has_f_imp_total_): n += 6
    if (self.has_clickr_mu_): n += 5
    if (self.has_clickr_count_): n += 5
    n += 1 * len(self.features_)
    for i in xrange(len(self.features_)): n += self.lengthString(self.features_[i].ByteSize())
    if (self.has_query_): n += 1 + self.lengthString(len(self.query_))
    if (self.has_video_original_query_): n += 2 + self.lengthString(len(self.video_original_query_))
    if (self.has_tier_id_): n += 2 + self.lengthVarInt64(self.tier_id_)
    if (self.has_stale_): n += 3
    n += 2 * len(self.corpus_data_)
    for i in xrange(len(self.corpus_data_)): n += self.lengthString(self.corpus_data_[i].ByteSize())
    return n + 0

  def Clear(self):
    self.clear_deprecated_query_doc_count()
    self.clear_deprecated_query_count()
    self.clear_deprecated_lcc_count()
    self.clear_deprecated_lcc_total()
    self.clear_deprecated_imp_count()
    self.clear_deprecated_imp_total()
    self.clear_f_query_doc_count()
    self.clear_f_query_count()
    self.clear_f_lcc_count()
    self.clear_f_lcc_total()
    self.clear_f_imp_count()
    self.clear_f_imp_total()
    self.clear_clickr_mu()
    self.clear_clickr_count()
    self.clear_features()
    self.clear_query()
    self.clear_video_original_query()
    self.clear_tier_id()
    self.clear_stale()
    self.clear_corpus_data()

  def OutputUnchecked(self, out):
    if (self.has_deprecated_query_doc_count_):
      out.putVarInt32(8)
      out.putVarInt32(self.deprecated_query_doc_count_)
    if (self.has_deprecated_query_count_):
      out.putVarInt32(16)
      out.putVarInt32(self.deprecated_query_count_)
    if (self.has_deprecated_lcc_count_):
      out.putVarInt32(24)
      out.putVarInt32(self.deprecated_lcc_count_)
    if (self.has_deprecated_lcc_total_):
      out.putVarInt32(32)
      out.putVarInt32(self.deprecated_lcc_total_)
    for i in xrange(len(self.features_)):
      out.putVarInt32(42)
      out.putVarInt32(self.features_[i].ByteSize())
      self.features_[i].OutputUnchecked(out)
    if (self.has_query_):
      out.putVarInt32(50)
      out.putPrefixedString(self.query_)
    if (self.has_clickr_mu_):
      out.putVarInt32(61)
      out.putFloat(self.clickr_mu_)
    if (self.has_clickr_count_):
      out.putVarInt32(69)
      out.putFloat(self.clickr_count_)
    if (self.has_tier_id_):
      out.putVarInt32(128)
      out.putVarInt32(self.tier_id_)
    if (self.has_stale_):
      out.putVarInt32(136)
      out.putBoolean(self.stale_)
    for i in xrange(len(self.corpus_data_)):
      out.putVarInt32(146)
      out.putVarInt32(self.corpus_data_[i].ByteSize())
      self.corpus_data_[i].OutputUnchecked(out)
    if (self.has_deprecated_imp_count_):
      out.putVarInt32(157)
      out.putFloat(self.deprecated_imp_count_)
    if (self.has_deprecated_imp_total_):
      out.putVarInt32(165)
      out.putFloat(self.deprecated_imp_total_)
    if (self.has_f_query_doc_count_):
      out.putVarInt32(173)
      out.putFloat(self.f_query_doc_count_)
    if (self.has_f_query_count_):
      out.putVarInt32(181)
      out.putFloat(self.f_query_count_)
    if (self.has_f_lcc_count_):
      out.putVarInt32(189)
      out.putFloat(self.f_lcc_count_)
    if (self.has_f_lcc_total_):
      out.putVarInt32(197)
      out.putFloat(self.f_lcc_total_)
    if (self.has_f_imp_count_):
      out.putVarInt32(205)
      out.putFloat(self.f_imp_count_)
    if (self.has_f_imp_total_):
      out.putVarInt32(213)
      out.putFloat(self.f_imp_total_)
    if (self.has_video_original_query_):
      out.putVarInt32(218)
      out.putPrefixedString(self.video_original_query_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_deprecated_query_doc_count(d.getVarInt32())
        continue
      if tt == 16:
        self.set_deprecated_query_count(d.getVarInt32())
        continue
      if tt == 24:
        self.set_deprecated_lcc_count(d.getVarInt32())
        continue
      if tt == 32:
        self.set_deprecated_lcc_total(d.getVarInt32())
        continue
      if tt == 42:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_features().TryMerge(tmp)
        continue
      if tt == 50:
        self.set_query(d.getPrefixedString())
        continue
      if tt == 61:
        self.set_clickr_mu(d.getFloat())
        continue
      if tt == 69:
        self.set_clickr_count(d.getFloat())
        continue
      if tt == 128:
        self.set_tier_id(d.getVarInt32())
        continue
      if tt == 136:
        self.set_stale(d.getBoolean())
        continue
      if tt == 146:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_corpus_data().TryMerge(tmp)
        continue
      if tt == 157:
        self.set_deprecated_imp_count(d.getFloat())
        continue
      if tt == 165:
        self.set_deprecated_imp_total(d.getFloat())
        continue
      if tt == 173:
        self.set_f_query_doc_count(d.getFloat())
        continue
      if tt == 181:
        self.set_f_query_count(d.getFloat())
        continue
      if tt == 189:
        self.set_f_lcc_count(d.getFloat())
        continue
      if tt == 197:
        self.set_f_lcc_total(d.getFloat())
        continue
      if tt == 205:
        self.set_f_imp_count(d.getFloat())
        continue
      if tt == 213:
        self.set_f_imp_total(d.getFloat())
        continue
      if tt == 218:
        self.set_video_original_query(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_deprecated_query_doc_count_: res+=prefix+("DEPRECATED_query_doc_count: %s\n" % self.DebugFormatInt32(self.deprecated_query_doc_count_))
    if self.has_deprecated_query_count_: res+=prefix+("DEPRECATED_query_count: %s\n" % self.DebugFormatInt32(self.deprecated_query_count_))
    if self.has_deprecated_lcc_count_: res+=prefix+("DEPRECATED_lcc_count: %s\n" % self.DebugFormatInt32(self.deprecated_lcc_count_))
    if self.has_deprecated_lcc_total_: res+=prefix+("DEPRECATED_lcc_total: %s\n" % self.DebugFormatInt32(self.deprecated_lcc_total_))
    if self.has_deprecated_imp_count_: res+=prefix+("DEPRECATED_imp_count: %s\n" % self.DebugFormatFloat(self.deprecated_imp_count_))
    if self.has_deprecated_imp_total_: res+=prefix+("DEPRECATED_imp_total: %s\n" % self.DebugFormatFloat(self.deprecated_imp_total_))
    if self.has_f_query_doc_count_: res+=prefix+("f_query_doc_count: %s\n" % self.DebugFormatFloat(self.f_query_doc_count_))
    if self.has_f_query_count_: res+=prefix+("f_query_count: %s\n" % self.DebugFormatFloat(self.f_query_count_))
    if self.has_f_lcc_count_: res+=prefix+("f_lcc_count: %s\n" % self.DebugFormatFloat(self.f_lcc_count_))
    if self.has_f_lcc_total_: res+=prefix+("f_lcc_total: %s\n" % self.DebugFormatFloat(self.f_lcc_total_))
    if self.has_f_imp_count_: res+=prefix+("f_imp_count: %s\n" % self.DebugFormatFloat(self.f_imp_count_))
    if self.has_f_imp_total_: res+=prefix+("f_imp_total: %s\n" % self.DebugFormatFloat(self.f_imp_total_))
    if self.has_clickr_mu_: res+=prefix+("clickr_mu: %s\n" % self.DebugFormatFloat(self.clickr_mu_))
    if self.has_clickr_count_: res+=prefix+("clickr_count: %s\n" % self.DebugFormatFloat(self.clickr_count_))
    cnt=0
    for e in self.features_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("features%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_query_: res+=prefix+("query: %s\n" % self.DebugFormatString(self.query_))
    if self.has_video_original_query_: res+=prefix+("video_original_query: %s\n" % self.DebugFormatString(self.video_original_query_))
    if self.has_tier_id_: res+=prefix+("tier_id: %s\n" % self.DebugFormatInt32(self.tier_id_))
    if self.has_stale_: res+=prefix+("stale: %s\n" % self.DebugFormatBool(self.stale_))
    cnt=0
    for e in self.corpus_data_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("corpus_data%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    return res

  kDEPRECATED_query_doc_count = 1
  kDEPRECATED_query_count = 2
  kDEPRECATED_lcc_count = 3
  kDEPRECATED_lcc_total = 4
  kDEPRECATED_imp_count = 19
  kDEPRECATED_imp_total = 20
  kf_query_doc_count = 21
  kf_query_count = 22
  kf_lcc_count = 23
  kf_lcc_total = 24
  kf_imp_count = 25
  kf_imp_total = 26
  kclickr_mu = 7
  kclickr_count = 8
  kfeatures = 5
  kquery = 6
  kvideo_original_query = 27
  ktier_id = 16
  kstale = 17
  kcorpus_data = 18

  _TEXT = (
   "ErrorCode",  #   0
   "DEPRECATED_query_doc_count",  #   1
   "DEPRECATED_query_count",  #   2
   "DEPRECATED_lcc_count",  #   3
   "DEPRECATED_lcc_total",  #   4
   "features",  #   5
   "query",  #   6
   "clickr_mu",  #   7
   "clickr_count",  #   8
   None,  #   9
   None,  #  10
   None,  #  11
   None,  #  12
   None,  #  13
   None,  #  14
   None,  #  15
   "tier_id",  #  16
   "stale",  #  17
   "corpus_data",  #  18
   "DEPRECATED_imp_count",  #  19
   "DEPRECATED_imp_total",  #  20
   "f_query_doc_count",  #  21
   "f_query_count",  #  22
   "f_lcc_count",  #  23
   "f_lcc_total",  #  24
   "f_imp_count",  #  25
   "f_imp_total",  #  26
   "video_original_query",  #  27
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.FLOAT,  #   7

   ProtocolBuffer.Encoder.FLOAT,  #   8

   ProtocolBuffer.Encoder.MAX_TYPE,  #   9

   ProtocolBuffer.Encoder.MAX_TYPE,  #  10

   ProtocolBuffer.Encoder.MAX_TYPE,  #  11

   ProtocolBuffer.Encoder.MAX_TYPE,  #  12

   ProtocolBuffer.Encoder.MAX_TYPE,  #  13

   ProtocolBuffer.Encoder.MAX_TYPE,  #  14

   ProtocolBuffer.Encoder.MAX_TYPE,  #  15

   ProtocolBuffer.Encoder.NUMERIC,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.STRING,  #  18

   ProtocolBuffer.Encoder.FLOAT,  #  19

   ProtocolBuffer.Encoder.FLOAT,  #  20

   ProtocolBuffer.Encoder.FLOAT,  #  21

   ProtocolBuffer.Encoder.FLOAT,  #  22

   ProtocolBuffer.Encoder.FLOAT,  #  23

   ProtocolBuffer.Encoder.FLOAT,  #  24

   ProtocolBuffer.Encoder.FLOAT,  #  25

   ProtocolBuffer.Encoder.FLOAT,  #  26

   ProtocolBuffer.Encoder.STRING,  #  27

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0d,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x13,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x14,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x66,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x15,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x66,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x16,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x5f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x17,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x5f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x18,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x5f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x19,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x5f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x1a,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x6d,
    0x75,
    0x20,
    0x07,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x08,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0f,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6f,
    0x5f,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x5f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x20,
    0x1b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x74,
    0x69,
    0x65,
    0x72,
    0x5f,
    0x69,
    0x64,
    0x20,
    0x10,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x65,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x75,
    0x73,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x12,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x16,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x46,
    0x6f,
    0x72,
    0x43,
    0x6f,
    0x72,
    0x70,
    0x75,
    0x73,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NavBoostDocument(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 4256936 

  _TypeId_NAMES = {
    4256936: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.queries_ = []
    self.url_ = ""
    self.deprecated_urlfps_ = []
    self.urls_ = []
    self.deprecated_problem_urlfps_ = []
    self.problem_urls_ = []
    self.has_url_ = 0
    if contents is not None: self.MergeFromString(contents)

  def queries_size(self): return len(self.queries_)
  def queries_list(self): return self.queries_

  def queries(self, i):
    return self.queries_[i]

  def mutable_queries(self, i):
    return self.queries_[i]

  def add_queries(self):
    x = NavBoostQuery()
    self.queries_.append(x)
    return x

  def clear_queries(self):
    self.queries_ = []
  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def deprecated_urlfps_size(self): return len(self.deprecated_urlfps_)
  def deprecated_urlfps_list(self): return self.deprecated_urlfps_

  def deprecated_urlfps(self, i):
    return self.deprecated_urlfps_[i]

  def set_deprecated_urlfps(self, i, x):
    self.deprecated_urlfps_[i] = x

  def add_deprecated_urlfps(self, x):
    self.deprecated_urlfps_.append(x)

  def clear_deprecated_urlfps(self):
    self.deprecated_urlfps_ = []

  def urls_size(self): return len(self.urls_)
  def urls_list(self): return self.urls_

  def urls(self, i):
    return self.urls_[i]

  def set_urls(self, i, x):
    self.urls_[i] = x

  def add_urls(self, x):
    self.urls_.append(x)

  def clear_urls(self):
    self.urls_ = []

  def deprecated_problem_urlfps_size(self): return len(self.deprecated_problem_urlfps_)
  def deprecated_problem_urlfps_list(self): return self.deprecated_problem_urlfps_

  def deprecated_problem_urlfps(self, i):
    return self.deprecated_problem_urlfps_[i]

  def set_deprecated_problem_urlfps(self, i, x):
    self.deprecated_problem_urlfps_[i] = x

  def add_deprecated_problem_urlfps(self, x):
    self.deprecated_problem_urlfps_.append(x)

  def clear_deprecated_problem_urlfps(self):
    self.deprecated_problem_urlfps_ = []

  def problem_urls_size(self): return len(self.problem_urls_)
  def problem_urls_list(self): return self.problem_urls_

  def problem_urls(self, i):
    return self.problem_urls_[i]

  def set_problem_urls(self, i, x):
    self.problem_urls_[i] = x

  def add_problem_urls(self, x):
    self.problem_urls_.append(x)

  def clear_problem_urls(self):
    self.problem_urls_ = []


  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.queries_size()): self.add_queries().CopyFrom(x.queries(i))
    if (x.has_url()): self.set_url(x.url())
    for i in xrange(x.deprecated_urlfps_size()): self.add_deprecated_urlfps(x.deprecated_urlfps(i))
    for i in xrange(x.urls_size()): self.add_urls(x.urls(i))
    for i in xrange(x.deprecated_problem_urlfps_size()): self.add_deprecated_problem_urlfps(x.deprecated_problem_urlfps(i))
    for i in xrange(x.problem_urls_size()): self.add_problem_urls(x.problem_urls(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NavBoostDocument', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NavBoostDocument')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NavBoostDocument', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NavBoostDocument', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NavBoostDocument', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.queries_) != len(x.queries_): return 0
    for e1, e2 in zip(self.queries_, x.queries_):
      if e1 != e2: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if len(self.deprecated_urlfps_) != len(x.deprecated_urlfps_): return 0
    for e1, e2 in zip(self.deprecated_urlfps_, x.deprecated_urlfps_):
      if e1 != e2: return 0
    if len(self.urls_) != len(x.urls_): return 0
    for e1, e2 in zip(self.urls_, x.urls_):
      if e1 != e2: return 0
    if len(self.deprecated_problem_urlfps_) != len(x.deprecated_problem_urlfps_): return 0
    for e1, e2 in zip(self.deprecated_problem_urlfps_, x.deprecated_problem_urlfps_):
      if e1 != e2: return 0
    if len(self.problem_urls_) != len(x.problem_urls_): return 0
    for e1, e2 in zip(self.problem_urls_, x.problem_urls_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.queries_)):
      if (not self.queries_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 1 * len(self.queries_)
    for i in xrange(len(self.queries_)): n += self.lengthString(self.queries_[i].ByteSize())
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    n += 9 * len(self.deprecated_urlfps_)
    n += 1 * len(self.urls_)
    for i in xrange(len(self.urls_)): n += self.lengthString(len(self.urls_[i]))
    n += 9 * len(self.deprecated_problem_urlfps_)
    n += 1 * len(self.problem_urls_)
    for i in xrange(len(self.problem_urls_)): n += self.lengthString(len(self.problem_urls_[i]))
    return n + 0

  def Clear(self):
    self.clear_queries()
    self.clear_url()
    self.clear_deprecated_urlfps()
    self.clear_urls()
    self.clear_deprecated_problem_urlfps()
    self.clear_problem_urls()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.queries_)):
      out.putVarInt32(10)
      out.putVarInt32(self.queries_[i].ByteSize())
      self.queries_[i].OutputUnchecked(out)
    if (self.has_url_):
      out.putVarInt32(18)
      out.putPrefixedString(self.url_)
    for i in xrange(len(self.deprecated_urlfps_)):
      out.putVarInt32(25)
      out.put64(self.deprecated_urlfps_[i])
    for i in xrange(len(self.deprecated_problem_urlfps_)):
      out.putVarInt32(33)
      out.put64(self.deprecated_problem_urlfps_[i])
    for i in xrange(len(self.urls_)):
      out.putVarInt32(42)
      out.putPrefixedString(self.urls_[i])
    for i in xrange(len(self.problem_urls_)):
      out.putVarInt32(50)
      out.putPrefixedString(self.problem_urls_[i])

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_queries().TryMerge(tmp)
        continue
      if tt == 18:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 25:
        self.add_deprecated_urlfps(d.get64())
        continue
      if tt == 33:
        self.add_deprecated_problem_urlfps(d.get64())
        continue
      if tt == 42:
        self.add_urls(d.getPrefixedString())
        continue
      if tt == 50:
        self.add_problem_urls(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.queries_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("queries%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_url_: res+=prefix+("url: %s\n" % self.DebugFormatString(self.url_))
    cnt=0
    for e in self.deprecated_urlfps_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DEPRECATED_urlfps%s: %s\n" % (elm, self.DebugFormatFixed64(e)))
      cnt+=1
    cnt=0
    for e in self.urls_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("urls%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    cnt=0
    for e in self.deprecated_problem_urlfps_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DEPRECATED_problem_urlfps%s: %s\n" % (elm, self.DebugFormatFixed64(e)))
      cnt+=1
    cnt=0
    for e in self.problem_urls_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("problem_urls%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    return res

  kqueries = 1
  kurl = 2
  kDEPRECATED_urlfps = 3
  kurls = 5
  kDEPRECATED_problem_urlfps = 4
  kproblem_urls = 6

  _TEXT = (
   "ErrorCode",  #   0
   "queries",  #   1
   "url",  #   2
   "DEPRECATED_urlfps",  #   3
   "DEPRECATED_problem_urlfps",  #   4
   "urls",  #   5
   "problem_urls",  #   6
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.DOUBLE,  #   3

   ProtocolBuffer.Encoder.DOUBLE,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x10,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x44,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x13,
    0x1a,
    0x07,
    0x71,
    0x75,
    0x65,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0d,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x75,
    0x72,
    0x6c,
    0x66,
    0x70,
    0x73,
    0x20,
    0x03,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x75,
    0x72,
    0x6c,
    0x73,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x5f,
    0x75,
    0x72,
    0x6c,
    0x66,
    0x70,
    0x73,
    0x20,
    0x04,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x5f,
    0x75,
    0x72,
    0x6c,
    0x73,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xa8,
    0xe9,
    0x83,
    0x02,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NavBoostSite(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.site_ = ""
    self.documents_ = []
    self.has_site_ = 0
    if contents is not None: self.MergeFromString(contents)

  def site(self): return self.site_

  def set_site(self, x):
    self.has_site_ = 1
    self.site_ = x

  def clear_site(self):
    self.has_site_ = 0
    self.site_ = ""

  def has_site(self): return self.has_site_

  def documents_size(self): return len(self.documents_)
  def documents_list(self): return self.documents_

  def documents(self, i):
    return self.documents_[i]

  def mutable_documents(self, i):
    return self.documents_[i]

  def add_documents(self):
    x = NavBoostDocument()
    self.documents_.append(x)
    return x

  def clear_documents(self):
    self.documents_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_site()): self.set_site(x.site())
    for i in xrange(x.documents_size()): self.add_documents().CopyFrom(x.documents(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NavBoostSite', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NavBoostSite')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NavBoostSite', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NavBoostSite', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NavBoostSite', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_site_ != x.has_site_: return 0
    if self.has_site_ and self.site_ != x.site_: return 0
    if len(self.documents_) != len(x.documents_): return 0
    for e1, e2 in zip(self.documents_, x.documents_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_site_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: site not set.')
    for i in xrange(len(self.documents_)):
      if (not self.documents_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.site_))
    n += 1 * len(self.documents_)
    for i in xrange(len(self.documents_)): n += self.lengthString(self.documents_[i].ByteSize())
    return n + 1

  def Clear(self):
    self.clear_site()
    self.clear_documents()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.site_)
    for i in xrange(len(self.documents_)):
      out.putVarInt32(18)
      out.putVarInt32(self.documents_[i].ByteSize())
      self.documents_[i].OutputUnchecked(out)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_site(d.getPrefixedString())
        continue
      if tt == 18:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_documents().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_site_: res+=prefix+("site: %s\n" % self.DebugFormatString(self.site_))
    cnt=0
    for e in self.documents_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("documents%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    return res

  ksite = 1
  kdocuments = 2

  _TEXT = (
   "ErrorCode",  #   0
   "site",  #   1
   "documents",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0c,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x53,
    0x69,
    0x74,
    0x65,
    0x13,
    0x1a,
    0x04,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x10,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x44,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class MustangNavBoostInfo_QueryFeature(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.id_ = 0
    self.fraction_ = 0
    self.lcc_fraction_ = 0
    self.clickr_stored_numerator_ = 64
    self.clickr_stored_denominator_ = 0
    self.has_id_ = 0
    self.has_fraction_ = 0
    self.has_lcc_fraction_ = 0
    self.has_clickr_stored_numerator_ = 0
    self.has_clickr_stored_denominator_ = 0
    if contents is not None: self.MergeFromString(contents)

  def id(self): return self.id_

  def set_id(self, x):
    self.has_id_ = 1
    self.id_ = x

  def clear_id(self):
    self.has_id_ = 0
    self.id_ = 0

  def has_id(self): return self.has_id_

  def fraction(self): return self.fraction_

  def set_fraction(self, x):
    self.has_fraction_ = 1
    self.fraction_ = x

  def clear_fraction(self):
    self.has_fraction_ = 0
    self.fraction_ = 0

  def has_fraction(self): return self.has_fraction_

  def lcc_fraction(self): return self.lcc_fraction_

  def set_lcc_fraction(self, x):
    self.has_lcc_fraction_ = 1
    self.lcc_fraction_ = x

  def clear_lcc_fraction(self):
    self.has_lcc_fraction_ = 0
    self.lcc_fraction_ = 0

  def has_lcc_fraction(self): return self.has_lcc_fraction_

  def clickr_stored_numerator(self): return self.clickr_stored_numerator_

  def set_clickr_stored_numerator(self, x):
    self.has_clickr_stored_numerator_ = 1
    self.clickr_stored_numerator_ = x

  def clear_clickr_stored_numerator(self):
    self.has_clickr_stored_numerator_ = 0
    self.clickr_stored_numerator_ = 64

  def has_clickr_stored_numerator(self): return self.has_clickr_stored_numerator_

  def clickr_stored_denominator(self): return self.clickr_stored_denominator_

  def set_clickr_stored_denominator(self, x):
    self.has_clickr_stored_denominator_ = 1
    self.clickr_stored_denominator_ = x

  def clear_clickr_stored_denominator(self):
    self.has_clickr_stored_denominator_ = 0
    self.clickr_stored_denominator_ = 0

  def has_clickr_stored_denominator(self): return self.has_clickr_stored_denominator_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_id()): self.set_id(x.id())
    if (x.has_fraction()): self.set_fraction(x.fraction())
    if (x.has_lcc_fraction()): self.set_lcc_fraction(x.lcc_fraction())
    if (x.has_clickr_stored_numerator()): self.set_clickr_stored_numerator(x.clickr_stored_numerator())
    if (x.has_clickr_stored_denominator()): self.set_clickr_stored_denominator(x.clickr_stored_denominator())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'MustangNavBoostInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'MustangNavBoostInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'MustangNavBoostInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'MustangNavBoostInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'MustangNavBoostInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_id_ != x.has_id_: return 0
    if self.has_id_ and self.id_ != x.id_: return 0
    if self.has_fraction_ != x.has_fraction_: return 0
    if self.has_fraction_ and self.fraction_ != x.fraction_: return 0
    if self.has_lcc_fraction_ != x.has_lcc_fraction_: return 0
    if self.has_lcc_fraction_ and self.lcc_fraction_ != x.lcc_fraction_: return 0
    if self.has_clickr_stored_numerator_ != x.has_clickr_stored_numerator_: return 0
    if self.has_clickr_stored_numerator_ and self.clickr_stored_numerator_ != x.clickr_stored_numerator_: return 0
    if self.has_clickr_stored_denominator_ != x.has_clickr_stored_denominator_: return 0
    if self.has_clickr_stored_denominator_ and self.clickr_stored_denominator_ != x.clickr_stored_denominator_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_id_): n += 1 + self.lengthVarInt64(self.id_)
    if (self.has_fraction_): n += 1 + self.lengthVarInt64(self.fraction_)
    if (self.has_lcc_fraction_): n += 1 + self.lengthVarInt64(self.lcc_fraction_)
    if (self.has_clickr_stored_numerator_): n += 1 + self.lengthVarInt64(self.clickr_stored_numerator_)
    if (self.has_clickr_stored_denominator_): n += 1 + self.lengthVarInt64(self.clickr_stored_denominator_)
    return n + 0

  def Clear(self):
    self.clear_id()
    self.clear_fraction()
    self.clear_lcc_fraction()
    self.clear_clickr_stored_numerator()
    self.clear_clickr_stored_denominator()

  def OutputUnchecked(self, out):
    if (self.has_id_):
      out.putVarInt32(40)
      out.putVarInt32(self.id_)
    if (self.has_fraction_):
      out.putVarInt32(48)
      out.putVarInt32(self.fraction_)
    if (self.has_lcc_fraction_):
      out.putVarInt32(56)
      out.putVarInt32(self.lcc_fraction_)
    if (self.has_clickr_stored_numerator_):
      out.putVarInt32(80)
      out.putVarInt32(self.clickr_stored_numerator_)
    if (self.has_clickr_stored_denominator_):
      out.putVarInt32(88)
      out.putVarInt32(self.clickr_stored_denominator_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 36: break
      if tt == 40:
        self.set_id(d.getVarInt32())
        continue
      if tt == 48:
        self.set_fraction(d.getVarInt32())
        continue
      if tt == 56:
        self.set_lcc_fraction(d.getVarInt32())
        continue
      if tt == 80:
        self.set_clickr_stored_numerator(d.getVarInt32())
        continue
      if tt == 88:
        self.set_clickr_stored_denominator(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_id_: res+=prefix+("id: %s\n" % self.DebugFormatInt32(self.id_))
    if self.has_fraction_: res+=prefix+("fraction: %s\n" % self.DebugFormatInt32(self.fraction_))
    if self.has_lcc_fraction_: res+=prefix+("lcc_fraction: %s\n" % self.DebugFormatInt32(self.lcc_fraction_))
    if self.has_clickr_stored_numerator_: res+=prefix+("clickr_stored_numerator: %s\n" % self.DebugFormatInt32(self.clickr_stored_numerator_))
    if self.has_clickr_stored_denominator_: res+=prefix+("clickr_stored_denominator: %s\n" % self.DebugFormatInt32(self.clickr_stored_denominator_))
    return res

class MustangNavBoostInfo_Query(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.fraction_ = 0
    self.lcc_fraction_ = 0
    self.clickr_stored_numerator_ = 64
    self.clickr_stored_denominator_ = 0
    self.feature_ = []
    self.has_fraction_ = 0
    self.has_lcc_fraction_ = 0
    self.has_clickr_stored_numerator_ = 0
    self.has_clickr_stored_denominator_ = 0
    if contents is not None: self.MergeFromString(contents)

  def fraction(self): return self.fraction_

  def set_fraction(self, x):
    self.has_fraction_ = 1
    self.fraction_ = x

  def clear_fraction(self):
    self.has_fraction_ = 0
    self.fraction_ = 0

  def has_fraction(self): return self.has_fraction_

  def lcc_fraction(self): return self.lcc_fraction_

  def set_lcc_fraction(self, x):
    self.has_lcc_fraction_ = 1
    self.lcc_fraction_ = x

  def clear_lcc_fraction(self):
    self.has_lcc_fraction_ = 0
    self.lcc_fraction_ = 0

  def has_lcc_fraction(self): return self.has_lcc_fraction_

  def clickr_stored_numerator(self): return self.clickr_stored_numerator_

  def set_clickr_stored_numerator(self, x):
    self.has_clickr_stored_numerator_ = 1
    self.clickr_stored_numerator_ = x

  def clear_clickr_stored_numerator(self):
    self.has_clickr_stored_numerator_ = 0
    self.clickr_stored_numerator_ = 64

  def has_clickr_stored_numerator(self): return self.has_clickr_stored_numerator_

  def clickr_stored_denominator(self): return self.clickr_stored_denominator_

  def set_clickr_stored_denominator(self, x):
    self.has_clickr_stored_denominator_ = 1
    self.clickr_stored_denominator_ = x

  def clear_clickr_stored_denominator(self):
    self.has_clickr_stored_denominator_ = 0
    self.clickr_stored_denominator_ = 0

  def has_clickr_stored_denominator(self): return self.has_clickr_stored_denominator_

  def feature_size(self): return len(self.feature_)
  def feature_list(self): return self.feature_

  def feature(self, i):
    return self.feature_[i]

  def mutable_feature(self, i):
    return self.feature_[i]

  def add_feature(self):
    x = MustangNavBoostInfo_QueryFeature()
    self.feature_.append(x)
    return x

  def clear_feature(self):
    self.feature_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_fraction()): self.set_fraction(x.fraction())
    if (x.has_lcc_fraction()): self.set_lcc_fraction(x.lcc_fraction())
    if (x.has_clickr_stored_numerator()): self.set_clickr_stored_numerator(x.clickr_stored_numerator())
    if (x.has_clickr_stored_denominator()): self.set_clickr_stored_denominator(x.clickr_stored_denominator())
    for i in xrange(x.feature_size()): self.add_feature().CopyFrom(x.feature(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'MustangNavBoostInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'MustangNavBoostInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'MustangNavBoostInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'MustangNavBoostInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'MustangNavBoostInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_fraction_ != x.has_fraction_: return 0
    if self.has_fraction_ and self.fraction_ != x.fraction_: return 0
    if self.has_lcc_fraction_ != x.has_lcc_fraction_: return 0
    if self.has_lcc_fraction_ and self.lcc_fraction_ != x.lcc_fraction_: return 0
    if self.has_clickr_stored_numerator_ != x.has_clickr_stored_numerator_: return 0
    if self.has_clickr_stored_numerator_ and self.clickr_stored_numerator_ != x.clickr_stored_numerator_: return 0
    if self.has_clickr_stored_denominator_ != x.has_clickr_stored_denominator_: return 0
    if self.has_clickr_stored_denominator_ and self.clickr_stored_denominator_ != x.clickr_stored_denominator_: return 0
    if len(self.feature_) != len(x.feature_): return 0
    for e1, e2 in zip(self.feature_, x.feature_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.feature_)):
      if (not self.feature_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_fraction_): n += 1 + self.lengthVarInt64(self.fraction_)
    if (self.has_lcc_fraction_): n += 1 + self.lengthVarInt64(self.lcc_fraction_)
    if (self.has_clickr_stored_numerator_): n += 1 + self.lengthVarInt64(self.clickr_stored_numerator_)
    if (self.has_clickr_stored_denominator_): n += 1 + self.lengthVarInt64(self.clickr_stored_denominator_)
    n += 2 * len(self.feature_)
    for i in xrange(len(self.feature_)): n += self.feature_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_fraction()
    self.clear_lcc_fraction()
    self.clear_clickr_stored_numerator()
    self.clear_clickr_stored_denominator()
    self.clear_feature()

  def OutputUnchecked(self, out):
    if (self.has_fraction_):
      out.putVarInt32(16)
      out.putVarInt32(self.fraction_)
    if (self.has_lcc_fraction_):
      out.putVarInt32(24)
      out.putVarInt32(self.lcc_fraction_)
    for i in xrange(len(self.feature_)):
      out.putVarInt32(35)
      self.feature_[i].OutputUnchecked(out)
      out.putVarInt32(36)
    if (self.has_clickr_stored_numerator_):
      out.putVarInt32(64)
      out.putVarInt32(self.clickr_stored_numerator_)
    if (self.has_clickr_stored_denominator_):
      out.putVarInt32(72)
      out.putVarInt32(self.clickr_stored_denominator_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 16:
        self.set_fraction(d.getVarInt32())
        continue
      if tt == 24:
        self.set_lcc_fraction(d.getVarInt32())
        continue
      if tt == 35:
        self.add_feature().TryMerge(d)
        continue
      if tt == 64:
        self.set_clickr_stored_numerator(d.getVarInt32())
        continue
      if tt == 72:
        self.set_clickr_stored_denominator(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_fraction_: res+=prefix+("fraction: %s\n" % self.DebugFormatInt32(self.fraction_))
    if self.has_lcc_fraction_: res+=prefix+("lcc_fraction: %s\n" % self.DebugFormatInt32(self.lcc_fraction_))
    if self.has_clickr_stored_numerator_: res+=prefix+("clickr_stored_numerator: %s\n" % self.DebugFormatInt32(self.clickr_stored_numerator_))
    if self.has_clickr_stored_denominator_: res+=prefix+("clickr_stored_denominator: %s\n" % self.DebugFormatInt32(self.clickr_stored_denominator_))
    cnt=0
    for e in self.feature_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Feature%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

class MustangNavBoostInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.query_ = []
    if contents is not None: self.MergeFromString(contents)

  def query_size(self): return len(self.query_)
  def query_list(self): return self.query_

  def query(self, i):
    return self.query_[i]

  def mutable_query(self, i):
    return self.query_[i]

  def add_query(self):
    x = MustangNavBoostInfo_Query()
    self.query_.append(x)
    return x

  def clear_query(self):
    self.query_ = []

  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.query_size()): self.add_query().CopyFrom(x.query(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'MustangNavBoostInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'MustangNavBoostInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'MustangNavBoostInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'MustangNavBoostInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'MustangNavBoostInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.query_) != len(x.query_): return 0
    for e1, e2 in zip(self.query_, x.query_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.query_)):
      if (not self.query_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.query_)
    for i in xrange(len(self.query_)): n += self.query_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_query()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.query_)):
      out.putVarInt32(11)
      self.query_[i].OutputUnchecked(out)
      out.putVarInt32(12)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_query().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.query_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Query%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kQueryGroup = 1
  kQueryfraction = 2
  kQuerylcc_fraction = 3
  kQueryclickr_stored_numerator = 8
  kQueryclickr_stored_denominator = 9
  kQueryFeatureGroup = 4
  kQueryFeatureid = 5
  kQueryFeaturefraction = 6
  kQueryFeaturelcc_fraction = 7
  kQueryFeatureclickr_stored_numerator = 10
  kQueryFeatureclickr_stored_denominator = 11

  _TEXT = (
   "ErrorCode",  #   0
   "Query",  #   1
   "fraction",  #   2
   "lcc_fraction",  #   3
   "Feature",  #   4
   "id",  #   5
   "fraction",  #   6
   "lcc_fraction",  #   7
   "clickr_stored_numerator",  #   8
   "clickr_stored_denominator",  #   9
   "clickr_stored_numerator",  #  10
   "clickr_stored_denominator",  #  11
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.STARTGROUP,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x13,
    0x4d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x05,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x66,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x66,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x5f,
    0x6e,
    0x75,
    0x6d,
    0x65,
    0x72,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x02,
    0x36,
    0x34,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x36,
    0x34,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x5f,
    0x64,
    0x65,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x04,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2e,
    0x69,
    0x64,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x05,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2e,
    0x66,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x05,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2e,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x66,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x05,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x5f,
    0x6e,
    0x75,
    0x6d,
    0x65,
    0x72,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x02,
    0x36,
    0x34,
    0x60,
    0x05,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x36,
    0x34,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x27,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x5f,
    0x64,
    0x65,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x05,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NBMBuildCountries(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.source_ = ""
    self.country_ = []
    self.has_source_ = 0
    if contents is not None: self.MergeFromString(contents)

  def source(self): return self.source_

  def set_source(self, x):
    self.has_source_ = 1
    self.source_ = x

  def clear_source(self):
    self.has_source_ = 0
    self.source_ = ""

  def has_source(self): return self.has_source_

  def country_size(self): return len(self.country_)
  def country_list(self): return self.country_

  def country(self, i):
    return self.country_[i]

  def set_country(self, i, x):
    self.country_[i] = x

  def add_country(self, x):
    self.country_.append(x)

  def clear_country(self):
    self.country_ = []


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_source()): self.set_source(x.source())
    for i in xrange(x.country_size()): self.add_country(x.country(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NBMBuildCountries', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NBMBuildCountries')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NBMBuildCountries', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NBMBuildCountries', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NBMBuildCountries', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_source_ != x.has_source_: return 0
    if self.has_source_ and self.source_ != x.source_: return 0
    if len(self.country_) != len(x.country_): return 0
    for e1, e2 in zip(self.country_, x.country_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_source_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: source not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.source_))
    n += 1 * len(self.country_)
    for i in xrange(len(self.country_)): n += self.lengthString(len(self.country_[i]))
    return n + 1

  def Clear(self):
    self.clear_source()
    self.clear_country()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.source_)
    for i in xrange(len(self.country_)):
      out.putVarInt32(18)
      out.putPrefixedString(self.country_[i])

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_source(d.getPrefixedString())
        continue
      if tt == 18:
        self.add_country(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_source_: res+=prefix+("source: %s\n" % self.DebugFormatString(self.source_))
    cnt=0
    for e in self.country_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("country%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    return res

  ksource = 1
  kcountry = 2

  _TEXT = (
   "ErrorCode",  #   0
   "source",  #   1
   "country",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x11,
    0x4e,
    0x42,
    0x4d,
    0x42,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x13,
    0x1a,
    0x06,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NBMSmoothing(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.code_ = ""
    self.smoothing_ = 0.0
    self.has_code_ = 0
    self.has_smoothing_ = 0
    if contents is not None: self.MergeFromString(contents)

  def code(self): return self.code_

  def set_code(self, x):
    self.has_code_ = 1
    self.code_ = x

  def clear_code(self):
    self.has_code_ = 0
    self.code_ = ""

  def has_code(self): return self.has_code_

  def smoothing(self): return self.smoothing_

  def set_smoothing(self, x):
    self.has_smoothing_ = 1
    self.smoothing_ = x

  def clear_smoothing(self):
    self.has_smoothing_ = 0
    self.smoothing_ = 0.0

  def has_smoothing(self): return self.has_smoothing_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_code()): self.set_code(x.code())
    if (x.has_smoothing()): self.set_smoothing(x.smoothing())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NBMSmoothing', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NBMSmoothing')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NBMSmoothing', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NBMSmoothing', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NBMSmoothing', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_code_ != x.has_code_: return 0
    if self.has_code_ and self.code_ != x.code_: return 0
    if self.has_smoothing_ != x.has_smoothing_: return 0
    if self.has_smoothing_ and self.smoothing_ != x.smoothing_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_code_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: code not set.')
    if (not self.has_smoothing_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: smoothing not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.code_))
    return n + 6

  def Clear(self):
    self.clear_code()
    self.clear_smoothing()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.code_)
    out.putVarInt32(21)
    out.putFloat(self.smoothing_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_code(d.getPrefixedString())
        continue
      if tt == 21:
        self.set_smoothing(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_code_: res+=prefix+("code: %s\n" % self.DebugFormatString(self.code_))
    if self.has_smoothing_: res+=prefix+("smoothing: %s\n" % self.DebugFormatFloat(self.smoothing_))
    return res

  kcode = 1
  ksmoothing = 2

  _TEXT = (
   "ErrorCode",  #   0
   "code",  #   1
   "smoothing",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.FLOAT,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x13,
    0x1a,
    0x04,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x02,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NBMFeatureInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.id_ = ""
    self.count_ = 0
    self.has_id_ = 0
    self.has_count_ = 0
    if contents is not None: self.MergeFromString(contents)

  def id(self): return self.id_

  def set_id(self, x):
    self.has_id_ = 1
    self.id_ = x

  def clear_id(self):
    self.has_id_ = 0
    self.id_ = ""

  def has_id(self): return self.has_id_

  def count(self): return self.count_

  def set_count(self, x):
    self.has_count_ = 1
    self.count_ = x

  def clear_count(self):
    self.has_count_ = 0
    self.count_ = 0

  def has_count(self): return self.has_count_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_id()): self.set_id(x.id())
    if (x.has_count()): self.set_count(x.count())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NBMFeatureInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NBMFeatureInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NBMFeatureInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NBMFeatureInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NBMFeatureInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_id_ != x.has_id_: return 0
    if self.has_id_ and self.id_ != x.id_: return 0
    if self.has_count_ != x.has_count_: return 0
    if self.has_count_ and self.count_ != x.count_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_id_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: id not set.')
    if (not self.has_count_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: count not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.id_))
    n += self.lengthVarInt64(self.count_)
    return n + 2

  def Clear(self):
    self.clear_id()
    self.clear_count()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.id_)
    out.putVarInt32(16)
    out.putVarInt32(self.count_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_id(d.getPrefixedString())
        continue
      if tt == 16:
        self.set_count(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_id_: res+=prefix+("id: %s\n" % self.DebugFormatString(self.id_))
    if self.has_count_: res+=prefix+("count: %s\n" % self.DebugFormatInt32(self.count_))
    return res

  kid = 1
  kcount = 2

  _TEXT = (
   "ErrorCode",  #   0
   "id",  #   1
   "count",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0e,
    0x4e,
    0x42,
    0x4d,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x02,
    0x69,
    0x64,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NBMFeatureInfoList(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.source_ = ""
    self.info_ = []
    self.has_source_ = 0
    if contents is not None: self.MergeFromString(contents)

  def source(self): return self.source_

  def set_source(self, x):
    self.has_source_ = 1
    self.source_ = x

  def clear_source(self):
    self.has_source_ = 0
    self.source_ = ""

  def has_source(self): return self.has_source_

  def info_size(self): return len(self.info_)
  def info_list(self): return self.info_

  def info(self, i):
    return self.info_[i]

  def mutable_info(self, i):
    return self.info_[i]

  def add_info(self):
    x = NBMFeatureInfo()
    self.info_.append(x)
    return x

  def clear_info(self):
    self.info_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_source()): self.set_source(x.source())
    for i in xrange(x.info_size()): self.add_info().CopyFrom(x.info(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NBMFeatureInfoList', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NBMFeatureInfoList')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NBMFeatureInfoList', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NBMFeatureInfoList', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NBMFeatureInfoList', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_source_ != x.has_source_: return 0
    if self.has_source_ and self.source_ != x.source_: return 0
    if len(self.info_) != len(x.info_): return 0
    for e1, e2 in zip(self.info_, x.info_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_source_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: source not set.')
    for i in xrange(len(self.info_)):
      if (not self.info_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.source_))
    n += 1 * len(self.info_)
    for i in xrange(len(self.info_)): n += self.lengthString(self.info_[i].ByteSize())
    return n + 1

  def Clear(self):
    self.clear_source()
    self.clear_info()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.source_)
    for i in xrange(len(self.info_)):
      out.putVarInt32(18)
      out.putVarInt32(self.info_[i].ByteSize())
      self.info_[i].OutputUnchecked(out)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_source(d.getPrefixedString())
        continue
      if tt == 18:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_info().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_source_: res+=prefix+("source: %s\n" % self.DebugFormatString(self.source_))
    cnt=0
    for e in self.info_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("info%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    return res

  ksource = 1
  kinfo = 2

  _TEXT = (
   "ErrorCode",  #   0
   "source",  #   1
   "info",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x12,
    0x4e,
    0x42,
    0x4d,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x4c,
    0x69,
    0x73,
    0x74,
    0x13,
    0x1a,
    0x06,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0e,
    0x4e,
    0x42,
    0x4d,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class ClickrBuildConfig(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.multiplier_ = 256.0
    self.aclqu_ = 0.0
    self.sclqu_ = 0.0
    self.alqu_ = 0.0
    self.slqu_ = 0.0
    self.aqu_ = 0.0
    self.squ_ = 0.0
    self.au_ = 0.0
    self.su_ = 0.0
    self.build_details_ = ""
    self.has_multiplier_ = 0
    self.has_aclqu_ = 0
    self.has_sclqu_ = 0
    self.has_alqu_ = 0
    self.has_slqu_ = 0
    self.has_aqu_ = 0
    self.has_squ_ = 0
    self.has_au_ = 0
    self.has_su_ = 0
    self.has_build_details_ = 0
    if contents is not None: self.MergeFromString(contents)

  def multiplier(self): return self.multiplier_

  def set_multiplier(self, x):
    self.has_multiplier_ = 1
    self.multiplier_ = x

  def clear_multiplier(self):
    self.has_multiplier_ = 0
    self.multiplier_ = 256.0

  def has_multiplier(self): return self.has_multiplier_

  def aclqu(self): return self.aclqu_

  def set_aclqu(self, x):
    self.has_aclqu_ = 1
    self.aclqu_ = x

  def clear_aclqu(self):
    self.has_aclqu_ = 0
    self.aclqu_ = 0.0

  def has_aclqu(self): return self.has_aclqu_

  def sclqu(self): return self.sclqu_

  def set_sclqu(self, x):
    self.has_sclqu_ = 1
    self.sclqu_ = x

  def clear_sclqu(self):
    self.has_sclqu_ = 0
    self.sclqu_ = 0.0

  def has_sclqu(self): return self.has_sclqu_

  def alqu(self): return self.alqu_

  def set_alqu(self, x):
    self.has_alqu_ = 1
    self.alqu_ = x

  def clear_alqu(self):
    self.has_alqu_ = 0
    self.alqu_ = 0.0

  def has_alqu(self): return self.has_alqu_

  def slqu(self): return self.slqu_

  def set_slqu(self, x):
    self.has_slqu_ = 1
    self.slqu_ = x

  def clear_slqu(self):
    self.has_slqu_ = 0
    self.slqu_ = 0.0

  def has_slqu(self): return self.has_slqu_

  def aqu(self): return self.aqu_

  def set_aqu(self, x):
    self.has_aqu_ = 1
    self.aqu_ = x

  def clear_aqu(self):
    self.has_aqu_ = 0
    self.aqu_ = 0.0

  def has_aqu(self): return self.has_aqu_

  def squ(self): return self.squ_

  def set_squ(self, x):
    self.has_squ_ = 1
    self.squ_ = x

  def clear_squ(self):
    self.has_squ_ = 0
    self.squ_ = 0.0

  def has_squ(self): return self.has_squ_

  def au(self): return self.au_

  def set_au(self, x):
    self.has_au_ = 1
    self.au_ = x

  def clear_au(self):
    self.has_au_ = 0
    self.au_ = 0.0

  def has_au(self): return self.has_au_

  def su(self): return self.su_

  def set_su(self, x):
    self.has_su_ = 1
    self.su_ = x

  def clear_su(self):
    self.has_su_ = 0
    self.su_ = 0.0

  def has_su(self): return self.has_su_

  def build_details(self): return self.build_details_

  def set_build_details(self, x):
    self.has_build_details_ = 1
    self.build_details_ = x

  def clear_build_details(self):
    self.has_build_details_ = 0
    self.build_details_ = ""

  def has_build_details(self): return self.has_build_details_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_multiplier()): self.set_multiplier(x.multiplier())
    if (x.has_aclqu()): self.set_aclqu(x.aclqu())
    if (x.has_sclqu()): self.set_sclqu(x.sclqu())
    if (x.has_alqu()): self.set_alqu(x.alqu())
    if (x.has_slqu()): self.set_slqu(x.slqu())
    if (x.has_aqu()): self.set_aqu(x.aqu())
    if (x.has_squ()): self.set_squ(x.squ())
    if (x.has_au()): self.set_au(x.au())
    if (x.has_su()): self.set_su(x.su())
    if (x.has_build_details()): self.set_build_details(x.build_details())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ClickrBuildConfig', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ClickrBuildConfig')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ClickrBuildConfig', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ClickrBuildConfig', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ClickrBuildConfig', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_multiplier_ != x.has_multiplier_: return 0
    if self.has_multiplier_ and self.multiplier_ != x.multiplier_: return 0
    if self.has_aclqu_ != x.has_aclqu_: return 0
    if self.has_aclqu_ and self.aclqu_ != x.aclqu_: return 0
    if self.has_sclqu_ != x.has_sclqu_: return 0
    if self.has_sclqu_ and self.sclqu_ != x.sclqu_: return 0
    if self.has_alqu_ != x.has_alqu_: return 0
    if self.has_alqu_ and self.alqu_ != x.alqu_: return 0
    if self.has_slqu_ != x.has_slqu_: return 0
    if self.has_slqu_ and self.slqu_ != x.slqu_: return 0
    if self.has_aqu_ != x.has_aqu_: return 0
    if self.has_aqu_ and self.aqu_ != x.aqu_: return 0
    if self.has_squ_ != x.has_squ_: return 0
    if self.has_squ_ and self.squ_ != x.squ_: return 0
    if self.has_au_ != x.has_au_: return 0
    if self.has_au_ and self.au_ != x.au_: return 0
    if self.has_su_ != x.has_su_: return 0
    if self.has_su_ and self.su_ != x.su_: return 0
    if self.has_build_details_ != x.has_build_details_: return 0
    if self.has_build_details_ and self.build_details_ != x.build_details_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_aclqu_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: aclqu not set.')
    if (not self.has_sclqu_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: sclqu not set.')
    if (not self.has_alqu_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: alqu not set.')
    if (not self.has_slqu_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: slqu not set.')
    if (not self.has_aqu_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: aqu not set.')
    if (not self.has_squ_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: squ not set.')
    if (not self.has_au_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: au not set.')
    if (not self.has_su_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: su not set.')
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_multiplier_): n += 5
    if (self.has_build_details_): n += 1 + self.lengthString(len(self.build_details_))
    return n + 40

  def Clear(self):
    self.clear_multiplier()
    self.clear_aclqu()
    self.clear_sclqu()
    self.clear_alqu()
    self.clear_slqu()
    self.clear_aqu()
    self.clear_squ()
    self.clear_au()
    self.clear_su()
    self.clear_build_details()

  def OutputUnchecked(self, out):
    if (self.has_multiplier_):
      out.putVarInt32(13)
      out.putFloat(self.multiplier_)
    out.putVarInt32(21)
    out.putFloat(self.aclqu_)
    out.putVarInt32(29)
    out.putFloat(self.sclqu_)
    out.putVarInt32(37)
    out.putFloat(self.alqu_)
    out.putVarInt32(45)
    out.putFloat(self.slqu_)
    out.putVarInt32(53)
    out.putFloat(self.aqu_)
    out.putVarInt32(61)
    out.putFloat(self.squ_)
    out.putVarInt32(69)
    out.putFloat(self.au_)
    out.putVarInt32(77)
    out.putFloat(self.su_)
    if (self.has_build_details_):
      out.putVarInt32(82)
      out.putPrefixedString(self.build_details_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 13:
        self.set_multiplier(d.getFloat())
        continue
      if tt == 21:
        self.set_aclqu(d.getFloat())
        continue
      if tt == 29:
        self.set_sclqu(d.getFloat())
        continue
      if tt == 37:
        self.set_alqu(d.getFloat())
        continue
      if tt == 45:
        self.set_slqu(d.getFloat())
        continue
      if tt == 53:
        self.set_aqu(d.getFloat())
        continue
      if tt == 61:
        self.set_squ(d.getFloat())
        continue
      if tt == 69:
        self.set_au(d.getFloat())
        continue
      if tt == 77:
        self.set_su(d.getFloat())
        continue
      if tt == 82:
        self.set_build_details(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_multiplier_: res+=prefix+("multiplier: %s\n" % self.DebugFormatFloat(self.multiplier_))
    if self.has_aclqu_: res+=prefix+("aclqu: %s\n" % self.DebugFormatFloat(self.aclqu_))
    if self.has_sclqu_: res+=prefix+("sclqu: %s\n" % self.DebugFormatFloat(self.sclqu_))
    if self.has_alqu_: res+=prefix+("alqu: %s\n" % self.DebugFormatFloat(self.alqu_))
    if self.has_slqu_: res+=prefix+("slqu: %s\n" % self.DebugFormatFloat(self.slqu_))
    if self.has_aqu_: res+=prefix+("aqu: %s\n" % self.DebugFormatFloat(self.aqu_))
    if self.has_squ_: res+=prefix+("squ: %s\n" % self.DebugFormatFloat(self.squ_))
    if self.has_au_: res+=prefix+("au: %s\n" % self.DebugFormatFloat(self.au_))
    if self.has_su_: res+=prefix+("su: %s\n" % self.DebugFormatFloat(self.su_))
    if self.has_build_details_: res+=prefix+("build_details: %s\n" % self.DebugFormatString(self.build_details_))
    return res

  kmultiplier = 1
  kaclqu = 2
  ksclqu = 3
  kalqu = 4
  kslqu = 5
  kaqu = 6
  ksqu = 7
  kau = 8
  ksu = 9
  kbuild_details = 10

  _TEXT = (
   "ErrorCode",  #   0
   "multiplier",  #   1
   "aclqu",  #   2
   "sclqu",  #   3
   "alqu",  #   4
   "slqu",  #   5
   "aqu",  #   6
   "squ",  #   7
   "au",  #   8
   "su",  #   9
   "build_details",  #  10
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.FLOAT,  #   1

   ProtocolBuffer.Encoder.FLOAT,  #   2

   ProtocolBuffer.Encoder.FLOAT,  #   3

   ProtocolBuffer.Encoder.FLOAT,  #   4

   ProtocolBuffer.Encoder.FLOAT,  #   5

   ProtocolBuffer.Encoder.FLOAT,  #   6

   ProtocolBuffer.Encoder.FLOAT,  #   7

   ProtocolBuffer.Encoder.FLOAT,  #   8

   ProtocolBuffer.Encoder.FLOAT,  #   9

   ProtocolBuffer.Encoder.STRING,  #  10

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x11,
    0x43,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x42,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x13,
    0x1a,
    0x0a,
    0x6d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x72,
    0x20,
    0x01,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x05,
    0x32,
    0x35,
    0x36,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x32,
    0x35,
    0x36,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x61,
    0x63,
    0x6c,
    0x71,
    0x75,
    0x20,
    0x02,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x73,
    0x63,
    0x6c,
    0x71,
    0x75,
    0x20,
    0x03,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x61,
    0x6c,
    0x71,
    0x75,
    0x20,
    0x04,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x73,
    0x6c,
    0x71,
    0x75,
    0x20,
    0x05,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x61,
    0x71,
    0x75,
    0x20,
    0x06,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x73,
    0x71,
    0x75,
    0x20,
    0x07,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x02,
    0x61,
    0x75,
    0x20,
    0x08,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x02,
    0x73,
    0x75,
    0x20,
    0x09,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x5f,
    0x64,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6c,
    0x73,
    0x20,
    0x0a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NBMBuildConfig(ProtocolBuffer.ProtocolMessage):

  REPOS_CLASSIC =    0 
  REPOS_CLICKR =    1 

  _REPOSITORY_CONTENTS_NAMES = {
    0: "REPOS_CLASSIC",
    1: "REPOS_CLICKR",
  }

  def REPOSITORY_CONTENTS_Name(cls, x): return cls._REPOSITORY_CONTENTS_NAMES.get(x, "")
  REPOSITORY_CONTENTS_Name = classmethod(REPOSITORY_CONTENTS_Name)

  def __init__(self, contents=None):
    self.repos_contents_ = 0
    self.clickr_config_ = None
    self.smoothing_ = 20.0
    self.language_smoothing_ = 4.0
    self.ext_language_smoothing_ = 4.0
    self.country_smoothing_ = 0.0
    self.ext_country_smoothing_ = 12.0
    self.language_smoothings_ = []
    self.ext_language_smoothings_ = []
    self.country_smoothings_ = []
    self.ext_country_smoothings_ = []
    self.base_backoff_tune_down_ = 1.0
    self.lang_backoff_tune_down_ = 1.0
    self.lcc_smoothing_ = 20.0
    self.lcc_language_smoothing_ = 12.0
    self.lcc_country_smoothing_ = 12.0
    self.lcc_language_smoothings_ = []
    self.lcc_country_smoothings_ = []
    self.lcc_base_backoff_tune_down_ = 1.0
    self.lcc_lang_backoff_tune_down_ = 1.0
    self.imp_language_smoothing_ = 15.0
    self.imp_country_smoothing_ = 15.0
    self.imp_language_smoothings_ = []
    self.imp_country_smoothings_ = []
    self.imp_confidence_smoothing_ = 50.0
    self.imp_language_confidence_smoothing_ = 25.0
    self.imp_country_confidence_smoothing_ = 25.0
    self.imp_language_confidence_smoothings_ = []
    self.imp_country_confidence_smoothings_ = []
    self.imp_base_backoff_tune_down_ = 1.0
    self.imp_lang_backoff_tune_down_ = 1.0
    self.build_countries_ = ""
    self.countries_ = None
    self.feature_info_list_ = NBMFeatureInfoList()
    self.version_ = 5
    self.has_repos_contents_ = 0
    self.has_clickr_config_ = 0
    self.has_smoothing_ = 0
    self.has_language_smoothing_ = 0
    self.has_ext_language_smoothing_ = 0
    self.has_country_smoothing_ = 0
    self.has_ext_country_smoothing_ = 0
    self.has_base_backoff_tune_down_ = 0
    self.has_lang_backoff_tune_down_ = 0
    self.has_lcc_smoothing_ = 0
    self.has_lcc_language_smoothing_ = 0
    self.has_lcc_country_smoothing_ = 0
    self.has_lcc_base_backoff_tune_down_ = 0
    self.has_lcc_lang_backoff_tune_down_ = 0
    self.has_imp_language_smoothing_ = 0
    self.has_imp_country_smoothing_ = 0
    self.has_imp_confidence_smoothing_ = 0
    self.has_imp_language_confidence_smoothing_ = 0
    self.has_imp_country_confidence_smoothing_ = 0
    self.has_imp_base_backoff_tune_down_ = 0
    self.has_imp_lang_backoff_tune_down_ = 0
    self.has_build_countries_ = 0
    self.has_countries_ = 0
    self.has_feature_info_list_ = 0
    self.has_version_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def repos_contents(self): return self.repos_contents_

  def set_repos_contents(self, x):
    self.has_repos_contents_ = 1
    self.repos_contents_ = x

  def clear_repos_contents(self):
    self.has_repos_contents_ = 0
    self.repos_contents_ = 0

  def has_repos_contents(self): return self.has_repos_contents_

  def clickr_config(self):
    if self.clickr_config_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.clickr_config_ is None: self.clickr_config_ = ClickrBuildConfig()
      finally:
        self.lazy_init_lock_.release()
    return self.clickr_config_

  def mutable_clickr_config(self): self.has_clickr_config_ = 1; return self.clickr_config()

  def clear_clickr_config(self):
    #Warning: this method does not acquire the lock.
    self.has_clickr_config_ = 0;
    if self.clickr_config_ is not None: self.clickr_config_.Clear()

  def has_clickr_config(self): return self.has_clickr_config_

  def smoothing(self): return self.smoothing_

  def set_smoothing(self, x):
    self.has_smoothing_ = 1
    self.smoothing_ = x

  def clear_smoothing(self):
    self.has_smoothing_ = 0
    self.smoothing_ = 20.0

  def has_smoothing(self): return self.has_smoothing_

  def language_smoothing(self): return self.language_smoothing_

  def set_language_smoothing(self, x):
    self.has_language_smoothing_ = 1
    self.language_smoothing_ = x

  def clear_language_smoothing(self):
    self.has_language_smoothing_ = 0
    self.language_smoothing_ = 4.0

  def has_language_smoothing(self): return self.has_language_smoothing_

  def ext_language_smoothing(self): return self.ext_language_smoothing_

  def set_ext_language_smoothing(self, x):
    self.has_ext_language_smoothing_ = 1
    self.ext_language_smoothing_ = x

  def clear_ext_language_smoothing(self):
    self.has_ext_language_smoothing_ = 0
    self.ext_language_smoothing_ = 4.0

  def has_ext_language_smoothing(self): return self.has_ext_language_smoothing_

  def country_smoothing(self): return self.country_smoothing_

  def set_country_smoothing(self, x):
    self.has_country_smoothing_ = 1
    self.country_smoothing_ = x

  def clear_country_smoothing(self):
    self.has_country_smoothing_ = 0
    self.country_smoothing_ = 0.0

  def has_country_smoothing(self): return self.has_country_smoothing_

  def ext_country_smoothing(self): return self.ext_country_smoothing_

  def set_ext_country_smoothing(self, x):
    self.has_ext_country_smoothing_ = 1
    self.ext_country_smoothing_ = x

  def clear_ext_country_smoothing(self):
    self.has_ext_country_smoothing_ = 0
    self.ext_country_smoothing_ = 12.0

  def has_ext_country_smoothing(self): return self.has_ext_country_smoothing_

  def language_smoothings_size(self): return len(self.language_smoothings_)
  def language_smoothings_list(self): return self.language_smoothings_

  def language_smoothings(self, i):
    return self.language_smoothings_[i]

  def mutable_language_smoothings(self, i):
    return self.language_smoothings_[i]

  def add_language_smoothings(self):
    x = NBMSmoothing()
    self.language_smoothings_.append(x)
    return x

  def clear_language_smoothings(self):
    self.language_smoothings_ = []
  def ext_language_smoothings_size(self): return len(self.ext_language_smoothings_)
  def ext_language_smoothings_list(self): return self.ext_language_smoothings_

  def ext_language_smoothings(self, i):
    return self.ext_language_smoothings_[i]

  def mutable_ext_language_smoothings(self, i):
    return self.ext_language_smoothings_[i]

  def add_ext_language_smoothings(self):
    x = NBMSmoothing()
    self.ext_language_smoothings_.append(x)
    return x

  def clear_ext_language_smoothings(self):
    self.ext_language_smoothings_ = []
  def country_smoothings_size(self): return len(self.country_smoothings_)
  def country_smoothings_list(self): return self.country_smoothings_

  def country_smoothings(self, i):
    return self.country_smoothings_[i]

  def mutable_country_smoothings(self, i):
    return self.country_smoothings_[i]

  def add_country_smoothings(self):
    x = NBMSmoothing()
    self.country_smoothings_.append(x)
    return x

  def clear_country_smoothings(self):
    self.country_smoothings_ = []
  def ext_country_smoothings_size(self): return len(self.ext_country_smoothings_)
  def ext_country_smoothings_list(self): return self.ext_country_smoothings_

  def ext_country_smoothings(self, i):
    return self.ext_country_smoothings_[i]

  def mutable_ext_country_smoothings(self, i):
    return self.ext_country_smoothings_[i]

  def add_ext_country_smoothings(self):
    x = NBMSmoothing()
    self.ext_country_smoothings_.append(x)
    return x

  def clear_ext_country_smoothings(self):
    self.ext_country_smoothings_ = []
  def base_backoff_tune_down(self): return self.base_backoff_tune_down_

  def set_base_backoff_tune_down(self, x):
    self.has_base_backoff_tune_down_ = 1
    self.base_backoff_tune_down_ = x

  def clear_base_backoff_tune_down(self):
    self.has_base_backoff_tune_down_ = 0
    self.base_backoff_tune_down_ = 1.0

  def has_base_backoff_tune_down(self): return self.has_base_backoff_tune_down_

  def lang_backoff_tune_down(self): return self.lang_backoff_tune_down_

  def set_lang_backoff_tune_down(self, x):
    self.has_lang_backoff_tune_down_ = 1
    self.lang_backoff_tune_down_ = x

  def clear_lang_backoff_tune_down(self):
    self.has_lang_backoff_tune_down_ = 0
    self.lang_backoff_tune_down_ = 1.0

  def has_lang_backoff_tune_down(self): return self.has_lang_backoff_tune_down_

  def lcc_smoothing(self): return self.lcc_smoothing_

  def set_lcc_smoothing(self, x):
    self.has_lcc_smoothing_ = 1
    self.lcc_smoothing_ = x

  def clear_lcc_smoothing(self):
    self.has_lcc_smoothing_ = 0
    self.lcc_smoothing_ = 20.0

  def has_lcc_smoothing(self): return self.has_lcc_smoothing_

  def lcc_language_smoothing(self): return self.lcc_language_smoothing_

  def set_lcc_language_smoothing(self, x):
    self.has_lcc_language_smoothing_ = 1
    self.lcc_language_smoothing_ = x

  def clear_lcc_language_smoothing(self):
    self.has_lcc_language_smoothing_ = 0
    self.lcc_language_smoothing_ = 12.0

  def has_lcc_language_smoothing(self): return self.has_lcc_language_smoothing_

  def lcc_country_smoothing(self): return self.lcc_country_smoothing_

  def set_lcc_country_smoothing(self, x):
    self.has_lcc_country_smoothing_ = 1
    self.lcc_country_smoothing_ = x

  def clear_lcc_country_smoothing(self):
    self.has_lcc_country_smoothing_ = 0
    self.lcc_country_smoothing_ = 12.0

  def has_lcc_country_smoothing(self): return self.has_lcc_country_smoothing_

  def lcc_language_smoothings_size(self): return len(self.lcc_language_smoothings_)
  def lcc_language_smoothings_list(self): return self.lcc_language_smoothings_

  def lcc_language_smoothings(self, i):
    return self.lcc_language_smoothings_[i]

  def mutable_lcc_language_smoothings(self, i):
    return self.lcc_language_smoothings_[i]

  def add_lcc_language_smoothings(self):
    x = NBMSmoothing()
    self.lcc_language_smoothings_.append(x)
    return x

  def clear_lcc_language_smoothings(self):
    self.lcc_language_smoothings_ = []
  def lcc_country_smoothings_size(self): return len(self.lcc_country_smoothings_)
  def lcc_country_smoothings_list(self): return self.lcc_country_smoothings_

  def lcc_country_smoothings(self, i):
    return self.lcc_country_smoothings_[i]

  def mutable_lcc_country_smoothings(self, i):
    return self.lcc_country_smoothings_[i]

  def add_lcc_country_smoothings(self):
    x = NBMSmoothing()
    self.lcc_country_smoothings_.append(x)
    return x

  def clear_lcc_country_smoothings(self):
    self.lcc_country_smoothings_ = []
  def lcc_base_backoff_tune_down(self): return self.lcc_base_backoff_tune_down_

  def set_lcc_base_backoff_tune_down(self, x):
    self.has_lcc_base_backoff_tune_down_ = 1
    self.lcc_base_backoff_tune_down_ = x

  def clear_lcc_base_backoff_tune_down(self):
    self.has_lcc_base_backoff_tune_down_ = 0
    self.lcc_base_backoff_tune_down_ = 1.0

  def has_lcc_base_backoff_tune_down(self): return self.has_lcc_base_backoff_tune_down_

  def lcc_lang_backoff_tune_down(self): return self.lcc_lang_backoff_tune_down_

  def set_lcc_lang_backoff_tune_down(self, x):
    self.has_lcc_lang_backoff_tune_down_ = 1
    self.lcc_lang_backoff_tune_down_ = x

  def clear_lcc_lang_backoff_tune_down(self):
    self.has_lcc_lang_backoff_tune_down_ = 0
    self.lcc_lang_backoff_tune_down_ = 1.0

  def has_lcc_lang_backoff_tune_down(self): return self.has_lcc_lang_backoff_tune_down_

  def imp_language_smoothing(self): return self.imp_language_smoothing_

  def set_imp_language_smoothing(self, x):
    self.has_imp_language_smoothing_ = 1
    self.imp_language_smoothing_ = x

  def clear_imp_language_smoothing(self):
    self.has_imp_language_smoothing_ = 0
    self.imp_language_smoothing_ = 15.0

  def has_imp_language_smoothing(self): return self.has_imp_language_smoothing_

  def imp_country_smoothing(self): return self.imp_country_smoothing_

  def set_imp_country_smoothing(self, x):
    self.has_imp_country_smoothing_ = 1
    self.imp_country_smoothing_ = x

  def clear_imp_country_smoothing(self):
    self.has_imp_country_smoothing_ = 0
    self.imp_country_smoothing_ = 15.0

  def has_imp_country_smoothing(self): return self.has_imp_country_smoothing_

  def imp_language_smoothings_size(self): return len(self.imp_language_smoothings_)
  def imp_language_smoothings_list(self): return self.imp_language_smoothings_

  def imp_language_smoothings(self, i):
    return self.imp_language_smoothings_[i]

  def mutable_imp_language_smoothings(self, i):
    return self.imp_language_smoothings_[i]

  def add_imp_language_smoothings(self):
    x = NBMSmoothing()
    self.imp_language_smoothings_.append(x)
    return x

  def clear_imp_language_smoothings(self):
    self.imp_language_smoothings_ = []
  def imp_country_smoothings_size(self): return len(self.imp_country_smoothings_)
  def imp_country_smoothings_list(self): return self.imp_country_smoothings_

  def imp_country_smoothings(self, i):
    return self.imp_country_smoothings_[i]

  def mutable_imp_country_smoothings(self, i):
    return self.imp_country_smoothings_[i]

  def add_imp_country_smoothings(self):
    x = NBMSmoothing()
    self.imp_country_smoothings_.append(x)
    return x

  def clear_imp_country_smoothings(self):
    self.imp_country_smoothings_ = []
  def imp_confidence_smoothing(self): return self.imp_confidence_smoothing_

  def set_imp_confidence_smoothing(self, x):
    self.has_imp_confidence_smoothing_ = 1
    self.imp_confidence_smoothing_ = x

  def clear_imp_confidence_smoothing(self):
    self.has_imp_confidence_smoothing_ = 0
    self.imp_confidence_smoothing_ = 50.0

  def has_imp_confidence_smoothing(self): return self.has_imp_confidence_smoothing_

  def imp_language_confidence_smoothing(self): return self.imp_language_confidence_smoothing_

  def set_imp_language_confidence_smoothing(self, x):
    self.has_imp_language_confidence_smoothing_ = 1
    self.imp_language_confidence_smoothing_ = x

  def clear_imp_language_confidence_smoothing(self):
    self.has_imp_language_confidence_smoothing_ = 0
    self.imp_language_confidence_smoothing_ = 25.0

  def has_imp_language_confidence_smoothing(self): return self.has_imp_language_confidence_smoothing_

  def imp_country_confidence_smoothing(self): return self.imp_country_confidence_smoothing_

  def set_imp_country_confidence_smoothing(self, x):
    self.has_imp_country_confidence_smoothing_ = 1
    self.imp_country_confidence_smoothing_ = x

  def clear_imp_country_confidence_smoothing(self):
    self.has_imp_country_confidence_smoothing_ = 0
    self.imp_country_confidence_smoothing_ = 25.0

  def has_imp_country_confidence_smoothing(self): return self.has_imp_country_confidence_smoothing_

  def imp_language_confidence_smoothings_size(self): return len(self.imp_language_confidence_smoothings_)
  def imp_language_confidence_smoothings_list(self): return self.imp_language_confidence_smoothings_

  def imp_language_confidence_smoothings(self, i):
    return self.imp_language_confidence_smoothings_[i]

  def mutable_imp_language_confidence_smoothings(self, i):
    return self.imp_language_confidence_smoothings_[i]

  def add_imp_language_confidence_smoothings(self):
    x = NBMSmoothing()
    self.imp_language_confidence_smoothings_.append(x)
    return x

  def clear_imp_language_confidence_smoothings(self):
    self.imp_language_confidence_smoothings_ = []
  def imp_country_confidence_smoothings_size(self): return len(self.imp_country_confidence_smoothings_)
  def imp_country_confidence_smoothings_list(self): return self.imp_country_confidence_smoothings_

  def imp_country_confidence_smoothings(self, i):
    return self.imp_country_confidence_smoothings_[i]

  def mutable_imp_country_confidence_smoothings(self, i):
    return self.imp_country_confidence_smoothings_[i]

  def add_imp_country_confidence_smoothings(self):
    x = NBMSmoothing()
    self.imp_country_confidence_smoothings_.append(x)
    return x

  def clear_imp_country_confidence_smoothings(self):
    self.imp_country_confidence_smoothings_ = []
  def imp_base_backoff_tune_down(self): return self.imp_base_backoff_tune_down_

  def set_imp_base_backoff_tune_down(self, x):
    self.has_imp_base_backoff_tune_down_ = 1
    self.imp_base_backoff_tune_down_ = x

  def clear_imp_base_backoff_tune_down(self):
    self.has_imp_base_backoff_tune_down_ = 0
    self.imp_base_backoff_tune_down_ = 1.0

  def has_imp_base_backoff_tune_down(self): return self.has_imp_base_backoff_tune_down_

  def imp_lang_backoff_tune_down(self): return self.imp_lang_backoff_tune_down_

  def set_imp_lang_backoff_tune_down(self, x):
    self.has_imp_lang_backoff_tune_down_ = 1
    self.imp_lang_backoff_tune_down_ = x

  def clear_imp_lang_backoff_tune_down(self):
    self.has_imp_lang_backoff_tune_down_ = 0
    self.imp_lang_backoff_tune_down_ = 1.0

  def has_imp_lang_backoff_tune_down(self): return self.has_imp_lang_backoff_tune_down_

  def build_countries(self): return self.build_countries_

  def set_build_countries(self, x):
    self.has_build_countries_ = 1
    self.build_countries_ = x

  def clear_build_countries(self):
    self.has_build_countries_ = 0
    self.build_countries_ = ""

  def has_build_countries(self): return self.has_build_countries_

  def countries(self):
    if self.countries_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.countries_ is None: self.countries_ = NBMBuildCountries()
      finally:
        self.lazy_init_lock_.release()
    return self.countries_

  def mutable_countries(self): self.has_countries_ = 1; return self.countries()

  def clear_countries(self):
    #Warning: this method does not acquire the lock.
    self.has_countries_ = 0;
    if self.countries_ is not None: self.countries_.Clear()

  def has_countries(self): return self.has_countries_

  def feature_info_list(self): return self.feature_info_list_

  def mutable_feature_info_list(self): self.has_feature_info_list_ = 1; return self.feature_info_list_

  def clear_feature_info_list(self):self.has_feature_info_list_ = 0; self.feature_info_list_.Clear()

  def has_feature_info_list(self): return self.has_feature_info_list_

  def version(self): return self.version_

  def set_version(self, x):
    self.has_version_ = 1
    self.version_ = x

  def clear_version(self):
    self.has_version_ = 0
    self.version_ = 5

  def has_version(self): return self.has_version_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_repos_contents()): self.set_repos_contents(x.repos_contents())
    if (x.has_clickr_config()): self.mutable_clickr_config().MergeFrom(x.clickr_config())
    if (x.has_smoothing()): self.set_smoothing(x.smoothing())
    if (x.has_language_smoothing()): self.set_language_smoothing(x.language_smoothing())
    if (x.has_ext_language_smoothing()): self.set_ext_language_smoothing(x.ext_language_smoothing())
    if (x.has_country_smoothing()): self.set_country_smoothing(x.country_smoothing())
    if (x.has_ext_country_smoothing()): self.set_ext_country_smoothing(x.ext_country_smoothing())
    for i in xrange(x.language_smoothings_size()): self.add_language_smoothings().CopyFrom(x.language_smoothings(i))
    for i in xrange(x.ext_language_smoothings_size()): self.add_ext_language_smoothings().CopyFrom(x.ext_language_smoothings(i))
    for i in xrange(x.country_smoothings_size()): self.add_country_smoothings().CopyFrom(x.country_smoothings(i))
    for i in xrange(x.ext_country_smoothings_size()): self.add_ext_country_smoothings().CopyFrom(x.ext_country_smoothings(i))
    if (x.has_base_backoff_tune_down()): self.set_base_backoff_tune_down(x.base_backoff_tune_down())
    if (x.has_lang_backoff_tune_down()): self.set_lang_backoff_tune_down(x.lang_backoff_tune_down())
    if (x.has_lcc_smoothing()): self.set_lcc_smoothing(x.lcc_smoothing())
    if (x.has_lcc_language_smoothing()): self.set_lcc_language_smoothing(x.lcc_language_smoothing())
    if (x.has_lcc_country_smoothing()): self.set_lcc_country_smoothing(x.lcc_country_smoothing())
    for i in xrange(x.lcc_language_smoothings_size()): self.add_lcc_language_smoothings().CopyFrom(x.lcc_language_smoothings(i))
    for i in xrange(x.lcc_country_smoothings_size()): self.add_lcc_country_smoothings().CopyFrom(x.lcc_country_smoothings(i))
    if (x.has_lcc_base_backoff_tune_down()): self.set_lcc_base_backoff_tune_down(x.lcc_base_backoff_tune_down())
    if (x.has_lcc_lang_backoff_tune_down()): self.set_lcc_lang_backoff_tune_down(x.lcc_lang_backoff_tune_down())
    if (x.has_imp_language_smoothing()): self.set_imp_language_smoothing(x.imp_language_smoothing())
    if (x.has_imp_country_smoothing()): self.set_imp_country_smoothing(x.imp_country_smoothing())
    for i in xrange(x.imp_language_smoothings_size()): self.add_imp_language_smoothings().CopyFrom(x.imp_language_smoothings(i))
    for i in xrange(x.imp_country_smoothings_size()): self.add_imp_country_smoothings().CopyFrom(x.imp_country_smoothings(i))
    if (x.has_imp_confidence_smoothing()): self.set_imp_confidence_smoothing(x.imp_confidence_smoothing())
    if (x.has_imp_language_confidence_smoothing()): self.set_imp_language_confidence_smoothing(x.imp_language_confidence_smoothing())
    if (x.has_imp_country_confidence_smoothing()): self.set_imp_country_confidence_smoothing(x.imp_country_confidence_smoothing())
    for i in xrange(x.imp_language_confidence_smoothings_size()): self.add_imp_language_confidence_smoothings().CopyFrom(x.imp_language_confidence_smoothings(i))
    for i in xrange(x.imp_country_confidence_smoothings_size()): self.add_imp_country_confidence_smoothings().CopyFrom(x.imp_country_confidence_smoothings(i))
    if (x.has_imp_base_backoff_tune_down()): self.set_imp_base_backoff_tune_down(x.imp_base_backoff_tune_down())
    if (x.has_imp_lang_backoff_tune_down()): self.set_imp_lang_backoff_tune_down(x.imp_lang_backoff_tune_down())
    if (x.has_build_countries()): self.set_build_countries(x.build_countries())
    if (x.has_countries()): self.mutable_countries().MergeFrom(x.countries())
    if (x.has_feature_info_list()): self.mutable_feature_info_list().MergeFrom(x.feature_info_list())
    if (x.has_version()): self.set_version(x.version())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NBMBuildConfig', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NBMBuildConfig')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NBMBuildConfig', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NBMBuildConfig', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NBMBuildConfig', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_repos_contents_ != x.has_repos_contents_: return 0
    if self.has_repos_contents_ and self.repos_contents_ != x.repos_contents_: return 0
    if self.has_clickr_config_ != x.has_clickr_config_: return 0
    if self.has_clickr_config_ and self.clickr_config_ != x.clickr_config_: return 0
    if self.has_smoothing_ != x.has_smoothing_: return 0
    if self.has_smoothing_ and self.smoothing_ != x.smoothing_: return 0
    if self.has_language_smoothing_ != x.has_language_smoothing_: return 0
    if self.has_language_smoothing_ and self.language_smoothing_ != x.language_smoothing_: return 0
    if self.has_ext_language_smoothing_ != x.has_ext_language_smoothing_: return 0
    if self.has_ext_language_smoothing_ and self.ext_language_smoothing_ != x.ext_language_smoothing_: return 0
    if self.has_country_smoothing_ != x.has_country_smoothing_: return 0
    if self.has_country_smoothing_ and self.country_smoothing_ != x.country_smoothing_: return 0
    if self.has_ext_country_smoothing_ != x.has_ext_country_smoothing_: return 0
    if self.has_ext_country_smoothing_ and self.ext_country_smoothing_ != x.ext_country_smoothing_: return 0
    if len(self.language_smoothings_) != len(x.language_smoothings_): return 0
    for e1, e2 in zip(self.language_smoothings_, x.language_smoothings_):
      if e1 != e2: return 0
    if len(self.ext_language_smoothings_) != len(x.ext_language_smoothings_): return 0
    for e1, e2 in zip(self.ext_language_smoothings_, x.ext_language_smoothings_):
      if e1 != e2: return 0
    if len(self.country_smoothings_) != len(x.country_smoothings_): return 0
    for e1, e2 in zip(self.country_smoothings_, x.country_smoothings_):
      if e1 != e2: return 0
    if len(self.ext_country_smoothings_) != len(x.ext_country_smoothings_): return 0
    for e1, e2 in zip(self.ext_country_smoothings_, x.ext_country_smoothings_):
      if e1 != e2: return 0
    if self.has_base_backoff_tune_down_ != x.has_base_backoff_tune_down_: return 0
    if self.has_base_backoff_tune_down_ and self.base_backoff_tune_down_ != x.base_backoff_tune_down_: return 0
    if self.has_lang_backoff_tune_down_ != x.has_lang_backoff_tune_down_: return 0
    if self.has_lang_backoff_tune_down_ and self.lang_backoff_tune_down_ != x.lang_backoff_tune_down_: return 0
    if self.has_lcc_smoothing_ != x.has_lcc_smoothing_: return 0
    if self.has_lcc_smoothing_ and self.lcc_smoothing_ != x.lcc_smoothing_: return 0
    if self.has_lcc_language_smoothing_ != x.has_lcc_language_smoothing_: return 0
    if self.has_lcc_language_smoothing_ and self.lcc_language_smoothing_ != x.lcc_language_smoothing_: return 0
    if self.has_lcc_country_smoothing_ != x.has_lcc_country_smoothing_: return 0
    if self.has_lcc_country_smoothing_ and self.lcc_country_smoothing_ != x.lcc_country_smoothing_: return 0
    if len(self.lcc_language_smoothings_) != len(x.lcc_language_smoothings_): return 0
    for e1, e2 in zip(self.lcc_language_smoothings_, x.lcc_language_smoothings_):
      if e1 != e2: return 0
    if len(self.lcc_country_smoothings_) != len(x.lcc_country_smoothings_): return 0
    for e1, e2 in zip(self.lcc_country_smoothings_, x.lcc_country_smoothings_):
      if e1 != e2: return 0
    if self.has_lcc_base_backoff_tune_down_ != x.has_lcc_base_backoff_tune_down_: return 0
    if self.has_lcc_base_backoff_tune_down_ and self.lcc_base_backoff_tune_down_ != x.lcc_base_backoff_tune_down_: return 0
    if self.has_lcc_lang_backoff_tune_down_ != x.has_lcc_lang_backoff_tune_down_: return 0
    if self.has_lcc_lang_backoff_tune_down_ and self.lcc_lang_backoff_tune_down_ != x.lcc_lang_backoff_tune_down_: return 0
    if self.has_imp_language_smoothing_ != x.has_imp_language_smoothing_: return 0
    if self.has_imp_language_smoothing_ and self.imp_language_smoothing_ != x.imp_language_smoothing_: return 0
    if self.has_imp_country_smoothing_ != x.has_imp_country_smoothing_: return 0
    if self.has_imp_country_smoothing_ and self.imp_country_smoothing_ != x.imp_country_smoothing_: return 0
    if len(self.imp_language_smoothings_) != len(x.imp_language_smoothings_): return 0
    for e1, e2 in zip(self.imp_language_smoothings_, x.imp_language_smoothings_):
      if e1 != e2: return 0
    if len(self.imp_country_smoothings_) != len(x.imp_country_smoothings_): return 0
    for e1, e2 in zip(self.imp_country_smoothings_, x.imp_country_smoothings_):
      if e1 != e2: return 0
    if self.has_imp_confidence_smoothing_ != x.has_imp_confidence_smoothing_: return 0
    if self.has_imp_confidence_smoothing_ and self.imp_confidence_smoothing_ != x.imp_confidence_smoothing_: return 0
    if self.has_imp_language_confidence_smoothing_ != x.has_imp_language_confidence_smoothing_: return 0
    if self.has_imp_language_confidence_smoothing_ and self.imp_language_confidence_smoothing_ != x.imp_language_confidence_smoothing_: return 0
    if self.has_imp_country_confidence_smoothing_ != x.has_imp_country_confidence_smoothing_: return 0
    if self.has_imp_country_confidence_smoothing_ and self.imp_country_confidence_smoothing_ != x.imp_country_confidence_smoothing_: return 0
    if len(self.imp_language_confidence_smoothings_) != len(x.imp_language_confidence_smoothings_): return 0
    for e1, e2 in zip(self.imp_language_confidence_smoothings_, x.imp_language_confidence_smoothings_):
      if e1 != e2: return 0
    if len(self.imp_country_confidence_smoothings_) != len(x.imp_country_confidence_smoothings_): return 0
    for e1, e2 in zip(self.imp_country_confidence_smoothings_, x.imp_country_confidence_smoothings_):
      if e1 != e2: return 0
    if self.has_imp_base_backoff_tune_down_ != x.has_imp_base_backoff_tune_down_: return 0
    if self.has_imp_base_backoff_tune_down_ and self.imp_base_backoff_tune_down_ != x.imp_base_backoff_tune_down_: return 0
    if self.has_imp_lang_backoff_tune_down_ != x.has_imp_lang_backoff_tune_down_: return 0
    if self.has_imp_lang_backoff_tune_down_ and self.imp_lang_backoff_tune_down_ != x.imp_lang_backoff_tune_down_: return 0
    if self.has_build_countries_ != x.has_build_countries_: return 0
    if self.has_build_countries_ and self.build_countries_ != x.build_countries_: return 0
    if self.has_countries_ != x.has_countries_: return 0
    if self.has_countries_ and self.countries_ != x.countries_: return 0
    if self.has_feature_info_list_ != x.has_feature_info_list_: return 0
    if self.has_feature_info_list_ and self.feature_info_list_ != x.feature_info_list_: return 0
    if self.has_version_ != x.has_version_: return 0
    if self.has_version_ and self.version_ != x.version_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (self.has_clickr_config_ and not self.clickr_config_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.language_smoothings_)):
      if (not self.language_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.ext_language_smoothings_)):
      if (not self.ext_language_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.country_smoothings_)):
      if (not self.country_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.ext_country_smoothings_)):
      if (not self.ext_country_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.lcc_language_smoothings_)):
      if (not self.lcc_language_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.lcc_country_smoothings_)):
      if (not self.lcc_country_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.imp_language_smoothings_)):
      if (not self.imp_language_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.imp_country_smoothings_)):
      if (not self.imp_country_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.imp_language_confidence_smoothings_)):
      if (not self.imp_language_confidence_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.imp_country_confidence_smoothings_)):
      if (not self.imp_country_confidence_smoothings_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_countries_ and not self.countries_.IsInitialized(debug_strs)): initialized = 0
    if (not self.has_feature_info_list_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feature_info_list not set.')
    elif not self.feature_info_list_.IsInitialized(debug_strs): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_repos_contents_): n += 2 + self.lengthVarInt64(self.repos_contents_)
    if (self.has_clickr_config_): n += 2 + self.lengthString(self.clickr_config_.ByteSize())
    if (self.has_smoothing_): n += 5
    if (self.has_language_smoothing_): n += 5
    if (self.has_ext_language_smoothing_): n += 6
    if (self.has_country_smoothing_): n += 5
    if (self.has_ext_country_smoothing_): n += 6
    n += 1 * len(self.language_smoothings_)
    for i in xrange(len(self.language_smoothings_)): n += self.lengthString(self.language_smoothings_[i].ByteSize())
    n += 2 * len(self.ext_language_smoothings_)
    for i in xrange(len(self.ext_language_smoothings_)): n += self.lengthString(self.ext_language_smoothings_[i].ByteSize())
    n += 1 * len(self.country_smoothings_)
    for i in xrange(len(self.country_smoothings_)): n += self.lengthString(self.country_smoothings_[i].ByteSize())
    n += 2 * len(self.ext_country_smoothings_)
    for i in xrange(len(self.ext_country_smoothings_)): n += self.lengthString(self.ext_country_smoothings_[i].ByteSize())
    if (self.has_base_backoff_tune_down_): n += 6
    if (self.has_lang_backoff_tune_down_): n += 6
    if (self.has_lcc_smoothing_): n += 5
    if (self.has_lcc_language_smoothing_): n += 5
    if (self.has_lcc_country_smoothing_): n += 5
    n += 1 * len(self.lcc_language_smoothings_)
    for i in xrange(len(self.lcc_language_smoothings_)): n += self.lengthString(self.lcc_language_smoothings_[i].ByteSize())
    n += 1 * len(self.lcc_country_smoothings_)
    for i in xrange(len(self.lcc_country_smoothings_)): n += self.lengthString(self.lcc_country_smoothings_[i].ByteSize())
    if (self.has_lcc_base_backoff_tune_down_): n += 6
    if (self.has_lcc_lang_backoff_tune_down_): n += 6
    if (self.has_imp_language_smoothing_): n += 6
    if (self.has_imp_country_smoothing_): n += 6
    n += 2 * len(self.imp_language_smoothings_)
    for i in xrange(len(self.imp_language_smoothings_)): n += self.lengthString(self.imp_language_smoothings_[i].ByteSize())
    n += 2 * len(self.imp_country_smoothings_)
    for i in xrange(len(self.imp_country_smoothings_)): n += self.lengthString(self.imp_country_smoothings_[i].ByteSize())
    if (self.has_imp_confidence_smoothing_): n += 6
    if (self.has_imp_language_confidence_smoothing_): n += 6
    if (self.has_imp_country_confidence_smoothing_): n += 6
    n += 2 * len(self.imp_language_confidence_smoothings_)
    for i in xrange(len(self.imp_language_confidence_smoothings_)): n += self.lengthString(self.imp_language_confidence_smoothings_[i].ByteSize())
    n += 2 * len(self.imp_country_confidence_smoothings_)
    for i in xrange(len(self.imp_country_confidence_smoothings_)): n += self.lengthString(self.imp_country_confidence_smoothings_[i].ByteSize())
    if (self.has_imp_base_backoff_tune_down_): n += 6
    if (self.has_imp_lang_backoff_tune_down_): n += 6
    if (self.has_build_countries_): n += 1 + self.lengthString(len(self.build_countries_))
    if (self.has_countries_): n += 1 + self.lengthString(self.countries_.ByteSize())
    n += self.lengthString(self.feature_info_list_.ByteSize())
    if (self.has_version_): n += 2 + self.lengthVarInt64(self.version_)
    return n + 1

  def Clear(self):
    self.clear_repos_contents()
    self.clear_clickr_config()
    self.clear_smoothing()
    self.clear_language_smoothing()
    self.clear_ext_language_smoothing()
    self.clear_country_smoothing()
    self.clear_ext_country_smoothing()
    self.clear_language_smoothings()
    self.clear_ext_language_smoothings()
    self.clear_country_smoothings()
    self.clear_ext_country_smoothings()
    self.clear_base_backoff_tune_down()
    self.clear_lang_backoff_tune_down()
    self.clear_lcc_smoothing()
    self.clear_lcc_language_smoothing()
    self.clear_lcc_country_smoothing()
    self.clear_lcc_language_smoothings()
    self.clear_lcc_country_smoothings()
    self.clear_lcc_base_backoff_tune_down()
    self.clear_lcc_lang_backoff_tune_down()
    self.clear_imp_language_smoothing()
    self.clear_imp_country_smoothing()
    self.clear_imp_language_smoothings()
    self.clear_imp_country_smoothings()
    self.clear_imp_confidence_smoothing()
    self.clear_imp_language_confidence_smoothing()
    self.clear_imp_country_confidence_smoothing()
    self.clear_imp_language_confidence_smoothings()
    self.clear_imp_country_confidence_smoothings()
    self.clear_imp_base_backoff_tune_down()
    self.clear_imp_lang_backoff_tune_down()
    self.clear_build_countries()
    self.clear_countries()
    self.clear_feature_info_list()
    self.clear_version()

  def OutputUnchecked(self, out):
    if (self.has_smoothing_):
      out.putVarInt32(13)
      out.putFloat(self.smoothing_)
    if (self.has_language_smoothing_):
      out.putVarInt32(21)
      out.putFloat(self.language_smoothing_)
    if (self.has_country_smoothing_):
      out.putVarInt32(29)
      out.putFloat(self.country_smoothing_)
    for i in xrange(len(self.language_smoothings_)):
      out.putVarInt32(34)
      out.putVarInt32(self.language_smoothings_[i].ByteSize())
      self.language_smoothings_[i].OutputUnchecked(out)
    for i in xrange(len(self.country_smoothings_)):
      out.putVarInt32(42)
      out.putVarInt32(self.country_smoothings_[i].ByteSize())
      self.country_smoothings_[i].OutputUnchecked(out)
    if (self.has_lcc_smoothing_):
      out.putVarInt32(53)
      out.putFloat(self.lcc_smoothing_)
    if (self.has_lcc_language_smoothing_):
      out.putVarInt32(61)
      out.putFloat(self.lcc_language_smoothing_)
    if (self.has_lcc_country_smoothing_):
      out.putVarInt32(69)
      out.putFloat(self.lcc_country_smoothing_)
    for i in xrange(len(self.lcc_language_smoothings_)):
      out.putVarInt32(74)
      out.putVarInt32(self.lcc_language_smoothings_[i].ByteSize())
      self.lcc_language_smoothings_[i].OutputUnchecked(out)
    for i in xrange(len(self.lcc_country_smoothings_)):
      out.putVarInt32(82)
      out.putVarInt32(self.lcc_country_smoothings_[i].ByteSize())
      self.lcc_country_smoothings_[i].OutputUnchecked(out)
    if (self.has_build_countries_):
      out.putVarInt32(90)
      out.putPrefixedString(self.build_countries_)
    if (self.has_countries_):
      out.putVarInt32(98)
      out.putVarInt32(self.countries_.ByteSize())
      self.countries_.OutputUnchecked(out)
    out.putVarInt32(106)
    out.putVarInt32(self.feature_info_list_.ByteSize())
    self.feature_info_list_.OutputUnchecked(out)
    if (self.has_version_):
      out.putVarInt32(136)
      out.putVarInt32(self.version_)
    if (self.has_repos_contents_):
      out.putVarInt32(144)
      out.putVarInt32(self.repos_contents_)
    if (self.has_clickr_config_):
      out.putVarInt32(154)
      out.putVarInt32(self.clickr_config_.ByteSize())
      self.clickr_config_.OutputUnchecked(out)
    if (self.has_base_backoff_tune_down_):
      out.putVarInt32(165)
      out.putFloat(self.base_backoff_tune_down_)
    if (self.has_lang_backoff_tune_down_):
      out.putVarInt32(173)
      out.putFloat(self.lang_backoff_tune_down_)
    if (self.has_lcc_base_backoff_tune_down_):
      out.putVarInt32(181)
      out.putFloat(self.lcc_base_backoff_tune_down_)
    if (self.has_lcc_lang_backoff_tune_down_):
      out.putVarInt32(189)
      out.putFloat(self.lcc_lang_backoff_tune_down_)
    if (self.has_imp_language_smoothing_):
      out.putVarInt32(197)
      out.putFloat(self.imp_language_smoothing_)
    if (self.has_imp_country_smoothing_):
      out.putVarInt32(205)
      out.putFloat(self.imp_country_smoothing_)
    for i in xrange(len(self.imp_language_smoothings_)):
      out.putVarInt32(210)
      out.putVarInt32(self.imp_language_smoothings_[i].ByteSize())
      self.imp_language_smoothings_[i].OutputUnchecked(out)
    for i in xrange(len(self.imp_country_smoothings_)):
      out.putVarInt32(218)
      out.putVarInt32(self.imp_country_smoothings_[i].ByteSize())
      self.imp_country_smoothings_[i].OutputUnchecked(out)
    if (self.has_imp_confidence_smoothing_):
      out.putVarInt32(229)
      out.putFloat(self.imp_confidence_smoothing_)
    if (self.has_imp_language_confidence_smoothing_):
      out.putVarInt32(237)
      out.putFloat(self.imp_language_confidence_smoothing_)
    if (self.has_imp_country_confidence_smoothing_):
      out.putVarInt32(245)
      out.putFloat(self.imp_country_confidence_smoothing_)
    for i in xrange(len(self.imp_language_confidence_smoothings_)):
      out.putVarInt32(250)
      out.putVarInt32(self.imp_language_confidence_smoothings_[i].ByteSize())
      self.imp_language_confidence_smoothings_[i].OutputUnchecked(out)
    for i in xrange(len(self.imp_country_confidence_smoothings_)):
      out.putVarInt32(258)
      out.putVarInt32(self.imp_country_confidence_smoothings_[i].ByteSize())
      self.imp_country_confidence_smoothings_[i].OutputUnchecked(out)
    if (self.has_imp_base_backoff_tune_down_):
      out.putVarInt32(269)
      out.putFloat(self.imp_base_backoff_tune_down_)
    if (self.has_imp_lang_backoff_tune_down_):
      out.putVarInt32(277)
      out.putFloat(self.imp_lang_backoff_tune_down_)
    if (self.has_ext_language_smoothing_):
      out.putVarInt32(285)
      out.putFloat(self.ext_language_smoothing_)
    if (self.has_ext_country_smoothing_):
      out.putVarInt32(293)
      out.putFloat(self.ext_country_smoothing_)
    for i in xrange(len(self.ext_language_smoothings_)):
      out.putVarInt32(298)
      out.putVarInt32(self.ext_language_smoothings_[i].ByteSize())
      self.ext_language_smoothings_[i].OutputUnchecked(out)
    for i in xrange(len(self.ext_country_smoothings_)):
      out.putVarInt32(306)
      out.putVarInt32(self.ext_country_smoothings_[i].ByteSize())
      self.ext_country_smoothings_[i].OutputUnchecked(out)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 13:
        self.set_smoothing(d.getFloat())
        continue
      if tt == 21:
        self.set_language_smoothing(d.getFloat())
        continue
      if tt == 29:
        self.set_country_smoothing(d.getFloat())
        continue
      if tt == 34:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_language_smoothings().TryMerge(tmp)
        continue
      if tt == 42:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_country_smoothings().TryMerge(tmp)
        continue
      if tt == 53:
        self.set_lcc_smoothing(d.getFloat())
        continue
      if tt == 61:
        self.set_lcc_language_smoothing(d.getFloat())
        continue
      if tt == 69:
        self.set_lcc_country_smoothing(d.getFloat())
        continue
      if tt == 74:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_lcc_language_smoothings().TryMerge(tmp)
        continue
      if tt == 82:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_lcc_country_smoothings().TryMerge(tmp)
        continue
      if tt == 90:
        self.set_build_countries(d.getPrefixedString())
        continue
      if tt == 98:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_countries().TryMerge(tmp)
        continue
      if tt == 106:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_feature_info_list().TryMerge(tmp)
        continue
      if tt == 136:
        self.set_version(d.getVarInt32())
        continue
      if tt == 144:
        self.set_repos_contents(d.getVarInt32())
        continue
      if tt == 154:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_clickr_config().TryMerge(tmp)
        continue
      if tt == 165:
        self.set_base_backoff_tune_down(d.getFloat())
        continue
      if tt == 173:
        self.set_lang_backoff_tune_down(d.getFloat())
        continue
      if tt == 181:
        self.set_lcc_base_backoff_tune_down(d.getFloat())
        continue
      if tt == 189:
        self.set_lcc_lang_backoff_tune_down(d.getFloat())
        continue
      if tt == 197:
        self.set_imp_language_smoothing(d.getFloat())
        continue
      if tt == 205:
        self.set_imp_country_smoothing(d.getFloat())
        continue
      if tt == 210:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_imp_language_smoothings().TryMerge(tmp)
        continue
      if tt == 218:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_imp_country_smoothings().TryMerge(tmp)
        continue
      if tt == 229:
        self.set_imp_confidence_smoothing(d.getFloat())
        continue
      if tt == 237:
        self.set_imp_language_confidence_smoothing(d.getFloat())
        continue
      if tt == 245:
        self.set_imp_country_confidence_smoothing(d.getFloat())
        continue
      if tt == 250:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_imp_language_confidence_smoothings().TryMerge(tmp)
        continue
      if tt == 258:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_imp_country_confidence_smoothings().TryMerge(tmp)
        continue
      if tt == 269:
        self.set_imp_base_backoff_tune_down(d.getFloat())
        continue
      if tt == 277:
        self.set_imp_lang_backoff_tune_down(d.getFloat())
        continue
      if tt == 285:
        self.set_ext_language_smoothing(d.getFloat())
        continue
      if tt == 293:
        self.set_ext_country_smoothing(d.getFloat())
        continue
      if tt == 298:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_ext_language_smoothings().TryMerge(tmp)
        continue
      if tt == 306:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_ext_country_smoothings().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_repos_contents_: res+=prefix+("repos_contents: %s\n" % self.DebugFormatInt32(self.repos_contents_))
    if self.has_clickr_config_:
      res+=prefix+"clickr_config <\n"
      res+=self.clickr_config_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_smoothing_: res+=prefix+("smoothing: %s\n" % self.DebugFormatFloat(self.smoothing_))
    if self.has_language_smoothing_: res+=prefix+("language_smoothing: %s\n" % self.DebugFormatFloat(self.language_smoothing_))
    if self.has_ext_language_smoothing_: res+=prefix+("ext_language_smoothing: %s\n" % self.DebugFormatFloat(self.ext_language_smoothing_))
    if self.has_country_smoothing_: res+=prefix+("country_smoothing: %s\n" % self.DebugFormatFloat(self.country_smoothing_))
    if self.has_ext_country_smoothing_: res+=prefix+("ext_country_smoothing: %s\n" % self.DebugFormatFloat(self.ext_country_smoothing_))
    cnt=0
    for e in self.language_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("language_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.ext_language_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("ext_language_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.country_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("country_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.ext_country_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("ext_country_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_base_backoff_tune_down_: res+=prefix+("base_backoff_tune_down: %s\n" % self.DebugFormatFloat(self.base_backoff_tune_down_))
    if self.has_lang_backoff_tune_down_: res+=prefix+("lang_backoff_tune_down: %s\n" % self.DebugFormatFloat(self.lang_backoff_tune_down_))
    if self.has_lcc_smoothing_: res+=prefix+("lcc_smoothing: %s\n" % self.DebugFormatFloat(self.lcc_smoothing_))
    if self.has_lcc_language_smoothing_: res+=prefix+("lcc_language_smoothing: %s\n" % self.DebugFormatFloat(self.lcc_language_smoothing_))
    if self.has_lcc_country_smoothing_: res+=prefix+("lcc_country_smoothing: %s\n" % self.DebugFormatFloat(self.lcc_country_smoothing_))
    cnt=0
    for e in self.lcc_language_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("lcc_language_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.lcc_country_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("lcc_country_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_lcc_base_backoff_tune_down_: res+=prefix+("lcc_base_backoff_tune_down: %s\n" % self.DebugFormatFloat(self.lcc_base_backoff_tune_down_))
    if self.has_lcc_lang_backoff_tune_down_: res+=prefix+("lcc_lang_backoff_tune_down: %s\n" % self.DebugFormatFloat(self.lcc_lang_backoff_tune_down_))
    if self.has_imp_language_smoothing_: res+=prefix+("imp_language_smoothing: %s\n" % self.DebugFormatFloat(self.imp_language_smoothing_))
    if self.has_imp_country_smoothing_: res+=prefix+("imp_country_smoothing: %s\n" % self.DebugFormatFloat(self.imp_country_smoothing_))
    cnt=0
    for e in self.imp_language_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("imp_language_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.imp_country_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("imp_country_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_imp_confidence_smoothing_: res+=prefix+("imp_confidence_smoothing: %s\n" % self.DebugFormatFloat(self.imp_confidence_smoothing_))
    if self.has_imp_language_confidence_smoothing_: res+=prefix+("imp_language_confidence_smoothing: %s\n" % self.DebugFormatFloat(self.imp_language_confidence_smoothing_))
    if self.has_imp_country_confidence_smoothing_: res+=prefix+("imp_country_confidence_smoothing: %s\n" % self.DebugFormatFloat(self.imp_country_confidence_smoothing_))
    cnt=0
    for e in self.imp_language_confidence_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("imp_language_confidence_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.imp_country_confidence_smoothings_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("imp_country_confidence_smoothings%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_imp_base_backoff_tune_down_: res+=prefix+("imp_base_backoff_tune_down: %s\n" % self.DebugFormatFloat(self.imp_base_backoff_tune_down_))
    if self.has_imp_lang_backoff_tune_down_: res+=prefix+("imp_lang_backoff_tune_down: %s\n" % self.DebugFormatFloat(self.imp_lang_backoff_tune_down_))
    if self.has_build_countries_: res+=prefix+("build_countries: %s\n" % self.DebugFormatString(self.build_countries_))
    if self.has_countries_:
      res+=prefix+"countries <\n"
      res+=self.countries_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_feature_info_list_:
      res+=prefix+"feature_info_list <\n"
      res+=self.feature_info_list_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_version_: res+=prefix+("version: %s\n" % self.DebugFormatInt32(self.version_))
    return res

  krepos_contents = 18
  kclickr_config = 19
  ksmoothing = 1
  klanguage_smoothing = 2
  kext_language_smoothing = 35
  kcountry_smoothing = 3
  kext_country_smoothing = 36
  klanguage_smoothings = 4
  kext_language_smoothings = 37
  kcountry_smoothings = 5
  kext_country_smoothings = 38
  kbase_backoff_tune_down = 20
  klang_backoff_tune_down = 21
  klcc_smoothing = 6
  klcc_language_smoothing = 7
  klcc_country_smoothing = 8
  klcc_language_smoothings = 9
  klcc_country_smoothings = 10
  klcc_base_backoff_tune_down = 22
  klcc_lang_backoff_tune_down = 23
  kimp_language_smoothing = 24
  kimp_country_smoothing = 25
  kimp_language_smoothings = 26
  kimp_country_smoothings = 27
  kimp_confidence_smoothing = 28
  kimp_language_confidence_smoothing = 29
  kimp_country_confidence_smoothing = 30
  kimp_language_confidence_smoothings = 31
  kimp_country_confidence_smoothings = 32
  kimp_base_backoff_tune_down = 33
  kimp_lang_backoff_tune_down = 34
  kbuild_countries = 11
  kcountries = 12
  kfeature_info_list = 13
  kversion = 17

  _TEXT = (
   "ErrorCode",  #   0
   "smoothing",  #   1
   "language_smoothing",  #   2
   "country_smoothing",  #   3
   "language_smoothings",  #   4
   "country_smoothings",  #   5
   "lcc_smoothing",  #   6
   "lcc_language_smoothing",  #   7
   "lcc_country_smoothing",  #   8
   "lcc_language_smoothings",  #   9
   "lcc_country_smoothings",  #  10
   "build_countries",  #  11
   "countries",  #  12
   "feature_info_list",  #  13
   None,  #  14
   None,  #  15
   None,  #  16
   "version",  #  17
   "repos_contents",  #  18
   "clickr_config",  #  19
   "base_backoff_tune_down",  #  20
   "lang_backoff_tune_down",  #  21
   "lcc_base_backoff_tune_down",  #  22
   "lcc_lang_backoff_tune_down",  #  23
   "imp_language_smoothing",  #  24
   "imp_country_smoothing",  #  25
   "imp_language_smoothings",  #  26
   "imp_country_smoothings",  #  27
   "imp_confidence_smoothing",  #  28
   "imp_language_confidence_smoothing",  #  29
   "imp_country_confidence_smoothing",  #  30
   "imp_language_confidence_smoothings",  #  31
   "imp_country_confidence_smoothings",  #  32
   "imp_base_backoff_tune_down",  #  33
   "imp_lang_backoff_tune_down",  #  34
   "ext_language_smoothing",  #  35
   "ext_country_smoothing",  #  36
   "ext_language_smoothings",  #  37
   "ext_country_smoothings",  #  38
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.FLOAT,  #   1

   ProtocolBuffer.Encoder.FLOAT,  #   2

   ProtocolBuffer.Encoder.FLOAT,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.FLOAT,  #   6

   ProtocolBuffer.Encoder.FLOAT,  #   7

   ProtocolBuffer.Encoder.FLOAT,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.STRING,  #  10

   ProtocolBuffer.Encoder.STRING,  #  11

   ProtocolBuffer.Encoder.STRING,  #  12

   ProtocolBuffer.Encoder.STRING,  #  13

   ProtocolBuffer.Encoder.MAX_TYPE,  #  14

   ProtocolBuffer.Encoder.MAX_TYPE,  #  15

   ProtocolBuffer.Encoder.MAX_TYPE,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.NUMERIC,  #  18

   ProtocolBuffer.Encoder.STRING,  #  19

   ProtocolBuffer.Encoder.FLOAT,  #  20

   ProtocolBuffer.Encoder.FLOAT,  #  21

   ProtocolBuffer.Encoder.FLOAT,  #  22

   ProtocolBuffer.Encoder.FLOAT,  #  23

   ProtocolBuffer.Encoder.FLOAT,  #  24

   ProtocolBuffer.Encoder.FLOAT,  #  25

   ProtocolBuffer.Encoder.STRING,  #  26

   ProtocolBuffer.Encoder.STRING,  #  27

   ProtocolBuffer.Encoder.FLOAT,  #  28

   ProtocolBuffer.Encoder.FLOAT,  #  29

   ProtocolBuffer.Encoder.FLOAT,  #  30

   ProtocolBuffer.Encoder.STRING,  #  31

   ProtocolBuffer.Encoder.STRING,  #  32

   ProtocolBuffer.Encoder.FLOAT,  #  33

   ProtocolBuffer.Encoder.FLOAT,  #  34

   ProtocolBuffer.Encoder.FLOAT,  #  35

   ProtocolBuffer.Encoder.FLOAT,  #  36

   ProtocolBuffer.Encoder.STRING,  #  37

   ProtocolBuffer.Encoder.STRING,  #  38

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0e,
    0x4e,
    0x42,
    0x4d,
    0x42,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x13,
    0x1a,
    0x0e,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x12,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x20,
    0x13,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x11,
    0x43,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x72,
    0x42,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x01,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x32,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x32,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x02,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x34,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x34,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x65,
    0x78,
    0x74,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x23,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x34,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x34,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x03,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x65,
    0x78,
    0x74,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x24,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x32,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x32,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x65,
    0x78,
    0x74,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x25,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x65,
    0x78,
    0x74,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x26,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x62,
    0x61,
    0x73,
    0x65,
    0x5f,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x6f,
    0x66,
    0x66,
    0x5f,
    0x74,
    0x75,
    0x6e,
    0x65,
    0x5f,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x14,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x5f,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x6f,
    0x66,
    0x66,
    0x5f,
    0x74,
    0x75,
    0x6e,
    0x65,
    0x5f,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x15,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x06,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x32,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x32,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x07,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x32,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x32,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x08,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x32,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x32,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x0a,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x62,
    0x61,
    0x73,
    0x65,
    0x5f,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x6f,
    0x66,
    0x66,
    0x5f,
    0x74,
    0x75,
    0x6e,
    0x65,
    0x5f,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x16,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x5f,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x6f,
    0x66,
    0x66,
    0x5f,
    0x74,
    0x75,
    0x6e,
    0x65,
    0x5f,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x17,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x18,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x35,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x35,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x19,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x35,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x35,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x1a,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x1b,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x1c,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x35,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x35,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x1d,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x32,
    0x35,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x32,
    0x35,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x1e,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x32,
    0x35,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x32,
    0x35,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x22,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x1f,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x20,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0c,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x62,
    0x61,
    0x73,
    0x65,
    0x5f,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x6f,
    0x66,
    0x66,
    0x5f,
    0x74,
    0x75,
    0x6e,
    0x65,
    0x5f,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x21,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x5f,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x6f,
    0x66,
    0x66,
    0x5f,
    0x74,
    0x75,
    0x6e,
    0x65,
    0x5f,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x22,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x0b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x0c,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x11,
    0x4e,
    0x42,
    0x4d,
    0x42,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x5f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x5f,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x20,
    0x0d,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x02,
    0x4a,
    0x12,
    0x4e,
    0x42,
    0x4d,
    0x46,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x4c,
    0x69,
    0x73,
    0x74,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x35,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x35,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x13,
    0x52,
    0x45,
    0x50,
    0x4f,
    0x53,
    0x49,
    0x54,
    0x4f,
    0x52,
    0x59,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x53,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x52,
    0x45,
    0x50,
    0x4f,
    0x53,
    0x5f,
    0x43,
    0x4c,
    0x41,
    0x53,
    0x53,
    0x49,
    0x43,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x52,
    0x45,
    0x50,
    0x4f,
    0x53,
    0x5f,
    0x43,
    0x4c,
    0x49,
    0x43,
    0x4b,
    0x52,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NBMScoringConfig(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.total_boost_ = 25.0
    self.boost_cap_ = 15.0
    self.combined_boost_cap_ = 40.0
    self.lcc_total_boost_ = 40.0
    self.lcc_exponent_ = 2.0
    self.imp_demotion_threshold_ = 0.05
    self.imp_demotion_smoothing1_ = 1.4
    self.imp_demotion_smoothing2_ = 0.2
    self.imp_max_boost_ = 1.8
    self.imp_total_boost_ = 2.0
    self.imp_min_ = 0.2
    self.scoring_countries_ = ""
    self.scoring_all_countries_ = 0
    self.scoring_exclude_countries_ = ""
    self.scoring_languages_ = ""
    self.scoring_all_languages_ = 0
    self.scoring_exclude_languages_ = ""
    self.default_algorithm_ = 0
    self.version_ = 1
    self.has_total_boost_ = 0
    self.has_boost_cap_ = 0
    self.has_combined_boost_cap_ = 0
    self.has_lcc_total_boost_ = 0
    self.has_lcc_exponent_ = 0
    self.has_imp_demotion_threshold_ = 0
    self.has_imp_demotion_smoothing1_ = 0
    self.has_imp_demotion_smoothing2_ = 0
    self.has_imp_max_boost_ = 0
    self.has_imp_total_boost_ = 0
    self.has_imp_min_ = 0
    self.has_scoring_countries_ = 0
    self.has_scoring_all_countries_ = 0
    self.has_scoring_exclude_countries_ = 0
    self.has_scoring_languages_ = 0
    self.has_scoring_all_languages_ = 0
    self.has_scoring_exclude_languages_ = 0
    self.has_default_algorithm_ = 0
    self.has_version_ = 0
    if contents is not None: self.MergeFromString(contents)

  def total_boost(self): return self.total_boost_

  def set_total_boost(self, x):
    self.has_total_boost_ = 1
    self.total_boost_ = x

  def clear_total_boost(self):
    self.has_total_boost_ = 0
    self.total_boost_ = 25.0

  def has_total_boost(self): return self.has_total_boost_

  def boost_cap(self): return self.boost_cap_

  def set_boost_cap(self, x):
    self.has_boost_cap_ = 1
    self.boost_cap_ = x

  def clear_boost_cap(self):
    self.has_boost_cap_ = 0
    self.boost_cap_ = 15.0

  def has_boost_cap(self): return self.has_boost_cap_

  def combined_boost_cap(self): return self.combined_boost_cap_

  def set_combined_boost_cap(self, x):
    self.has_combined_boost_cap_ = 1
    self.combined_boost_cap_ = x

  def clear_combined_boost_cap(self):
    self.has_combined_boost_cap_ = 0
    self.combined_boost_cap_ = 40.0

  def has_combined_boost_cap(self): return self.has_combined_boost_cap_

  def lcc_total_boost(self): return self.lcc_total_boost_

  def set_lcc_total_boost(self, x):
    self.has_lcc_total_boost_ = 1
    self.lcc_total_boost_ = x

  def clear_lcc_total_boost(self):
    self.has_lcc_total_boost_ = 0
    self.lcc_total_boost_ = 40.0

  def has_lcc_total_boost(self): return self.has_lcc_total_boost_

  def lcc_exponent(self): return self.lcc_exponent_

  def set_lcc_exponent(self, x):
    self.has_lcc_exponent_ = 1
    self.lcc_exponent_ = x

  def clear_lcc_exponent(self):
    self.has_lcc_exponent_ = 0
    self.lcc_exponent_ = 2.0

  def has_lcc_exponent(self): return self.has_lcc_exponent_

  def imp_demotion_threshold(self): return self.imp_demotion_threshold_

  def set_imp_demotion_threshold(self, x):
    self.has_imp_demotion_threshold_ = 1
    self.imp_demotion_threshold_ = x

  def clear_imp_demotion_threshold(self):
    self.has_imp_demotion_threshold_ = 0
    self.imp_demotion_threshold_ = 0.05

  def has_imp_demotion_threshold(self): return self.has_imp_demotion_threshold_

  def imp_demotion_smoothing1(self): return self.imp_demotion_smoothing1_

  def set_imp_demotion_smoothing1(self, x):
    self.has_imp_demotion_smoothing1_ = 1
    self.imp_demotion_smoothing1_ = x

  def clear_imp_demotion_smoothing1(self):
    self.has_imp_demotion_smoothing1_ = 0
    self.imp_demotion_smoothing1_ = 1.4

  def has_imp_demotion_smoothing1(self): return self.has_imp_demotion_smoothing1_

  def imp_demotion_smoothing2(self): return self.imp_demotion_smoothing2_

  def set_imp_demotion_smoothing2(self, x):
    self.has_imp_demotion_smoothing2_ = 1
    self.imp_demotion_smoothing2_ = x

  def clear_imp_demotion_smoothing2(self):
    self.has_imp_demotion_smoothing2_ = 0
    self.imp_demotion_smoothing2_ = 0.2

  def has_imp_demotion_smoothing2(self): return self.has_imp_demotion_smoothing2_

  def imp_max_boost(self): return self.imp_max_boost_

  def set_imp_max_boost(self, x):
    self.has_imp_max_boost_ = 1
    self.imp_max_boost_ = x

  def clear_imp_max_boost(self):
    self.has_imp_max_boost_ = 0
    self.imp_max_boost_ = 1.8

  def has_imp_max_boost(self): return self.has_imp_max_boost_

  def imp_total_boost(self): return self.imp_total_boost_

  def set_imp_total_boost(self, x):
    self.has_imp_total_boost_ = 1
    self.imp_total_boost_ = x

  def clear_imp_total_boost(self):
    self.has_imp_total_boost_ = 0
    self.imp_total_boost_ = 2.0

  def has_imp_total_boost(self): return self.has_imp_total_boost_

  def imp_min(self): return self.imp_min_

  def set_imp_min(self, x):
    self.has_imp_min_ = 1
    self.imp_min_ = x

  def clear_imp_min(self):
    self.has_imp_min_ = 0
    self.imp_min_ = 0.2

  def has_imp_min(self): return self.has_imp_min_

  def scoring_countries(self): return self.scoring_countries_

  def set_scoring_countries(self, x):
    self.has_scoring_countries_ = 1
    self.scoring_countries_ = x

  def clear_scoring_countries(self):
    self.has_scoring_countries_ = 0
    self.scoring_countries_ = ""

  def has_scoring_countries(self): return self.has_scoring_countries_

  def scoring_all_countries(self): return self.scoring_all_countries_

  def set_scoring_all_countries(self, x):
    self.has_scoring_all_countries_ = 1
    self.scoring_all_countries_ = x

  def clear_scoring_all_countries(self):
    self.has_scoring_all_countries_ = 0
    self.scoring_all_countries_ = 0

  def has_scoring_all_countries(self): return self.has_scoring_all_countries_

  def scoring_exclude_countries(self): return self.scoring_exclude_countries_

  def set_scoring_exclude_countries(self, x):
    self.has_scoring_exclude_countries_ = 1
    self.scoring_exclude_countries_ = x

  def clear_scoring_exclude_countries(self):
    self.has_scoring_exclude_countries_ = 0
    self.scoring_exclude_countries_ = ""

  def has_scoring_exclude_countries(self): return self.has_scoring_exclude_countries_

  def scoring_languages(self): return self.scoring_languages_

  def set_scoring_languages(self, x):
    self.has_scoring_languages_ = 1
    self.scoring_languages_ = x

  def clear_scoring_languages(self):
    self.has_scoring_languages_ = 0
    self.scoring_languages_ = ""

  def has_scoring_languages(self): return self.has_scoring_languages_

  def scoring_all_languages(self): return self.scoring_all_languages_

  def set_scoring_all_languages(self, x):
    self.has_scoring_all_languages_ = 1
    self.scoring_all_languages_ = x

  def clear_scoring_all_languages(self):
    self.has_scoring_all_languages_ = 0
    self.scoring_all_languages_ = 0

  def has_scoring_all_languages(self): return self.has_scoring_all_languages_

  def scoring_exclude_languages(self): return self.scoring_exclude_languages_

  def set_scoring_exclude_languages(self, x):
    self.has_scoring_exclude_languages_ = 1
    self.scoring_exclude_languages_ = x

  def clear_scoring_exclude_languages(self):
    self.has_scoring_exclude_languages_ = 0
    self.scoring_exclude_languages_ = ""

  def has_scoring_exclude_languages(self): return self.has_scoring_exclude_languages_

  def default_algorithm(self): return self.default_algorithm_

  def set_default_algorithm(self, x):
    self.has_default_algorithm_ = 1
    self.default_algorithm_ = x

  def clear_default_algorithm(self):
    self.has_default_algorithm_ = 0
    self.default_algorithm_ = 0

  def has_default_algorithm(self): return self.has_default_algorithm_

  def version(self): return self.version_

  def set_version(self, x):
    self.has_version_ = 1
    self.version_ = x

  def clear_version(self):
    self.has_version_ = 0
    self.version_ = 1

  def has_version(self): return self.has_version_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_total_boost()): self.set_total_boost(x.total_boost())
    if (x.has_boost_cap()): self.set_boost_cap(x.boost_cap())
    if (x.has_combined_boost_cap()): self.set_combined_boost_cap(x.combined_boost_cap())
    if (x.has_lcc_total_boost()): self.set_lcc_total_boost(x.lcc_total_boost())
    if (x.has_lcc_exponent()): self.set_lcc_exponent(x.lcc_exponent())
    if (x.has_imp_demotion_threshold()): self.set_imp_demotion_threshold(x.imp_demotion_threshold())
    if (x.has_imp_demotion_smoothing1()): self.set_imp_demotion_smoothing1(x.imp_demotion_smoothing1())
    if (x.has_imp_demotion_smoothing2()): self.set_imp_demotion_smoothing2(x.imp_demotion_smoothing2())
    if (x.has_imp_max_boost()): self.set_imp_max_boost(x.imp_max_boost())
    if (x.has_imp_total_boost()): self.set_imp_total_boost(x.imp_total_boost())
    if (x.has_imp_min()): self.set_imp_min(x.imp_min())
    if (x.has_scoring_countries()): self.set_scoring_countries(x.scoring_countries())
    if (x.has_scoring_all_countries()): self.set_scoring_all_countries(x.scoring_all_countries())
    if (x.has_scoring_exclude_countries()): self.set_scoring_exclude_countries(x.scoring_exclude_countries())
    if (x.has_scoring_languages()): self.set_scoring_languages(x.scoring_languages())
    if (x.has_scoring_all_languages()): self.set_scoring_all_languages(x.scoring_all_languages())
    if (x.has_scoring_exclude_languages()): self.set_scoring_exclude_languages(x.scoring_exclude_languages())
    if (x.has_default_algorithm()): self.set_default_algorithm(x.default_algorithm())
    if (x.has_version()): self.set_version(x.version())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NBMScoringConfig', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NBMScoringConfig')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NBMScoringConfig', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NBMScoringConfig', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NBMScoringConfig', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_total_boost_ != x.has_total_boost_: return 0
    if self.has_total_boost_ and self.total_boost_ != x.total_boost_: return 0
    if self.has_boost_cap_ != x.has_boost_cap_: return 0
    if self.has_boost_cap_ and self.boost_cap_ != x.boost_cap_: return 0
    if self.has_combined_boost_cap_ != x.has_combined_boost_cap_: return 0
    if self.has_combined_boost_cap_ and self.combined_boost_cap_ != x.combined_boost_cap_: return 0
    if self.has_lcc_total_boost_ != x.has_lcc_total_boost_: return 0
    if self.has_lcc_total_boost_ and self.lcc_total_boost_ != x.lcc_total_boost_: return 0
    if self.has_lcc_exponent_ != x.has_lcc_exponent_: return 0
    if self.has_lcc_exponent_ and self.lcc_exponent_ != x.lcc_exponent_: return 0
    if self.has_imp_demotion_threshold_ != x.has_imp_demotion_threshold_: return 0
    if self.has_imp_demotion_threshold_ and self.imp_demotion_threshold_ != x.imp_demotion_threshold_: return 0
    if self.has_imp_demotion_smoothing1_ != x.has_imp_demotion_smoothing1_: return 0
    if self.has_imp_demotion_smoothing1_ and self.imp_demotion_smoothing1_ != x.imp_demotion_smoothing1_: return 0
    if self.has_imp_demotion_smoothing2_ != x.has_imp_demotion_smoothing2_: return 0
    if self.has_imp_demotion_smoothing2_ and self.imp_demotion_smoothing2_ != x.imp_demotion_smoothing2_: return 0
    if self.has_imp_max_boost_ != x.has_imp_max_boost_: return 0
    if self.has_imp_max_boost_ and self.imp_max_boost_ != x.imp_max_boost_: return 0
    if self.has_imp_total_boost_ != x.has_imp_total_boost_: return 0
    if self.has_imp_total_boost_ and self.imp_total_boost_ != x.imp_total_boost_: return 0
    if self.has_imp_min_ != x.has_imp_min_: return 0
    if self.has_imp_min_ and self.imp_min_ != x.imp_min_: return 0
    if self.has_scoring_countries_ != x.has_scoring_countries_: return 0
    if self.has_scoring_countries_ and self.scoring_countries_ != x.scoring_countries_: return 0
    if self.has_scoring_all_countries_ != x.has_scoring_all_countries_: return 0
    if self.has_scoring_all_countries_ and self.scoring_all_countries_ != x.scoring_all_countries_: return 0
    if self.has_scoring_exclude_countries_ != x.has_scoring_exclude_countries_: return 0
    if self.has_scoring_exclude_countries_ and self.scoring_exclude_countries_ != x.scoring_exclude_countries_: return 0
    if self.has_scoring_languages_ != x.has_scoring_languages_: return 0
    if self.has_scoring_languages_ and self.scoring_languages_ != x.scoring_languages_: return 0
    if self.has_scoring_all_languages_ != x.has_scoring_all_languages_: return 0
    if self.has_scoring_all_languages_ and self.scoring_all_languages_ != x.scoring_all_languages_: return 0
    if self.has_scoring_exclude_languages_ != x.has_scoring_exclude_languages_: return 0
    if self.has_scoring_exclude_languages_ and self.scoring_exclude_languages_ != x.scoring_exclude_languages_: return 0
    if self.has_default_algorithm_ != x.has_default_algorithm_: return 0
    if self.has_default_algorithm_ and self.default_algorithm_ != x.default_algorithm_: return 0
    if self.has_version_ != x.has_version_: return 0
    if self.has_version_ and self.version_ != x.version_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_total_boost_): n += 5
    if (self.has_boost_cap_): n += 5
    if (self.has_combined_boost_cap_): n += 5
    if (self.has_lcc_total_boost_): n += 5
    if (self.has_lcc_exponent_): n += 5
    if (self.has_imp_demotion_threshold_): n += 6
    if (self.has_imp_demotion_smoothing1_): n += 6
    if (self.has_imp_demotion_smoothing2_): n += 6
    if (self.has_imp_max_boost_): n += 6
    if (self.has_imp_total_boost_): n += 6
    if (self.has_imp_min_): n += 6
    if (self.has_scoring_countries_): n += 2 + self.lengthString(len(self.scoring_countries_))
    if (self.has_scoring_all_countries_): n += 3
    if (self.has_scoring_exclude_countries_): n += 2 + self.lengthString(len(self.scoring_exclude_countries_))
    if (self.has_scoring_languages_): n += 2 + self.lengthString(len(self.scoring_languages_))
    if (self.has_scoring_all_languages_): n += 3
    if (self.has_scoring_exclude_languages_): n += 2 + self.lengthString(len(self.scoring_exclude_languages_))
    if (self.has_default_algorithm_): n += 1 + self.lengthVarInt64(self.default_algorithm_)
    if (self.has_version_): n += 2 + self.lengthVarInt64(self.version_)
    return n + 0

  def Clear(self):
    self.clear_total_boost()
    self.clear_boost_cap()
    self.clear_combined_boost_cap()
    self.clear_lcc_total_boost()
    self.clear_lcc_exponent()
    self.clear_imp_demotion_threshold()
    self.clear_imp_demotion_smoothing1()
    self.clear_imp_demotion_smoothing2()
    self.clear_imp_max_boost()
    self.clear_imp_total_boost()
    self.clear_imp_min()
    self.clear_scoring_countries()
    self.clear_scoring_all_countries()
    self.clear_scoring_exclude_countries()
    self.clear_scoring_languages()
    self.clear_scoring_all_languages()
    self.clear_scoring_exclude_languages()
    self.clear_default_algorithm()
    self.clear_version()

  def OutputUnchecked(self, out):
    if (self.has_total_boost_):
      out.putVarInt32(13)
      out.putFloat(self.total_boost_)
    if (self.has_boost_cap_):
      out.putVarInt32(21)
      out.putFloat(self.boost_cap_)
    if (self.has_lcc_total_boost_):
      out.putVarInt32(29)
      out.putFloat(self.lcc_total_boost_)
    if (self.has_lcc_exponent_):
      out.putVarInt32(37)
      out.putFloat(self.lcc_exponent_)
    if (self.has_combined_boost_cap_):
      out.putVarInt32(45)
      out.putFloat(self.combined_boost_cap_)
    if (self.has_default_algorithm_):
      out.putVarInt32(120)
      out.putVarInt32(self.default_algorithm_)
    if (self.has_scoring_countries_):
      out.putVarInt32(130)
      out.putPrefixedString(self.scoring_countries_)
    if (self.has_version_):
      out.putVarInt32(136)
      out.putVarInt32(self.version_)
    if (self.has_scoring_exclude_countries_):
      out.putVarInt32(146)
      out.putPrefixedString(self.scoring_exclude_countries_)
    if (self.has_scoring_exclude_languages_):
      out.putVarInt32(154)
      out.putPrefixedString(self.scoring_exclude_languages_)
    if (self.has_scoring_languages_):
      out.putVarInt32(162)
      out.putPrefixedString(self.scoring_languages_)
    if (self.has_scoring_all_languages_):
      out.putVarInt32(168)
      out.putBoolean(self.scoring_all_languages_)
    if (self.has_scoring_all_countries_):
      out.putVarInt32(176)
      out.putBoolean(self.scoring_all_countries_)
    if (self.has_imp_demotion_threshold_):
      out.putVarInt32(189)
      out.putFloat(self.imp_demotion_threshold_)
    if (self.has_imp_demotion_smoothing1_):
      out.putVarInt32(197)
      out.putFloat(self.imp_demotion_smoothing1_)
    if (self.has_imp_demotion_smoothing2_):
      out.putVarInt32(205)
      out.putFloat(self.imp_demotion_smoothing2_)
    if (self.has_imp_max_boost_):
      out.putVarInt32(213)
      out.putFloat(self.imp_max_boost_)
    if (self.has_imp_total_boost_):
      out.putVarInt32(221)
      out.putFloat(self.imp_total_boost_)
    if (self.has_imp_min_):
      out.putVarInt32(229)
      out.putFloat(self.imp_min_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 13:
        self.set_total_boost(d.getFloat())
        continue
      if tt == 21:
        self.set_boost_cap(d.getFloat())
        continue
      if tt == 29:
        self.set_lcc_total_boost(d.getFloat())
        continue
      if tt == 37:
        self.set_lcc_exponent(d.getFloat())
        continue
      if tt == 45:
        self.set_combined_boost_cap(d.getFloat())
        continue
      if tt == 120:
        self.set_default_algorithm(d.getVarInt32())
        continue
      if tt == 130:
        self.set_scoring_countries(d.getPrefixedString())
        continue
      if tt == 136:
        self.set_version(d.getVarInt32())
        continue
      if tt == 146:
        self.set_scoring_exclude_countries(d.getPrefixedString())
        continue
      if tt == 154:
        self.set_scoring_exclude_languages(d.getPrefixedString())
        continue
      if tt == 162:
        self.set_scoring_languages(d.getPrefixedString())
        continue
      if tt == 168:
        self.set_scoring_all_languages(d.getBoolean())
        continue
      if tt == 176:
        self.set_scoring_all_countries(d.getBoolean())
        continue
      if tt == 189:
        self.set_imp_demotion_threshold(d.getFloat())
        continue
      if tt == 197:
        self.set_imp_demotion_smoothing1(d.getFloat())
        continue
      if tt == 205:
        self.set_imp_demotion_smoothing2(d.getFloat())
        continue
      if tt == 213:
        self.set_imp_max_boost(d.getFloat())
        continue
      if tt == 221:
        self.set_imp_total_boost(d.getFloat())
        continue
      if tt == 229:
        self.set_imp_min(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_total_boost_: res+=prefix+("total_boost: %s\n" % self.DebugFormatFloat(self.total_boost_))
    if self.has_boost_cap_: res+=prefix+("boost_cap: %s\n" % self.DebugFormatFloat(self.boost_cap_))
    if self.has_combined_boost_cap_: res+=prefix+("combined_boost_cap: %s\n" % self.DebugFormatFloat(self.combined_boost_cap_))
    if self.has_lcc_total_boost_: res+=prefix+("lcc_total_boost: %s\n" % self.DebugFormatFloat(self.lcc_total_boost_))
    if self.has_lcc_exponent_: res+=prefix+("lcc_exponent: %s\n" % self.DebugFormatFloat(self.lcc_exponent_))
    if self.has_imp_demotion_threshold_: res+=prefix+("imp_demotion_threshold: %s\n" % self.DebugFormatFloat(self.imp_demotion_threshold_))
    if self.has_imp_demotion_smoothing1_: res+=prefix+("imp_demotion_smoothing1: %s\n" % self.DebugFormatFloat(self.imp_demotion_smoothing1_))
    if self.has_imp_demotion_smoothing2_: res+=prefix+("imp_demotion_smoothing2: %s\n" % self.DebugFormatFloat(self.imp_demotion_smoothing2_))
    if self.has_imp_max_boost_: res+=prefix+("imp_max_boost: %s\n" % self.DebugFormatFloat(self.imp_max_boost_))
    if self.has_imp_total_boost_: res+=prefix+("imp_total_boost: %s\n" % self.DebugFormatFloat(self.imp_total_boost_))
    if self.has_imp_min_: res+=prefix+("imp_min: %s\n" % self.DebugFormatFloat(self.imp_min_))
    if self.has_scoring_countries_: res+=prefix+("scoring_countries: %s\n" % self.DebugFormatString(self.scoring_countries_))
    if self.has_scoring_all_countries_: res+=prefix+("scoring_all_countries: %s\n" % self.DebugFormatBool(self.scoring_all_countries_))
    if self.has_scoring_exclude_countries_: res+=prefix+("scoring_exclude_countries: %s\n" % self.DebugFormatString(self.scoring_exclude_countries_))
    if self.has_scoring_languages_: res+=prefix+("scoring_languages: %s\n" % self.DebugFormatString(self.scoring_languages_))
    if self.has_scoring_all_languages_: res+=prefix+("scoring_all_languages: %s\n" % self.DebugFormatBool(self.scoring_all_languages_))
    if self.has_scoring_exclude_languages_: res+=prefix+("scoring_exclude_languages: %s\n" % self.DebugFormatString(self.scoring_exclude_languages_))
    if self.has_default_algorithm_: res+=prefix+("default_algorithm: %s\n" % self.DebugFormatInt32(self.default_algorithm_))
    if self.has_version_: res+=prefix+("version: %s\n" % self.DebugFormatInt32(self.version_))
    return res

  ktotal_boost = 1
  kboost_cap = 2
  kcombined_boost_cap = 5
  klcc_total_boost = 3
  klcc_exponent = 4
  kimp_demotion_threshold = 23
  kimp_demotion_smoothing1 = 24
  kimp_demotion_smoothing2 = 25
  kimp_max_boost = 26
  kimp_total_boost = 27
  kimp_min = 28
  kscoring_countries = 16
  kscoring_all_countries = 22
  kscoring_exclude_countries = 18
  kscoring_languages = 20
  kscoring_all_languages = 21
  kscoring_exclude_languages = 19
  kdefault_algorithm = 15
  kversion = 17

  _TEXT = (
   "ErrorCode",  #   0
   "total_boost",  #   1
   "boost_cap",  #   2
   "lcc_total_boost",  #   3
   "lcc_exponent",  #   4
   "combined_boost_cap",  #   5
   None,  #   6
   None,  #   7
   None,  #   8
   None,  #   9
   None,  #  10
   None,  #  11
   None,  #  12
   None,  #  13
   None,  #  14
   "default_algorithm",  #  15
   "scoring_countries",  #  16
   "version",  #  17
   "scoring_exclude_countries",  #  18
   "scoring_exclude_languages",  #  19
   "scoring_languages",  #  20
   "scoring_all_languages",  #  21
   "scoring_all_countries",  #  22
   "imp_demotion_threshold",  #  23
   "imp_demotion_smoothing1",  #  24
   "imp_demotion_smoothing2",  #  25
   "imp_max_boost",  #  26
   "imp_total_boost",  #  27
   "imp_min",  #  28
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.FLOAT,  #   1

   ProtocolBuffer.Encoder.FLOAT,  #   2

   ProtocolBuffer.Encoder.FLOAT,  #   3

   ProtocolBuffer.Encoder.FLOAT,  #   4

   ProtocolBuffer.Encoder.FLOAT,  #   5

   ProtocolBuffer.Encoder.MAX_TYPE,  #   6

   ProtocolBuffer.Encoder.MAX_TYPE,  #   7

   ProtocolBuffer.Encoder.MAX_TYPE,  #   8

   ProtocolBuffer.Encoder.MAX_TYPE,  #   9

   ProtocolBuffer.Encoder.MAX_TYPE,  #  10

   ProtocolBuffer.Encoder.MAX_TYPE,  #  11

   ProtocolBuffer.Encoder.MAX_TYPE,  #  12

   ProtocolBuffer.Encoder.MAX_TYPE,  #  13

   ProtocolBuffer.Encoder.MAX_TYPE,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.STRING,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.STRING,  #  18

   ProtocolBuffer.Encoder.STRING,  #  19

   ProtocolBuffer.Encoder.STRING,  #  20

   ProtocolBuffer.Encoder.NUMERIC,  #  21

   ProtocolBuffer.Encoder.NUMERIC,  #  22

   ProtocolBuffer.Encoder.FLOAT,  #  23

   ProtocolBuffer.Encoder.FLOAT,  #  24

   ProtocolBuffer.Encoder.FLOAT,  #  25

   ProtocolBuffer.Encoder.FLOAT,  #  26

   ProtocolBuffer.Encoder.FLOAT,  #  27

   ProtocolBuffer.Encoder.FLOAT,  #  28

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x10,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x13,
    0x1a,
    0x0b,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x01,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x32,
    0x35,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x32,
    0x35,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x5f,
    0x63,
    0x61,
    0x70,
    0x20,
    0x02,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x35,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x35,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x63,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x5f,
    0x63,
    0x61,
    0x70,
    0x20,
    0x05,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x34,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x34,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x03,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x34,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x34,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x6c,
    0x63,
    0x63,
    0x5f,
    0x65,
    0x78,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x04,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x32,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x32,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x74,
    0x68,
    0x72,
    0x65,
    0x73,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x20,
    0x17,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x30,
    0x2e,
    0x30,
    0x35,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x30,
    0x2e,
    0x30,
    0x35,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x31,
    0x20,
    0x18,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x34,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x34,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x73,
    0x6d,
    0x6f,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x32,
    0x20,
    0x19,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x32,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x32,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x6d,
    0x61,
    0x78,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x1a,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x38,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x38,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x1b,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x32,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x32,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x69,
    0x6d,
    0x70,
    0x5f,
    0x6d,
    0x69,
    0x6e,
    0x20,
    0x1c,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x32,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x32,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x10,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x61,
    0x6c,
    0x6c,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x16,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x65,
    0x78,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x12,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x73,
    0x20,
    0x14,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x61,
    0x6c,
    0x6c,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x73,
    0x20,
    0x15,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x65,
    0x78,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x73,
    0x20,
    0x13,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x5f,
    0x61,
    0x6c,
    0x67,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x68,
    0x6d,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NavBoostMustangConfig(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.build_ = NBMBuildConfig()
    self.scoring_ = NBMScoringConfig()
    self.has_build_ = 0
    self.has_scoring_ = 0
    if contents is not None: self.MergeFromString(contents)

  def build(self): return self.build_

  def mutable_build(self): self.has_build_ = 1; return self.build_

  def clear_build(self):self.has_build_ = 0; self.build_.Clear()

  def has_build(self): return self.has_build_

  def scoring(self): return self.scoring_

  def mutable_scoring(self): self.has_scoring_ = 1; return self.scoring_

  def clear_scoring(self):self.has_scoring_ = 0; self.scoring_.Clear()

  def has_scoring(self): return self.has_scoring_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_build()): self.mutable_build().MergeFrom(x.build())
    if (x.has_scoring()): self.mutable_scoring().MergeFrom(x.scoring())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NavBoostMustangConfig', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NavBoostMustangConfig')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NavBoostMustangConfig', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NavBoostMustangConfig', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NavBoostMustangConfig', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_build_ != x.has_build_: return 0
    if self.has_build_ and self.build_ != x.build_: return 0
    if self.has_scoring_ != x.has_scoring_: return 0
    if self.has_scoring_ and self.scoring_ != x.scoring_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_build_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: build not set.')
    elif not self.build_.IsInitialized(debug_strs): initialized = 0
    if (not self.has_scoring_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: scoring not set.')
    elif not self.scoring_.IsInitialized(debug_strs): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(self.build_.ByteSize())
    n += self.lengthString(self.scoring_.ByteSize())
    return n + 2

  def Clear(self):
    self.clear_build()
    self.clear_scoring()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putVarInt32(self.build_.ByteSize())
    self.build_.OutputUnchecked(out)
    out.putVarInt32(18)
    out.putVarInt32(self.scoring_.ByteSize())
    self.scoring_.OutputUnchecked(out)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_build().TryMerge(tmp)
        continue
      if tt == 18:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_scoring().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_build_:
      res+=prefix+"build <\n"
      res+=self.build_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_scoring_:
      res+=prefix+"scoring <\n"
      res+=self.scoring_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

  kbuild = 1
  kscoring = 2

  _TEXT = (
   "ErrorCode",  #   0
   "build",  #   1
   "scoring",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x15,
    0x4e,
    0x61,
    0x76,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x4d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x13,
    0x1a,
    0x05,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x02,
    0x4a,
    0x0e,
    0x4e,
    0x42,
    0x4d,
    0x42,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x02,
    0x4a,
    0x10,
    0x4e,
    0x42,
    0x4d,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class NavboostCrossLanguageBackOffParameters_Preferences(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.target_language_ = 0
    self.source_language_ = 0
    self.preference_fraction_ = 1.0
    self.has_target_language_ = 0
    self.has_source_language_ = 0
    self.has_preference_fraction_ = 0
    if contents is not None: self.MergeFromString(contents)

  def target_language(self): return self.target_language_

  def set_target_language(self, x):
    self.has_target_language_ = 1
    self.target_language_ = x

  def clear_target_language(self):
    self.has_target_language_ = 0
    self.target_language_ = 0

  def has_target_language(self): return self.has_target_language_

  def source_language(self): return self.source_language_

  def set_source_language(self, x):
    self.has_source_language_ = 1
    self.source_language_ = x

  def clear_source_language(self):
    self.has_source_language_ = 0
    self.source_language_ = 0

  def has_source_language(self): return self.has_source_language_

  def preference_fraction(self): return self.preference_fraction_

  def set_preference_fraction(self, x):
    self.has_preference_fraction_ = 1
    self.preference_fraction_ = x

  def clear_preference_fraction(self):
    self.has_preference_fraction_ = 0
    self.preference_fraction_ = 1.0

  def has_preference_fraction(self): return self.has_preference_fraction_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_target_language()): self.set_target_language(x.target_language())
    if (x.has_source_language()): self.set_source_language(x.source_language())
    if (x.has_preference_fraction()): self.set_preference_fraction(x.preference_fraction())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NavboostCrossLanguageBackOffParameters', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NavboostCrossLanguageBackOffParameters')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NavboostCrossLanguageBackOffParameters', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NavboostCrossLanguageBackOffParameters', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NavboostCrossLanguageBackOffParameters', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_target_language_ != x.has_target_language_: return 0
    if self.has_target_language_ and self.target_language_ != x.target_language_: return 0
    if self.has_source_language_ != x.has_source_language_: return 0
    if self.has_source_language_ and self.source_language_ != x.source_language_: return 0
    if self.has_preference_fraction_ != x.has_preference_fraction_: return 0
    if self.has_preference_fraction_ and self.preference_fraction_ != x.preference_fraction_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_target_language_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: target_language not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.target_language_)
    if (self.has_source_language_): n += 1 + self.lengthVarInt64(self.source_language_)
    if (self.has_preference_fraction_): n += 5
    return n + 1

  def Clear(self):
    self.clear_target_language()
    self.clear_source_language()
    self.clear_preference_fraction()

  def OutputUnchecked(self, out):
    out.putVarInt32(16)
    out.putVarInt32(self.target_language_)
    if (self.has_source_language_):
      out.putVarInt32(24)
      out.putVarInt32(self.source_language_)
    if (self.has_preference_fraction_):
      out.putVarInt32(37)
      out.putFloat(self.preference_fraction_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 16:
        self.set_target_language(d.getVarInt32())
        continue
      if tt == 24:
        self.set_source_language(d.getVarInt32())
        continue
      if tt == 37:
        self.set_preference_fraction(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_target_language_: res+=prefix+("target_language: %s\n" % self.DebugFormatInt32(self.target_language_))
    if self.has_source_language_: res+=prefix+("source_language: %s\n" % self.DebugFormatInt32(self.source_language_))
    if self.has_preference_fraction_: res+=prefix+("preference_fraction: %s\n" % self.DebugFormatFloat(self.preference_fraction_))
    return res

class NavboostCrossLanguageBackOffParameters(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.preferences_ = []
    if contents is not None: self.MergeFromString(contents)

  def preferences_size(self): return len(self.preferences_)
  def preferences_list(self): return self.preferences_

  def preferences(self, i):
    return self.preferences_[i]

  def mutable_preferences(self, i):
    return self.preferences_[i]

  def add_preferences(self):
    x = NavboostCrossLanguageBackOffParameters_Preferences()
    self.preferences_.append(x)
    return x

  def clear_preferences(self):
    self.preferences_ = []

  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.preferences_size()): self.add_preferences().CopyFrom(x.preferences(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NavboostCrossLanguageBackOffParameters', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NavboostCrossLanguageBackOffParameters')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NavboostCrossLanguageBackOffParameters', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NavboostCrossLanguageBackOffParameters', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NavboostCrossLanguageBackOffParameters', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.preferences_) != len(x.preferences_): return 0
    for e1, e2 in zip(self.preferences_, x.preferences_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.preferences_)):
      if (not self.preferences_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.preferences_)
    for i in xrange(len(self.preferences_)): n += self.preferences_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_preferences()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.preferences_)):
      out.putVarInt32(11)
      self.preferences_[i].OutputUnchecked(out)
      out.putVarInt32(12)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_preferences().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.preferences_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Preferences%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kPreferencesGroup = 1
  kPreferencestarget_language = 2
  kPreferencessource_language = 3
  kPreferencespreference_fraction = 4

  _TEXT = (
   "ErrorCode",  #   0
   "Preferences",  #   1
   "target_language",  #   2
   "source_language",  #   3
   "preference_fraction",  #   4
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.FLOAT,  #   4

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x26,
    0x4e,
    0x61,
    0x76,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x43,
    0x72,
    0x6f,
    0x73,
    0x73,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x42,
    0x61,
    0x63,
    0x6b,
    0x4f,
    0x66,
    0x66,
    0x50,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x74,
    0x65,
    0x72,
    0x73,
    0x13,
    0x1a,
    0x0b,
    0x50,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x50,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x50,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x5f,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x50,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x5f,
    0x66,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x04,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0x60,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['NavBoostFeature','NavBoostQueryForCorpus','NavBoostQuery','NavBoostDocument','NavBoostSite','MustangNavBoostInfo','MustangNavBoostInfo_QueryFeature','MustangNavBoostInfo_Query','NBMBuildCountries','NBMSmoothing','NBMFeatureInfo','NBMFeatureInfoList','ClickrBuildConfig','NBMBuildConfig','NBMScoringConfig','NavBoostMustangConfig','NavboostCrossLanguageBackOffParameters','NavboostCrossLanguageBackOffParameters_Preferences']
