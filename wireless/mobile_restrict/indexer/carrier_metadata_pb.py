# This file automatically generated by protocol-compiler from wireless/mobile_restrict/indexer/carrier-metadata.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class CarrierMetadata_Metadata(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.name_ = ""
    self.value_ = ""
    self.has_name_ = 0
    self.has_value_ = 0
    if contents is not None: self.MergeFromString(contents)

  def name(self): return self.name_

  def set_name(self, x):
    self.has_name_ = 1
    self.name_ = x

  def clear_name(self):
    self.has_name_ = 0
    self.name_ = ""

  def has_name(self): return self.has_name_

  def value(self): return self.value_

  def set_value(self, x):
    self.has_value_ = 1
    self.value_ = x

  def clear_value(self):
    self.has_value_ = 0
    self.value_ = ""

  def has_value(self): return self.has_value_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_name()): self.set_name(x.name())
    if (x.has_value()): self.set_value(x.value())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'wireless_mobile_restrict.CarrierMetadata', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'wireless_mobile_restrict.CarrierMetadata')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'wireless_mobile_restrict.CarrierMetadata', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'wireless_mobile_restrict.CarrierMetadata', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'wireless_mobile_restrict.CarrierMetadata', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_name_ != x.has_name_: return 0
    if self.has_name_ and self.name_ != x.name_: return 0
    if self.has_value_ != x.has_value_: return 0
    if self.has_value_ and self.value_ != x.value_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_name_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: name not set.')
    if (not self.has_value_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: value not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.name_))
    n += self.lengthString(len(self.value_))
    return n + 2

  def Clear(self):
    self.clear_name()
    self.clear_value()

  def OutputUnchecked(self, out):
    out.putVarInt32(18)
    out.putPrefixedString(self.name_)
    out.putVarInt32(26)
    out.putPrefixedString(self.value_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 18:
        self.set_name(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_value(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_name_: res+=prefix+("name: %s\n" % self.DebugFormatString(self.name_))
    if self.has_value_: res+=prefix+("value: %s\n" % self.DebugFormatString(self.value_))
    return res

class CarrierMetadata(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 1995775 

  _TypeId_NAMES = {
    1995775: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.metadata_ = []
    if contents is not None: self.MergeFromString(contents)

  def metadata_size(self): return len(self.metadata_)
  def metadata_list(self): return self.metadata_

  def metadata(self, i):
    return self.metadata_[i]

  def mutable_metadata(self, i):
    return self.metadata_[i]

  def add_metadata(self):
    x = CarrierMetadata_Metadata()
    self.metadata_.append(x)
    return x

  def clear_metadata(self):
    self.metadata_ = []

  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.metadata_size()): self.add_metadata().CopyFrom(x.metadata(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'wireless_mobile_restrict.CarrierMetadata', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'wireless_mobile_restrict.CarrierMetadata')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'wireless_mobile_restrict.CarrierMetadata', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'wireless_mobile_restrict.CarrierMetadata', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'wireless_mobile_restrict.CarrierMetadata', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.metadata_) != len(x.metadata_): return 0
    for e1, e2 in zip(self.metadata_, x.metadata_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.metadata_)):
      if (not self.metadata_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.metadata_)
    for i in xrange(len(self.metadata_)): n += self.metadata_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_metadata()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.metadata_)):
      out.putVarInt32(11)
      self.metadata_[i].OutputUnchecked(out)
      out.putVarInt32(12)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_metadata().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.metadata_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Metadata%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kMetadataGroup = 1
  kMetadataname = 2
  kMetadatavalue = 3

  _TEXT = (
   "ErrorCode",  #   0
   "Metadata",  #   1
   "name",  #   2
   "value",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x37,
    0x77,
    0x69,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x2f,
    0x6d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x5f,
    0x72,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x63,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x72,
    0x2d,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x28,
    0x77,
    0x69,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x5f,
    0x6d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x5f,
    0x72,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x72,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x13,
    0x1a,
    0x08,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xff,
    0xe7,
    0x79,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['CarrierMetadata','CarrierMetadata_Metadata']
