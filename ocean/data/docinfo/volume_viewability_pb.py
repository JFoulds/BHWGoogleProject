# This file automatically generated by protocol-compiler from ocean/data/docinfo/volume_viewability.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class LocaleViewability_SourceDetails(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.imprint_ = None
    self.has_imprint_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def imprint(self):
    if self.imprint_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.imprint_ is None: self.imprint_ = VolumeImprint()
      finally:
        self.lazy_init_lock_.release()
    return self.imprint_

  def mutable_imprint(self): self.has_imprint_ = 1; return self.imprint()

  def clear_imprint(self):
    #Warning: this method does not acquire the lock.
    self.has_imprint_ = 0;
    if self.imprint_ is not None: self.imprint_.Clear()

  def has_imprint(self): return self.has_imprint_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_imprint()): self.mutable_imprint().MergeFrom(x.imprint())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ocean.LocaleViewability', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ocean.LocaleViewability')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ocean.LocaleViewability', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ocean.LocaleViewability', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ocean.LocaleViewability', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_imprint_ != x.has_imprint_: return 0
    if self.has_imprint_ and self.imprint_ != x.imprint_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (self.has_imprint_ and not self.imprint_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_imprint_): n += 1 + self.lengthString(self.imprint_.ByteSize())
    return n + 0

  def Clear(self):
    self.clear_imprint()

  def OutputUnchecked(self, out):
    if (self.has_imprint_):
      out.putVarInt32(66)
      out.putVarInt32(self.imprint_.ByteSize())
      self.imprint_.OutputUnchecked(out)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 60: break
      if tt == 66:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_imprint().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_imprint_:
      res+=prefix+"imprint <\n"
      res+=self.imprint_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

class LocaleViewability(ProtocolBuffer.ProtocolMessage):

  VIEW_NONE    =    0 
  VIEW_METADATA =   10 
  VIEW_SNIPPET =   20 
  VIEW_PARTIAL =   30 
  VIEW_FULL    =   40 

  _ViewType_NAMES = {
    0: "VIEW_NONE",
    10: "VIEW_METADATA",
    20: "VIEW_SNIPPET",
    30: "VIEW_PARTIAL",
    40: "VIEW_FULL",
  }

  def ViewType_Name(cls, x): return cls._ViewType_NAMES.get(x, "")
  ViewType_Name = classmethod(ViewType_Name)


  REASON_UNKNOWN =    0 
  REASON_NO_SOURCE =    1 
  REASON_KILLED =    2 
  REASON_CONTENT_TYPE =    3 
  REASON_SCANLESS =    4 
  REASON_OPEN_ACCESS =    5 
  REASON_OPTED_OUT =    6 
  REASON_QUALITY =    7 
  REASON_PARTNER =    8 
  REASON_REFERENCE =    9 
  REASON_COPYRIGHT =   10 
  REASON_PUBLIC_DOMAIN =   11 

  _ViewReason_NAMES = {
    0: "REASON_UNKNOWN",
    1: "REASON_NO_SOURCE",
    2: "REASON_KILLED",
    3: "REASON_CONTENT_TYPE",
    4: "REASON_SCANLESS",
    5: "REASON_OPEN_ACCESS",
    6: "REASON_OPTED_OUT",
    7: "REASON_QUALITY",
    8: "REASON_PARTNER",
    9: "REASON_REFERENCE",
    10: "REASON_COPYRIGHT",
    11: "REASON_PUBLIC_DOMAIN",
  }

  def ViewReason_Name(cls, x): return cls._ViewReason_NAMES.get(x, "")
  ViewReason_Name = classmethod(ViewReason_Name)

  def __init__(self, contents=None):
    self.view_type_ = 0
    self.view_reason_ = 0
    self.percent_book_shown_ = 0
    self.can_show_photos_ = 0
    self.can_display_ads_ = 0
    self.metadata_view_may_include_info_from_scans_ = 1
    self.bibkey_ = "EMPTY"
    self.client_id_ = ""
    self.sourcedetails_ = None
    self.allow_retail_syndication_ = 1
    self.has_view_type_ = 0
    self.has_view_reason_ = 0
    self.has_percent_book_shown_ = 0
    self.has_can_show_photos_ = 0
    self.has_can_display_ads_ = 0
    self.has_metadata_view_may_include_info_from_scans_ = 0
    self.has_bibkey_ = 0
    self.has_client_id_ = 0
    self.has_sourcedetails_ = 0
    self.has_allow_retail_syndication_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def view_type(self): return self.view_type_

  def set_view_type(self, x):
    self.has_view_type_ = 1
    self.view_type_ = x

  def clear_view_type(self):
    self.has_view_type_ = 0
    self.view_type_ = 0

  def has_view_type(self): return self.has_view_type_

  def view_reason(self): return self.view_reason_

  def set_view_reason(self, x):
    self.has_view_reason_ = 1
    self.view_reason_ = x

  def clear_view_reason(self):
    self.has_view_reason_ = 0
    self.view_reason_ = 0

  def has_view_reason(self): return self.has_view_reason_

  def percent_book_shown(self): return self.percent_book_shown_

  def set_percent_book_shown(self, x):
    self.has_percent_book_shown_ = 1
    self.percent_book_shown_ = x

  def clear_percent_book_shown(self):
    self.has_percent_book_shown_ = 0
    self.percent_book_shown_ = 0

  def has_percent_book_shown(self): return self.has_percent_book_shown_

  def can_show_photos(self): return self.can_show_photos_

  def set_can_show_photos(self, x):
    self.has_can_show_photos_ = 1
    self.can_show_photos_ = x

  def clear_can_show_photos(self):
    self.has_can_show_photos_ = 0
    self.can_show_photos_ = 0

  def has_can_show_photos(self): return self.has_can_show_photos_

  def can_display_ads(self): return self.can_display_ads_

  def set_can_display_ads(self, x):
    self.has_can_display_ads_ = 1
    self.can_display_ads_ = x

  def clear_can_display_ads(self):
    self.has_can_display_ads_ = 0
    self.can_display_ads_ = 0

  def has_can_display_ads(self): return self.has_can_display_ads_

  def metadata_view_may_include_info_from_scans(self): return self.metadata_view_may_include_info_from_scans_

  def set_metadata_view_may_include_info_from_scans(self, x):
    self.has_metadata_view_may_include_info_from_scans_ = 1
    self.metadata_view_may_include_info_from_scans_ = x

  def clear_metadata_view_may_include_info_from_scans(self):
    self.has_metadata_view_may_include_info_from_scans_ = 0
    self.metadata_view_may_include_info_from_scans_ = 1

  def has_metadata_view_may_include_info_from_scans(self): return self.has_metadata_view_may_include_info_from_scans_

  def bibkey(self): return self.bibkey_

  def set_bibkey(self, x):
    self.has_bibkey_ = 1
    self.bibkey_ = x

  def clear_bibkey(self):
    self.has_bibkey_ = 0
    self.bibkey_ = "EMPTY"

  def has_bibkey(self): return self.has_bibkey_

  def client_id(self): return self.client_id_

  def set_client_id(self, x):
    self.has_client_id_ = 1
    self.client_id_ = x

  def clear_client_id(self):
    self.has_client_id_ = 0
    self.client_id_ = ""

  def has_client_id(self): return self.has_client_id_

  def sourcedetails(self):
    if self.sourcedetails_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.sourcedetails_ is None: self.sourcedetails_ = LocaleViewability_SourceDetails()
      finally:
        self.lazy_init_lock_.release()
    return self.sourcedetails_

  def mutable_sourcedetails(self): self.has_sourcedetails_ = 1; return self.sourcedetails()

  def clear_sourcedetails(self):
    #Warning: this method does not acquire the lock.
    self.has_sourcedetails_ = 0;
    if self.sourcedetails_ is not None: self.sourcedetails_.Clear()

  def has_sourcedetails(self): return self.has_sourcedetails_

  def allow_retail_syndication(self): return self.allow_retail_syndication_

  def set_allow_retail_syndication(self, x):
    self.has_allow_retail_syndication_ = 1
    self.allow_retail_syndication_ = x

  def clear_allow_retail_syndication(self):
    self.has_allow_retail_syndication_ = 0
    self.allow_retail_syndication_ = 1

  def has_allow_retail_syndication(self): return self.has_allow_retail_syndication_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_view_type()): self.set_view_type(x.view_type())
    if (x.has_view_reason()): self.set_view_reason(x.view_reason())
    if (x.has_percent_book_shown()): self.set_percent_book_shown(x.percent_book_shown())
    if (x.has_can_show_photos()): self.set_can_show_photos(x.can_show_photos())
    if (x.has_can_display_ads()): self.set_can_display_ads(x.can_display_ads())
    if (x.has_metadata_view_may_include_info_from_scans()): self.set_metadata_view_may_include_info_from_scans(x.metadata_view_may_include_info_from_scans())
    if (x.has_bibkey()): self.set_bibkey(x.bibkey())
    if (x.has_client_id()): self.set_client_id(x.client_id())
    if (x.has_sourcedetails()): self.mutable_sourcedetails().MergeFrom(x.sourcedetails())
    if (x.has_allow_retail_syndication()): self.set_allow_retail_syndication(x.allow_retail_syndication())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ocean.LocaleViewability', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ocean.LocaleViewability')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ocean.LocaleViewability', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ocean.LocaleViewability', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ocean.LocaleViewability', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_view_type_ != x.has_view_type_: return 0
    if self.has_view_type_ and self.view_type_ != x.view_type_: return 0
    if self.has_view_reason_ != x.has_view_reason_: return 0
    if self.has_view_reason_ and self.view_reason_ != x.view_reason_: return 0
    if self.has_percent_book_shown_ != x.has_percent_book_shown_: return 0
    if self.has_percent_book_shown_ and self.percent_book_shown_ != x.percent_book_shown_: return 0
    if self.has_can_show_photos_ != x.has_can_show_photos_: return 0
    if self.has_can_show_photos_ and self.can_show_photos_ != x.can_show_photos_: return 0
    if self.has_can_display_ads_ != x.has_can_display_ads_: return 0
    if self.has_can_display_ads_ and self.can_display_ads_ != x.can_display_ads_: return 0
    if self.has_metadata_view_may_include_info_from_scans_ != x.has_metadata_view_may_include_info_from_scans_: return 0
    if self.has_metadata_view_may_include_info_from_scans_ and self.metadata_view_may_include_info_from_scans_ != x.metadata_view_may_include_info_from_scans_: return 0
    if self.has_bibkey_ != x.has_bibkey_: return 0
    if self.has_bibkey_ and self.bibkey_ != x.bibkey_: return 0
    if self.has_client_id_ != x.has_client_id_: return 0
    if self.has_client_id_ and self.client_id_ != x.client_id_: return 0
    if self.has_sourcedetails_ != x.has_sourcedetails_: return 0
    if self.has_sourcedetails_ and self.sourcedetails_ != x.sourcedetails_: return 0
    if self.has_allow_retail_syndication_ != x.has_allow_retail_syndication_: return 0
    if self.has_allow_retail_syndication_ and self.allow_retail_syndication_ != x.allow_retail_syndication_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_view_type_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: view_type not set.')
    if (not self.has_percent_book_shown_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: percent_book_shown not set.')
    if (self.has_sourcedetails_ and not self.sourcedetails_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.view_type_)
    if (self.has_view_reason_): n += 1 + self.lengthVarInt64(self.view_reason_)
    n += self.lengthVarInt64(self.percent_book_shown_)
    if (self.has_can_show_photos_): n += 2
    if (self.has_can_display_ads_): n += 2
    if (self.has_metadata_view_may_include_info_from_scans_): n += 2
    if (self.has_bibkey_): n += 1 + self.lengthString(len(self.bibkey_))
    if (self.has_client_id_): n += 1 + self.lengthString(len(self.client_id_))
    if (self.has_sourcedetails_): n += 2 + self.sourcedetails_.ByteSize()
    if (self.has_allow_retail_syndication_): n += 2
    return n + 2

  def Clear(self):
    self.clear_view_type()
    self.clear_view_reason()
    self.clear_percent_book_shown()
    self.clear_can_show_photos()
    self.clear_can_display_ads()
    self.clear_metadata_view_may_include_info_from_scans()
    self.clear_bibkey()
    self.clear_client_id()
    self.clear_sourcedetails()
    self.clear_allow_retail_syndication()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.view_type_)
    out.putVarInt32(16)
    out.putVarInt32(self.percent_book_shown_)
    if (self.has_can_show_photos_):
      out.putVarInt32(24)
      out.putBoolean(self.can_show_photos_)
    if (self.has_can_display_ads_):
      out.putVarInt32(32)
      out.putBoolean(self.can_display_ads_)
    if (self.has_bibkey_):
      out.putVarInt32(42)
      out.putPrefixedString(self.bibkey_)
    if (self.has_client_id_):
      out.putVarInt32(50)
      out.putPrefixedString(self.client_id_)
    if (self.has_sourcedetails_):
      out.putVarInt32(59)
      self.sourcedetails_.OutputUnchecked(out)
      out.putVarInt32(60)
    if (self.has_metadata_view_may_include_info_from_scans_):
      out.putVarInt32(72)
      out.putBoolean(self.metadata_view_may_include_info_from_scans_)
    if (self.has_allow_retail_syndication_):
      out.putVarInt32(80)
      out.putBoolean(self.allow_retail_syndication_)
    if (self.has_view_reason_):
      out.putVarInt32(88)
      out.putVarInt32(self.view_reason_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_view_type(d.getVarInt32())
        continue
      if tt == 16:
        self.set_percent_book_shown(d.getVarInt32())
        continue
      if tt == 24:
        self.set_can_show_photos(d.getBoolean())
        continue
      if tt == 32:
        self.set_can_display_ads(d.getBoolean())
        continue
      if tt == 42:
        self.set_bibkey(d.getPrefixedString())
        continue
      if tt == 50:
        self.set_client_id(d.getPrefixedString())
        continue
      if tt == 59:
        self.mutable_sourcedetails().TryMerge(d)
        continue
      if tt == 72:
        self.set_metadata_view_may_include_info_from_scans(d.getBoolean())
        continue
      if tt == 80:
        self.set_allow_retail_syndication(d.getBoolean())
        continue
      if tt == 88:
        self.set_view_reason(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_view_type_: res+=prefix+("view_type: %s\n" % self.DebugFormatInt32(self.view_type_))
    if self.has_view_reason_: res+=prefix+("view_reason: %s\n" % self.DebugFormatInt32(self.view_reason_))
    if self.has_percent_book_shown_: res+=prefix+("percent_book_shown: %s\n" % self.DebugFormatInt32(self.percent_book_shown_))
    if self.has_can_show_photos_: res+=prefix+("can_show_photos: %s\n" % self.DebugFormatBool(self.can_show_photos_))
    if self.has_can_display_ads_: res+=prefix+("can_display_ads: %s\n" % self.DebugFormatBool(self.can_display_ads_))
    if self.has_metadata_view_may_include_info_from_scans_: res+=prefix+("metadata_view_may_include_info_from_scans: %s\n" % self.DebugFormatBool(self.metadata_view_may_include_info_from_scans_))
    if self.has_bibkey_: res+=prefix+("bibkey: %s\n" % self.DebugFormatString(self.bibkey_))
    if self.has_client_id_: res+=prefix+("client_id: %s\n" % self.DebugFormatString(self.client_id_))
    if self.has_sourcedetails_:
      res+=prefix+"SourceDetails {\n"
      res+=self.sourcedetails_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_allow_retail_syndication_: res+=prefix+("allow_retail_syndication: %s\n" % self.DebugFormatBool(self.allow_retail_syndication_))
    return res

  kview_type = 1
  kview_reason = 11
  kpercent_book_shown = 2
  kcan_show_photos = 3
  kcan_display_ads = 4
  kmetadata_view_may_include_info_from_scans = 9
  kbibkey = 5
  kclient_id = 6
  kSourceDetailsGroup = 7
  kSourceDetailsimprint = 8
  kallow_retail_syndication = 10

  _TEXT = (
   "ErrorCode",  #   0
   "view_type",  #   1
   "percent_book_shown",  #   2
   "can_show_photos",  #   3
   "can_display_ads",  #   4
   "bibkey",  #   5
   "client_id",  #   6
   "SourceDetails",  #   7
   "imprint",  #   8
   "metadata_view_may_include_info_from_scans",  #   9
   "allow_retail_syndication",  #  10
   "view_reason",  #  11
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.STARTGROUP,  #   7

   ProtocolBuffer.Encoder.STRING,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2b,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x2f,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2f,
    0x64,
    0x6f,
    0x63,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2f,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x65,
    0x5f,
    0x76,
    0x69,
    0x65,
    0x77,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x17,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x56,
    0x69,
    0x65,
    0x77,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x13,
    0x1a,
    0x09,
    0x76,
    0x69,
    0x65,
    0x77,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x68,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x76,
    0x69,
    0x65,
    0x77,
    0x5f,
    0x72,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x68,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x70,
    0x65,
    0x72,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x5f,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x63,
    0x61,
    0x6e,
    0x5f,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x5f,
    0x70,
    0x68,
    0x6f,
    0x74,
    0x6f,
    0x73,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x63,
    0x61,
    0x6e,
    0x5f,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x5f,
    0x61,
    0x64,
    0x73,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x29,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x5f,
    0x76,
    0x69,
    0x65,
    0x77,
    0x5f,
    0x6d,
    0x61,
    0x79,
    0x5f,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x5f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x5f,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x5f,
    0x73,
    0x63,
    0x61,
    0x6e,
    0x73,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x62,
    0x69,
    0x62,
    0x6b,
    0x65,
    0x79,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x42,
    0x05,
    0x45,
    0x4d,
    0x50,
    0x54,
    0x59,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x07,
    0x22,
    0x45,
    0x4d,
    0x50,
    0x54,
    0x59,
    0x22,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x63,
    0x6c,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x69,
    0x64,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x42,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x22,
    0x22,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x44,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6c,
    0x73,
    0x20,
    0x07,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x44,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6c,
    0x73,
    0x2e,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x74,
    0x20,
    0x08,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x13,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x2e,
    0x56,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x65,
    0x49,
    0x6d,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x74,
    0x60,
    0x08,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x04,
    0x77,
    0x65,
    0x61,
    0x6b,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x5f,
    0x72,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6c,
    0x5f,
    0x73,
    0x79,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x08,
    0x56,
    0x69,
    0x65,
    0x77,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x56,
    0x49,
    0x45,
    0x57,
    0x5f,
    0x4e,
    0x4f,
    0x4e,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x56,
    0x49,
    0x45,
    0x57,
    0x5f,
    0x4d,
    0x45,
    0x54,
    0x41,
    0x44,
    0x41,
    0x54,
    0x41,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x56,
    0x49,
    0x45,
    0x57,
    0x5f,
    0x53,
    0x4e,
    0x49,
    0x50,
    0x50,
    0x45,
    0x54,
    0x98,
    0x01,
    0x14,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x56,
    0x49,
    0x45,
    0x57,
    0x5f,
    0x50,
    0x41,
    0x52,
    0x54,
    0x49,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x1e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x56,
    0x49,
    0x45,
    0x57,
    0x5f,
    0x46,
    0x55,
    0x4c,
    0x4c,
    0x98,
    0x01,
    0x28,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0a,
    0x56,
    0x69,
    0x65,
    0x77,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x55,
    0x4e,
    0x4b,
    0x4e,
    0x4f,
    0x57,
    0x4e,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x4e,
    0x4f,
    0x5f,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x4b,
    0x49,
    0x4c,
    0x4c,
    0x45,
    0x44,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x53,
    0x43,
    0x41,
    0x4e,
    0x4c,
    0x45,
    0x53,
    0x53,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x4f,
    0x50,
    0x45,
    0x4e,
    0x5f,
    0x41,
    0x43,
    0x43,
    0x45,
    0x53,
    0x53,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x4f,
    0x50,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x4f,
    0x55,
    0x54,
    0x98,
    0x01,
    0x06,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x51,
    0x55,
    0x41,
    0x4c,
    0x49,
    0x54,
    0x59,
    0x98,
    0x01,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x50,
    0x41,
    0x52,
    0x54,
    0x4e,
    0x45,
    0x52,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x52,
    0x45,
    0x46,
    0x45,
    0x52,
    0x45,
    0x4e,
    0x43,
    0x45,
    0x98,
    0x01,
    0x09,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x43,
    0x4f,
    0x50,
    0x59,
    0x52,
    0x49,
    0x47,
    0x48,
    0x54,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x52,
    0x45,
    0x41,
    0x53,
    0x4f,
    0x4e,
    0x5f,
    0x50,
    0x55,
    0x42,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x44,
    0x4f,
    0x4d,
    0x41,
    0x49,
    0x4e,
    0x98,
    0x01,
    0x0b,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class VolumeViewability_Locale(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.locale_ = ""
    self.deprecated_view_type_ = 0
    self.viewability_ = None
    self.has_locale_ = 0
    self.has_deprecated_view_type_ = 0
    self.has_viewability_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def locale(self): return self.locale_

  def set_locale(self, x):
    self.has_locale_ = 1
    self.locale_ = x

  def clear_locale(self):
    self.has_locale_ = 0
    self.locale_ = ""

  def has_locale(self): return self.has_locale_

  def deprecated_view_type(self): return self.deprecated_view_type_

  def set_deprecated_view_type(self, x):
    self.has_deprecated_view_type_ = 1
    self.deprecated_view_type_ = x

  def clear_deprecated_view_type(self):
    self.has_deprecated_view_type_ = 0
    self.deprecated_view_type_ = 0

  def has_deprecated_view_type(self): return self.has_deprecated_view_type_

  def viewability(self):
    if self.viewability_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.viewability_ is None: self.viewability_ = LocaleViewability()
      finally:
        self.lazy_init_lock_.release()
    return self.viewability_

  def mutable_viewability(self): self.has_viewability_ = 1; return self.viewability()

  def clear_viewability(self):
    #Warning: this method does not acquire the lock.
    self.has_viewability_ = 0;
    if self.viewability_ is not None: self.viewability_.Clear()

  def has_viewability(self): return self.has_viewability_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_locale()): self.set_locale(x.locale())
    if (x.has_deprecated_view_type()): self.set_deprecated_view_type(x.deprecated_view_type())
    if (x.has_viewability()): self.mutable_viewability().MergeFrom(x.viewability())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ocean.VolumeViewability', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ocean.VolumeViewability')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ocean.VolumeViewability', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ocean.VolumeViewability', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ocean.VolumeViewability', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_locale_ != x.has_locale_: return 0
    if self.has_locale_ and self.locale_ != x.locale_: return 0
    if self.has_deprecated_view_type_ != x.has_deprecated_view_type_: return 0
    if self.has_deprecated_view_type_ and self.deprecated_view_type_ != x.deprecated_view_type_: return 0
    if self.has_viewability_ != x.has_viewability_: return 0
    if self.has_viewability_ and self.viewability_ != x.viewability_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_locale_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: locale not set.')
    if (self.has_viewability_ and not self.viewability_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.locale_))
    if (self.has_deprecated_view_type_): n += 1 + self.lengthVarInt64(self.deprecated_view_type_)
    if (self.has_viewability_): n += 1 + self.lengthString(self.viewability_.ByteSize())
    return n + 1

  def Clear(self):
    self.clear_locale()
    self.clear_deprecated_view_type()
    self.clear_viewability()

  def OutputUnchecked(self, out):
    out.putVarInt32(18)
    out.putPrefixedString(self.locale_)
    if (self.has_deprecated_view_type_):
      out.putVarInt32(24)
      out.putVarInt32(self.deprecated_view_type_)
    if (self.has_viewability_):
      out.putVarInt32(42)
      out.putVarInt32(self.viewability_.ByteSize())
      self.viewability_.OutputUnchecked(out)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 18:
        self.set_locale(d.getPrefixedString())
        continue
      if tt == 24:
        self.set_deprecated_view_type(d.getVarInt32())
        continue
      if tt == 42:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_viewability().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_locale_: res+=prefix+("locale: %s\n" % self.DebugFormatString(self.locale_))
    if self.has_deprecated_view_type_: res+=prefix+("DEPRECATED_view_type: %s\n" % self.DebugFormatInt32(self.deprecated_view_type_))
    if self.has_viewability_:
      res+=prefix+"viewability <\n"
      res+=self.viewability_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

class VolumeViewability(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.locale_ = []
    self.deprecated_default_view_type_ = 0
    self.default_viewability_ = None
    self.has_deprecated_default_view_type_ = 0
    self.has_default_viewability_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def locale_size(self): return len(self.locale_)
  def locale_list(self): return self.locale_

  def locale(self, i):
    return self.locale_[i]

  def mutable_locale(self, i):
    return self.locale_[i]

  def add_locale(self):
    x = VolumeViewability_Locale()
    self.locale_.append(x)
    return x

  def clear_locale(self):
    self.locale_ = []
  def deprecated_default_view_type(self): return self.deprecated_default_view_type_

  def set_deprecated_default_view_type(self, x):
    self.has_deprecated_default_view_type_ = 1
    self.deprecated_default_view_type_ = x

  def clear_deprecated_default_view_type(self):
    self.has_deprecated_default_view_type_ = 0
    self.deprecated_default_view_type_ = 0

  def has_deprecated_default_view_type(self): return self.has_deprecated_default_view_type_

  def default_viewability(self):
    if self.default_viewability_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.default_viewability_ is None: self.default_viewability_ = LocaleViewability()
      finally:
        self.lazy_init_lock_.release()
    return self.default_viewability_

  def mutable_default_viewability(self): self.has_default_viewability_ = 1; return self.default_viewability()

  def clear_default_viewability(self):
    #Warning: this method does not acquire the lock.
    self.has_default_viewability_ = 0;
    if self.default_viewability_ is not None: self.default_viewability_.Clear()

  def has_default_viewability(self): return self.has_default_viewability_


  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.locale_size()): self.add_locale().CopyFrom(x.locale(i))
    if (x.has_deprecated_default_view_type()): self.set_deprecated_default_view_type(x.deprecated_default_view_type())
    if (x.has_default_viewability()): self.mutable_default_viewability().MergeFrom(x.default_viewability())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'ocean.VolumeViewability', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'ocean.VolumeViewability')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'ocean.VolumeViewability', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'ocean.VolumeViewability', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'ocean.VolumeViewability', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.locale_) != len(x.locale_): return 0
    for e1, e2 in zip(self.locale_, x.locale_):
      if e1 != e2: return 0
    if self.has_deprecated_default_view_type_ != x.has_deprecated_default_view_type_: return 0
    if self.has_deprecated_default_view_type_ and self.deprecated_default_view_type_ != x.deprecated_default_view_type_: return 0
    if self.has_default_viewability_ != x.has_default_viewability_: return 0
    if self.has_default_viewability_ and self.default_viewability_ != x.default_viewability_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.locale_)):
      if (not self.locale_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_default_viewability_ and not self.default_viewability_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.locale_)
    for i in xrange(len(self.locale_)): n += self.locale_[i].ByteSize()
    if (self.has_deprecated_default_view_type_): n += 1 + self.lengthVarInt64(self.deprecated_default_view_type_)
    if (self.has_default_viewability_): n += 1 + self.lengthString(self.default_viewability_.ByteSize())
    return n + 0

  def Clear(self):
    self.clear_locale()
    self.clear_deprecated_default_view_type()
    self.clear_default_viewability()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.locale_)):
      out.putVarInt32(11)
      self.locale_[i].OutputUnchecked(out)
      out.putVarInt32(12)
    if (self.has_deprecated_default_view_type_):
      out.putVarInt32(32)
      out.putVarInt32(self.deprecated_default_view_type_)
    if (self.has_default_viewability_):
      out.putVarInt32(50)
      out.putVarInt32(self.default_viewability_.ByteSize())
      self.default_viewability_.OutputUnchecked(out)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_locale().TryMerge(d)
        continue
      if tt == 32:
        self.set_deprecated_default_view_type(d.getVarInt32())
        continue
      if tt == 50:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_default_viewability().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.locale_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Locale%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_deprecated_default_view_type_: res+=prefix+("DEPRECATED_default_view_type: %s\n" % self.DebugFormatInt32(self.deprecated_default_view_type_))
    if self.has_default_viewability_:
      res+=prefix+"default_viewability <\n"
      res+=self.default_viewability_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

  kLocaleGroup = 1
  kLocalelocale = 2
  kLocaleDEPRECATED_view_type = 3
  kLocaleviewability = 5
  kDEPRECATED_default_view_type = 4
  kdefault_viewability = 6

  _TEXT = (
   "ErrorCode",  #   0
   "Locale",  #   1
   "locale",  #   2
   "DEPRECATED_view_type",  #   3
   "DEPRECATED_default_view_type",  #   4
   "viewability",  #   5
   "default_viewability",  #   6
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2b,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x2f,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2f,
    0x64,
    0x6f,
    0x63,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2f,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x65,
    0x5f,
    0x76,
    0x69,
    0x65,
    0x77,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x17,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x2e,
    0x56,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x65,
    0x56,
    0x69,
    0x65,
    0x77,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x13,
    0x1a,
    0x06,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x2e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x2e,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x76,
    0x69,
    0x65,
    0x77,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x2e,
    0x76,
    0x69,
    0x65,
    0x77,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x17,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x56,
    0x69,
    0x65,
    0x77,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x5f,
    0x76,
    0x69,
    0x65,
    0x77,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x5f,
    0x76,
    0x69,
    0x65,
    0x77,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x17,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x56,
    0x69,
    0x65,
    0x77,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['LocaleViewability','LocaleViewability_SourceDetails','VolumeViewability','VolumeViewability_Locale']
