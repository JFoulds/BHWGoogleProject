# This file automatically generated by protocol-compiler from location/country/postaladdress.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class PostalAddress(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 3514611 

  _TypeId_NAMES = {
    3514611: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.country_name_code_ = ""
    self.country_name_ = ""
    self.language_code_ = ""
    self.administrative_area_name_ = ""
    self.sub_administrative_area_name_ = ""
    self.locality_name_ = ""
    self.dependent_locality_name_ = ""
    self.thoroughfare_name_ = ""
    self.thoroughfare_pre_direction_ = ""
    self.thoroughfare_leading_type_ = ""
    self.thoroughfare_trailing_type_ = ""
    self.thoroughfare_post_direction_ = ""
    self.thoroughfare_number_ = ""
    self.dependent_thoroughfares_indicator_ = ""
    self.dependent_thoroughfares_connector_ = ""
    self.dependent_thoroughfares_type_ = ""
    self.dependent_thoroughfare_name_ = ""
    self.dependent_thoroughfare_pre_direction_ = ""
    self.dependent_thoroughfare_leading_type_ = ""
    self.dependent_thoroughfare_trailing_type_ = ""
    self.dependent_thoroughfare_post_direction_ = ""
    self.postal_code_number_ = ""
    self.postal_code_number_extension_ = ""
    self.sorting_code_ = ""
    self.premise_name_ = ""
    self.sub_premise_name_ = ""
    self.address_line_ = []
    self.firm_name_ = ""
    self.recipient_name_ = ""
    self.has_country_name_code_ = 0
    self.has_country_name_ = 0
    self.has_language_code_ = 0
    self.has_administrative_area_name_ = 0
    self.has_sub_administrative_area_name_ = 0
    self.has_locality_name_ = 0
    self.has_dependent_locality_name_ = 0
    self.has_thoroughfare_name_ = 0
    self.has_thoroughfare_pre_direction_ = 0
    self.has_thoroughfare_leading_type_ = 0
    self.has_thoroughfare_trailing_type_ = 0
    self.has_thoroughfare_post_direction_ = 0
    self.has_thoroughfare_number_ = 0
    self.has_dependent_thoroughfares_indicator_ = 0
    self.has_dependent_thoroughfares_connector_ = 0
    self.has_dependent_thoroughfares_type_ = 0
    self.has_dependent_thoroughfare_name_ = 0
    self.has_dependent_thoroughfare_pre_direction_ = 0
    self.has_dependent_thoroughfare_leading_type_ = 0
    self.has_dependent_thoroughfare_trailing_type_ = 0
    self.has_dependent_thoroughfare_post_direction_ = 0
    self.has_postal_code_number_ = 0
    self.has_postal_code_number_extension_ = 0
    self.has_sorting_code_ = 0
    self.has_premise_name_ = 0
    self.has_sub_premise_name_ = 0
    self.has_firm_name_ = 0
    self.has_recipient_name_ = 0
    if contents is not None: self.MergeFromString(contents)

  def country_name_code(self): return self.country_name_code_

  def set_country_name_code(self, x):
    self.has_country_name_code_ = 1
    self.country_name_code_ = x

  def clear_country_name_code(self):
    self.has_country_name_code_ = 0
    self.country_name_code_ = ""

  def has_country_name_code(self): return self.has_country_name_code_

  def country_name(self): return self.country_name_

  def set_country_name(self, x):
    self.has_country_name_ = 1
    self.country_name_ = x

  def clear_country_name(self):
    self.has_country_name_ = 0
    self.country_name_ = ""

  def has_country_name(self): return self.has_country_name_

  def language_code(self): return self.language_code_

  def set_language_code(self, x):
    self.has_language_code_ = 1
    self.language_code_ = x

  def clear_language_code(self):
    self.has_language_code_ = 0
    self.language_code_ = ""

  def has_language_code(self): return self.has_language_code_

  def administrative_area_name(self): return self.administrative_area_name_

  def set_administrative_area_name(self, x):
    self.has_administrative_area_name_ = 1
    self.administrative_area_name_ = x

  def clear_administrative_area_name(self):
    self.has_administrative_area_name_ = 0
    self.administrative_area_name_ = ""

  def has_administrative_area_name(self): return self.has_administrative_area_name_

  def sub_administrative_area_name(self): return self.sub_administrative_area_name_

  def set_sub_administrative_area_name(self, x):
    self.has_sub_administrative_area_name_ = 1
    self.sub_administrative_area_name_ = x

  def clear_sub_administrative_area_name(self):
    self.has_sub_administrative_area_name_ = 0
    self.sub_administrative_area_name_ = ""

  def has_sub_administrative_area_name(self): return self.has_sub_administrative_area_name_

  def locality_name(self): return self.locality_name_

  def set_locality_name(self, x):
    self.has_locality_name_ = 1
    self.locality_name_ = x

  def clear_locality_name(self):
    self.has_locality_name_ = 0
    self.locality_name_ = ""

  def has_locality_name(self): return self.has_locality_name_

  def dependent_locality_name(self): return self.dependent_locality_name_

  def set_dependent_locality_name(self, x):
    self.has_dependent_locality_name_ = 1
    self.dependent_locality_name_ = x

  def clear_dependent_locality_name(self):
    self.has_dependent_locality_name_ = 0
    self.dependent_locality_name_ = ""

  def has_dependent_locality_name(self): return self.has_dependent_locality_name_

  def thoroughfare_name(self): return self.thoroughfare_name_

  def set_thoroughfare_name(self, x):
    self.has_thoroughfare_name_ = 1
    self.thoroughfare_name_ = x

  def clear_thoroughfare_name(self):
    self.has_thoroughfare_name_ = 0
    self.thoroughfare_name_ = ""

  def has_thoroughfare_name(self): return self.has_thoroughfare_name_

  def thoroughfare_pre_direction(self): return self.thoroughfare_pre_direction_

  def set_thoroughfare_pre_direction(self, x):
    self.has_thoroughfare_pre_direction_ = 1
    self.thoroughfare_pre_direction_ = x

  def clear_thoroughfare_pre_direction(self):
    self.has_thoroughfare_pre_direction_ = 0
    self.thoroughfare_pre_direction_ = ""

  def has_thoroughfare_pre_direction(self): return self.has_thoroughfare_pre_direction_

  def thoroughfare_leading_type(self): return self.thoroughfare_leading_type_

  def set_thoroughfare_leading_type(self, x):
    self.has_thoroughfare_leading_type_ = 1
    self.thoroughfare_leading_type_ = x

  def clear_thoroughfare_leading_type(self):
    self.has_thoroughfare_leading_type_ = 0
    self.thoroughfare_leading_type_ = ""

  def has_thoroughfare_leading_type(self): return self.has_thoroughfare_leading_type_

  def thoroughfare_trailing_type(self): return self.thoroughfare_trailing_type_

  def set_thoroughfare_trailing_type(self, x):
    self.has_thoroughfare_trailing_type_ = 1
    self.thoroughfare_trailing_type_ = x

  def clear_thoroughfare_trailing_type(self):
    self.has_thoroughfare_trailing_type_ = 0
    self.thoroughfare_trailing_type_ = ""

  def has_thoroughfare_trailing_type(self): return self.has_thoroughfare_trailing_type_

  def thoroughfare_post_direction(self): return self.thoroughfare_post_direction_

  def set_thoroughfare_post_direction(self, x):
    self.has_thoroughfare_post_direction_ = 1
    self.thoroughfare_post_direction_ = x

  def clear_thoroughfare_post_direction(self):
    self.has_thoroughfare_post_direction_ = 0
    self.thoroughfare_post_direction_ = ""

  def has_thoroughfare_post_direction(self): return self.has_thoroughfare_post_direction_

  def thoroughfare_number(self): return self.thoroughfare_number_

  def set_thoroughfare_number(self, x):
    self.has_thoroughfare_number_ = 1
    self.thoroughfare_number_ = x

  def clear_thoroughfare_number(self):
    self.has_thoroughfare_number_ = 0
    self.thoroughfare_number_ = ""

  def has_thoroughfare_number(self): return self.has_thoroughfare_number_

  def dependent_thoroughfares_indicator(self): return self.dependent_thoroughfares_indicator_

  def set_dependent_thoroughfares_indicator(self, x):
    self.has_dependent_thoroughfares_indicator_ = 1
    self.dependent_thoroughfares_indicator_ = x

  def clear_dependent_thoroughfares_indicator(self):
    self.has_dependent_thoroughfares_indicator_ = 0
    self.dependent_thoroughfares_indicator_ = ""

  def has_dependent_thoroughfares_indicator(self): return self.has_dependent_thoroughfares_indicator_

  def dependent_thoroughfares_connector(self): return self.dependent_thoroughfares_connector_

  def set_dependent_thoroughfares_connector(self, x):
    self.has_dependent_thoroughfares_connector_ = 1
    self.dependent_thoroughfares_connector_ = x

  def clear_dependent_thoroughfares_connector(self):
    self.has_dependent_thoroughfares_connector_ = 0
    self.dependent_thoroughfares_connector_ = ""

  def has_dependent_thoroughfares_connector(self): return self.has_dependent_thoroughfares_connector_

  def dependent_thoroughfares_type(self): return self.dependent_thoroughfares_type_

  def set_dependent_thoroughfares_type(self, x):
    self.has_dependent_thoroughfares_type_ = 1
    self.dependent_thoroughfares_type_ = x

  def clear_dependent_thoroughfares_type(self):
    self.has_dependent_thoroughfares_type_ = 0
    self.dependent_thoroughfares_type_ = ""

  def has_dependent_thoroughfares_type(self): return self.has_dependent_thoroughfares_type_

  def dependent_thoroughfare_name(self): return self.dependent_thoroughfare_name_

  def set_dependent_thoroughfare_name(self, x):
    self.has_dependent_thoroughfare_name_ = 1
    self.dependent_thoroughfare_name_ = x

  def clear_dependent_thoroughfare_name(self):
    self.has_dependent_thoroughfare_name_ = 0
    self.dependent_thoroughfare_name_ = ""

  def has_dependent_thoroughfare_name(self): return self.has_dependent_thoroughfare_name_

  def dependent_thoroughfare_pre_direction(self): return self.dependent_thoroughfare_pre_direction_

  def set_dependent_thoroughfare_pre_direction(self, x):
    self.has_dependent_thoroughfare_pre_direction_ = 1
    self.dependent_thoroughfare_pre_direction_ = x

  def clear_dependent_thoroughfare_pre_direction(self):
    self.has_dependent_thoroughfare_pre_direction_ = 0
    self.dependent_thoroughfare_pre_direction_ = ""

  def has_dependent_thoroughfare_pre_direction(self): return self.has_dependent_thoroughfare_pre_direction_

  def dependent_thoroughfare_leading_type(self): return self.dependent_thoroughfare_leading_type_

  def set_dependent_thoroughfare_leading_type(self, x):
    self.has_dependent_thoroughfare_leading_type_ = 1
    self.dependent_thoroughfare_leading_type_ = x

  def clear_dependent_thoroughfare_leading_type(self):
    self.has_dependent_thoroughfare_leading_type_ = 0
    self.dependent_thoroughfare_leading_type_ = ""

  def has_dependent_thoroughfare_leading_type(self): return self.has_dependent_thoroughfare_leading_type_

  def dependent_thoroughfare_trailing_type(self): return self.dependent_thoroughfare_trailing_type_

  def set_dependent_thoroughfare_trailing_type(self, x):
    self.has_dependent_thoroughfare_trailing_type_ = 1
    self.dependent_thoroughfare_trailing_type_ = x

  def clear_dependent_thoroughfare_trailing_type(self):
    self.has_dependent_thoroughfare_trailing_type_ = 0
    self.dependent_thoroughfare_trailing_type_ = ""

  def has_dependent_thoroughfare_trailing_type(self): return self.has_dependent_thoroughfare_trailing_type_

  def dependent_thoroughfare_post_direction(self): return self.dependent_thoroughfare_post_direction_

  def set_dependent_thoroughfare_post_direction(self, x):
    self.has_dependent_thoroughfare_post_direction_ = 1
    self.dependent_thoroughfare_post_direction_ = x

  def clear_dependent_thoroughfare_post_direction(self):
    self.has_dependent_thoroughfare_post_direction_ = 0
    self.dependent_thoroughfare_post_direction_ = ""

  def has_dependent_thoroughfare_post_direction(self): return self.has_dependent_thoroughfare_post_direction_

  def postal_code_number(self): return self.postal_code_number_

  def set_postal_code_number(self, x):
    self.has_postal_code_number_ = 1
    self.postal_code_number_ = x

  def clear_postal_code_number(self):
    self.has_postal_code_number_ = 0
    self.postal_code_number_ = ""

  def has_postal_code_number(self): return self.has_postal_code_number_

  def postal_code_number_extension(self): return self.postal_code_number_extension_

  def set_postal_code_number_extension(self, x):
    self.has_postal_code_number_extension_ = 1
    self.postal_code_number_extension_ = x

  def clear_postal_code_number_extension(self):
    self.has_postal_code_number_extension_ = 0
    self.postal_code_number_extension_ = ""

  def has_postal_code_number_extension(self): return self.has_postal_code_number_extension_

  def sorting_code(self): return self.sorting_code_

  def set_sorting_code(self, x):
    self.has_sorting_code_ = 1
    self.sorting_code_ = x

  def clear_sorting_code(self):
    self.has_sorting_code_ = 0
    self.sorting_code_ = ""

  def has_sorting_code(self): return self.has_sorting_code_

  def premise_name(self): return self.premise_name_

  def set_premise_name(self, x):
    self.has_premise_name_ = 1
    self.premise_name_ = x

  def clear_premise_name(self):
    self.has_premise_name_ = 0
    self.premise_name_ = ""

  def has_premise_name(self): return self.has_premise_name_

  def sub_premise_name(self): return self.sub_premise_name_

  def set_sub_premise_name(self, x):
    self.has_sub_premise_name_ = 1
    self.sub_premise_name_ = x

  def clear_sub_premise_name(self):
    self.has_sub_premise_name_ = 0
    self.sub_premise_name_ = ""

  def has_sub_premise_name(self): return self.has_sub_premise_name_

  def address_line_size(self): return len(self.address_line_)
  def address_line_list(self): return self.address_line_

  def address_line(self, i):
    return self.address_line_[i]

  def set_address_line(self, i, x):
    self.address_line_[i] = x

  def add_address_line(self, x):
    self.address_line_.append(x)

  def clear_address_line(self):
    self.address_line_ = []

  def firm_name(self): return self.firm_name_

  def set_firm_name(self, x):
    self.has_firm_name_ = 1
    self.firm_name_ = x

  def clear_firm_name(self):
    self.has_firm_name_ = 0
    self.firm_name_ = ""

  def has_firm_name(self): return self.has_firm_name_

  def recipient_name(self): return self.recipient_name_

  def set_recipient_name(self, x):
    self.has_recipient_name_ = 1
    self.recipient_name_ = x

  def clear_recipient_name(self):
    self.has_recipient_name_ = 0
    self.recipient_name_ = ""

  def has_recipient_name(self): return self.has_recipient_name_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_country_name_code()): self.set_country_name_code(x.country_name_code())
    if (x.has_country_name()): self.set_country_name(x.country_name())
    if (x.has_language_code()): self.set_language_code(x.language_code())
    if (x.has_administrative_area_name()): self.set_administrative_area_name(x.administrative_area_name())
    if (x.has_sub_administrative_area_name()): self.set_sub_administrative_area_name(x.sub_administrative_area_name())
    if (x.has_locality_name()): self.set_locality_name(x.locality_name())
    if (x.has_dependent_locality_name()): self.set_dependent_locality_name(x.dependent_locality_name())
    if (x.has_thoroughfare_name()): self.set_thoroughfare_name(x.thoroughfare_name())
    if (x.has_thoroughfare_pre_direction()): self.set_thoroughfare_pre_direction(x.thoroughfare_pre_direction())
    if (x.has_thoroughfare_leading_type()): self.set_thoroughfare_leading_type(x.thoroughfare_leading_type())
    if (x.has_thoroughfare_trailing_type()): self.set_thoroughfare_trailing_type(x.thoroughfare_trailing_type())
    if (x.has_thoroughfare_post_direction()): self.set_thoroughfare_post_direction(x.thoroughfare_post_direction())
    if (x.has_thoroughfare_number()): self.set_thoroughfare_number(x.thoroughfare_number())
    if (x.has_dependent_thoroughfares_indicator()): self.set_dependent_thoroughfares_indicator(x.dependent_thoroughfares_indicator())
    if (x.has_dependent_thoroughfares_connector()): self.set_dependent_thoroughfares_connector(x.dependent_thoroughfares_connector())
    if (x.has_dependent_thoroughfares_type()): self.set_dependent_thoroughfares_type(x.dependent_thoroughfares_type())
    if (x.has_dependent_thoroughfare_name()): self.set_dependent_thoroughfare_name(x.dependent_thoroughfare_name())
    if (x.has_dependent_thoroughfare_pre_direction()): self.set_dependent_thoroughfare_pre_direction(x.dependent_thoroughfare_pre_direction())
    if (x.has_dependent_thoroughfare_leading_type()): self.set_dependent_thoroughfare_leading_type(x.dependent_thoroughfare_leading_type())
    if (x.has_dependent_thoroughfare_trailing_type()): self.set_dependent_thoroughfare_trailing_type(x.dependent_thoroughfare_trailing_type())
    if (x.has_dependent_thoroughfare_post_direction()): self.set_dependent_thoroughfare_post_direction(x.dependent_thoroughfare_post_direction())
    if (x.has_postal_code_number()): self.set_postal_code_number(x.postal_code_number())
    if (x.has_postal_code_number_extension()): self.set_postal_code_number_extension(x.postal_code_number_extension())
    if (x.has_sorting_code()): self.set_sorting_code(x.sorting_code())
    if (x.has_premise_name()): self.set_premise_name(x.premise_name())
    if (x.has_sub_premise_name()): self.set_sub_premise_name(x.sub_premise_name())
    for i in xrange(x.address_line_size()): self.add_address_line(x.address_line(i))
    if (x.has_firm_name()): self.set_firm_name(x.firm_name())
    if (x.has_recipient_name()): self.set_recipient_name(x.recipient_name())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PostalAddress', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PostalAddress')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PostalAddress', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PostalAddress', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PostalAddress', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_country_name_code_ != x.has_country_name_code_: return 0
    if self.has_country_name_code_ and self.country_name_code_ != x.country_name_code_: return 0
    if self.has_country_name_ != x.has_country_name_: return 0
    if self.has_country_name_ and self.country_name_ != x.country_name_: return 0
    if self.has_language_code_ != x.has_language_code_: return 0
    if self.has_language_code_ and self.language_code_ != x.language_code_: return 0
    if self.has_administrative_area_name_ != x.has_administrative_area_name_: return 0
    if self.has_administrative_area_name_ and self.administrative_area_name_ != x.administrative_area_name_: return 0
    if self.has_sub_administrative_area_name_ != x.has_sub_administrative_area_name_: return 0
    if self.has_sub_administrative_area_name_ and self.sub_administrative_area_name_ != x.sub_administrative_area_name_: return 0
    if self.has_locality_name_ != x.has_locality_name_: return 0
    if self.has_locality_name_ and self.locality_name_ != x.locality_name_: return 0
    if self.has_dependent_locality_name_ != x.has_dependent_locality_name_: return 0
    if self.has_dependent_locality_name_ and self.dependent_locality_name_ != x.dependent_locality_name_: return 0
    if self.has_thoroughfare_name_ != x.has_thoroughfare_name_: return 0
    if self.has_thoroughfare_name_ and self.thoroughfare_name_ != x.thoroughfare_name_: return 0
    if self.has_thoroughfare_pre_direction_ != x.has_thoroughfare_pre_direction_: return 0
    if self.has_thoroughfare_pre_direction_ and self.thoroughfare_pre_direction_ != x.thoroughfare_pre_direction_: return 0
    if self.has_thoroughfare_leading_type_ != x.has_thoroughfare_leading_type_: return 0
    if self.has_thoroughfare_leading_type_ and self.thoroughfare_leading_type_ != x.thoroughfare_leading_type_: return 0
    if self.has_thoroughfare_trailing_type_ != x.has_thoroughfare_trailing_type_: return 0
    if self.has_thoroughfare_trailing_type_ and self.thoroughfare_trailing_type_ != x.thoroughfare_trailing_type_: return 0
    if self.has_thoroughfare_post_direction_ != x.has_thoroughfare_post_direction_: return 0
    if self.has_thoroughfare_post_direction_ and self.thoroughfare_post_direction_ != x.thoroughfare_post_direction_: return 0
    if self.has_thoroughfare_number_ != x.has_thoroughfare_number_: return 0
    if self.has_thoroughfare_number_ and self.thoroughfare_number_ != x.thoroughfare_number_: return 0
    if self.has_dependent_thoroughfares_indicator_ != x.has_dependent_thoroughfares_indicator_: return 0
    if self.has_dependent_thoroughfares_indicator_ and self.dependent_thoroughfares_indicator_ != x.dependent_thoroughfares_indicator_: return 0
    if self.has_dependent_thoroughfares_connector_ != x.has_dependent_thoroughfares_connector_: return 0
    if self.has_dependent_thoroughfares_connector_ and self.dependent_thoroughfares_connector_ != x.dependent_thoroughfares_connector_: return 0
    if self.has_dependent_thoroughfares_type_ != x.has_dependent_thoroughfares_type_: return 0
    if self.has_dependent_thoroughfares_type_ and self.dependent_thoroughfares_type_ != x.dependent_thoroughfares_type_: return 0
    if self.has_dependent_thoroughfare_name_ != x.has_dependent_thoroughfare_name_: return 0
    if self.has_dependent_thoroughfare_name_ and self.dependent_thoroughfare_name_ != x.dependent_thoroughfare_name_: return 0
    if self.has_dependent_thoroughfare_pre_direction_ != x.has_dependent_thoroughfare_pre_direction_: return 0
    if self.has_dependent_thoroughfare_pre_direction_ and self.dependent_thoroughfare_pre_direction_ != x.dependent_thoroughfare_pre_direction_: return 0
    if self.has_dependent_thoroughfare_leading_type_ != x.has_dependent_thoroughfare_leading_type_: return 0
    if self.has_dependent_thoroughfare_leading_type_ and self.dependent_thoroughfare_leading_type_ != x.dependent_thoroughfare_leading_type_: return 0
    if self.has_dependent_thoroughfare_trailing_type_ != x.has_dependent_thoroughfare_trailing_type_: return 0
    if self.has_dependent_thoroughfare_trailing_type_ and self.dependent_thoroughfare_trailing_type_ != x.dependent_thoroughfare_trailing_type_: return 0
    if self.has_dependent_thoroughfare_post_direction_ != x.has_dependent_thoroughfare_post_direction_: return 0
    if self.has_dependent_thoroughfare_post_direction_ and self.dependent_thoroughfare_post_direction_ != x.dependent_thoroughfare_post_direction_: return 0
    if self.has_postal_code_number_ != x.has_postal_code_number_: return 0
    if self.has_postal_code_number_ and self.postal_code_number_ != x.postal_code_number_: return 0
    if self.has_postal_code_number_extension_ != x.has_postal_code_number_extension_: return 0
    if self.has_postal_code_number_extension_ and self.postal_code_number_extension_ != x.postal_code_number_extension_: return 0
    if self.has_sorting_code_ != x.has_sorting_code_: return 0
    if self.has_sorting_code_ and self.sorting_code_ != x.sorting_code_: return 0
    if self.has_premise_name_ != x.has_premise_name_: return 0
    if self.has_premise_name_ and self.premise_name_ != x.premise_name_: return 0
    if self.has_sub_premise_name_ != x.has_sub_premise_name_: return 0
    if self.has_sub_premise_name_ and self.sub_premise_name_ != x.sub_premise_name_: return 0
    if len(self.address_line_) != len(x.address_line_): return 0
    for e1, e2 in zip(self.address_line_, x.address_line_):
      if e1 != e2: return 0
    if self.has_firm_name_ != x.has_firm_name_: return 0
    if self.has_firm_name_ and self.firm_name_ != x.firm_name_: return 0
    if self.has_recipient_name_ != x.has_recipient_name_: return 0
    if self.has_recipient_name_ and self.recipient_name_ != x.recipient_name_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_country_name_code_): n += 1 + self.lengthString(len(self.country_name_code_))
    if (self.has_country_name_): n += 1 + self.lengthString(len(self.country_name_))
    if (self.has_language_code_): n += 2 + self.lengthString(len(self.language_code_))
    if (self.has_administrative_area_name_): n += 1 + self.lengthString(len(self.administrative_area_name_))
    if (self.has_sub_administrative_area_name_): n += 1 + self.lengthString(len(self.sub_administrative_area_name_))
    if (self.has_locality_name_): n += 1 + self.lengthString(len(self.locality_name_))
    if (self.has_dependent_locality_name_): n += 2 + self.lengthString(len(self.dependent_locality_name_))
    if (self.has_thoroughfare_name_): n += 1 + self.lengthString(len(self.thoroughfare_name_))
    if (self.has_thoroughfare_pre_direction_): n += 1 + self.lengthString(len(self.thoroughfare_pre_direction_))
    if (self.has_thoroughfare_leading_type_): n += 1 + self.lengthString(len(self.thoroughfare_leading_type_))
    if (self.has_thoroughfare_trailing_type_): n += 1 + self.lengthString(len(self.thoroughfare_trailing_type_))
    if (self.has_thoroughfare_post_direction_): n += 1 + self.lengthString(len(self.thoroughfare_post_direction_))
    if (self.has_thoroughfare_number_): n += 1 + self.lengthString(len(self.thoroughfare_number_))
    if (self.has_dependent_thoroughfares_indicator_): n += 2 + self.lengthString(len(self.dependent_thoroughfares_indicator_))
    if (self.has_dependent_thoroughfares_connector_): n += 2 + self.lengthString(len(self.dependent_thoroughfares_connector_))
    if (self.has_dependent_thoroughfares_type_): n += 2 + self.lengthString(len(self.dependent_thoroughfares_type_))
    if (self.has_dependent_thoroughfare_name_): n += 2 + self.lengthString(len(self.dependent_thoroughfare_name_))
    if (self.has_dependent_thoroughfare_pre_direction_): n += 2 + self.lengthString(len(self.dependent_thoroughfare_pre_direction_))
    if (self.has_dependent_thoroughfare_leading_type_): n += 2 + self.lengthString(len(self.dependent_thoroughfare_leading_type_))
    if (self.has_dependent_thoroughfare_trailing_type_): n += 2 + self.lengthString(len(self.dependent_thoroughfare_trailing_type_))
    if (self.has_dependent_thoroughfare_post_direction_): n += 2 + self.lengthString(len(self.dependent_thoroughfare_post_direction_))
    if (self.has_postal_code_number_): n += 1 + self.lengthString(len(self.postal_code_number_))
    if (self.has_postal_code_number_extension_): n += 1 + self.lengthString(len(self.postal_code_number_extension_))
    if (self.has_sorting_code_): n += 2 + self.lengthString(len(self.sorting_code_))
    if (self.has_premise_name_): n += 1 + self.lengthString(len(self.premise_name_))
    if (self.has_sub_premise_name_): n += 2 + self.lengthString(len(self.sub_premise_name_))
    n += 1 * len(self.address_line_)
    for i in xrange(len(self.address_line_)): n += self.lengthString(len(self.address_line_[i]))
    if (self.has_firm_name_): n += 2 + self.lengthString(len(self.firm_name_))
    if (self.has_recipient_name_): n += 2 + self.lengthString(len(self.recipient_name_))
    return n + 0

  def Clear(self):
    self.clear_country_name_code()
    self.clear_country_name()
    self.clear_language_code()
    self.clear_administrative_area_name()
    self.clear_sub_administrative_area_name()
    self.clear_locality_name()
    self.clear_dependent_locality_name()
    self.clear_thoroughfare_name()
    self.clear_thoroughfare_pre_direction()
    self.clear_thoroughfare_leading_type()
    self.clear_thoroughfare_trailing_type()
    self.clear_thoroughfare_post_direction()
    self.clear_thoroughfare_number()
    self.clear_dependent_thoroughfares_indicator()
    self.clear_dependent_thoroughfares_connector()
    self.clear_dependent_thoroughfares_type()
    self.clear_dependent_thoroughfare_name()
    self.clear_dependent_thoroughfare_pre_direction()
    self.clear_dependent_thoroughfare_leading_type()
    self.clear_dependent_thoroughfare_trailing_type()
    self.clear_dependent_thoroughfare_post_direction()
    self.clear_postal_code_number()
    self.clear_postal_code_number_extension()
    self.clear_sorting_code()
    self.clear_premise_name()
    self.clear_sub_premise_name()
    self.clear_address_line()
    self.clear_firm_name()
    self.clear_recipient_name()

  def OutputUnchecked(self, out):
    if (self.has_country_name_code_):
      out.putVarInt32(10)
      out.putPrefixedString(self.country_name_code_)
    if (self.has_country_name_):
      out.putVarInt32(18)
      out.putPrefixedString(self.country_name_)
    if (self.has_administrative_area_name_):
      out.putVarInt32(26)
      out.putPrefixedString(self.administrative_area_name_)
    if (self.has_sub_administrative_area_name_):
      out.putVarInt32(34)
      out.putPrefixedString(self.sub_administrative_area_name_)
    if (self.has_locality_name_):
      out.putVarInt32(42)
      out.putPrefixedString(self.locality_name_)
    if (self.has_thoroughfare_name_):
      out.putVarInt32(50)
      out.putPrefixedString(self.thoroughfare_name_)
    if (self.has_thoroughfare_pre_direction_):
      out.putVarInt32(58)
      out.putPrefixedString(self.thoroughfare_pre_direction_)
    if (self.has_thoroughfare_leading_type_):
      out.putVarInt32(66)
      out.putPrefixedString(self.thoroughfare_leading_type_)
    if (self.has_thoroughfare_trailing_type_):
      out.putVarInt32(74)
      out.putPrefixedString(self.thoroughfare_trailing_type_)
    if (self.has_thoroughfare_post_direction_):
      out.putVarInt32(82)
      out.putPrefixedString(self.thoroughfare_post_direction_)
    if (self.has_thoroughfare_number_):
      out.putVarInt32(90)
      out.putPrefixedString(self.thoroughfare_number_)
    if (self.has_postal_code_number_):
      out.putVarInt32(98)
      out.putPrefixedString(self.postal_code_number_)
    if (self.has_postal_code_number_extension_):
      out.putVarInt32(106)
      out.putPrefixedString(self.postal_code_number_extension_)
    for i in xrange(len(self.address_line_)):
      out.putVarInt32(114)
      out.putPrefixedString(self.address_line_[i])
    if (self.has_premise_name_):
      out.putVarInt32(122)
      out.putPrefixedString(self.premise_name_)
    if (self.has_sub_premise_name_):
      out.putVarInt32(130)
      out.putPrefixedString(self.sub_premise_name_)
    if (self.has_dependent_locality_name_):
      out.putVarInt32(138)
      out.putPrefixedString(self.dependent_locality_name_)
    if (self.has_dependent_thoroughfares_indicator_):
      out.putVarInt32(146)
      out.putPrefixedString(self.dependent_thoroughfares_indicator_)
    if (self.has_dependent_thoroughfares_connector_):
      out.putVarInt32(154)
      out.putPrefixedString(self.dependent_thoroughfares_connector_)
    if (self.has_dependent_thoroughfares_type_):
      out.putVarInt32(162)
      out.putPrefixedString(self.dependent_thoroughfares_type_)
    if (self.has_dependent_thoroughfare_name_):
      out.putVarInt32(170)
      out.putPrefixedString(self.dependent_thoroughfare_name_)
    if (self.has_dependent_thoroughfare_pre_direction_):
      out.putVarInt32(178)
      out.putPrefixedString(self.dependent_thoroughfare_pre_direction_)
    if (self.has_dependent_thoroughfare_leading_type_):
      out.putVarInt32(186)
      out.putPrefixedString(self.dependent_thoroughfare_leading_type_)
    if (self.has_dependent_thoroughfare_trailing_type_):
      out.putVarInt32(194)
      out.putPrefixedString(self.dependent_thoroughfare_trailing_type_)
    if (self.has_dependent_thoroughfare_post_direction_):
      out.putVarInt32(202)
      out.putPrefixedString(self.dependent_thoroughfare_post_direction_)
    if (self.has_language_code_):
      out.putVarInt32(210)
      out.putPrefixedString(self.language_code_)
    if (self.has_firm_name_):
      out.putVarInt32(218)
      out.putPrefixedString(self.firm_name_)
    if (self.has_recipient_name_):
      out.putVarInt32(226)
      out.putPrefixedString(self.recipient_name_)
    if (self.has_sorting_code_):
      out.putVarInt32(234)
      out.putPrefixedString(self.sorting_code_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_country_name_code(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_country_name(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_administrative_area_name(d.getPrefixedString())
        continue
      if tt == 34:
        self.set_sub_administrative_area_name(d.getPrefixedString())
        continue
      if tt == 42:
        self.set_locality_name(d.getPrefixedString())
        continue
      if tt == 50:
        self.set_thoroughfare_name(d.getPrefixedString())
        continue
      if tt == 58:
        self.set_thoroughfare_pre_direction(d.getPrefixedString())
        continue
      if tt == 66:
        self.set_thoroughfare_leading_type(d.getPrefixedString())
        continue
      if tt == 74:
        self.set_thoroughfare_trailing_type(d.getPrefixedString())
        continue
      if tt == 82:
        self.set_thoroughfare_post_direction(d.getPrefixedString())
        continue
      if tt == 90:
        self.set_thoroughfare_number(d.getPrefixedString())
        continue
      if tt == 98:
        self.set_postal_code_number(d.getPrefixedString())
        continue
      if tt == 106:
        self.set_postal_code_number_extension(d.getPrefixedString())
        continue
      if tt == 114:
        self.add_address_line(d.getPrefixedString())
        continue
      if tt == 122:
        self.set_premise_name(d.getPrefixedString())
        continue
      if tt == 130:
        self.set_sub_premise_name(d.getPrefixedString())
        continue
      if tt == 138:
        self.set_dependent_locality_name(d.getPrefixedString())
        continue
      if tt == 146:
        self.set_dependent_thoroughfares_indicator(d.getPrefixedString())
        continue
      if tt == 154:
        self.set_dependent_thoroughfares_connector(d.getPrefixedString())
        continue
      if tt == 162:
        self.set_dependent_thoroughfares_type(d.getPrefixedString())
        continue
      if tt == 170:
        self.set_dependent_thoroughfare_name(d.getPrefixedString())
        continue
      if tt == 178:
        self.set_dependent_thoroughfare_pre_direction(d.getPrefixedString())
        continue
      if tt == 186:
        self.set_dependent_thoroughfare_leading_type(d.getPrefixedString())
        continue
      if tt == 194:
        self.set_dependent_thoroughfare_trailing_type(d.getPrefixedString())
        continue
      if tt == 202:
        self.set_dependent_thoroughfare_post_direction(d.getPrefixedString())
        continue
      if tt == 210:
        self.set_language_code(d.getPrefixedString())
        continue
      if tt == 218:
        self.set_firm_name(d.getPrefixedString())
        continue
      if tt == 226:
        self.set_recipient_name(d.getPrefixedString())
        continue
      if tt == 234:
        self.set_sorting_code(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_country_name_code_: res+=prefix+("country_name_code: %s\n" % self.DebugFormatString(self.country_name_code_))
    if self.has_country_name_: res+=prefix+("country_name: %s\n" % self.DebugFormatString(self.country_name_))
    if self.has_language_code_: res+=prefix+("language_code: %s\n" % self.DebugFormatString(self.language_code_))
    if self.has_administrative_area_name_: res+=prefix+("administrative_area_name: %s\n" % self.DebugFormatString(self.administrative_area_name_))
    if self.has_sub_administrative_area_name_: res+=prefix+("sub_administrative_area_name: %s\n" % self.DebugFormatString(self.sub_administrative_area_name_))
    if self.has_locality_name_: res+=prefix+("locality_name: %s\n" % self.DebugFormatString(self.locality_name_))
    if self.has_dependent_locality_name_: res+=prefix+("dependent_locality_name: %s\n" % self.DebugFormatString(self.dependent_locality_name_))
    if self.has_thoroughfare_name_: res+=prefix+("thoroughfare_name: %s\n" % self.DebugFormatString(self.thoroughfare_name_))
    if self.has_thoroughfare_pre_direction_: res+=prefix+("thoroughfare_pre_direction: %s\n" % self.DebugFormatString(self.thoroughfare_pre_direction_))
    if self.has_thoroughfare_leading_type_: res+=prefix+("thoroughfare_leading_type: %s\n" % self.DebugFormatString(self.thoroughfare_leading_type_))
    if self.has_thoroughfare_trailing_type_: res+=prefix+("thoroughfare_trailing_type: %s\n" % self.DebugFormatString(self.thoroughfare_trailing_type_))
    if self.has_thoroughfare_post_direction_: res+=prefix+("thoroughfare_post_direction: %s\n" % self.DebugFormatString(self.thoroughfare_post_direction_))
    if self.has_thoroughfare_number_: res+=prefix+("thoroughfare_number: %s\n" % self.DebugFormatString(self.thoroughfare_number_))
    if self.has_dependent_thoroughfares_indicator_: res+=prefix+("dependent_thoroughfares_indicator: %s\n" % self.DebugFormatString(self.dependent_thoroughfares_indicator_))
    if self.has_dependent_thoroughfares_connector_: res+=prefix+("dependent_thoroughfares_connector: %s\n" % self.DebugFormatString(self.dependent_thoroughfares_connector_))
    if self.has_dependent_thoroughfares_type_: res+=prefix+("dependent_thoroughfares_type: %s\n" % self.DebugFormatString(self.dependent_thoroughfares_type_))
    if self.has_dependent_thoroughfare_name_: res+=prefix+("dependent_thoroughfare_name: %s\n" % self.DebugFormatString(self.dependent_thoroughfare_name_))
    if self.has_dependent_thoroughfare_pre_direction_: res+=prefix+("dependent_thoroughfare_pre_direction: %s\n" % self.DebugFormatString(self.dependent_thoroughfare_pre_direction_))
    if self.has_dependent_thoroughfare_leading_type_: res+=prefix+("dependent_thoroughfare_leading_type: %s\n" % self.DebugFormatString(self.dependent_thoroughfare_leading_type_))
    if self.has_dependent_thoroughfare_trailing_type_: res+=prefix+("dependent_thoroughfare_trailing_type: %s\n" % self.DebugFormatString(self.dependent_thoroughfare_trailing_type_))
    if self.has_dependent_thoroughfare_post_direction_: res+=prefix+("dependent_thoroughfare_post_direction: %s\n" % self.DebugFormatString(self.dependent_thoroughfare_post_direction_))
    if self.has_postal_code_number_: res+=prefix+("postal_code_number: %s\n" % self.DebugFormatString(self.postal_code_number_))
    if self.has_postal_code_number_extension_: res+=prefix+("postal_code_number_extension: %s\n" % self.DebugFormatString(self.postal_code_number_extension_))
    if self.has_sorting_code_: res+=prefix+("sorting_code: %s\n" % self.DebugFormatString(self.sorting_code_))
    if self.has_premise_name_: res+=prefix+("premise_name: %s\n" % self.DebugFormatString(self.premise_name_))
    if self.has_sub_premise_name_: res+=prefix+("sub_premise_name: %s\n" % self.DebugFormatString(self.sub_premise_name_))
    cnt=0
    for e in self.address_line_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("address_line%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_firm_name_: res+=prefix+("firm_name: %s\n" % self.DebugFormatString(self.firm_name_))
    if self.has_recipient_name_: res+=prefix+("recipient_name: %s\n" % self.DebugFormatString(self.recipient_name_))
    return res

  kcountry_name_code = 1
  kcountry_name = 2
  klanguage_code = 26
  kadministrative_area_name = 3
  ksub_administrative_area_name = 4
  klocality_name = 5
  kdependent_locality_name = 17
  kthoroughfare_name = 6
  kthoroughfare_pre_direction = 7
  kthoroughfare_leading_type = 8
  kthoroughfare_trailing_type = 9
  kthoroughfare_post_direction = 10
  kthoroughfare_number = 11
  kdependent_thoroughfares_indicator = 18
  kdependent_thoroughfares_connector = 19
  kdependent_thoroughfares_type = 20
  kdependent_thoroughfare_name = 21
  kdependent_thoroughfare_pre_direction = 22
  kdependent_thoroughfare_leading_type = 23
  kdependent_thoroughfare_trailing_type = 24
  kdependent_thoroughfare_post_direction = 25
  kpostal_code_number = 12
  kpostal_code_number_extension = 13
  ksorting_code = 29
  kpremise_name = 15
  ksub_premise_name = 16
  kaddress_line = 14
  kfirm_name = 27
  krecipient_name = 28

  _TEXT = (
   "ErrorCode",  #   0
   "country_name_code",  #   1
   "country_name",  #   2
   "administrative_area_name",  #   3
   "sub_administrative_area_name",  #   4
   "locality_name",  #   5
   "thoroughfare_name",  #   6
   "thoroughfare_pre_direction",  #   7
   "thoroughfare_leading_type",  #   8
   "thoroughfare_trailing_type",  #   9
   "thoroughfare_post_direction",  #  10
   "thoroughfare_number",  #  11
   "postal_code_number",  #  12
   "postal_code_number_extension",  #  13
   "address_line",  #  14
   "premise_name",  #  15
   "sub_premise_name",  #  16
   "dependent_locality_name",  #  17
   "dependent_thoroughfares_indicator",  #  18
   "dependent_thoroughfares_connector",  #  19
   "dependent_thoroughfares_type",  #  20
   "dependent_thoroughfare_name",  #  21
   "dependent_thoroughfare_pre_direction",  #  22
   "dependent_thoroughfare_leading_type",  #  23
   "dependent_thoroughfare_trailing_type",  #  24
   "dependent_thoroughfare_post_direction",  #  25
   "language_code",  #  26
   "firm_name",  #  27
   "recipient_name",  #  28
   "sorting_code",  #  29
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.STRING,  #   7

   ProtocolBuffer.Encoder.STRING,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.STRING,  #  10

   ProtocolBuffer.Encoder.STRING,  #  11

   ProtocolBuffer.Encoder.STRING,  #  12

   ProtocolBuffer.Encoder.STRING,  #  13

   ProtocolBuffer.Encoder.STRING,  #  14

   ProtocolBuffer.Encoder.STRING,  #  15

   ProtocolBuffer.Encoder.STRING,  #  16

   ProtocolBuffer.Encoder.STRING,  #  17

   ProtocolBuffer.Encoder.STRING,  #  18

   ProtocolBuffer.Encoder.STRING,  #  19

   ProtocolBuffer.Encoder.STRING,  #  20

   ProtocolBuffer.Encoder.STRING,  #  21

   ProtocolBuffer.Encoder.STRING,  #  22

   ProtocolBuffer.Encoder.STRING,  #  23

   ProtocolBuffer.Encoder.STRING,  #  24

   ProtocolBuffer.Encoder.STRING,  #  25

   ProtocolBuffer.Encoder.STRING,  #  26

   ProtocolBuffer.Encoder.STRING,  #  27

   ProtocolBuffer.Encoder.STRING,  #  28

   ProtocolBuffer.Encoder.STRING,  #  29

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x24,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x2f,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x61,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0d,
    0x50,
    0x6f,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x41,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x13,
    0x1a,
    0x11,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x5f,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x1a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x61,
    0x64,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x5f,
    0x61,
    0x72,
    0x65,
    0x61,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x73,
    0x75,
    0x62,
    0x5f,
    0x61,
    0x64,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x5f,
    0x61,
    0x72,
    0x65,
    0x61,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x11,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x70,
    0x72,
    0x65,
    0x5f,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x08,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x74,
    0x72,
    0x61,
    0x69,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x5f,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x0a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x0b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x73,
    0x5f,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x12,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x73,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x13,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x73,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x14,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x15,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x70,
    0x72,
    0x65,
    0x5f,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x16,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x17,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x74,
    0x72,
    0x61,
    0x69,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x18,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x61,
    0x72,
    0x65,
    0x5f,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x5f,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x19,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x5f,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x0c,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x5f,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x5f,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x5f,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x0d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x73,
    0x6f,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x1d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x73,
    0x65,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x0f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x73,
    0x75,
    0x62,
    0x5f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x73,
    0x65,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x10,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x61,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x0e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x66,
    0x69,
    0x72,
    0x6d,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x1b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x72,
    0x65,
    0x63,
    0x69,
    0x70,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x1c,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xf3,
    0xc1,
    0xd6,
    0x01,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['PostalAddress']
