# This file automatically generated by protocol-compiler from spam/signaturematcher/proto/signaturedata.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class SignatureData_PenaltySigPair(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.penalty_ = 0
    self.matched_spam_signature_ = ""
    self.has_penalty_ = 0
    self.has_matched_spam_signature_ = 0
    if contents is not None: self.MergeFromString(contents)

  def penalty(self): return self.penalty_

  def set_penalty(self, x):
    self.has_penalty_ = 1
    self.penalty_ = x

  def clear_penalty(self):
    self.has_penalty_ = 0
    self.penalty_ = 0

  def has_penalty(self): return self.has_penalty_

  def matched_spam_signature(self): return self.matched_spam_signature_

  def set_matched_spam_signature(self, x):
    self.has_matched_spam_signature_ = 1
    self.matched_spam_signature_ = x

  def clear_matched_spam_signature(self):
    self.has_matched_spam_signature_ = 0
    self.matched_spam_signature_ = ""

  def has_matched_spam_signature(self): return self.has_matched_spam_signature_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_penalty()): self.set_penalty(x.penalty())
    if (x.has_matched_spam_signature()): self.set_matched_spam_signature(x.matched_spam_signature())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'spam_signaturematcher_proto.SignatureData', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'spam_signaturematcher_proto.SignatureData')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'spam_signaturematcher_proto.SignatureData', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'spam_signaturematcher_proto.SignatureData', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'spam_signaturematcher_proto.SignatureData', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_penalty_ != x.has_penalty_: return 0
    if self.has_penalty_ and self.penalty_ != x.penalty_: return 0
    if self.has_matched_spam_signature_ != x.has_matched_spam_signature_: return 0
    if self.has_matched_spam_signature_ and self.matched_spam_signature_ != x.matched_spam_signature_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_penalty_): n += 1 + self.lengthVarInt64(self.penalty_)
    if (self.has_matched_spam_signature_): n += 1 + self.lengthString(len(self.matched_spam_signature_))
    return n + 0

  def Clear(self):
    self.clear_penalty()
    self.clear_matched_spam_signature()

  def OutputUnchecked(self, out):
    if (self.has_penalty_):
      out.putVarInt32(16)
      out.putVarInt32(self.penalty_)
    if (self.has_matched_spam_signature_):
      out.putVarInt32(26)
      out.putPrefixedString(self.matched_spam_signature_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 16:
        self.set_penalty(d.getVarInt32())
        continue
      if tt == 26:
        self.set_matched_spam_signature(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_penalty_: res+=prefix+("penalty: %s\n" % self.DebugFormatInt32(self.penalty_))
    if self.has_matched_spam_signature_: res+=prefix+("matched_spam_signature: %s\n" % self.DebugFormatString(self.matched_spam_signature_))
    return res

class SignatureData(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.penaltysigpair_ = []
    if contents is not None: self.MergeFromString(contents)

  def penaltysigpair_size(self): return len(self.penaltysigpair_)
  def penaltysigpair_list(self): return self.penaltysigpair_

  def penaltysigpair(self, i):
    return self.penaltysigpair_[i]

  def mutable_penaltysigpair(self, i):
    return self.penaltysigpair_[i]

  def add_penaltysigpair(self):
    x = SignatureData_PenaltySigPair()
    self.penaltysigpair_.append(x)
    return x

  def clear_penaltysigpair(self):
    self.penaltysigpair_ = []

  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.penaltysigpair_size()): self.add_penaltysigpair().CopyFrom(x.penaltysigpair(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'spam_signaturematcher_proto.SignatureData', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'spam_signaturematcher_proto.SignatureData')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'spam_signaturematcher_proto.SignatureData', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'spam_signaturematcher_proto.SignatureData', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'spam_signaturematcher_proto.SignatureData', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.penaltysigpair_) != len(x.penaltysigpair_): return 0
    for e1, e2 in zip(self.penaltysigpair_, x.penaltysigpair_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.penaltysigpair_)):
      if (not self.penaltysigpair_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.penaltysigpair_)
    for i in xrange(len(self.penaltysigpair_)): n += self.penaltysigpair_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_penaltysigpair()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.penaltysigpair_)):
      out.putVarInt32(11)
      self.penaltysigpair_[i].OutputUnchecked(out)
      out.putVarInt32(12)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_penaltysigpair().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.penaltysigpair_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("PenaltySigPair%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kPenaltySigPairGroup = 1
  kPenaltySigPairpenalty = 2
  kPenaltySigPairmatched_spam_signature = 3

  _TEXT = (
   "ErrorCode",  #   0
   "PenaltySigPair",  #   1
   "penalty",  #   2
   "matched_spam_signature",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x2f,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x65,
    0x72,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x29,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x5f,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x65,
    0x72,
    0x5f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2e,
    0x53,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x13,
    0x1a,
    0x0e,
    0x50,
    0x65,
    0x6e,
    0x61,
    0x6c,
    0x74,
    0x79,
    0x53,
    0x69,
    0x67,
    0x50,
    0x61,
    0x69,
    0x72,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x50,
    0x65,
    0x6e,
    0x61,
    0x6c,
    0x74,
    0x79,
    0x53,
    0x69,
    0x67,
    0x50,
    0x61,
    0x69,
    0x72,
    0x2e,
    0x70,
    0x65,
    0x6e,
    0x61,
    0x6c,
    0x74,
    0x79,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x50,
    0x65,
    0x6e,
    0x61,
    0x6c,
    0x74,
    0x79,
    0x53,
    0x69,
    0x67,
    0x50,
    0x61,
    0x69,
    0x72,
    0x2e,
    0x6d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x65,
    0x64,
    0x5f,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x5f,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x00,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['SignatureData','SignatureData_PenaltySigPair']
