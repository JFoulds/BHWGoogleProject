# This file automatically generated by protocol-compiler from premiumcontent/common/premiuminfo.protodevel
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class PremiumIndexResult(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.date_ = 0.0
    self.publicationentityfp_ = []
    self.categories_ = []
    self.has_date_ = 0
    if contents is not None: self.MergeFromString(contents)

  def date(self): return self.date_

  def set_date(self, x):
    self.has_date_ = 1
    self.date_ = x

  def clear_date(self):
    self.has_date_ = 0
    self.date_ = 0.0

  def has_date(self): return self.has_date_

  def publicationentityfp_size(self): return len(self.publicationentityfp_)
  def publicationentityfp_list(self): return self.publicationentityfp_

  def publicationentityfp(self, i):
    return self.publicationentityfp_[i]

  def set_publicationentityfp(self, i, x):
    self.publicationentityfp_[i] = x

  def add_publicationentityfp(self, x):
    self.publicationentityfp_.append(x)

  def clear_publicationentityfp(self):
    self.publicationentityfp_ = []

  def categories_size(self): return len(self.categories_)
  def categories_list(self): return self.categories_

  def categories(self, i):
    return self.categories_[i]

  def set_categories(self, i, x):
    self.categories_[i] = x

  def add_categories(self, x):
    self.categories_.append(x)

  def clear_categories(self):
    self.categories_ = []


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_date()): self.set_date(x.date())
    for i in xrange(x.publicationentityfp_size()): self.add_publicationentityfp(x.publicationentityfp(i))
    for i in xrange(x.categories_size()): self.add_categories(x.categories(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumIndexResult', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumIndexResult')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumIndexResult', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumIndexResult', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumIndexResult', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_date_ != x.has_date_: return 0
    if self.has_date_ and self.date_ != x.date_: return 0
    if len(self.publicationentityfp_) != len(x.publicationentityfp_): return 0
    for e1, e2 in zip(self.publicationentityfp_, x.publicationentityfp_):
      if e1 != e2: return 0
    if len(self.categories_) != len(x.categories_): return 0
    for e1, e2 in zip(self.categories_, x.categories_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_date_): n += 9
    n += 1 * len(self.publicationentityfp_)
    for i in xrange(len(self.publicationentityfp_)): n += self.lengthVarInt64(self.publicationentityfp_[i])
    n += 1 * len(self.categories_)
    for i in xrange(len(self.categories_)): n += self.lengthVarInt64(self.categories_[i])
    return n + 0

  def Clear(self):
    self.clear_date()
    self.clear_publicationentityfp()
    self.clear_categories()

  def OutputUnchecked(self, out):
    if (self.has_date_):
      out.putVarInt32(9)
      out.putDouble(self.date_)
    for i in xrange(len(self.publicationentityfp_)):
      out.putVarInt32(16)
      out.putVarUint64(self.publicationentityfp_[i])
    for i in xrange(len(self.categories_)):
      out.putVarInt32(24)
      out.putVarInt32(self.categories_[i])

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 9:
        self.set_date(d.getDouble())
        continue
      if tt == 16:
        self.add_publicationentityfp(d.getVarUint64())
        continue
      if tt == 24:
        self.add_categories(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_date_: res+=prefix+("Date: %s\n" % self.DebugFormat(self.date_))
    cnt=0
    for e in self.publicationentityfp_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("PublicationEntityFP%s: %s\n" % (elm, self.DebugFormatInt64(e)))
      cnt+=1
    cnt=0
    for e in self.categories_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Categories%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    return res

  kDate = 1
  kPublicationEntityFP = 2
  kCategories = 3

  _TEXT = (
   "ErrorCode",  #   0
   "Date",  #   1
   "PublicationEntityFP",  #   2
   "Categories",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.DOUBLE,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x12,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x13,
    0x1a,
    0x04,
    0x44,
    0x61,
    0x74,
    0x65,
    0x20,
    0x01,
    0x28,
    0x01,
    0x30,
    0x01,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x46,
    0x50,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PremiumClusterInfo_Composite(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.localclusterid_ = 0
    self.centroid_ = []
    self.has_localclusterid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def localclusterid(self): return self.localclusterid_

  def set_localclusterid(self, x):
    self.has_localclusterid_ = 1
    self.localclusterid_ = x

  def clear_localclusterid(self):
    self.has_localclusterid_ = 0
    self.localclusterid_ = 0

  def has_localclusterid(self): return self.has_localclusterid_

  def centroid_size(self): return len(self.centroid_)
  def centroid_list(self): return self.centroid_

  def centroid(self, i):
    return self.centroid_[i]

  def mutable_centroid(self, i):
    return self.centroid_[i]

  def add_centroid(self):
    x = PremiumStringScorePair()
    self.centroid_.append(x)
    return x

  def clear_centroid(self):
    self.centroid_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_localclusterid()): self.set_localclusterid(x.localclusterid())
    for i in xrange(x.centroid_size()): self.add_centroid().CopyFrom(x.centroid(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumClusterInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumClusterInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumClusterInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumClusterInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumClusterInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_localclusterid_ != x.has_localclusterid_: return 0
    if self.has_localclusterid_ and self.localclusterid_ != x.localclusterid_: return 0
    if len(self.centroid_) != len(x.centroid_): return 0
    for e1, e2 in zip(self.centroid_, x.centroid_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.centroid_)):
      if (not self.centroid_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_localclusterid_): n += 1 + self.lengthVarInt64(self.localclusterid_)
    n += 1 * len(self.centroid_)
    for i in xrange(len(self.centroid_)): n += self.lengthString(self.centroid_[i].ByteSize())
    return n + 0

  def Clear(self):
    self.clear_localclusterid()
    self.clear_centroid()

  def OutputUnchecked(self, out):
    if (self.has_localclusterid_):
      out.putVarInt32(32)
      out.putVarInt32(self.localclusterid_)
    for i in xrange(len(self.centroid_)):
      out.putVarInt32(42)
      out.putVarInt32(self.centroid_[i].ByteSize())
      self.centroid_[i].OutputUnchecked(out)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 28: break
      if tt == 32:
        self.set_localclusterid(d.getVarInt32())
        continue
      if tt == 42:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_centroid().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_localclusterid_: res+=prefix+("LocalClusterId: %s\n" % self.DebugFormatInt32(self.localclusterid_))
    cnt=0
    for e in self.centroid_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Centroid%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    return res

class PremiumClusterInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.clustersize_ = 0
    self.bucketid_ = 0
    self.composite_ = None
    self.relatedurls_ = []
    self.relatedtitles_ = []
    self.has_clustersize_ = 0
    self.has_bucketid_ = 0
    self.has_composite_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def clustersize(self): return self.clustersize_

  def set_clustersize(self, x):
    self.has_clustersize_ = 1
    self.clustersize_ = x

  def clear_clustersize(self):
    self.has_clustersize_ = 0
    self.clustersize_ = 0

  def has_clustersize(self): return self.has_clustersize_

  def bucketid(self): return self.bucketid_

  def set_bucketid(self, x):
    self.has_bucketid_ = 1
    self.bucketid_ = x

  def clear_bucketid(self):
    self.has_bucketid_ = 0
    self.bucketid_ = 0

  def has_bucketid(self): return self.has_bucketid_

  def composite(self):
    if self.composite_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.composite_ is None: self.composite_ = PremiumClusterInfo_Composite()
      finally:
        self.lazy_init_lock_.release()
    return self.composite_

  def mutable_composite(self): self.has_composite_ = 1; return self.composite()

  def clear_composite(self):
    #Warning: this method does not acquire the lock.
    self.has_composite_ = 0;
    if self.composite_ is not None: self.composite_.Clear()

  def has_composite(self): return self.has_composite_

  def relatedurls_size(self): return len(self.relatedurls_)
  def relatedurls_list(self): return self.relatedurls_

  def relatedurls(self, i):
    return self.relatedurls_[i]

  def mutable_relatedurls(self, i):
    return self.relatedurls_[i]

  def add_relatedurls(self):
    x = PremiumMetadataRecord()
    self.relatedurls_.append(x)
    return x

  def clear_relatedurls(self):
    self.relatedurls_ = []
  def relatedtitles_size(self): return len(self.relatedtitles_)
  def relatedtitles_list(self): return self.relatedtitles_

  def relatedtitles(self, i):
    return self.relatedtitles_[i]

  def set_relatedtitles(self, i, x):
    self.relatedtitles_[i] = x

  def add_relatedtitles(self, x):
    self.relatedtitles_.append(x)

  def clear_relatedtitles(self):
    self.relatedtitles_ = []


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_clustersize()): self.set_clustersize(x.clustersize())
    if (x.has_bucketid()): self.set_bucketid(x.bucketid())
    if (x.has_composite()): self.mutable_composite().MergeFrom(x.composite())
    for i in xrange(x.relatedurls_size()): self.add_relatedurls().CopyFrom(x.relatedurls(i))
    for i in xrange(x.relatedtitles_size()): self.add_relatedtitles(x.relatedtitles(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumClusterInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumClusterInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumClusterInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumClusterInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumClusterInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_clustersize_ != x.has_clustersize_: return 0
    if self.has_clustersize_ and self.clustersize_ != x.clustersize_: return 0
    if self.has_bucketid_ != x.has_bucketid_: return 0
    if self.has_bucketid_ and self.bucketid_ != x.bucketid_: return 0
    if self.has_composite_ != x.has_composite_: return 0
    if self.has_composite_ and self.composite_ != x.composite_: return 0
    if len(self.relatedurls_) != len(x.relatedurls_): return 0
    for e1, e2 in zip(self.relatedurls_, x.relatedurls_):
      if e1 != e2: return 0
    if len(self.relatedtitles_) != len(x.relatedtitles_): return 0
    for e1, e2 in zip(self.relatedtitles_, x.relatedtitles_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_clustersize_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: clustersize not set.')
    if (not self.has_bucketid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: bucketid not set.')
    if (self.has_composite_ and not self.composite_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.relatedurls_)):
      if (not self.relatedurls_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.clustersize_)
    n += self.lengthVarInt64(self.bucketid_)
    if (self.has_composite_): n += 2 + self.composite_.ByteSize()
    n += 2 * len(self.relatedurls_)
    for i in xrange(len(self.relatedurls_)): n += self.lengthString(self.relatedurls_[i].ByteSize())
    n += 2 * len(self.relatedtitles_)
    for i in xrange(len(self.relatedtitles_)): n += self.lengthString(len(self.relatedtitles_[i]))
    return n + 2

  def Clear(self):
    self.clear_clustersize()
    self.clear_bucketid()
    self.clear_composite()
    self.clear_relatedurls()
    self.clear_relatedtitles()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.clustersize_)
    out.putVarInt32(16)
    out.putVarInt32(self.bucketid_)
    if (self.has_composite_):
      out.putVarInt32(27)
      self.composite_.OutputUnchecked(out)
      out.putVarInt32(28)
    for i in xrange(len(self.relatedurls_)):
      out.putVarInt32(258)
      out.putVarInt32(self.relatedurls_[i].ByteSize())
      self.relatedurls_[i].OutputUnchecked(out)
    for i in xrange(len(self.relatedtitles_)):
      out.putVarInt32(266)
      out.putPrefixedString(self.relatedtitles_[i])

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_clustersize(d.getVarInt32())
        continue
      if tt == 16:
        self.set_bucketid(d.getVarInt32())
        continue
      if tt == 27:
        self.mutable_composite().TryMerge(d)
        continue
      if tt == 258:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_relatedurls().TryMerge(tmp)
        continue
      if tt == 266:
        self.add_relatedtitles(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_clustersize_: res+=prefix+("ClusterSize: %s\n" % self.DebugFormatInt32(self.clustersize_))
    if self.has_bucketid_: res+=prefix+("BucketId: %s\n" % self.DebugFormatInt32(self.bucketid_))
    if self.has_composite_:
      res+=prefix+"Composite {\n"
      res+=self.composite_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    cnt=0
    for e in self.relatedurls_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("RelatedUrls%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.relatedtitles_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("RelatedTitles%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    return res

  kClusterSize = 1
  kBucketId = 2
  kCompositeGroup = 3
  kCompositeLocalClusterId = 4
  kCompositeCentroid = 5
  kRelatedUrls = 32
  kRelatedTitles = 33

  _TEXT = (
   "ErrorCode",  #   0
   "ClusterSize",  #   1
   "BucketId",  #   2
   "Composite",  #   3
   "LocalClusterId",  #   4
   "Centroid",  #   5
   None,  #   6
   None,  #   7
   None,  #   8
   None,  #   9
   None,  #  10
   None,  #  11
   None,  #  12
   None,  #  13
   None,  #  14
   None,  #  15
   None,  #  16
   None,  #  17
   None,  #  18
   None,  #  19
   None,  #  20
   None,  #  21
   None,  #  22
   None,  #  23
   None,  #  24
   None,  #  25
   None,  #  26
   None,  #  27
   None,  #  28
   None,  #  29
   None,  #  30
   None,  #  31
   "RelatedUrls",  #  32
   "RelatedTitles",  #  33
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.STARTGROUP,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.MAX_TYPE,  #   6

   ProtocolBuffer.Encoder.MAX_TYPE,  #   7

   ProtocolBuffer.Encoder.MAX_TYPE,  #   8

   ProtocolBuffer.Encoder.MAX_TYPE,  #   9

   ProtocolBuffer.Encoder.MAX_TYPE,  #  10

   ProtocolBuffer.Encoder.MAX_TYPE,  #  11

   ProtocolBuffer.Encoder.MAX_TYPE,  #  12

   ProtocolBuffer.Encoder.MAX_TYPE,  #  13

   ProtocolBuffer.Encoder.MAX_TYPE,  #  14

   ProtocolBuffer.Encoder.MAX_TYPE,  #  15

   ProtocolBuffer.Encoder.MAX_TYPE,  #  16

   ProtocolBuffer.Encoder.MAX_TYPE,  #  17

   ProtocolBuffer.Encoder.MAX_TYPE,  #  18

   ProtocolBuffer.Encoder.MAX_TYPE,  #  19

   ProtocolBuffer.Encoder.MAX_TYPE,  #  20

   ProtocolBuffer.Encoder.MAX_TYPE,  #  21

   ProtocolBuffer.Encoder.MAX_TYPE,  #  22

   ProtocolBuffer.Encoder.MAX_TYPE,  #  23

   ProtocolBuffer.Encoder.MAX_TYPE,  #  24

   ProtocolBuffer.Encoder.MAX_TYPE,  #  25

   ProtocolBuffer.Encoder.MAX_TYPE,  #  26

   ProtocolBuffer.Encoder.MAX_TYPE,  #  27

   ProtocolBuffer.Encoder.MAX_TYPE,  #  28

   ProtocolBuffer.Encoder.MAX_TYPE,  #  29

   ProtocolBuffer.Encoder.MAX_TYPE,  #  30

   ProtocolBuffer.Encoder.MAX_TYPE,  #  31

   ProtocolBuffer.Encoder.STRING,  #  32

   ProtocolBuffer.Encoder.STRING,  #  33

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x12,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x43,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x0b,
    0x43,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x53,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x42,
    0x75,
    0x63,
    0x6b,
    0x65,
    0x74,
    0x49,
    0x64,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0x03,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x65,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x43,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x49,
    0x64,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x65,
    0x2e,
    0x43,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x69,
    0x64,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x16,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x50,
    0x61,
    0x69,
    0x72,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x52,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x55,
    0x72,
    0x6c,
    0x73,
    0x20,
    0x20,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x24,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x52,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x73,
    0x20,
    0x21,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PremiumArticleInfo(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 1827088 

  _TypeId_NAMES = {
    1827088: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.urls_ = []
    self.title_ = ""
    self.publicationrank_ = 1
    self.singletonrank_ = 0.0
    self.articlerank_ = 0
    self.cluster_ = None
    self.clusterid_ = 0
    self.clusterrank_ = 0
    self.debuginfo_ = ""
    self.deprecated_indexresult_ = None
    self.vec1_ = []
    self.vec2_ = []
    self.vec3_ = []
    self.has_title_ = 0
    self.has_publicationrank_ = 0
    self.has_singletonrank_ = 0
    self.has_articlerank_ = 0
    self.has_cluster_ = 0
    self.has_clusterid_ = 0
    self.has_clusterrank_ = 0
    self.has_debuginfo_ = 0
    self.has_deprecated_indexresult_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def urls_size(self): return len(self.urls_)
  def urls_list(self): return self.urls_

  def urls(self, i):
    return self.urls_[i]

  def mutable_urls(self, i):
    return self.urls_[i]

  def add_urls(self):
    x = PremiumMetadataRecord()
    self.urls_.append(x)
    return x

  def clear_urls(self):
    self.urls_ = []
  def title(self): return self.title_

  def set_title(self, x):
    self.has_title_ = 1
    self.title_ = x

  def clear_title(self):
    self.has_title_ = 0
    self.title_ = ""

  def has_title(self): return self.has_title_

  def publicationrank(self): return self.publicationrank_

  def set_publicationrank(self, x):
    self.has_publicationrank_ = 1
    self.publicationrank_ = x

  def clear_publicationrank(self):
    self.has_publicationrank_ = 0
    self.publicationrank_ = 1

  def has_publicationrank(self): return self.has_publicationrank_

  def singletonrank(self): return self.singletonrank_

  def set_singletonrank(self, x):
    self.has_singletonrank_ = 1
    self.singletonrank_ = x

  def clear_singletonrank(self):
    self.has_singletonrank_ = 0
    self.singletonrank_ = 0.0

  def has_singletonrank(self): return self.has_singletonrank_

  def articlerank(self): return self.articlerank_

  def set_articlerank(self, x):
    self.has_articlerank_ = 1
    self.articlerank_ = x

  def clear_articlerank(self):
    self.has_articlerank_ = 0
    self.articlerank_ = 0

  def has_articlerank(self): return self.has_articlerank_

  def cluster(self):
    if self.cluster_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.cluster_ is None: self.cluster_ = PremiumClusterInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.cluster_

  def mutable_cluster(self): self.has_cluster_ = 1; return self.cluster()

  def clear_cluster(self):
    #Warning: this method does not acquire the lock.
    self.has_cluster_ = 0;
    if self.cluster_ is not None: self.cluster_.Clear()

  def has_cluster(self): return self.has_cluster_

  def clusterid(self): return self.clusterid_

  def set_clusterid(self, x):
    self.has_clusterid_ = 1
    self.clusterid_ = x

  def clear_clusterid(self):
    self.has_clusterid_ = 0
    self.clusterid_ = 0

  def has_clusterid(self): return self.has_clusterid_

  def clusterrank(self): return self.clusterrank_

  def set_clusterrank(self, x):
    self.has_clusterrank_ = 1
    self.clusterrank_ = x

  def clear_clusterrank(self):
    self.has_clusterrank_ = 0
    self.clusterrank_ = 0

  def has_clusterrank(self): return self.has_clusterrank_

  def debuginfo(self): return self.debuginfo_

  def set_debuginfo(self, x):
    self.has_debuginfo_ = 1
    self.debuginfo_ = x

  def clear_debuginfo(self):
    self.has_debuginfo_ = 0
    self.debuginfo_ = ""

  def has_debuginfo(self): return self.has_debuginfo_

  def deprecated_indexresult(self):
    if self.deprecated_indexresult_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.deprecated_indexresult_ is None: self.deprecated_indexresult_ = PremiumIndexResult()
      finally:
        self.lazy_init_lock_.release()
    return self.deprecated_indexresult_

  def mutable_deprecated_indexresult(self): self.has_deprecated_indexresult_ = 1; return self.deprecated_indexresult()

  def clear_deprecated_indexresult(self):
    #Warning: this method does not acquire the lock.
    self.has_deprecated_indexresult_ = 0;
    if self.deprecated_indexresult_ is not None: self.deprecated_indexresult_.Clear()

  def has_deprecated_indexresult(self): return self.has_deprecated_indexresult_

  def vec1_size(self): return len(self.vec1_)
  def vec1_list(self): return self.vec1_

  def vec1(self, i):
    return self.vec1_[i]

  def mutable_vec1(self, i):
    return self.vec1_[i]

  def add_vec1(self):
    x = PremiumStringScorePair()
    self.vec1_.append(x)
    return x

  def clear_vec1(self):
    self.vec1_ = []
  def vec2_size(self): return len(self.vec2_)
  def vec2_list(self): return self.vec2_

  def vec2(self, i):
    return self.vec2_[i]

  def mutable_vec2(self, i):
    return self.vec2_[i]

  def add_vec2(self):
    x = PremiumStringScorePair()
    self.vec2_.append(x)
    return x

  def clear_vec2(self):
    self.vec2_ = []
  def vec3_size(self): return len(self.vec3_)
  def vec3_list(self): return self.vec3_

  def vec3(self, i):
    return self.vec3_[i]

  def mutable_vec3(self, i):
    return self.vec3_[i]

  def add_vec3(self):
    x = PremiumStringScorePair()
    self.vec3_.append(x)
    return x

  def clear_vec3(self):
    self.vec3_ = []

  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.urls_size()): self.add_urls().CopyFrom(x.urls(i))
    if (x.has_title()): self.set_title(x.title())
    if (x.has_publicationrank()): self.set_publicationrank(x.publicationrank())
    if (x.has_singletonrank()): self.set_singletonrank(x.singletonrank())
    if (x.has_articlerank()): self.set_articlerank(x.articlerank())
    if (x.has_cluster()): self.mutable_cluster().MergeFrom(x.cluster())
    if (x.has_clusterid()): self.set_clusterid(x.clusterid())
    if (x.has_clusterrank()): self.set_clusterrank(x.clusterrank())
    if (x.has_debuginfo()): self.set_debuginfo(x.debuginfo())
    if (x.has_deprecated_indexresult()): self.mutable_deprecated_indexresult().MergeFrom(x.deprecated_indexresult())
    for i in xrange(x.vec1_size()): self.add_vec1().CopyFrom(x.vec1(i))
    for i in xrange(x.vec2_size()): self.add_vec2().CopyFrom(x.vec2(i))
    for i in xrange(x.vec3_size()): self.add_vec3().CopyFrom(x.vec3(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumArticleInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumArticleInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumArticleInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumArticleInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumArticleInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.urls_) != len(x.urls_): return 0
    for e1, e2 in zip(self.urls_, x.urls_):
      if e1 != e2: return 0
    if self.has_title_ != x.has_title_: return 0
    if self.has_title_ and self.title_ != x.title_: return 0
    if self.has_publicationrank_ != x.has_publicationrank_: return 0
    if self.has_publicationrank_ and self.publicationrank_ != x.publicationrank_: return 0
    if self.has_singletonrank_ != x.has_singletonrank_: return 0
    if self.has_singletonrank_ and self.singletonrank_ != x.singletonrank_: return 0
    if self.has_articlerank_ != x.has_articlerank_: return 0
    if self.has_articlerank_ and self.articlerank_ != x.articlerank_: return 0
    if self.has_cluster_ != x.has_cluster_: return 0
    if self.has_cluster_ and self.cluster_ != x.cluster_: return 0
    if self.has_clusterid_ != x.has_clusterid_: return 0
    if self.has_clusterid_ and self.clusterid_ != x.clusterid_: return 0
    if self.has_clusterrank_ != x.has_clusterrank_: return 0
    if self.has_clusterrank_ and self.clusterrank_ != x.clusterrank_: return 0
    if self.has_debuginfo_ != x.has_debuginfo_: return 0
    if self.has_debuginfo_ and self.debuginfo_ != x.debuginfo_: return 0
    if self.has_deprecated_indexresult_ != x.has_deprecated_indexresult_: return 0
    if self.has_deprecated_indexresult_ and self.deprecated_indexresult_ != x.deprecated_indexresult_: return 0
    if len(self.vec1_) != len(x.vec1_): return 0
    for e1, e2 in zip(self.vec1_, x.vec1_):
      if e1 != e2: return 0
    if len(self.vec2_) != len(x.vec2_): return 0
    for e1, e2 in zip(self.vec2_, x.vec2_):
      if e1 != e2: return 0
    if len(self.vec3_) != len(x.vec3_): return 0
    for e1, e2 in zip(self.vec3_, x.vec3_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.urls_)):
      if (not self.urls_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_cluster_ and not self.cluster_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_deprecated_indexresult_ and not self.deprecated_indexresult_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.vec1_)):
      if (not self.vec1_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.vec2_)):
      if (not self.vec2_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.vec3_)):
      if (not self.vec3_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 1 * len(self.urls_)
    for i in xrange(len(self.urls_)): n += self.lengthString(self.urls_[i].ByteSize())
    if (self.has_title_): n += 1 + self.lengthString(len(self.title_))
    if (self.has_publicationrank_): n += 1 + self.lengthVarInt64(self.publicationrank_)
    if (self.has_singletonrank_): n += 5
    if (self.has_articlerank_): n += 1 + self.lengthVarInt64(self.articlerank_)
    if (self.has_cluster_): n += 1 + self.lengthString(self.cluster_.ByteSize())
    if (self.has_clusterid_): n += 1 + self.lengthVarInt64(self.clusterid_)
    if (self.has_clusterrank_): n += 1 + self.lengthVarInt64(self.clusterrank_)
    if (self.has_debuginfo_): n += 2 + self.lengthString(len(self.debuginfo_))
    if (self.has_deprecated_indexresult_): n += 2 + self.lengthString(self.deprecated_indexresult_.ByteSize())
    n += 2 * len(self.vec1_)
    for i in xrange(len(self.vec1_)): n += self.lengthString(self.vec1_[i].ByteSize())
    n += 2 * len(self.vec2_)
    for i in xrange(len(self.vec2_)): n += self.lengthString(self.vec2_[i].ByteSize())
    n += 2 * len(self.vec3_)
    for i in xrange(len(self.vec3_)): n += self.lengthString(self.vec3_[i].ByteSize())
    return n + 0

  def Clear(self):
    self.clear_urls()
    self.clear_title()
    self.clear_publicationrank()
    self.clear_singletonrank()
    self.clear_articlerank()
    self.clear_cluster()
    self.clear_clusterid()
    self.clear_clusterrank()
    self.clear_debuginfo()
    self.clear_deprecated_indexresult()
    self.clear_vec1()
    self.clear_vec2()
    self.clear_vec3()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.urls_)):
      out.putVarInt32(10)
      out.putVarInt32(self.urls_[i].ByteSize())
      self.urls_[i].OutputUnchecked(out)
    if (self.has_title_):
      out.putVarInt32(18)
      out.putPrefixedString(self.title_)
    if (self.has_publicationrank_):
      out.putVarInt32(24)
      out.putVarInt32(self.publicationrank_)
    if (self.has_articlerank_):
      out.putVarInt32(32)
      out.putVarInt32(self.articlerank_)
    if (self.has_cluster_):
      out.putVarInt32(42)
      out.putVarInt32(self.cluster_.ByteSize())
      self.cluster_.OutputUnchecked(out)
    if (self.has_clusterid_):
      out.putVarInt32(48)
      out.putVarInt64(self.clusterid_)
    if (self.has_clusterrank_):
      out.putVarInt32(56)
      out.putVarInt32(self.clusterrank_)
    if (self.has_singletonrank_):
      out.putVarInt32(69)
      out.putFloat(self.singletonrank_)
    if (self.has_debuginfo_):
      out.putVarInt32(170)
      out.putPrefixedString(self.debuginfo_)
    for i in xrange(len(self.vec1_)):
      out.putVarInt32(178)
      out.putVarInt32(self.vec1_[i].ByteSize())
      self.vec1_[i].OutputUnchecked(out)
    for i in xrange(len(self.vec2_)):
      out.putVarInt32(186)
      out.putVarInt32(self.vec2_[i].ByteSize())
      self.vec2_[i].OutputUnchecked(out)
    for i in xrange(len(self.vec3_)):
      out.putVarInt32(194)
      out.putVarInt32(self.vec3_[i].ByteSize())
      self.vec3_[i].OutputUnchecked(out)
    if (self.has_deprecated_indexresult_):
      out.putVarInt32(202)
      out.putVarInt32(self.deprecated_indexresult_.ByteSize())
      self.deprecated_indexresult_.OutputUnchecked(out)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_urls().TryMerge(tmp)
        continue
      if tt == 18:
        self.set_title(d.getPrefixedString())
        continue
      if tt == 24:
        self.set_publicationrank(d.getVarInt32())
        continue
      if tt == 32:
        self.set_articlerank(d.getVarInt32())
        continue
      if tt == 42:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_cluster().TryMerge(tmp)
        continue
      if tt == 48:
        self.set_clusterid(d.getVarInt64())
        continue
      if tt == 56:
        self.set_clusterrank(d.getVarInt32())
        continue
      if tt == 69:
        self.set_singletonrank(d.getFloat())
        continue
      if tt == 170:
        self.set_debuginfo(d.getPrefixedString())
        continue
      if tt == 178:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_vec1().TryMerge(tmp)
        continue
      if tt == 186:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_vec2().TryMerge(tmp)
        continue
      if tt == 194:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_vec3().TryMerge(tmp)
        continue
      if tt == 202:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_deprecated_indexresult().TryMerge(tmp)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.urls_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Urls%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_title_: res+=prefix+("Title: %s\n" % self.DebugFormatString(self.title_))
    if self.has_publicationrank_: res+=prefix+("PublicationRank: %s\n" % self.DebugFormatInt32(self.publicationrank_))
    if self.has_singletonrank_: res+=prefix+("SingletonRank: %s\n" % self.DebugFormatFloat(self.singletonrank_))
    if self.has_articlerank_: res+=prefix+("ArticleRank: %s\n" % self.DebugFormatInt32(self.articlerank_))
    if self.has_cluster_:
      res+=prefix+"Cluster <\n"
      res+=self.cluster_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_clusterid_: res+=prefix+("ClusterId: %s\n" % self.DebugFormatInt64(self.clusterid_))
    if self.has_clusterrank_: res+=prefix+("ClusterRank: %s\n" % self.DebugFormatInt32(self.clusterrank_))
    if self.has_debuginfo_: res+=prefix+("DebugInfo: %s\n" % self.DebugFormatString(self.debuginfo_))
    if self.has_deprecated_indexresult_:
      res+=prefix+"DEPRECATED_IndexResult <\n"
      res+=self.deprecated_indexresult_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    cnt=0
    for e in self.vec1_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Vec1%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.vec2_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Vec2%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    cnt=0
    for e in self.vec3_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Vec3%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    return res

  kUrls = 1
  kTitle = 2
  kPublicationRank = 3
  kSingletonRank = 8
  kArticleRank = 4
  kCluster = 5
  kClusterId = 6
  kClusterRank = 7
  kDebugInfo = 21
  kDEPRECATED_IndexResult = 25
  kVec1 = 22
  kVec2 = 23
  kVec3 = 24

  _TEXT = (
   "ErrorCode",  #   0
   "Urls",  #   1
   "Title",  #   2
   "PublicationRank",  #   3
   "ArticleRank",  #   4
   "Cluster",  #   5
   "ClusterId",  #   6
   "ClusterRank",  #   7
   "SingletonRank",  #   8
   None,  #   9
   None,  #  10
   None,  #  11
   None,  #  12
   None,  #  13
   None,  #  14
   None,  #  15
   None,  #  16
   None,  #  17
   None,  #  18
   None,  #  19
   None,  #  20
   "DebugInfo",  #  21
   "Vec1",  #  22
   "Vec2",  #  23
   "Vec3",  #  24
   "DEPRECATED_IndexResult",  #  25
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.FLOAT,  #   8

   ProtocolBuffer.Encoder.MAX_TYPE,  #   9

   ProtocolBuffer.Encoder.MAX_TYPE,  #  10

   ProtocolBuffer.Encoder.MAX_TYPE,  #  11

   ProtocolBuffer.Encoder.MAX_TYPE,  #  12

   ProtocolBuffer.Encoder.MAX_TYPE,  #  13

   ProtocolBuffer.Encoder.MAX_TYPE,  #  14

   ProtocolBuffer.Encoder.MAX_TYPE,  #  15

   ProtocolBuffer.Encoder.MAX_TYPE,  #  16

   ProtocolBuffer.Encoder.MAX_TYPE,  #  17

   ProtocolBuffer.Encoder.MAX_TYPE,  #  18

   ProtocolBuffer.Encoder.MAX_TYPE,  #  19

   ProtocolBuffer.Encoder.MAX_TYPE,  #  20

   ProtocolBuffer.Encoder.STRING,  #  21

   ProtocolBuffer.Encoder.STRING,  #  22

   ProtocolBuffer.Encoder.STRING,  #  23

   ProtocolBuffer.Encoder.STRING,  #  24

   ProtocolBuffer.Encoder.STRING,  #  25

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x12,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x41,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x04,
    0x55,
    0x72,
    0x6c,
    0x73,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x24,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x53,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x74,
    0x6f,
    0x6e,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x08,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x41,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x43,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x12,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x43,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x43,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x49,
    0x64,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x43,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x15,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x20,
    0x19,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x12,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x56,
    0x65,
    0x63,
    0x31,
    0x20,
    0x16,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x16,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x50,
    0x61,
    0x69,
    0x72,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x56,
    0x65,
    0x63,
    0x32,
    0x20,
    0x17,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x16,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x50,
    0x61,
    0x69,
    0x72,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x56,
    0x65,
    0x63,
    0x33,
    0x20,
    0x18,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x16,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x50,
    0x61,
    0x69,
    0x72,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0x90,
    0xc2,
    0x6f,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PremiumScoringParams(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.clu_life_support_ = 200
    self.clu_cap_ = 250
    self.clu_weight_ = 0.6
    self.deprecated_pub_life_support_ = 0
    self.deprecated_pub_cap_ = 7
    self.deprecated_pub_weight_ = 0.2
    self.singleton_life_support_ = 0.0
    self.singleton_cap_ = 7.0
    self.singleton_weight_ = 0.2
    self.diword_boost_ = 5.0
    self.age_minyear_ = 1965
    self.age_maxyear_ = 1985
    self.age_boost_ = 20.0
    self.event_age_minyear_ = 1000
    self.event_age_maxyear_ = 1800
    self.event_age_boost_ = 30.0
    self.event_norm_factor_ = 1.1
    self.histogram_scope_ = 2
    self.histogram_scope_thresh_ = 0.5
    self.histogram_contrib_twiddle_ = 1
    self.histogram_event_contrib_ = 3.0
    self.topicality_event_boost_ = 1.1
    self.event_date_format_twid_ = 0.0
    self.free_content_boost_ = 1.0
    self.has_clu_life_support_ = 0
    self.has_clu_cap_ = 0
    self.has_clu_weight_ = 0
    self.has_deprecated_pub_life_support_ = 0
    self.has_deprecated_pub_cap_ = 0
    self.has_deprecated_pub_weight_ = 0
    self.has_singleton_life_support_ = 0
    self.has_singleton_cap_ = 0
    self.has_singleton_weight_ = 0
    self.has_diword_boost_ = 0
    self.has_age_minyear_ = 0
    self.has_age_maxyear_ = 0
    self.has_age_boost_ = 0
    self.has_event_age_minyear_ = 0
    self.has_event_age_maxyear_ = 0
    self.has_event_age_boost_ = 0
    self.has_event_norm_factor_ = 0
    self.has_histogram_scope_ = 0
    self.has_histogram_scope_thresh_ = 0
    self.has_histogram_contrib_twiddle_ = 0
    self.has_histogram_event_contrib_ = 0
    self.has_topicality_event_boost_ = 0
    self.has_event_date_format_twid_ = 0
    self.has_free_content_boost_ = 0
    if contents is not None: self.MergeFromString(contents)

  def clu_life_support(self): return self.clu_life_support_

  def set_clu_life_support(self, x):
    self.has_clu_life_support_ = 1
    self.clu_life_support_ = x

  def clear_clu_life_support(self):
    self.has_clu_life_support_ = 0
    self.clu_life_support_ = 200

  def has_clu_life_support(self): return self.has_clu_life_support_

  def clu_cap(self): return self.clu_cap_

  def set_clu_cap(self, x):
    self.has_clu_cap_ = 1
    self.clu_cap_ = x

  def clear_clu_cap(self):
    self.has_clu_cap_ = 0
    self.clu_cap_ = 250

  def has_clu_cap(self): return self.has_clu_cap_

  def clu_weight(self): return self.clu_weight_

  def set_clu_weight(self, x):
    self.has_clu_weight_ = 1
    self.clu_weight_ = x

  def clear_clu_weight(self):
    self.has_clu_weight_ = 0
    self.clu_weight_ = 0.6

  def has_clu_weight(self): return self.has_clu_weight_

  def deprecated_pub_life_support(self): return self.deprecated_pub_life_support_

  def set_deprecated_pub_life_support(self, x):
    self.has_deprecated_pub_life_support_ = 1
    self.deprecated_pub_life_support_ = x

  def clear_deprecated_pub_life_support(self):
    self.has_deprecated_pub_life_support_ = 0
    self.deprecated_pub_life_support_ = 0

  def has_deprecated_pub_life_support(self): return self.has_deprecated_pub_life_support_

  def deprecated_pub_cap(self): return self.deprecated_pub_cap_

  def set_deprecated_pub_cap(self, x):
    self.has_deprecated_pub_cap_ = 1
    self.deprecated_pub_cap_ = x

  def clear_deprecated_pub_cap(self):
    self.has_deprecated_pub_cap_ = 0
    self.deprecated_pub_cap_ = 7

  def has_deprecated_pub_cap(self): return self.has_deprecated_pub_cap_

  def deprecated_pub_weight(self): return self.deprecated_pub_weight_

  def set_deprecated_pub_weight(self, x):
    self.has_deprecated_pub_weight_ = 1
    self.deprecated_pub_weight_ = x

  def clear_deprecated_pub_weight(self):
    self.has_deprecated_pub_weight_ = 0
    self.deprecated_pub_weight_ = 0.2

  def has_deprecated_pub_weight(self): return self.has_deprecated_pub_weight_

  def singleton_life_support(self): return self.singleton_life_support_

  def set_singleton_life_support(self, x):
    self.has_singleton_life_support_ = 1
    self.singleton_life_support_ = x

  def clear_singleton_life_support(self):
    self.has_singleton_life_support_ = 0
    self.singleton_life_support_ = 0.0

  def has_singleton_life_support(self): return self.has_singleton_life_support_

  def singleton_cap(self): return self.singleton_cap_

  def set_singleton_cap(self, x):
    self.has_singleton_cap_ = 1
    self.singleton_cap_ = x

  def clear_singleton_cap(self):
    self.has_singleton_cap_ = 0
    self.singleton_cap_ = 7.0

  def has_singleton_cap(self): return self.has_singleton_cap_

  def singleton_weight(self): return self.singleton_weight_

  def set_singleton_weight(self, x):
    self.has_singleton_weight_ = 1
    self.singleton_weight_ = x

  def clear_singleton_weight(self):
    self.has_singleton_weight_ = 0
    self.singleton_weight_ = 0.2

  def has_singleton_weight(self): return self.has_singleton_weight_

  def diword_boost(self): return self.diword_boost_

  def set_diword_boost(self, x):
    self.has_diword_boost_ = 1
    self.diword_boost_ = x

  def clear_diword_boost(self):
    self.has_diword_boost_ = 0
    self.diword_boost_ = 5.0

  def has_diword_boost(self): return self.has_diword_boost_

  def age_minyear(self): return self.age_minyear_

  def set_age_minyear(self, x):
    self.has_age_minyear_ = 1
    self.age_minyear_ = x

  def clear_age_minyear(self):
    self.has_age_minyear_ = 0
    self.age_minyear_ = 1965

  def has_age_minyear(self): return self.has_age_minyear_

  def age_maxyear(self): return self.age_maxyear_

  def set_age_maxyear(self, x):
    self.has_age_maxyear_ = 1
    self.age_maxyear_ = x

  def clear_age_maxyear(self):
    self.has_age_maxyear_ = 0
    self.age_maxyear_ = 1985

  def has_age_maxyear(self): return self.has_age_maxyear_

  def age_boost(self): return self.age_boost_

  def set_age_boost(self, x):
    self.has_age_boost_ = 1
    self.age_boost_ = x

  def clear_age_boost(self):
    self.has_age_boost_ = 0
    self.age_boost_ = 20.0

  def has_age_boost(self): return self.has_age_boost_

  def event_age_minyear(self): return self.event_age_minyear_

  def set_event_age_minyear(self, x):
    self.has_event_age_minyear_ = 1
    self.event_age_minyear_ = x

  def clear_event_age_minyear(self):
    self.has_event_age_minyear_ = 0
    self.event_age_minyear_ = 1000

  def has_event_age_minyear(self): return self.has_event_age_minyear_

  def event_age_maxyear(self): return self.event_age_maxyear_

  def set_event_age_maxyear(self, x):
    self.has_event_age_maxyear_ = 1
    self.event_age_maxyear_ = x

  def clear_event_age_maxyear(self):
    self.has_event_age_maxyear_ = 0
    self.event_age_maxyear_ = 1800

  def has_event_age_maxyear(self): return self.has_event_age_maxyear_

  def event_age_boost(self): return self.event_age_boost_

  def set_event_age_boost(self, x):
    self.has_event_age_boost_ = 1
    self.event_age_boost_ = x

  def clear_event_age_boost(self):
    self.has_event_age_boost_ = 0
    self.event_age_boost_ = 30.0

  def has_event_age_boost(self): return self.has_event_age_boost_

  def event_norm_factor(self): return self.event_norm_factor_

  def set_event_norm_factor(self, x):
    self.has_event_norm_factor_ = 1
    self.event_norm_factor_ = x

  def clear_event_norm_factor(self):
    self.has_event_norm_factor_ = 0
    self.event_norm_factor_ = 1.1

  def has_event_norm_factor(self): return self.has_event_norm_factor_

  def histogram_scope(self): return self.histogram_scope_

  def set_histogram_scope(self, x):
    self.has_histogram_scope_ = 1
    self.histogram_scope_ = x

  def clear_histogram_scope(self):
    self.has_histogram_scope_ = 0
    self.histogram_scope_ = 2

  def has_histogram_scope(self): return self.has_histogram_scope_

  def histogram_scope_thresh(self): return self.histogram_scope_thresh_

  def set_histogram_scope_thresh(self, x):
    self.has_histogram_scope_thresh_ = 1
    self.histogram_scope_thresh_ = x

  def clear_histogram_scope_thresh(self):
    self.has_histogram_scope_thresh_ = 0
    self.histogram_scope_thresh_ = 0.5

  def has_histogram_scope_thresh(self): return self.has_histogram_scope_thresh_

  def histogram_contrib_twiddle(self): return self.histogram_contrib_twiddle_

  def set_histogram_contrib_twiddle(self, x):
    self.has_histogram_contrib_twiddle_ = 1
    self.histogram_contrib_twiddle_ = x

  def clear_histogram_contrib_twiddle(self):
    self.has_histogram_contrib_twiddle_ = 0
    self.histogram_contrib_twiddle_ = 1

  def has_histogram_contrib_twiddle(self): return self.has_histogram_contrib_twiddle_

  def histogram_event_contrib(self): return self.histogram_event_contrib_

  def set_histogram_event_contrib(self, x):
    self.has_histogram_event_contrib_ = 1
    self.histogram_event_contrib_ = x

  def clear_histogram_event_contrib(self):
    self.has_histogram_event_contrib_ = 0
    self.histogram_event_contrib_ = 3.0

  def has_histogram_event_contrib(self): return self.has_histogram_event_contrib_

  def topicality_event_boost(self): return self.topicality_event_boost_

  def set_topicality_event_boost(self, x):
    self.has_topicality_event_boost_ = 1
    self.topicality_event_boost_ = x

  def clear_topicality_event_boost(self):
    self.has_topicality_event_boost_ = 0
    self.topicality_event_boost_ = 1.1

  def has_topicality_event_boost(self): return self.has_topicality_event_boost_

  def event_date_format_twid(self): return self.event_date_format_twid_

  def set_event_date_format_twid(self, x):
    self.has_event_date_format_twid_ = 1
    self.event_date_format_twid_ = x

  def clear_event_date_format_twid(self):
    self.has_event_date_format_twid_ = 0
    self.event_date_format_twid_ = 0.0

  def has_event_date_format_twid(self): return self.has_event_date_format_twid_

  def free_content_boost(self): return self.free_content_boost_

  def set_free_content_boost(self, x):
    self.has_free_content_boost_ = 1
    self.free_content_boost_ = x

  def clear_free_content_boost(self):
    self.has_free_content_boost_ = 0
    self.free_content_boost_ = 1.0

  def has_free_content_boost(self): return self.has_free_content_boost_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_clu_life_support()): self.set_clu_life_support(x.clu_life_support())
    if (x.has_clu_cap()): self.set_clu_cap(x.clu_cap())
    if (x.has_clu_weight()): self.set_clu_weight(x.clu_weight())
    if (x.has_deprecated_pub_life_support()): self.set_deprecated_pub_life_support(x.deprecated_pub_life_support())
    if (x.has_deprecated_pub_cap()): self.set_deprecated_pub_cap(x.deprecated_pub_cap())
    if (x.has_deprecated_pub_weight()): self.set_deprecated_pub_weight(x.deprecated_pub_weight())
    if (x.has_singleton_life_support()): self.set_singleton_life_support(x.singleton_life_support())
    if (x.has_singleton_cap()): self.set_singleton_cap(x.singleton_cap())
    if (x.has_singleton_weight()): self.set_singleton_weight(x.singleton_weight())
    if (x.has_diword_boost()): self.set_diword_boost(x.diword_boost())
    if (x.has_age_minyear()): self.set_age_minyear(x.age_minyear())
    if (x.has_age_maxyear()): self.set_age_maxyear(x.age_maxyear())
    if (x.has_age_boost()): self.set_age_boost(x.age_boost())
    if (x.has_event_age_minyear()): self.set_event_age_minyear(x.event_age_minyear())
    if (x.has_event_age_maxyear()): self.set_event_age_maxyear(x.event_age_maxyear())
    if (x.has_event_age_boost()): self.set_event_age_boost(x.event_age_boost())
    if (x.has_event_norm_factor()): self.set_event_norm_factor(x.event_norm_factor())
    if (x.has_histogram_scope()): self.set_histogram_scope(x.histogram_scope())
    if (x.has_histogram_scope_thresh()): self.set_histogram_scope_thresh(x.histogram_scope_thresh())
    if (x.has_histogram_contrib_twiddle()): self.set_histogram_contrib_twiddle(x.histogram_contrib_twiddle())
    if (x.has_histogram_event_contrib()): self.set_histogram_event_contrib(x.histogram_event_contrib())
    if (x.has_topicality_event_boost()): self.set_topicality_event_boost(x.topicality_event_boost())
    if (x.has_event_date_format_twid()): self.set_event_date_format_twid(x.event_date_format_twid())
    if (x.has_free_content_boost()): self.set_free_content_boost(x.free_content_boost())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumScoringParams', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumScoringParams')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumScoringParams', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumScoringParams', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumScoringParams', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_clu_life_support_ != x.has_clu_life_support_: return 0
    if self.has_clu_life_support_ and self.clu_life_support_ != x.clu_life_support_: return 0
    if self.has_clu_cap_ != x.has_clu_cap_: return 0
    if self.has_clu_cap_ and self.clu_cap_ != x.clu_cap_: return 0
    if self.has_clu_weight_ != x.has_clu_weight_: return 0
    if self.has_clu_weight_ and self.clu_weight_ != x.clu_weight_: return 0
    if self.has_deprecated_pub_life_support_ != x.has_deprecated_pub_life_support_: return 0
    if self.has_deprecated_pub_life_support_ and self.deprecated_pub_life_support_ != x.deprecated_pub_life_support_: return 0
    if self.has_deprecated_pub_cap_ != x.has_deprecated_pub_cap_: return 0
    if self.has_deprecated_pub_cap_ and self.deprecated_pub_cap_ != x.deprecated_pub_cap_: return 0
    if self.has_deprecated_pub_weight_ != x.has_deprecated_pub_weight_: return 0
    if self.has_deprecated_pub_weight_ and self.deprecated_pub_weight_ != x.deprecated_pub_weight_: return 0
    if self.has_singleton_life_support_ != x.has_singleton_life_support_: return 0
    if self.has_singleton_life_support_ and self.singleton_life_support_ != x.singleton_life_support_: return 0
    if self.has_singleton_cap_ != x.has_singleton_cap_: return 0
    if self.has_singleton_cap_ and self.singleton_cap_ != x.singleton_cap_: return 0
    if self.has_singleton_weight_ != x.has_singleton_weight_: return 0
    if self.has_singleton_weight_ and self.singleton_weight_ != x.singleton_weight_: return 0
    if self.has_diword_boost_ != x.has_diword_boost_: return 0
    if self.has_diword_boost_ and self.diword_boost_ != x.diword_boost_: return 0
    if self.has_age_minyear_ != x.has_age_minyear_: return 0
    if self.has_age_minyear_ and self.age_minyear_ != x.age_minyear_: return 0
    if self.has_age_maxyear_ != x.has_age_maxyear_: return 0
    if self.has_age_maxyear_ and self.age_maxyear_ != x.age_maxyear_: return 0
    if self.has_age_boost_ != x.has_age_boost_: return 0
    if self.has_age_boost_ and self.age_boost_ != x.age_boost_: return 0
    if self.has_event_age_minyear_ != x.has_event_age_minyear_: return 0
    if self.has_event_age_minyear_ and self.event_age_minyear_ != x.event_age_minyear_: return 0
    if self.has_event_age_maxyear_ != x.has_event_age_maxyear_: return 0
    if self.has_event_age_maxyear_ and self.event_age_maxyear_ != x.event_age_maxyear_: return 0
    if self.has_event_age_boost_ != x.has_event_age_boost_: return 0
    if self.has_event_age_boost_ and self.event_age_boost_ != x.event_age_boost_: return 0
    if self.has_event_norm_factor_ != x.has_event_norm_factor_: return 0
    if self.has_event_norm_factor_ and self.event_norm_factor_ != x.event_norm_factor_: return 0
    if self.has_histogram_scope_ != x.has_histogram_scope_: return 0
    if self.has_histogram_scope_ and self.histogram_scope_ != x.histogram_scope_: return 0
    if self.has_histogram_scope_thresh_ != x.has_histogram_scope_thresh_: return 0
    if self.has_histogram_scope_thresh_ and self.histogram_scope_thresh_ != x.histogram_scope_thresh_: return 0
    if self.has_histogram_contrib_twiddle_ != x.has_histogram_contrib_twiddle_: return 0
    if self.has_histogram_contrib_twiddle_ and self.histogram_contrib_twiddle_ != x.histogram_contrib_twiddle_: return 0
    if self.has_histogram_event_contrib_ != x.has_histogram_event_contrib_: return 0
    if self.has_histogram_event_contrib_ and self.histogram_event_contrib_ != x.histogram_event_contrib_: return 0
    if self.has_topicality_event_boost_ != x.has_topicality_event_boost_: return 0
    if self.has_topicality_event_boost_ and self.topicality_event_boost_ != x.topicality_event_boost_: return 0
    if self.has_event_date_format_twid_ != x.has_event_date_format_twid_: return 0
    if self.has_event_date_format_twid_ and self.event_date_format_twid_ != x.event_date_format_twid_: return 0
    if self.has_free_content_boost_ != x.has_free_content_boost_: return 0
    if self.has_free_content_boost_ and self.free_content_boost_ != x.free_content_boost_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_clu_life_support_): n += 1 + self.lengthVarInt64(self.clu_life_support_)
    if (self.has_clu_cap_): n += 1 + self.lengthVarInt64(self.clu_cap_)
    if (self.has_clu_weight_): n += 5
    if (self.has_deprecated_pub_life_support_): n += 1 + self.lengthVarInt64(self.deprecated_pub_life_support_)
    if (self.has_deprecated_pub_cap_): n += 1 + self.lengthVarInt64(self.deprecated_pub_cap_)
    if (self.has_deprecated_pub_weight_): n += 5
    if (self.has_singleton_life_support_): n += 5
    if (self.has_singleton_cap_): n += 5
    if (self.has_singleton_weight_): n += 5
    if (self.has_diword_boost_): n += 5
    if (self.has_age_minyear_): n += 1 + self.lengthVarInt64(self.age_minyear_)
    if (self.has_age_maxyear_): n += 1 + self.lengthVarInt64(self.age_maxyear_)
    if (self.has_age_boost_): n += 5
    if (self.has_event_age_minyear_): n += 1 + self.lengthVarInt64(self.event_age_minyear_)
    if (self.has_event_age_maxyear_): n += 1 + self.lengthVarInt64(self.event_age_maxyear_)
    if (self.has_event_age_boost_): n += 6
    if (self.has_event_norm_factor_): n += 6
    if (self.has_histogram_scope_): n += 2 + self.lengthVarInt64(self.histogram_scope_)
    if (self.has_histogram_scope_thresh_): n += 6
    if (self.has_histogram_contrib_twiddle_): n += 3
    if (self.has_histogram_event_contrib_): n += 6
    if (self.has_topicality_event_boost_): n += 6
    if (self.has_event_date_format_twid_): n += 6
    if (self.has_free_content_boost_): n += 6
    return n + 0

  def Clear(self):
    self.clear_clu_life_support()
    self.clear_clu_cap()
    self.clear_clu_weight()
    self.clear_deprecated_pub_life_support()
    self.clear_deprecated_pub_cap()
    self.clear_deprecated_pub_weight()
    self.clear_singleton_life_support()
    self.clear_singleton_cap()
    self.clear_singleton_weight()
    self.clear_diword_boost()
    self.clear_age_minyear()
    self.clear_age_maxyear()
    self.clear_age_boost()
    self.clear_event_age_minyear()
    self.clear_event_age_maxyear()
    self.clear_event_age_boost()
    self.clear_event_norm_factor()
    self.clear_histogram_scope()
    self.clear_histogram_scope_thresh()
    self.clear_histogram_contrib_twiddle()
    self.clear_histogram_event_contrib()
    self.clear_topicality_event_boost()
    self.clear_event_date_format_twid()
    self.clear_free_content_boost()

  def OutputUnchecked(self, out):
    if (self.has_clu_life_support_):
      out.putVarInt32(8)
      out.putVarInt32(self.clu_life_support_)
    if (self.has_clu_cap_):
      out.putVarInt32(16)
      out.putVarInt32(self.clu_cap_)
    if (self.has_clu_weight_):
      out.putVarInt32(29)
      out.putFloat(self.clu_weight_)
    if (self.has_deprecated_pub_life_support_):
      out.putVarInt32(32)
      out.putVarInt32(self.deprecated_pub_life_support_)
    if (self.has_deprecated_pub_cap_):
      out.putVarInt32(40)
      out.putVarInt32(self.deprecated_pub_cap_)
    if (self.has_deprecated_pub_weight_):
      out.putVarInt32(53)
      out.putFloat(self.deprecated_pub_weight_)
    if (self.has_diword_boost_):
      out.putVarInt32(61)
      out.putFloat(self.diword_boost_)
    if (self.has_age_minyear_):
      out.putVarInt32(64)
      out.putVarInt32(self.age_minyear_)
    if (self.has_age_maxyear_):
      out.putVarInt32(72)
      out.putVarInt32(self.age_maxyear_)
    if (self.has_age_boost_):
      out.putVarInt32(85)
      out.putFloat(self.age_boost_)
    if (self.has_singleton_life_support_):
      out.putVarInt32(93)
      out.putFloat(self.singleton_life_support_)
    if (self.has_singleton_cap_):
      out.putVarInt32(101)
      out.putFloat(self.singleton_cap_)
    if (self.has_singleton_weight_):
      out.putVarInt32(109)
      out.putFloat(self.singleton_weight_)
    if (self.has_event_age_minyear_):
      out.putVarInt32(112)
      out.putVarInt32(self.event_age_minyear_)
    if (self.has_event_age_maxyear_):
      out.putVarInt32(120)
      out.putVarInt32(self.event_age_maxyear_)
    if (self.has_event_age_boost_):
      out.putVarInt32(133)
      out.putFloat(self.event_age_boost_)
    if (self.has_event_norm_factor_):
      out.putVarInt32(141)
      out.putFloat(self.event_norm_factor_)
    if (self.has_histogram_scope_):
      out.putVarInt32(144)
      out.putVarInt32(self.histogram_scope_)
    if (self.has_histogram_contrib_twiddle_):
      out.putVarInt32(152)
      out.putBoolean(self.histogram_contrib_twiddle_)
    if (self.has_histogram_event_contrib_):
      out.putVarInt32(165)
      out.putFloat(self.histogram_event_contrib_)
    if (self.has_topicality_event_boost_):
      out.putVarInt32(173)
      out.putFloat(self.topicality_event_boost_)
    if (self.has_event_date_format_twid_):
      out.putVarInt32(181)
      out.putFloat(self.event_date_format_twid_)
    if (self.has_free_content_boost_):
      out.putVarInt32(189)
      out.putFloat(self.free_content_boost_)
    if (self.has_histogram_scope_thresh_):
      out.putVarInt32(197)
      out.putFloat(self.histogram_scope_thresh_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_clu_life_support(d.getVarInt32())
        continue
      if tt == 16:
        self.set_clu_cap(d.getVarInt32())
        continue
      if tt == 29:
        self.set_clu_weight(d.getFloat())
        continue
      if tt == 32:
        self.set_deprecated_pub_life_support(d.getVarInt32())
        continue
      if tt == 40:
        self.set_deprecated_pub_cap(d.getVarInt32())
        continue
      if tt == 53:
        self.set_deprecated_pub_weight(d.getFloat())
        continue
      if tt == 61:
        self.set_diword_boost(d.getFloat())
        continue
      if tt == 64:
        self.set_age_minyear(d.getVarInt32())
        continue
      if tt == 72:
        self.set_age_maxyear(d.getVarInt32())
        continue
      if tt == 85:
        self.set_age_boost(d.getFloat())
        continue
      if tt == 93:
        self.set_singleton_life_support(d.getFloat())
        continue
      if tt == 101:
        self.set_singleton_cap(d.getFloat())
        continue
      if tt == 109:
        self.set_singleton_weight(d.getFloat())
        continue
      if tt == 112:
        self.set_event_age_minyear(d.getVarInt32())
        continue
      if tt == 120:
        self.set_event_age_maxyear(d.getVarInt32())
        continue
      if tt == 133:
        self.set_event_age_boost(d.getFloat())
        continue
      if tt == 141:
        self.set_event_norm_factor(d.getFloat())
        continue
      if tt == 144:
        self.set_histogram_scope(d.getVarInt32())
        continue
      if tt == 152:
        self.set_histogram_contrib_twiddle(d.getBoolean())
        continue
      if tt == 165:
        self.set_histogram_event_contrib(d.getFloat())
        continue
      if tt == 173:
        self.set_topicality_event_boost(d.getFloat())
        continue
      if tt == 181:
        self.set_event_date_format_twid(d.getFloat())
        continue
      if tt == 189:
        self.set_free_content_boost(d.getFloat())
        continue
      if tt == 197:
        self.set_histogram_scope_thresh(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_clu_life_support_: res+=prefix+("clu_life_support: %s\n" % self.DebugFormatInt32(self.clu_life_support_))
    if self.has_clu_cap_: res+=prefix+("clu_cap: %s\n" % self.DebugFormatInt32(self.clu_cap_))
    if self.has_clu_weight_: res+=prefix+("clu_weight: %s\n" % self.DebugFormatFloat(self.clu_weight_))
    if self.has_deprecated_pub_life_support_: res+=prefix+("DEPRECATED_pub_life_support: %s\n" % self.DebugFormatInt32(self.deprecated_pub_life_support_))
    if self.has_deprecated_pub_cap_: res+=prefix+("DEPRECATED_pub_cap: %s\n" % self.DebugFormatInt32(self.deprecated_pub_cap_))
    if self.has_deprecated_pub_weight_: res+=prefix+("DEPRECATED_pub_weight: %s\n" % self.DebugFormatFloat(self.deprecated_pub_weight_))
    if self.has_singleton_life_support_: res+=prefix+("singleton_life_support: %s\n" % self.DebugFormatFloat(self.singleton_life_support_))
    if self.has_singleton_cap_: res+=prefix+("singleton_cap: %s\n" % self.DebugFormatFloat(self.singleton_cap_))
    if self.has_singleton_weight_: res+=prefix+("singleton_weight: %s\n" % self.DebugFormatFloat(self.singleton_weight_))
    if self.has_diword_boost_: res+=prefix+("diword_boost: %s\n" % self.DebugFormatFloat(self.diword_boost_))
    if self.has_age_minyear_: res+=prefix+("age_minyear: %s\n" % self.DebugFormatInt32(self.age_minyear_))
    if self.has_age_maxyear_: res+=prefix+("age_maxyear: %s\n" % self.DebugFormatInt32(self.age_maxyear_))
    if self.has_age_boost_: res+=prefix+("age_boost: %s\n" % self.DebugFormatFloat(self.age_boost_))
    if self.has_event_age_minyear_: res+=prefix+("event_age_minyear: %s\n" % self.DebugFormatInt32(self.event_age_minyear_))
    if self.has_event_age_maxyear_: res+=prefix+("event_age_maxyear: %s\n" % self.DebugFormatInt32(self.event_age_maxyear_))
    if self.has_event_age_boost_: res+=prefix+("event_age_boost: %s\n" % self.DebugFormatFloat(self.event_age_boost_))
    if self.has_event_norm_factor_: res+=prefix+("event_norm_factor: %s\n" % self.DebugFormatFloat(self.event_norm_factor_))
    if self.has_histogram_scope_: res+=prefix+("histogram_scope: %s\n" % self.DebugFormatInt32(self.histogram_scope_))
    if self.has_histogram_scope_thresh_: res+=prefix+("histogram_scope_thresh: %s\n" % self.DebugFormatFloat(self.histogram_scope_thresh_))
    if self.has_histogram_contrib_twiddle_: res+=prefix+("histogram_contrib_twiddle: %s\n" % self.DebugFormatBool(self.histogram_contrib_twiddle_))
    if self.has_histogram_event_contrib_: res+=prefix+("histogram_event_contrib: %s\n" % self.DebugFormatFloat(self.histogram_event_contrib_))
    if self.has_topicality_event_boost_: res+=prefix+("topicality_event_boost: %s\n" % self.DebugFormatFloat(self.topicality_event_boost_))
    if self.has_event_date_format_twid_: res+=prefix+("event_date_format_twid: %s\n" % self.DebugFormatFloat(self.event_date_format_twid_))
    if self.has_free_content_boost_: res+=prefix+("free_content_boost: %s\n" % self.DebugFormatFloat(self.free_content_boost_))
    return res

  kclu_life_support = 1
  kclu_cap = 2
  kclu_weight = 3
  kDEPRECATED_pub_life_support = 4
  kDEPRECATED_pub_cap = 5
  kDEPRECATED_pub_weight = 6
  ksingleton_life_support = 11
  ksingleton_cap = 12
  ksingleton_weight = 13
  kdiword_boost = 7
  kage_minyear = 8
  kage_maxyear = 9
  kage_boost = 10
  kevent_age_minyear = 14
  kevent_age_maxyear = 15
  kevent_age_boost = 16
  kevent_norm_factor = 17
  khistogram_scope = 18
  khistogram_scope_thresh = 24
  khistogram_contrib_twiddle = 19
  khistogram_event_contrib = 20
  ktopicality_event_boost = 21
  kevent_date_format_twid = 22
  kfree_content_boost = 23

  _TEXT = (
   "ErrorCode",  #   0
   "clu_life_support",  #   1
   "clu_cap",  #   2
   "clu_weight",  #   3
   "DEPRECATED_pub_life_support",  #   4
   "DEPRECATED_pub_cap",  #   5
   "DEPRECATED_pub_weight",  #   6
   "diword_boost",  #   7
   "age_minyear",  #   8
   "age_maxyear",  #   9
   "age_boost",  #  10
   "singleton_life_support",  #  11
   "singleton_cap",  #  12
   "singleton_weight",  #  13
   "event_age_minyear",  #  14
   "event_age_maxyear",  #  15
   "event_age_boost",  #  16
   "event_norm_factor",  #  17
   "histogram_scope",  #  18
   "histogram_contrib_twiddle",  #  19
   "histogram_event_contrib",  #  20
   "topicality_event_boost",  #  21
   "event_date_format_twid",  #  22
   "free_content_boost",  #  23
   "histogram_scope_thresh",  #  24
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.FLOAT,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.FLOAT,  #   6

   ProtocolBuffer.Encoder.FLOAT,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.FLOAT,  #  10

   ProtocolBuffer.Encoder.FLOAT,  #  11

   ProtocolBuffer.Encoder.FLOAT,  #  12

   ProtocolBuffer.Encoder.FLOAT,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.FLOAT,  #  16

   ProtocolBuffer.Encoder.FLOAT,  #  17

   ProtocolBuffer.Encoder.NUMERIC,  #  18

   ProtocolBuffer.Encoder.NUMERIC,  #  19

   ProtocolBuffer.Encoder.FLOAT,  #  20

   ProtocolBuffer.Encoder.FLOAT,  #  21

   ProtocolBuffer.Encoder.FLOAT,  #  22

   ProtocolBuffer.Encoder.FLOAT,  #  23

   ProtocolBuffer.Encoder.FLOAT,  #  24

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x14,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x50,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x13,
    0x1a,
    0x10,
    0x63,
    0x6c,
    0x75,
    0x5f,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x5f,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x03,
    0x32,
    0x30,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x32,
    0x30,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x63,
    0x6c,
    0x75,
    0x5f,
    0x63,
    0x61,
    0x70,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x03,
    0x32,
    0x35,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x32,
    0x35,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x63,
    0x6c,
    0x75,
    0x5f,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x03,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x36,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x36,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x70,
    0x75,
    0x62,
    0x5f,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x5f,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x70,
    0x75,
    0x62,
    0x5f,
    0x63,
    0x61,
    0x70,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x37,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x37,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x70,
    0x75,
    0x62,
    0x5f,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x06,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x32,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x32,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x74,
    0x6f,
    0x6e,
    0x5f,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x5f,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x0b,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x74,
    0x6f,
    0x6e,
    0x5f,
    0x63,
    0x61,
    0x70,
    0x20,
    0x0c,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x37,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x37,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x74,
    0x6f,
    0x6e,
    0x5f,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x0d,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x32,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x32,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x64,
    0x69,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x07,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x35,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x35,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6d,
    0x69,
    0x6e,
    0x79,
    0x65,
    0x61,
    0x72,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x39,
    0x36,
    0x35,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x39,
    0x36,
    0x35,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6d,
    0x61,
    0x78,
    0x79,
    0x65,
    0x61,
    0x72,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x39,
    0x38,
    0x35,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x39,
    0x38,
    0x35,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x0a,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x32,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x32,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6d,
    0x69,
    0x6e,
    0x79,
    0x65,
    0x61,
    0x72,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x30,
    0x30,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x30,
    0x30,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6d,
    0x61,
    0x78,
    0x79,
    0x65,
    0x61,
    0x72,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x04,
    0x31,
    0x38,
    0x30,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x31,
    0x38,
    0x30,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x10,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x04,
    0x33,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x33,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x6e,
    0x6f,
    0x72,
    0x6d,
    0x5f,
    0x66,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x11,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x5f,
    0x73,
    0x63,
    0x6f,
    0x70,
    0x65,
    0x20,
    0x12,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x32,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x32,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x5f,
    0x73,
    0x63,
    0x6f,
    0x70,
    0x65,
    0x5f,
    0x74,
    0x68,
    0x72,
    0x65,
    0x73,
    0x68,
    0x20,
    0x18,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x35,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x35,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x62,
    0x5f,
    0x74,
    0x77,
    0x69,
    0x64,
    0x64,
    0x6c,
    0x65,
    0x20,
    0x13,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x5f,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x62,
    0x20,
    0x14,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x33,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x33,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x74,
    0x6f,
    0x70,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x5f,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x15,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x5f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x5f,
    0x74,
    0x77,
    0x69,
    0x64,
    0x20,
    0x16,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x66,
    0x72,
    0x65,
    0x65,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x17,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PremiumWebParams(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 1936111 

  _TypeId_NAMES = {
    1936111: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.returnnonentitled_ = 0
    self.entitledbundle_ = []
    self.countentitledasfree_ = 0
    self.has_returnnonentitled_ = 0
    self.has_countentitledasfree_ = 0
    if contents is not None: self.MergeFromString(contents)

  def returnnonentitled(self): return self.returnnonentitled_

  def set_returnnonentitled(self, x):
    self.has_returnnonentitled_ = 1
    self.returnnonentitled_ = x

  def clear_returnnonentitled(self):
    self.has_returnnonentitled_ = 0
    self.returnnonentitled_ = 0

  def has_returnnonentitled(self): return self.has_returnnonentitled_

  def entitledbundle_size(self): return len(self.entitledbundle_)
  def entitledbundle_list(self): return self.entitledbundle_

  def entitledbundle(self, i):
    return self.entitledbundle_[i]

  def set_entitledbundle(self, i, x):
    self.entitledbundle_[i] = x

  def add_entitledbundle(self, x):
    self.entitledbundle_.append(x)

  def clear_entitledbundle(self):
    self.entitledbundle_ = []

  def countentitledasfree(self): return self.countentitledasfree_

  def set_countentitledasfree(self, x):
    self.has_countentitledasfree_ = 1
    self.countentitledasfree_ = x

  def clear_countentitledasfree(self):
    self.has_countentitledasfree_ = 0
    self.countentitledasfree_ = 0

  def has_countentitledasfree(self): return self.has_countentitledasfree_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_returnnonentitled()): self.set_returnnonentitled(x.returnnonentitled())
    for i in xrange(x.entitledbundle_size()): self.add_entitledbundle(x.entitledbundle(i))
    if (x.has_countentitledasfree()): self.set_countentitledasfree(x.countentitledasfree())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumWebParams', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumWebParams')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumWebParams', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumWebParams', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumWebParams', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_returnnonentitled_ != x.has_returnnonentitled_: return 0
    if self.has_returnnonentitled_ and self.returnnonentitled_ != x.returnnonentitled_: return 0
    if len(self.entitledbundle_) != len(x.entitledbundle_): return 0
    for e1, e2 in zip(self.entitledbundle_, x.entitledbundle_):
      if e1 != e2: return 0
    if self.has_countentitledasfree_ != x.has_countentitledasfree_: return 0
    if self.has_countentitledasfree_ and self.countentitledasfree_ != x.countentitledasfree_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_returnnonentitled_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: returnnonentitled not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += 1 * len(self.entitledbundle_)
    for i in xrange(len(self.entitledbundle_)): n += self.lengthVarInt64(self.entitledbundle_[i])
    if (self.has_countentitledasfree_): n += 2
    return n + 2

  def Clear(self):
    self.clear_returnnonentitled()
    self.clear_entitledbundle()
    self.clear_countentitledasfree()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putBoolean(self.returnnonentitled_)
    for i in xrange(len(self.entitledbundle_)):
      out.putVarInt32(16)
      out.putVarInt32(self.entitledbundle_[i])
    if (self.has_countentitledasfree_):
      out.putVarInt32(24)
      out.putBoolean(self.countentitledasfree_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_returnnonentitled(d.getBoolean())
        continue
      if tt == 16:
        self.add_entitledbundle(d.getVarInt32())
        continue
      if tt == 24:
        self.set_countentitledasfree(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_returnnonentitled_: res+=prefix+("ReturnNonEntitled: %s\n" % self.DebugFormatBool(self.returnnonentitled_))
    cnt=0
    for e in self.entitledbundle_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("EntitledBundle%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    if self.has_countentitledasfree_: res+=prefix+("CountEntitledAsFree: %s\n" % self.DebugFormatBool(self.countentitledasfree_))
    return res

  kReturnNonEntitled = 1
  kEntitledBundle = 2
  kCountEntitledAsFree = 3

  _TEXT = (
   "ErrorCode",  #   0
   "ReturnNonEntitled",  #   1
   "EntitledBundle",  #   2
   "CountEntitledAsFree",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x10,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x57,
    0x65,
    0x62,
    0x50,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x13,
    0x1a,
    0x11,
    0x52,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x4e,
    0x6f,
    0x6e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x64,
    0x42,
    0x75,
    0x6e,
    0x64,
    0x6c,
    0x65,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x64,
    0x41,
    0x73,
    0x46,
    0x72,
    0x65,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xef,
    0x95,
    0x76,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PremiumHistogramInfo_Date(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.yearormonth_ = 0
    self.weight_ = 0.0
    self.has_yearormonth_ = 0
    self.has_weight_ = 0
    if contents is not None: self.MergeFromString(contents)

  def yearormonth(self): return self.yearormonth_

  def set_yearormonth(self, x):
    self.has_yearormonth_ = 1
    self.yearormonth_ = x

  def clear_yearormonth(self):
    self.has_yearormonth_ = 0
    self.yearormonth_ = 0

  def has_yearormonth(self): return self.has_yearormonth_

  def weight(self): return self.weight_

  def set_weight(self, x):
    self.has_weight_ = 1
    self.weight_ = x

  def clear_weight(self):
    self.has_weight_ = 0
    self.weight_ = 0.0

  def has_weight(self): return self.has_weight_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_yearormonth()): self.set_yearormonth(x.yearormonth())
    if (x.has_weight()): self.set_weight(x.weight())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumHistogramInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumHistogramInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumHistogramInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumHistogramInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumHistogramInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_yearormonth_ != x.has_yearormonth_: return 0
    if self.has_yearormonth_ and self.yearormonth_ != x.yearormonth_: return 0
    if self.has_weight_ != x.has_weight_: return 0
    if self.has_weight_ and self.weight_ != x.weight_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_yearormonth_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: yearormonth not set.')
    if (not self.has_weight_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: weight not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.yearormonth_)
    return n + 6

  def Clear(self):
    self.clear_yearormonth()
    self.clear_weight()

  def OutputUnchecked(self, out):
    out.putVarInt32(16)
    out.putVarInt32(self.yearormonth_)
    out.putVarInt32(29)
    out.putFloat(self.weight_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 16:
        self.set_yearormonth(d.getVarInt32())
        continue
      if tt == 29:
        self.set_weight(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_yearormonth_: res+=prefix+("YearOrMonth: %s\n" % self.DebugFormatInt32(self.yearormonth_))
    if self.has_weight_: res+=prefix+("weight: %s\n" % self.DebugFormatFloat(self.weight_))
    return res

class PremiumHistogramInfo(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 1863595 

  _TypeId_NAMES = {
    1863595: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.date_ = []
    self.num_results_ = 0
    self.has_num_results_ = 0
    if contents is not None: self.MergeFromString(contents)

  def date_size(self): return len(self.date_)
  def date_list(self): return self.date_

  def date(self, i):
    return self.date_[i]

  def mutable_date(self, i):
    return self.date_[i]

  def add_date(self):
    x = PremiumHistogramInfo_Date()
    self.date_.append(x)
    return x

  def clear_date(self):
    self.date_ = []
  def num_results(self): return self.num_results_

  def set_num_results(self, x):
    self.has_num_results_ = 1
    self.num_results_ = x

  def clear_num_results(self):
    self.has_num_results_ = 0
    self.num_results_ = 0

  def has_num_results(self): return self.has_num_results_


  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.date_size()): self.add_date().CopyFrom(x.date(i))
    if (x.has_num_results()): self.set_num_results(x.num_results())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumHistogramInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumHistogramInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumHistogramInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumHistogramInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumHistogramInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.date_) != len(x.date_): return 0
    for e1, e2 in zip(self.date_, x.date_):
      if e1 != e2: return 0
    if self.has_num_results_ != x.has_num_results_: return 0
    if self.has_num_results_ and self.num_results_ != x.num_results_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.date_)):
      if (not self.date_[i].IsInitialized(debug_strs)): initialized=0
    if (not self.has_num_results_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: num_results not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += 2 * len(self.date_)
    for i in xrange(len(self.date_)): n += self.date_[i].ByteSize()
    n += self.lengthVarInt64(self.num_results_)
    return n + 1

  def Clear(self):
    self.clear_date()
    self.clear_num_results()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.date_)):
      out.putVarInt32(11)
      self.date_[i].OutputUnchecked(out)
      out.putVarInt32(12)
    out.putVarInt32(32)
    out.putVarInt32(self.num_results_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_date().TryMerge(d)
        continue
      if tt == 32:
        self.set_num_results(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.date_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Date%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_num_results_: res+=prefix+("num_results: %s\n" % self.DebugFormatInt32(self.num_results_))
    return res

  kDateGroup = 1
  kDateYearOrMonth = 2
  kDateweight = 3
  knum_results = 4

  _TEXT = (
   "ErrorCode",  #   0
   "Date",  #   1
   "YearOrMonth",  #   2
   "weight",  #   3
   "num_results",  #   4
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.FLOAT,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x14,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x04,
    0x44,
    0x61,
    0x74,
    0x65,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x44,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x59,
    0x65,
    0x61,
    0x72,
    0x4f,
    0x72,
    0x4d,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x44,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x03,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x60,
    0x00,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x6e,
    0x75,
    0x6d,
    0x5f,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xab,
    0xdf,
    0x71,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PremiumHistogramParams(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 2780743 

  _TypeId_NAMES = {
    2780743: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)


  YEAR         =    0 
  MONTH        =    1 

  _Resolution_NAMES = {
    0: "YEAR",
    1: "MONTH",
  }

  def Resolution_Name(cls, x): return cls._Resolution_NAMES.get(x, "")
  Resolution_Name = classmethod(Resolution_Name)

  def __init__(self, contents=None):
    self.histogramresolution_ = 0
    self.has_histogramresolution_ = 0
    if contents is not None: self.MergeFromString(contents)

  def histogramresolution(self): return self.histogramresolution_

  def set_histogramresolution(self, x):
    self.has_histogramresolution_ = 1
    self.histogramresolution_ = x

  def clear_histogramresolution(self):
    self.has_histogramresolution_ = 0
    self.histogramresolution_ = 0

  def has_histogramresolution(self): return self.has_histogramresolution_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_histogramresolution()): self.set_histogramresolution(x.histogramresolution())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumHistogramParams', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumHistogramParams')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumHistogramParams', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumHistogramParams', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumHistogramParams', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_histogramresolution_ != x.has_histogramresolution_: return 0
    if self.has_histogramresolution_ and self.histogramresolution_ != x.histogramresolution_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_histogramresolution_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: histogramresolution not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.histogramresolution_)
    return n + 1

  def Clear(self):
    self.clear_histogramresolution()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.histogramresolution_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_histogramresolution(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_histogramresolution_: res+=prefix+("HistogramResolution: %s\n" % self.DebugFormatInt32(self.histogramresolution_))
    return res

  kHistogramResolution = 1

  _TEXT = (
   "ErrorCode",  #   0
   "HistogramResolution",  #   1
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x16,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x50,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x13,
    0x1a,
    0x13,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x52,
    0x65,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xc7,
    0xdc,
    0xa9,
    0x01,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0a,
    0x52,
    0x65,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x04,
    0x59,
    0x45,
    0x41,
    0x52,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x05,
    0x4d,
    0x4f,
    0x4e,
    0x54,
    0x48,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PremiumDocInfo(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 2428470 

  _TypeId_NAMES = {
    2428470: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.date_ = 0
    self.publication_ = 0
    self.price_ = 0
    self.currency_ = 0
    self.has_date_ = 0
    self.has_publication_ = 0
    self.has_price_ = 0
    self.has_currency_ = 0
    if contents is not None: self.MergeFromString(contents)

  def date(self): return self.date_

  def set_date(self, x):
    self.has_date_ = 1
    self.date_ = x

  def clear_date(self):
    self.has_date_ = 0
    self.date_ = 0

  def has_date(self): return self.has_date_

  def publication(self): return self.publication_

  def set_publication(self, x):
    self.has_publication_ = 1
    self.publication_ = x

  def clear_publication(self):
    self.has_publication_ = 0
    self.publication_ = 0

  def has_publication(self): return self.has_publication_

  def price(self): return self.price_

  def set_price(self, x):
    self.has_price_ = 1
    self.price_ = x

  def clear_price(self):
    self.has_price_ = 0
    self.price_ = 0

  def has_price(self): return self.has_price_

  def currency(self): return self.currency_

  def set_currency(self, x):
    self.has_currency_ = 1
    self.currency_ = x

  def clear_currency(self):
    self.has_currency_ = 0
    self.currency_ = 0

  def has_currency(self): return self.has_currency_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_date()): self.set_date(x.date())
    if (x.has_publication()): self.set_publication(x.publication())
    if (x.has_price()): self.set_price(x.price())
    if (x.has_currency()): self.set_currency(x.currency())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumDocInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumDocInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumDocInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumDocInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumDocInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_date_ != x.has_date_: return 0
    if self.has_date_ and self.date_ != x.date_: return 0
    if self.has_publication_ != x.has_publication_: return 0
    if self.has_publication_ and self.publication_ != x.publication_: return 0
    if self.has_price_ != x.has_price_: return 0
    if self.has_price_ and self.price_ != x.price_: return 0
    if self.has_currency_ != x.has_currency_: return 0
    if self.has_currency_ and self.currency_ != x.currency_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_date_): n += 1 + self.lengthVarInt64(self.date_)
    if (self.has_publication_): n += 1 + self.lengthVarInt64(self.publication_)
    if (self.has_price_): n += 1 + self.lengthVarInt64(self.price_)
    if (self.has_currency_): n += 1 + self.lengthVarInt64(self.currency_)
    return n + 0

  def Clear(self):
    self.clear_date()
    self.clear_publication()
    self.clear_price()
    self.clear_currency()

  def OutputUnchecked(self, out):
    if (self.has_date_):
      out.putVarInt32(8)
      out.putVarInt64(self.date_)
    if (self.has_publication_):
      out.putVarInt32(16)
      out.putVarUint64(self.publication_)
    if (self.has_price_):
      out.putVarInt32(24)
      out.putVarInt32(self.price_)
    if (self.has_currency_):
      out.putVarInt32(32)
      out.putVarInt32(self.currency_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_date(d.getVarInt64())
        continue
      if tt == 16:
        self.set_publication(d.getVarUint64())
        continue
      if tt == 24:
        self.set_price(d.getVarInt32())
        continue
      if tt == 32:
        self.set_currency(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_date_: res+=prefix+("Date: %s\n" % self.DebugFormatInt64(self.date_))
    if self.has_publication_: res+=prefix+("Publication: %s\n" % self.DebugFormatInt64(self.publication_))
    if self.has_price_: res+=prefix+("Price: %s\n" % self.DebugFormatInt32(self.price_))
    if self.has_currency_: res+=prefix+("Currency: %s\n" % self.DebugFormatInt32(self.currency_))
    return res

  kDate = 1
  kPublication = 2
  kPrice = 3
  kCurrency = 4

  _TEXT = (
   "ErrorCode",  #   0
   "Date",  #   1
   "Publication",  #   2
   "Price",  #   3
   "Currency",  #   4
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x0e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x04,
    0x44,
    0x61,
    0x74,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x50,
    0x72,
    0x69,
    0x63,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x43,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xb6,
    0x9c,
    0x94,
    0x01,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PremiumSnippetParams(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 5568157 

  _TypeId_NAMES = {
    5568157: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.articleprefixsnippet_ = 0
    self.fulleventsnippet_ = 0
    self.has_articleprefixsnippet_ = 0
    self.has_fulleventsnippet_ = 0
    if contents is not None: self.MergeFromString(contents)

  def articleprefixsnippet(self): return self.articleprefixsnippet_

  def set_articleprefixsnippet(self, x):
    self.has_articleprefixsnippet_ = 1
    self.articleprefixsnippet_ = x

  def clear_articleprefixsnippet(self):
    self.has_articleprefixsnippet_ = 0
    self.articleprefixsnippet_ = 0

  def has_articleprefixsnippet(self): return self.has_articleprefixsnippet_

  def fulleventsnippet(self): return self.fulleventsnippet_

  def set_fulleventsnippet(self, x):
    self.has_fulleventsnippet_ = 1
    self.fulleventsnippet_ = x

  def clear_fulleventsnippet(self):
    self.has_fulleventsnippet_ = 0
    self.fulleventsnippet_ = 0

  def has_fulleventsnippet(self): return self.has_fulleventsnippet_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_articleprefixsnippet()): self.set_articleprefixsnippet(x.articleprefixsnippet())
    if (x.has_fulleventsnippet()): self.set_fulleventsnippet(x.fulleventsnippet())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'PremiumSnippetParams', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'PremiumSnippetParams')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'PremiumSnippetParams', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'PremiumSnippetParams', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'PremiumSnippetParams', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_articleprefixsnippet_ != x.has_articleprefixsnippet_: return 0
    if self.has_articleprefixsnippet_ and self.articleprefixsnippet_ != x.articleprefixsnippet_: return 0
    if self.has_fulleventsnippet_ != x.has_fulleventsnippet_: return 0
    if self.has_fulleventsnippet_ and self.fulleventsnippet_ != x.fulleventsnippet_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_articleprefixsnippet_): n += 2
    if (self.has_fulleventsnippet_): n += 2
    return n + 0

  def Clear(self):
    self.clear_articleprefixsnippet()
    self.clear_fulleventsnippet()

  def OutputUnchecked(self, out):
    if (self.has_articleprefixsnippet_):
      out.putVarInt32(8)
      out.putBoolean(self.articleprefixsnippet_)
    if (self.has_fulleventsnippet_):
      out.putVarInt32(16)
      out.putBoolean(self.fulleventsnippet_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_articleprefixsnippet(d.getBoolean())
        continue
      if tt == 16:
        self.set_fulleventsnippet(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_articleprefixsnippet_: res+=prefix+("ArticlePrefixSnippet: %s\n" % self.DebugFormatBool(self.articleprefixsnippet_))
    if self.has_fulleventsnippet_: res+=prefix+("FullEventSnippet: %s\n" % self.DebugFormatBool(self.fulleventsnippet_))
    return res

  kArticlePrefixSnippet = 1
  kFullEventSnippet = 2

  _TEXT = (
   "ErrorCode",  #   0
   "ArticlePrefixSnippet",  #   1
   "FullEventSnippet",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x0a,
    0x14,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x50,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x13,
    0x1a,
    0x14,
    0x41,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x50,
    0x72,
    0x65,
    0x66,
    0x69,
    0x78,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x46,
    0x75,
    0x6c,
    0x6c,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0x9d,
    0xed,
    0xd3,
    0x02,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['PremiumIndexResult','PremiumClusterInfo','PremiumClusterInfo_Composite','PremiumArticleInfo','PremiumScoringParams','PremiumWebParams','PremiumHistogramInfo','PremiumHistogramInfo_Date','PremiumHistogramParams','PremiumDocInfo','PremiumSnippetParams']
