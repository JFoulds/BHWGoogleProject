# This file automatically generated by protocol-compiler from repository/base/repository.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

from google3.science_search.citation.science_citation_pb import ScienceCitation
from google3.science_search.citation.legal_citation_pb import LegalCitation
from google3.science_search.citation.legal_citation_pb import LegalDate
from google3.science_search.citation.legal_citation_pb import LegalPerson
from google3.ocean.data.docinfo.ocean_docinfo_pb import OceanDocInfo
from google3.localsearch.base.docinfo_pb import DocInfo
class NewLangidInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.language_ = 0
    self.encoding_ = 0
    self.languageisreliable_ = 0
    self.encodingisreliable_ = 0
    self.researchlangidlanguage_ = 0
    self.researchlangidencoding_ = 0
    self.langdetconfidence_ = 0.0
    self.encdetconfidence_ = 0.0
    self.has_language_ = 0
    self.has_encoding_ = 0
    self.has_languageisreliable_ = 0
    self.has_encodingisreliable_ = 0
    self.has_researchlangidlanguage_ = 0
    self.has_researchlangidencoding_ = 0
    self.has_langdetconfidence_ = 0
    self.has_encdetconfidence_ = 0
    if contents is not None: self.MergeFromString(contents)

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = 0

  def has_language(self): return self.has_language_

  def encoding(self): return self.encoding_

  def set_encoding(self, x):
    self.has_encoding_ = 1
    self.encoding_ = x

  def clear_encoding(self):
    self.has_encoding_ = 0
    self.encoding_ = 0

  def has_encoding(self): return self.has_encoding_

  def languageisreliable(self): return self.languageisreliable_

  def set_languageisreliable(self, x):
    self.has_languageisreliable_ = 1
    self.languageisreliable_ = x

  def clear_languageisreliable(self):
    self.has_languageisreliable_ = 0
    self.languageisreliable_ = 0

  def has_languageisreliable(self): return self.has_languageisreliable_

  def encodingisreliable(self): return self.encodingisreliable_

  def set_encodingisreliable(self, x):
    self.has_encodingisreliable_ = 1
    self.encodingisreliable_ = x

  def clear_encodingisreliable(self):
    self.has_encodingisreliable_ = 0
    self.encodingisreliable_ = 0

  def has_encodingisreliable(self): return self.has_encodingisreliable_

  def researchlangidlanguage(self): return self.researchlangidlanguage_

  def set_researchlangidlanguage(self, x):
    self.has_researchlangidlanguage_ = 1
    self.researchlangidlanguage_ = x

  def clear_researchlangidlanguage(self):
    self.has_researchlangidlanguage_ = 0
    self.researchlangidlanguage_ = 0

  def has_researchlangidlanguage(self): return self.has_researchlangidlanguage_

  def researchlangidencoding(self): return self.researchlangidencoding_

  def set_researchlangidencoding(self, x):
    self.has_researchlangidencoding_ = 1
    self.researchlangidencoding_ = x

  def clear_researchlangidencoding(self):
    self.has_researchlangidencoding_ = 0
    self.researchlangidencoding_ = 0

  def has_researchlangidencoding(self): return self.has_researchlangidencoding_

  def langdetconfidence(self): return self.langdetconfidence_

  def set_langdetconfidence(self, x):
    self.has_langdetconfidence_ = 1
    self.langdetconfidence_ = x

  def clear_langdetconfidence(self):
    self.has_langdetconfidence_ = 0
    self.langdetconfidence_ = 0.0

  def has_langdetconfidence(self): return self.has_langdetconfidence_

  def encdetconfidence(self): return self.encdetconfidence_

  def set_encdetconfidence(self, x):
    self.has_encdetconfidence_ = 1
    self.encdetconfidence_ = x

  def clear_encdetconfidence(self):
    self.has_encdetconfidence_ = 0
    self.encdetconfidence_ = 0.0

  def has_encdetconfidence(self): return self.has_encdetconfidence_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_language()): self.set_language(x.language())
    if (x.has_encoding()): self.set_encoding(x.encoding())
    if (x.has_languageisreliable()): self.set_languageisreliable(x.languageisreliable())
    if (x.has_encodingisreliable()): self.set_encodingisreliable(x.encodingisreliable())
    if (x.has_researchlangidlanguage()): self.set_researchlangidlanguage(x.researchlangidlanguage())
    if (x.has_researchlangidencoding()): self.set_researchlangidencoding(x.researchlangidencoding())
    if (x.has_langdetconfidence()): self.set_langdetconfidence(x.langdetconfidence())
    if (x.has_encdetconfidence()): self.set_encdetconfidence(x.encdetconfidence())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'NewLangidInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'NewLangidInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'NewLangidInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'NewLangidInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'NewLangidInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_encoding_ != x.has_encoding_: return 0
    if self.has_encoding_ and self.encoding_ != x.encoding_: return 0
    if self.has_languageisreliable_ != x.has_languageisreliable_: return 0
    if self.has_languageisreliable_ and self.languageisreliable_ != x.languageisreliable_: return 0
    if self.has_encodingisreliable_ != x.has_encodingisreliable_: return 0
    if self.has_encodingisreliable_ and self.encodingisreliable_ != x.encodingisreliable_: return 0
    if self.has_researchlangidlanguage_ != x.has_researchlangidlanguage_: return 0
    if self.has_researchlangidlanguage_ and self.researchlangidlanguage_ != x.researchlangidlanguage_: return 0
    if self.has_researchlangidencoding_ != x.has_researchlangidencoding_: return 0
    if self.has_researchlangidencoding_ and self.researchlangidencoding_ != x.researchlangidencoding_: return 0
    if self.has_langdetconfidence_ != x.has_langdetconfidence_: return 0
    if self.has_langdetconfidence_ and self.langdetconfidence_ != x.langdetconfidence_: return 0
    if self.has_encdetconfidence_ != x.has_encdetconfidence_: return 0
    if self.has_encdetconfidence_ and self.encdetconfidence_ != x.encdetconfidence_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_language_): n += 1 + self.lengthVarInt64(self.language_)
    if (self.has_encoding_): n += 1 + self.lengthVarInt64(self.encoding_)
    if (self.has_languageisreliable_): n += 1 + self.lengthVarInt64(self.languageisreliable_)
    if (self.has_encodingisreliable_): n += 1 + self.lengthVarInt64(self.encodingisreliable_)
    if (self.has_researchlangidlanguage_): n += 1 + self.lengthVarInt64(self.researchlangidlanguage_)
    if (self.has_researchlangidencoding_): n += 1 + self.lengthVarInt64(self.researchlangidencoding_)
    if (self.has_langdetconfidence_): n += 5
    if (self.has_encdetconfidence_): n += 5
    return n + 0

  def Clear(self):
    self.clear_language()
    self.clear_encoding()
    self.clear_languageisreliable()
    self.clear_encodingisreliable()
    self.clear_researchlangidlanguage()
    self.clear_researchlangidencoding()
    self.clear_langdetconfidence()
    self.clear_encdetconfidence()

  def OutputUnchecked(self, out):
    if (self.has_language_):
      out.putVarInt32(8)
      out.putVarInt32(self.language_)
    if (self.has_encoding_):
      out.putVarInt32(16)
      out.putVarInt32(self.encoding_)
    if (self.has_languageisreliable_):
      out.putVarInt32(24)
      out.putVarInt32(self.languageisreliable_)
    if (self.has_encodingisreliable_):
      out.putVarInt32(32)
      out.putVarInt32(self.encodingisreliable_)
    if (self.has_researchlangidlanguage_):
      out.putVarInt32(40)
      out.putVarInt32(self.researchlangidlanguage_)
    if (self.has_researchlangidencoding_):
      out.putVarInt32(48)
      out.putVarInt32(self.researchlangidencoding_)
    if (self.has_langdetconfidence_):
      out.putVarInt32(61)
      out.putFloat(self.langdetconfidence_)
    if (self.has_encdetconfidence_):
      out.putVarInt32(69)
      out.putFloat(self.encdetconfidence_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_language(d.getVarInt32())
        continue
      if tt == 16:
        self.set_encoding(d.getVarInt32())
        continue
      if tt == 24:
        self.set_languageisreliable(d.getVarInt32())
        continue
      if tt == 32:
        self.set_encodingisreliable(d.getVarInt32())
        continue
      if tt == 40:
        self.set_researchlangidlanguage(d.getVarInt32())
        continue
      if tt == 48:
        self.set_researchlangidencoding(d.getVarInt32())
        continue
      if tt == 61:
        self.set_langdetconfidence(d.getFloat())
        continue
      if tt == 69:
        self.set_encdetconfidence(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatInt32(self.language_))
    if self.has_encoding_: res+=prefix+("Encoding: %s\n" % self.DebugFormatInt32(self.encoding_))
    if self.has_languageisreliable_: res+=prefix+("LanguageIsReliable: %s\n" % self.DebugFormatInt32(self.languageisreliable_))
    if self.has_encodingisreliable_: res+=prefix+("EncodingIsReliable: %s\n" % self.DebugFormatInt32(self.encodingisreliable_))
    if self.has_researchlangidlanguage_: res+=prefix+("ResearchLangidLanguage: %s\n" % self.DebugFormatInt32(self.researchlangidlanguage_))
    if self.has_researchlangidencoding_: res+=prefix+("ResearchLangidEncoding: %s\n" % self.DebugFormatInt32(self.researchlangidencoding_))
    if self.has_langdetconfidence_: res+=prefix+("LangDetConfidence: %s\n" % self.DebugFormatFloat(self.langdetconfidence_))
    if self.has_encdetconfidence_: res+=prefix+("EncDetConfidence: %s\n" % self.DebugFormatFloat(self.encdetconfidence_))
    return res

  kLanguage = 1
  kEncoding = 2
  kLanguageIsReliable = 3
  kEncodingIsReliable = 4
  kResearchLangidLanguage = 5
  kResearchLangidEncoding = 6
  kLangDetConfidence = 7
  kEncDetConfidence = 8

  _TEXT = (
   "ErrorCode",  #   0
   "Language",  #   1
   "Encoding",  #   2
   "LanguageIsReliable",  #   3
   "EncodingIsReliable",  #   4
   "ResearchLangidLanguage",  #   5
   "ResearchLangidEncoding",  #   6
   "LangDetConfidence",  #   7
   "EncDetConfidence",  #   8
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.FLOAT,  #   7

   ProtocolBuffer.Encoder.FLOAT,  #   8

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x20,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x62,
    0x61,
    0x73,
    0x65,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0d,
    0x4e,
    0x65,
    0x77,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x69,
    0x64,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x08,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x45,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x49,
    0x73,
    0x52,
    0x65,
    0x6c,
    0x69,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x45,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x49,
    0x73,
    0x52,
    0x65,
    0x6c,
    0x69,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x69,
    0x64,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x69,
    0x64,
    0x45,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x44,
    0x65,
    0x74,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x07,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x45,
    0x6e,
    0x63,
    0x44,
    0x65,
    0x74,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x08,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x42,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x30,
    0x2e,
    0x30,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class GDocumentBase_Content(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.crawltime_ = 0
    self.contenttype_ = 0
    self.uncompressedlength_ = 0
    self.language_ = 0
    self.encoding_ = 0
    self.visualtype_ = 0
    self.representation_ = ""
    self.authmethod_ = 0
    self.has_crawltime_ = 0
    self.has_contenttype_ = 0
    self.has_uncompressedlength_ = 0
    self.has_language_ = 0
    self.has_encoding_ = 0
    self.has_visualtype_ = 0
    self.has_representation_ = 0
    self.has_authmethod_ = 0
    if contents is not None: self.MergeFromString(contents)

  def crawltime(self): return self.crawltime_

  def set_crawltime(self, x):
    self.has_crawltime_ = 1
    self.crawltime_ = x

  def clear_crawltime(self):
    self.has_crawltime_ = 0
    self.crawltime_ = 0

  def has_crawltime(self): return self.has_crawltime_

  def contenttype(self): return self.contenttype_

  def set_contenttype(self, x):
    self.has_contenttype_ = 1
    self.contenttype_ = x

  def clear_contenttype(self):
    self.has_contenttype_ = 0
    self.contenttype_ = 0

  def has_contenttype(self): return self.has_contenttype_

  def uncompressedlength(self): return self.uncompressedlength_

  def set_uncompressedlength(self, x):
    self.has_uncompressedlength_ = 1
    self.uncompressedlength_ = x

  def clear_uncompressedlength(self):
    self.has_uncompressedlength_ = 0
    self.uncompressedlength_ = 0

  def has_uncompressedlength(self): return self.has_uncompressedlength_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = 0

  def has_language(self): return self.has_language_

  def encoding(self): return self.encoding_

  def set_encoding(self, x):
    self.has_encoding_ = 1
    self.encoding_ = x

  def clear_encoding(self):
    self.has_encoding_ = 0
    self.encoding_ = 0

  def has_encoding(self): return self.has_encoding_

  def visualtype(self): return self.visualtype_

  def set_visualtype(self, x):
    self.has_visualtype_ = 1
    self.visualtype_ = x

  def clear_visualtype(self):
    self.has_visualtype_ = 0
    self.visualtype_ = 0

  def has_visualtype(self): return self.has_visualtype_

  def representation(self): return self.representation_

  def set_representation(self, x):
    self.has_representation_ = 1
    self.representation_ = x

  def clear_representation(self):
    self.has_representation_ = 0
    self.representation_ = ""

  def has_representation(self): return self.has_representation_

  def authmethod(self): return self.authmethod_

  def set_authmethod(self, x):
    self.has_authmethod_ = 1
    self.authmethod_ = x

  def clear_authmethod(self):
    self.has_authmethod_ = 0
    self.authmethod_ = 0

  def has_authmethod(self): return self.has_authmethod_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_crawltime()): self.set_crawltime(x.crawltime())
    if (x.has_contenttype()): self.set_contenttype(x.contenttype())
    if (x.has_uncompressedlength()): self.set_uncompressedlength(x.uncompressedlength())
    if (x.has_language()): self.set_language(x.language())
    if (x.has_encoding()): self.set_encoding(x.encoding())
    if (x.has_visualtype()): self.set_visualtype(x.visualtype())
    if (x.has_representation()): self.set_representation(x.representation())
    if (x.has_authmethod()): self.set_authmethod(x.authmethod())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GDocumentBase', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GDocumentBase')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GDocumentBase', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GDocumentBase', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GDocumentBase', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_crawltime_ != x.has_crawltime_: return 0
    if self.has_crawltime_ and self.crawltime_ != x.crawltime_: return 0
    if self.has_contenttype_ != x.has_contenttype_: return 0
    if self.has_contenttype_ and self.contenttype_ != x.contenttype_: return 0
    if self.has_uncompressedlength_ != x.has_uncompressedlength_: return 0
    if self.has_uncompressedlength_ and self.uncompressedlength_ != x.uncompressedlength_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_encoding_ != x.has_encoding_: return 0
    if self.has_encoding_ and self.encoding_ != x.encoding_: return 0
    if self.has_visualtype_ != x.has_visualtype_: return 0
    if self.has_visualtype_ and self.visualtype_ != x.visualtype_: return 0
    if self.has_representation_ != x.has_representation_: return 0
    if self.has_representation_ and self.representation_ != x.representation_: return 0
    if self.has_authmethod_ != x.has_authmethod_: return 0
    if self.has_authmethod_ and self.authmethod_ != x.authmethod_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_representation_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: representation not set.')
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_crawltime_): n += 1 + self.lengthVarInt64(self.crawltime_)
    if (self.has_contenttype_): n += 1 + self.lengthVarInt64(self.contenttype_)
    if (self.has_uncompressedlength_): n += 1 + self.lengthVarInt64(self.uncompressedlength_)
    if (self.has_language_): n += 1 + self.lengthVarInt64(self.language_)
    if (self.has_encoding_): n += 1 + self.lengthVarInt64(self.encoding_)
    if (self.has_visualtype_): n += 2 + self.lengthVarInt64(self.visualtype_)
    n += self.lengthString(len(self.representation_))
    if (self.has_authmethod_): n += 2 + self.lengthVarInt64(self.authmethod_)
    return n + 1

  def Clear(self):
    self.clear_crawltime()
    self.clear_contenttype()
    self.clear_uncompressedlength()
    self.clear_language()
    self.clear_encoding()
    self.clear_visualtype()
    self.clear_representation()
    self.clear_authmethod()

  def OutputUnchecked(self, out):
    if (self.has_crawltime_):
      out.putVarInt32(72)
      out.putVarInt64(self.crawltime_)
    if (self.has_contenttype_):
      out.putVarInt32(80)
      out.putVarInt32(self.contenttype_)
    if (self.has_uncompressedlength_):
      out.putVarInt32(88)
      out.putVarInt32(self.uncompressedlength_)
    if (self.has_language_):
      out.putVarInt32(96)
      out.putVarInt32(self.language_)
    if (self.has_encoding_):
      out.putVarInt32(104)
      out.putVarInt32(self.encoding_)
    out.putVarInt32(114)
    out.putPrefixedString(self.representation_)
    if (self.has_authmethod_):
      out.putVarInt32(360)
      out.putVarInt32(self.authmethod_)
    if (self.has_visualtype_):
      out.putVarInt32(848)
      out.putVarInt32(self.visualtype_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 52: break
      if tt == 72:
        self.set_crawltime(d.getVarInt64())
        continue
      if tt == 80:
        self.set_contenttype(d.getVarInt32())
        continue
      if tt == 88:
        self.set_uncompressedlength(d.getVarInt32())
        continue
      if tt == 96:
        self.set_language(d.getVarInt32())
        continue
      if tt == 104:
        self.set_encoding(d.getVarInt32())
        continue
      if tt == 114:
        self.set_representation(d.getPrefixedString())
        continue
      if tt == 360:
        self.set_authmethod(d.getVarInt32())
        continue
      if tt == 848:
        self.set_visualtype(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_crawltime_: res+=prefix+("CrawlTime: %s\n" % self.DebugFormatInt64(self.crawltime_))
    if self.has_contenttype_: res+=prefix+("ContentType: %s\n" % self.DebugFormatInt32(self.contenttype_))
    if self.has_uncompressedlength_: res+=prefix+("UncompressedLength: %s\n" % self.DebugFormatInt32(self.uncompressedlength_))
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatInt32(self.language_))
    if self.has_encoding_: res+=prefix+("Encoding: %s\n" % self.DebugFormatInt32(self.encoding_))
    if self.has_visualtype_: res+=prefix+("VisualType: %s\n" % self.DebugFormatInt32(self.visualtype_))
    if self.has_representation_: res+=prefix+("Representation: %s\n" % self.DebugFormatString(self.representation_))
    if self.has_authmethod_: res+=prefix+("AuthMethod: %s\n" % self.DebugFormatInt32(self.authmethod_))
    return res

class GDocumentBase_Directory(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.identifier_ = ""
    self.category_ = ""
    self.title_ = ""
    self.description_ = ""
    self.language_ = 0
    self.url_ = ""
    self.has_identifier_ = 0
    self.has_category_ = 0
    self.has_title_ = 0
    self.has_description_ = 0
    self.has_language_ = 0
    self.has_url_ = 0
    if contents is not None: self.MergeFromString(contents)

  def identifier(self): return self.identifier_

  def set_identifier(self, x):
    self.has_identifier_ = 1
    self.identifier_ = x

  def clear_identifier(self):
    self.has_identifier_ = 0
    self.identifier_ = ""

  def has_identifier(self): return self.has_identifier_

  def category(self): return self.category_

  def set_category(self, x):
    self.has_category_ = 1
    self.category_ = x

  def clear_category(self):
    self.has_category_ = 0
    self.category_ = ""

  def has_category(self): return self.has_category_

  def title(self): return self.title_

  def set_title(self, x):
    self.has_title_ = 1
    self.title_ = x

  def clear_title(self):
    self.has_title_ = 0
    self.title_ = ""

  def has_title(self): return self.has_title_

  def description(self): return self.description_

  def set_description(self, x):
    self.has_description_ = 1
    self.description_ = x

  def clear_description(self):
    self.has_description_ = 0
    self.description_ = ""

  def has_description(self): return self.has_description_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = 0

  def has_language(self): return self.has_language_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_identifier()): self.set_identifier(x.identifier())
    if (x.has_category()): self.set_category(x.category())
    if (x.has_title()): self.set_title(x.title())
    if (x.has_description()): self.set_description(x.description())
    if (x.has_language()): self.set_language(x.language())
    if (x.has_url()): self.set_url(x.url())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GDocumentBase', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GDocumentBase')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GDocumentBase', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GDocumentBase', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GDocumentBase', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_identifier_ != x.has_identifier_: return 0
    if self.has_identifier_ and self.identifier_ != x.identifier_: return 0
    if self.has_category_ != x.has_category_: return 0
    if self.has_category_ and self.category_ != x.category_: return 0
    if self.has_title_ != x.has_title_: return 0
    if self.has_title_ and self.title_ != x.title_: return 0
    if self.has_description_ != x.has_description_: return 0
    if self.has_description_ and self.description_ != x.description_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_identifier_): n += 2 + self.lengthString(len(self.identifier_))
    if (self.has_category_): n += 2 + self.lengthString(len(self.category_))
    if (self.has_title_): n += 2 + self.lengthString(len(self.title_))
    if (self.has_description_): n += 2 + self.lengthString(len(self.description_))
    if (self.has_language_): n += 2 + self.lengthVarInt64(self.language_)
    if (self.has_url_): n += 2 + self.lengthString(len(self.url_))
    return n + 0

  def Clear(self):
    self.clear_identifier()
    self.clear_category()
    self.clear_title()
    self.clear_description()
    self.clear_language()
    self.clear_url()

  def OutputUnchecked(self, out):
    if (self.has_identifier_):
      out.putVarInt32(330)
      out.putPrefixedString(self.identifier_)
    if (self.has_category_):
      out.putVarInt32(338)
      out.putPrefixedString(self.category_)
    if (self.has_title_):
      out.putVarInt32(346)
      out.putPrefixedString(self.title_)
    if (self.has_description_):
      out.putVarInt32(354)
      out.putPrefixedString(self.description_)
    if (self.has_language_):
      out.putVarInt32(368)
      out.putVarInt32(self.language_)
    if (self.has_url_):
      out.putVarInt32(378)
      out.putPrefixedString(self.url_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 324: break
      if tt == 330:
        self.set_identifier(d.getPrefixedString())
        continue
      if tt == 338:
        self.set_category(d.getPrefixedString())
        continue
      if tt == 346:
        self.set_title(d.getPrefixedString())
        continue
      if tt == 354:
        self.set_description(d.getPrefixedString())
        continue
      if tt == 368:
        self.set_language(d.getVarInt32())
        continue
      if tt == 378:
        self.set_url(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_identifier_: res+=prefix+("Identifier: %s\n" % self.DebugFormatString(self.identifier_))
    if self.has_category_: res+=prefix+("Category: %s\n" % self.DebugFormatString(self.category_))
    if self.has_title_: res+=prefix+("Title: %s\n" % self.DebugFormatString(self.title_))
    if self.has_description_: res+=prefix+("Description: %s\n" % self.DebugFormatString(self.description_))
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatInt32(self.language_))
    if self.has_url_: res+=prefix+("URL: %s\n" % self.DebugFormatString(self.url_))
    return res

class GDocumentBase(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.docid_ = 0
    self.pagerank_ = 0
    self.pagerank_ns_ = 1
    self.url_ = ""
    self.urlafterredirects_ = ""
    self.displayurl_ = ""
    self.noindexreason_ = 0
    self.nosnippetreason_ = 0
    self.noarchivereason_ = 0
    self.contentexpirytime_ = 0
    self.ipaddr_ = ""
    self.content_ = None
    self.directory_ = []
    self.filterforsafesearch_ = 0
    self.sciencemetadata_ = None
    self.ocean_doc_info_ = None
    self.localsearch_doc_info_ = None
    self.newlangid_ = None
    self.externalmetadata_ = ""
    self.has_docid_ = 0
    self.has_pagerank_ = 0
    self.has_pagerank_ns_ = 0
    self.has_url_ = 0
    self.has_urlafterredirects_ = 0
    self.has_displayurl_ = 0
    self.has_noindexreason_ = 0
    self.has_nosnippetreason_ = 0
    self.has_noarchivereason_ = 0
    self.has_contentexpirytime_ = 0
    self.has_ipaddr_ = 0
    self.has_content_ = 0
    self.has_filterforsafesearch_ = 0
    self.has_sciencemetadata_ = 0
    self.has_ocean_doc_info_ = 0
    self.has_localsearch_doc_info_ = 0
    self.has_newlangid_ = 0
    self.has_externalmetadata_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def docid(self): return self.docid_

  def set_docid(self, x):
    self.has_docid_ = 1
    self.docid_ = x

  def clear_docid(self):
    self.has_docid_ = 0
    self.docid_ = 0

  def has_docid(self): return self.has_docid_

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 0

  def has_pagerank(self): return self.has_pagerank_

  def pagerank_ns(self): return self.pagerank_ns_

  def set_pagerank_ns(self, x):
    self.has_pagerank_ns_ = 1
    self.pagerank_ns_ = x

  def clear_pagerank_ns(self):
    self.has_pagerank_ns_ = 0
    self.pagerank_ns_ = 1

  def has_pagerank_ns(self): return self.has_pagerank_ns_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def urlafterredirects(self): return self.urlafterredirects_

  def set_urlafterredirects(self, x):
    self.has_urlafterredirects_ = 1
    self.urlafterredirects_ = x

  def clear_urlafterredirects(self):
    self.has_urlafterredirects_ = 0
    self.urlafterredirects_ = ""

  def has_urlafterredirects(self): return self.has_urlafterredirects_

  def displayurl(self): return self.displayurl_

  def set_displayurl(self, x):
    self.has_displayurl_ = 1
    self.displayurl_ = x

  def clear_displayurl(self):
    self.has_displayurl_ = 0
    self.displayurl_ = ""

  def has_displayurl(self): return self.has_displayurl_

  def noindexreason(self): return self.noindexreason_

  def set_noindexreason(self, x):
    self.has_noindexreason_ = 1
    self.noindexreason_ = x

  def clear_noindexreason(self):
    self.has_noindexreason_ = 0
    self.noindexreason_ = 0

  def has_noindexreason(self): return self.has_noindexreason_

  def nosnippetreason(self): return self.nosnippetreason_

  def set_nosnippetreason(self, x):
    self.has_nosnippetreason_ = 1
    self.nosnippetreason_ = x

  def clear_nosnippetreason(self):
    self.has_nosnippetreason_ = 0
    self.nosnippetreason_ = 0

  def has_nosnippetreason(self): return self.has_nosnippetreason_

  def noarchivereason(self): return self.noarchivereason_

  def set_noarchivereason(self, x):
    self.has_noarchivereason_ = 1
    self.noarchivereason_ = x

  def clear_noarchivereason(self):
    self.has_noarchivereason_ = 0
    self.noarchivereason_ = 0

  def has_noarchivereason(self): return self.has_noarchivereason_

  def contentexpirytime(self): return self.contentexpirytime_

  def set_contentexpirytime(self, x):
    self.has_contentexpirytime_ = 1
    self.contentexpirytime_ = x

  def clear_contentexpirytime(self):
    self.has_contentexpirytime_ = 0
    self.contentexpirytime_ = 0

  def has_contentexpirytime(self): return self.has_contentexpirytime_

  def ipaddr(self): return self.ipaddr_

  def set_ipaddr(self, x):
    self.has_ipaddr_ = 1
    self.ipaddr_ = x

  def clear_ipaddr(self):
    self.has_ipaddr_ = 0
    self.ipaddr_ = ""

  def has_ipaddr(self): return self.has_ipaddr_

  def content(self):
    if self.content_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.content_ is None: self.content_ = GDocumentBase_Content()
      finally:
        self.lazy_init_lock_.release()
    return self.content_

  def mutable_content(self): self.has_content_ = 1; return self.content()

  def clear_content(self):
    #Warning: this method does not acquire the lock.
    self.has_content_ = 0;
    if self.content_ is not None: self.content_.Clear()

  def has_content(self): return self.has_content_

  def directory_size(self): return len(self.directory_)
  def directory_list(self): return self.directory_

  def directory(self, i):
    return self.directory_[i]

  def mutable_directory(self, i):
    return self.directory_[i]

  def add_directory(self):
    x = GDocumentBase_Directory()
    self.directory_.append(x)
    return x

  def clear_directory(self):
    self.directory_ = []
  def filterforsafesearch(self): return self.filterforsafesearch_

  def set_filterforsafesearch(self, x):
    self.has_filterforsafesearch_ = 1
    self.filterforsafesearch_ = x

  def clear_filterforsafesearch(self):
    self.has_filterforsafesearch_ = 0
    self.filterforsafesearch_ = 0

  def has_filterforsafesearch(self): return self.has_filterforsafesearch_

  def sciencemetadata(self):
    if self.sciencemetadata_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.sciencemetadata_ is None: self.sciencemetadata_ = ScienceCitation()
      finally:
        self.lazy_init_lock_.release()
    return self.sciencemetadata_

  def mutable_sciencemetadata(self): self.has_sciencemetadata_ = 1; return self.sciencemetadata()

  def clear_sciencemetadata(self):
    #Warning: this method does not acquire the lock.
    self.has_sciencemetadata_ = 0;
    if self.sciencemetadata_ is not None: self.sciencemetadata_.Clear()

  def has_sciencemetadata(self): return self.has_sciencemetadata_

  def ocean_doc_info(self):
    if self.ocean_doc_info_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.ocean_doc_info_ is None: self.ocean_doc_info_ = OceanDocInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.ocean_doc_info_

  def mutable_ocean_doc_info(self): self.has_ocean_doc_info_ = 1; return self.ocean_doc_info()

  def clear_ocean_doc_info(self):
    #Warning: this method does not acquire the lock.
    self.has_ocean_doc_info_ = 0;
    if self.ocean_doc_info_ is not None: self.ocean_doc_info_.Clear()

  def has_ocean_doc_info(self): return self.has_ocean_doc_info_

  def localsearch_doc_info(self):
    if self.localsearch_doc_info_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.localsearch_doc_info_ is None: self.localsearch_doc_info_ = DocInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.localsearch_doc_info_

  def mutable_localsearch_doc_info(self): self.has_localsearch_doc_info_ = 1; return self.localsearch_doc_info()

  def clear_localsearch_doc_info(self):
    #Warning: this method does not acquire the lock.
    self.has_localsearch_doc_info_ = 0;
    if self.localsearch_doc_info_ is not None: self.localsearch_doc_info_.Clear()

  def has_localsearch_doc_info(self): return self.has_localsearch_doc_info_

  def newlangid(self):
    if self.newlangid_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.newlangid_ is None: self.newlangid_ = NewLangidInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.newlangid_

  def mutable_newlangid(self): self.has_newlangid_ = 1; return self.newlangid()

  def clear_newlangid(self):
    #Warning: this method does not acquire the lock.
    self.has_newlangid_ = 0;
    if self.newlangid_ is not None: self.newlangid_.Clear()

  def has_newlangid(self): return self.has_newlangid_

  def externalmetadata(self): return self.externalmetadata_

  def set_externalmetadata(self, x):
    self.has_externalmetadata_ = 1
    self.externalmetadata_ = x

  def clear_externalmetadata(self):
    self.has_externalmetadata_ = 0
    self.externalmetadata_ = ""

  def has_externalmetadata(self): return self.has_externalmetadata_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_docid()): self.set_docid(x.docid())
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())
    if (x.has_pagerank_ns()): self.set_pagerank_ns(x.pagerank_ns())
    if (x.has_url()): self.set_url(x.url())
    if (x.has_urlafterredirects()): self.set_urlafterredirects(x.urlafterredirects())
    if (x.has_displayurl()): self.set_displayurl(x.displayurl())
    if (x.has_noindexreason()): self.set_noindexreason(x.noindexreason())
    if (x.has_nosnippetreason()): self.set_nosnippetreason(x.nosnippetreason())
    if (x.has_noarchivereason()): self.set_noarchivereason(x.noarchivereason())
    if (x.has_contentexpirytime()): self.set_contentexpirytime(x.contentexpirytime())
    if (x.has_ipaddr()): self.set_ipaddr(x.ipaddr())
    if (x.has_content()): self.mutable_content().MergeFrom(x.content())
    for i in xrange(x.directory_size()): self.add_directory().CopyFrom(x.directory(i))
    if (x.has_filterforsafesearch()): self.set_filterforsafesearch(x.filterforsafesearch())
    if (x.has_sciencemetadata()): self.mutable_sciencemetadata().MergeFrom(x.sciencemetadata())
    if (x.has_ocean_doc_info()): self.mutable_ocean_doc_info().MergeFrom(x.ocean_doc_info())
    if (x.has_localsearch_doc_info()): self.mutable_localsearch_doc_info().MergeFrom(x.localsearch_doc_info())
    if (x.has_newlangid()): self.mutable_newlangid().MergeFrom(x.newlangid())
    if (x.has_externalmetadata()): self.set_externalmetadata(x.externalmetadata())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GDocumentBase', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GDocumentBase')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GDocumentBase', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GDocumentBase', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GDocumentBase', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_docid_ != x.has_docid_: return 0
    if self.has_docid_ and self.docid_ != x.docid_: return 0
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    if self.has_pagerank_ns_ != x.has_pagerank_ns_: return 0
    if self.has_pagerank_ns_ and self.pagerank_ns_ != x.pagerank_ns_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_urlafterredirects_ != x.has_urlafterredirects_: return 0
    if self.has_urlafterredirects_ and self.urlafterredirects_ != x.urlafterredirects_: return 0
    if self.has_displayurl_ != x.has_displayurl_: return 0
    if self.has_displayurl_ and self.displayurl_ != x.displayurl_: return 0
    if self.has_noindexreason_ != x.has_noindexreason_: return 0
    if self.has_noindexreason_ and self.noindexreason_ != x.noindexreason_: return 0
    if self.has_nosnippetreason_ != x.has_nosnippetreason_: return 0
    if self.has_nosnippetreason_ and self.nosnippetreason_ != x.nosnippetreason_: return 0
    if self.has_noarchivereason_ != x.has_noarchivereason_: return 0
    if self.has_noarchivereason_ and self.noarchivereason_ != x.noarchivereason_: return 0
    if self.has_contentexpirytime_ != x.has_contentexpirytime_: return 0
    if self.has_contentexpirytime_ and self.contentexpirytime_ != x.contentexpirytime_: return 0
    if self.has_ipaddr_ != x.has_ipaddr_: return 0
    if self.has_ipaddr_ and self.ipaddr_ != x.ipaddr_: return 0
    if self.has_content_ != x.has_content_: return 0
    if self.has_content_ and self.content_ != x.content_: return 0
    if len(self.directory_) != len(x.directory_): return 0
    for e1, e2 in zip(self.directory_, x.directory_):
      if e1 != e2: return 0
    if self.has_filterforsafesearch_ != x.has_filterforsafesearch_: return 0
    if self.has_filterforsafesearch_ and self.filterforsafesearch_ != x.filterforsafesearch_: return 0
    if self.has_sciencemetadata_ != x.has_sciencemetadata_: return 0
    if self.has_sciencemetadata_ and self.sciencemetadata_ != x.sciencemetadata_: return 0
    if self.has_ocean_doc_info_ != x.has_ocean_doc_info_: return 0
    if self.has_ocean_doc_info_ and self.ocean_doc_info_ != x.ocean_doc_info_: return 0
    if self.has_localsearch_doc_info_ != x.has_localsearch_doc_info_: return 0
    if self.has_localsearch_doc_info_ and self.localsearch_doc_info_ != x.localsearch_doc_info_: return 0
    if self.has_newlangid_ != x.has_newlangid_: return 0
    if self.has_newlangid_ and self.newlangid_ != x.newlangid_: return 0
    if self.has_externalmetadata_ != x.has_externalmetadata_: return 0
    if self.has_externalmetadata_ and self.externalmetadata_ != x.externalmetadata_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_url_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: url not set.')
    if (self.has_content_ and not self.content_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.directory_)):
      if (not self.directory_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_sciencemetadata_ and not self.sciencemetadata_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_ocean_doc_info_ and not self.ocean_doc_info_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_localsearch_doc_info_ and not self.localsearch_doc_info_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_newlangid_ and not self.newlangid_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_docid_): n += 1 + self.lengthVarInt64(self.docid_)
    if (self.has_pagerank_): n += 1 + self.lengthVarInt64(self.pagerank_)
    if (self.has_pagerank_ns_): n += 2 + self.lengthVarInt64(self.pagerank_ns_)
    n += self.lengthString(len(self.url_))
    if (self.has_urlafterredirects_): n += 1 + self.lengthString(len(self.urlafterredirects_))
    if (self.has_displayurl_): n += 2 + self.lengthString(len(self.displayurl_))
    if (self.has_noindexreason_): n += 2 + self.lengthVarInt64(self.noindexreason_)
    if (self.has_nosnippetreason_): n += 2 + self.lengthVarInt64(self.nosnippetreason_)
    if (self.has_noarchivereason_): n += 2 + self.lengthVarInt64(self.noarchivereason_)
    if (self.has_contentexpirytime_): n += 2 + self.lengthVarInt64(self.contentexpirytime_)
    if (self.has_ipaddr_): n += 1 + self.lengthString(len(self.ipaddr_))
    if (self.has_content_): n += 2 + self.content_.ByteSize()
    n += 4 * len(self.directory_)
    for i in xrange(len(self.directory_)): n += self.directory_[i].ByteSize()
    if (self.has_filterforsafesearch_): n += 2 + self.lengthVarInt64(self.filterforsafesearch_)
    if (self.has_sciencemetadata_): n += 2 + self.lengthString(self.sciencemetadata_.ByteSize())
    if (self.has_ocean_doc_info_): n += 2 + self.lengthString(self.ocean_doc_info_.ByteSize())
    if (self.has_localsearch_doc_info_): n += 2 + self.lengthString(self.localsearch_doc_info_.ByteSize())
    if (self.has_newlangid_): n += 2 + self.lengthString(self.newlangid_.ByteSize())
    if (self.has_externalmetadata_): n += 2 + self.lengthString(len(self.externalmetadata_))
    return n + 1

  def Clear(self):
    self.clear_docid()
    self.clear_pagerank()
    self.clear_pagerank_ns()
    self.clear_url()
    self.clear_urlafterredirects()
    self.clear_displayurl()
    self.clear_noindexreason()
    self.clear_nosnippetreason()
    self.clear_noarchivereason()
    self.clear_contentexpirytime()
    self.clear_ipaddr()
    self.clear_content()
    self.clear_directory()
    self.clear_filterforsafesearch()
    self.clear_sciencemetadata()
    self.clear_ocean_doc_info()
    self.clear_localsearch_doc_info()
    self.clear_newlangid()
    self.clear_externalmetadata()

  def OutputUnchecked(self, out):
    if (self.has_docid_):
      out.putVarInt32(8)
      out.putVarUint64(self.docid_)
    if (self.has_pagerank_):
      out.putVarInt32(16)
      out.putVarInt32(self.pagerank_)
    out.putVarInt32(26)
    out.putPrefixedString(self.url_)
    if (self.has_urlafterredirects_):
      out.putVarInt32(34)
      out.putPrefixedString(self.urlafterredirects_)
    if (self.has_ipaddr_):
      out.putVarInt32(42)
      out.putPrefixedString(self.ipaddr_)
    if (self.has_content_):
      out.putVarInt32(51)
      self.content_.OutputUnchecked(out)
      out.putVarInt32(52)
    if (self.has_pagerank_ns_):
      out.putVarInt32(136)
      out.putVarInt32(self.pagerank_ns_)
    for i in xrange(len(self.directory_)):
      out.putVarInt32(323)
      self.directory_[i].OutputUnchecked(out)
      out.putVarInt32(324)
    if (self.has_filterforsafesearch_):
      out.putVarInt32(400)
      out.putVarInt32(self.filterforsafesearch_)
    if (self.has_sciencemetadata_):
      out.putVarInt32(482)
      out.putVarInt32(self.sciencemetadata_.ByteSize())
      self.sciencemetadata_.OutputUnchecked(out)
    if (self.has_ocean_doc_info_):
      out.putVarInt32(562)
      out.putVarInt32(self.ocean_doc_info_.ByteSize())
      self.ocean_doc_info_.OutputUnchecked(out)
    if (self.has_localsearch_doc_info_):
      out.putVarInt32(642)
      out.putVarInt32(self.localsearch_doc_info_.ByteSize())
      self.localsearch_doc_info_.OutputUnchecked(out)
    if (self.has_newlangid_):
      out.putVarInt32(722)
      out.putVarInt32(self.newlangid_.ByteSize())
      self.newlangid_.OutputUnchecked(out)
    if (self.has_externalmetadata_):
      out.putVarInt32(802)
      out.putPrefixedString(self.externalmetadata_)
    if (self.has_displayurl_):
      out.putVarInt32(810)
      out.putPrefixedString(self.displayurl_)
    if (self.has_noindexreason_):
      out.putVarInt32(816)
      out.putVarInt32(self.noindexreason_)
    if (self.has_nosnippetreason_):
      out.putVarInt32(824)
      out.putVarInt32(self.nosnippetreason_)
    if (self.has_noarchivereason_):
      out.putVarInt32(832)
      out.putVarInt32(self.noarchivereason_)
    if (self.has_contentexpirytime_):
      out.putVarInt32(840)
      out.putVarInt32(self.contentexpirytime_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_docid(d.getVarUint64())
        continue
      if tt == 16:
        self.set_pagerank(d.getVarInt32())
        continue
      if tt == 26:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 34:
        self.set_urlafterredirects(d.getPrefixedString())
        continue
      if tt == 42:
        self.set_ipaddr(d.getPrefixedString())
        continue
      if tt == 51:
        self.mutable_content().TryMerge(d)
        continue
      if tt == 136:
        self.set_pagerank_ns(d.getVarInt32())
        continue
      if tt == 323:
        self.add_directory().TryMerge(d)
        continue
      if tt == 400:
        self.set_filterforsafesearch(d.getVarInt32())
        continue
      if tt == 482:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_sciencemetadata().TryMerge(tmp)
        continue
      if tt == 562:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_ocean_doc_info().TryMerge(tmp)
        continue
      if tt == 642:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_localsearch_doc_info().TryMerge(tmp)
        continue
      if tt == 722:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_newlangid().TryMerge(tmp)
        continue
      if tt == 802:
        self.set_externalmetadata(d.getPrefixedString())
        continue
      if tt == 810:
        self.set_displayurl(d.getPrefixedString())
        continue
      if tt == 816:
        self.set_noindexreason(d.getVarInt32())
        continue
      if tt == 824:
        self.set_nosnippetreason(d.getVarInt32())
        continue
      if tt == 832:
        self.set_noarchivereason(d.getVarInt32())
        continue
      if tt == 840:
        self.set_contentexpirytime(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_docid_: res+=prefix+("DocId: %s\n" % self.DebugFormatInt64(self.docid_))
    if self.has_pagerank_: res+=prefix+("Pagerank: %s\n" % self.DebugFormatInt32(self.pagerank_))
    if self.has_pagerank_ns_: res+=prefix+("Pagerank_NS: %s\n" % self.DebugFormatInt32(self.pagerank_ns_))
    if self.has_url_: res+=prefix+("URL: %s\n" % self.DebugFormatString(self.url_))
    if self.has_urlafterredirects_: res+=prefix+("URLAfterRedirects: %s\n" % self.DebugFormatString(self.urlafterredirects_))
    if self.has_displayurl_: res+=prefix+("DisplayUrl: %s\n" % self.DebugFormatString(self.displayurl_))
    if self.has_noindexreason_: res+=prefix+("NoIndexReason: %s\n" % self.DebugFormatInt32(self.noindexreason_))
    if self.has_nosnippetreason_: res+=prefix+("NoSnippetReason: %s\n" % self.DebugFormatInt32(self.nosnippetreason_))
    if self.has_noarchivereason_: res+=prefix+("NoArchiveReason: %s\n" % self.DebugFormatInt32(self.noarchivereason_))
    if self.has_contentexpirytime_: res+=prefix+("ContentExpiryTime: %s\n" % self.DebugFormatInt32(self.contentexpirytime_))
    if self.has_ipaddr_: res+=prefix+("IPAddr: %s\n" % self.DebugFormatString(self.ipaddr_))
    if self.has_content_:
      res+=prefix+"Content {\n"
      res+=self.content_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    cnt=0
    for e in self.directory_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Directory%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_filterforsafesearch_: res+=prefix+("FilterForSafeSearch: %s\n" % self.DebugFormatInt32(self.filterforsafesearch_))
    if self.has_sciencemetadata_:
      res+=prefix+"ScienceMetadata <\n"
      res+=self.sciencemetadata_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_ocean_doc_info_:
      res+=prefix+"ocean_doc_info <\n"
      res+=self.ocean_doc_info_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_localsearch_doc_info_:
      res+=prefix+"localsearch_doc_info <\n"
      res+=self.localsearch_doc_info_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_newlangid_:
      res+=prefix+"NewLangid <\n"
      res+=self.newlangid_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_externalmetadata_: res+=prefix+("ExternalMetadata: %s\n" % self.DebugFormatString(self.externalmetadata_))
    return res

  kDocId = 1
  kPagerank = 2
  kPagerank_NS = 17
  kURL = 3
  kURLAfterRedirects = 4
  kDisplayUrl = 101
  kNoIndexReason = 102
  kNoSnippetReason = 103
  kNoArchiveReason = 104
  kContentExpiryTime = 105
  kIPAddr = 5
  kContentGroup = 6
  kContentCrawlTime = 9
  kContentContentType = 10
  kContentUncompressedLength = 11
  kContentLanguage = 12
  kContentEncoding = 13
  kContentVisualType = 106
  kContentRepresentation = 14
  kContentAuthMethod = 45
  kDirectoryGroup = 40
  kDirectoryIdentifier = 41
  kDirectoryCategory = 42
  kDirectoryTitle = 43
  kDirectoryDescription = 44
  kDirectoryLanguage = 46
  kDirectoryURL = 47
  kFilterForSafeSearch = 50
  kScienceMetadata = 60
  kocean_doc_info = 70
  klocalsearch_doc_info = 80
  kNewLangid = 90
  kExternalMetadata = 100

  _TEXT = (
   "ErrorCode",  #   0
   "DocId",  #   1
   "Pagerank",  #   2
   "URL",  #   3
   "URLAfterRedirects",  #   4
   "IPAddr",  #   5
   "Content",  #   6
   None,  #   7
   None,  #   8
   "CrawlTime",  #   9
   "ContentType",  #  10
   "UncompressedLength",  #  11
   "Language",  #  12
   "Encoding",  #  13
   "Representation",  #  14
   None,  #  15
   None,  #  16
   "Pagerank_NS",  #  17
   None,  #  18
   None,  #  19
   None,  #  20
   None,  #  21
   None,  #  22
   None,  #  23
   None,  #  24
   None,  #  25
   None,  #  26
   None,  #  27
   None,  #  28
   None,  #  29
   None,  #  30
   None,  #  31
   None,  #  32
   None,  #  33
   None,  #  34
   None,  #  35
   None,  #  36
   None,  #  37
   None,  #  38
   None,  #  39
   "Directory",  #  40
   "Identifier",  #  41
   "Category",  #  42
   "Title",  #  43
   "Description",  #  44
   "AuthMethod",  #  45
   "Language",  #  46
   "URL",  #  47
   None,  #  48
   None,  #  49
   "FilterForSafeSearch",  #  50
   None,  #  51
   None,  #  52
   None,  #  53
   None,  #  54
   None,  #  55
   None,  #  56
   None,  #  57
   None,  #  58
   None,  #  59
   "ScienceMetadata",  #  60
   None,  #  61
   None,  #  62
   None,  #  63
   None,  #  64
   None,  #  65
   None,  #  66
   None,  #  67
   None,  #  68
   None,  #  69
   "ocean_doc_info",  #  70
   None,  #  71
   None,  #  72
   None,  #  73
   None,  #  74
   None,  #  75
   None,  #  76
   None,  #  77
   None,  #  78
   None,  #  79
   "localsearch_doc_info",  #  80
   None,  #  81
   None,  #  82
   None,  #  83
   None,  #  84
   None,  #  85
   None,  #  86
   None,  #  87
   None,  #  88
   None,  #  89
   "NewLangid",  #  90
   None,  #  91
   None,  #  92
   None,  #  93
   None,  #  94
   None,  #  95
   None,  #  96
   None,  #  97
   None,  #  98
   None,  #  99
   "ExternalMetadata",  # 100
   "DisplayUrl",  # 101
   "NoIndexReason",  # 102
   "NoSnippetReason",  # 103
   "NoArchiveReason",  # 104
   "ContentExpiryTime",  # 105
   "VisualType",  # 106
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STARTGROUP,  #   6

   ProtocolBuffer.Encoder.MAX_TYPE,  #   7

   ProtocolBuffer.Encoder.MAX_TYPE,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.NUMERIC,  #  13

   ProtocolBuffer.Encoder.STRING,  #  14

   ProtocolBuffer.Encoder.MAX_TYPE,  #  15

   ProtocolBuffer.Encoder.MAX_TYPE,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.MAX_TYPE,  #  18

   ProtocolBuffer.Encoder.MAX_TYPE,  #  19

   ProtocolBuffer.Encoder.MAX_TYPE,  #  20

   ProtocolBuffer.Encoder.MAX_TYPE,  #  21

   ProtocolBuffer.Encoder.MAX_TYPE,  #  22

   ProtocolBuffer.Encoder.MAX_TYPE,  #  23

   ProtocolBuffer.Encoder.MAX_TYPE,  #  24

   ProtocolBuffer.Encoder.MAX_TYPE,  #  25

   ProtocolBuffer.Encoder.MAX_TYPE,  #  26

   ProtocolBuffer.Encoder.MAX_TYPE,  #  27

   ProtocolBuffer.Encoder.MAX_TYPE,  #  28

   ProtocolBuffer.Encoder.MAX_TYPE,  #  29

   ProtocolBuffer.Encoder.MAX_TYPE,  #  30

   ProtocolBuffer.Encoder.MAX_TYPE,  #  31

   ProtocolBuffer.Encoder.MAX_TYPE,  #  32

   ProtocolBuffer.Encoder.MAX_TYPE,  #  33

   ProtocolBuffer.Encoder.MAX_TYPE,  #  34

   ProtocolBuffer.Encoder.MAX_TYPE,  #  35

   ProtocolBuffer.Encoder.MAX_TYPE,  #  36

   ProtocolBuffer.Encoder.MAX_TYPE,  #  37

   ProtocolBuffer.Encoder.MAX_TYPE,  #  38

   ProtocolBuffer.Encoder.MAX_TYPE,  #  39

   ProtocolBuffer.Encoder.STARTGROUP,  #  40

   ProtocolBuffer.Encoder.STRING,  #  41

   ProtocolBuffer.Encoder.STRING,  #  42

   ProtocolBuffer.Encoder.STRING,  #  43

   ProtocolBuffer.Encoder.STRING,  #  44

   ProtocolBuffer.Encoder.NUMERIC,  #  45

   ProtocolBuffer.Encoder.NUMERIC,  #  46

   ProtocolBuffer.Encoder.STRING,  #  47

   ProtocolBuffer.Encoder.MAX_TYPE,  #  48

   ProtocolBuffer.Encoder.MAX_TYPE,  #  49

   ProtocolBuffer.Encoder.NUMERIC,  #  50

   ProtocolBuffer.Encoder.MAX_TYPE,  #  51

   ProtocolBuffer.Encoder.MAX_TYPE,  #  52

   ProtocolBuffer.Encoder.MAX_TYPE,  #  53

   ProtocolBuffer.Encoder.MAX_TYPE,  #  54

   ProtocolBuffer.Encoder.MAX_TYPE,  #  55

   ProtocolBuffer.Encoder.MAX_TYPE,  #  56

   ProtocolBuffer.Encoder.MAX_TYPE,  #  57

   ProtocolBuffer.Encoder.MAX_TYPE,  #  58

   ProtocolBuffer.Encoder.MAX_TYPE,  #  59

   ProtocolBuffer.Encoder.STRING,  #  60

   ProtocolBuffer.Encoder.MAX_TYPE,  #  61

   ProtocolBuffer.Encoder.MAX_TYPE,  #  62

   ProtocolBuffer.Encoder.MAX_TYPE,  #  63

   ProtocolBuffer.Encoder.MAX_TYPE,  #  64

   ProtocolBuffer.Encoder.MAX_TYPE,  #  65

   ProtocolBuffer.Encoder.MAX_TYPE,  #  66

   ProtocolBuffer.Encoder.MAX_TYPE,  #  67

   ProtocolBuffer.Encoder.MAX_TYPE,  #  68

   ProtocolBuffer.Encoder.MAX_TYPE,  #  69

   ProtocolBuffer.Encoder.STRING,  #  70

   ProtocolBuffer.Encoder.MAX_TYPE,  #  71

   ProtocolBuffer.Encoder.MAX_TYPE,  #  72

   ProtocolBuffer.Encoder.MAX_TYPE,  #  73

   ProtocolBuffer.Encoder.MAX_TYPE,  #  74

   ProtocolBuffer.Encoder.MAX_TYPE,  #  75

   ProtocolBuffer.Encoder.MAX_TYPE,  #  76

   ProtocolBuffer.Encoder.MAX_TYPE,  #  77

   ProtocolBuffer.Encoder.MAX_TYPE,  #  78

   ProtocolBuffer.Encoder.MAX_TYPE,  #  79

   ProtocolBuffer.Encoder.STRING,  #  80

   ProtocolBuffer.Encoder.MAX_TYPE,  #  81

   ProtocolBuffer.Encoder.MAX_TYPE,  #  82

   ProtocolBuffer.Encoder.MAX_TYPE,  #  83

   ProtocolBuffer.Encoder.MAX_TYPE,  #  84

   ProtocolBuffer.Encoder.MAX_TYPE,  #  85

   ProtocolBuffer.Encoder.MAX_TYPE,  #  86

   ProtocolBuffer.Encoder.MAX_TYPE,  #  87

   ProtocolBuffer.Encoder.MAX_TYPE,  #  88

   ProtocolBuffer.Encoder.MAX_TYPE,  #  89

   ProtocolBuffer.Encoder.STRING,  #  90

   ProtocolBuffer.Encoder.MAX_TYPE,  #  91

   ProtocolBuffer.Encoder.MAX_TYPE,  #  92

   ProtocolBuffer.Encoder.MAX_TYPE,  #  93

   ProtocolBuffer.Encoder.MAX_TYPE,  #  94

   ProtocolBuffer.Encoder.MAX_TYPE,  #  95

   ProtocolBuffer.Encoder.MAX_TYPE,  #  96

   ProtocolBuffer.Encoder.MAX_TYPE,  #  97

   ProtocolBuffer.Encoder.MAX_TYPE,  #  98

   ProtocolBuffer.Encoder.MAX_TYPE,  #  99

   ProtocolBuffer.Encoder.STRING,  # 100

   ProtocolBuffer.Encoder.STRING,  # 101

   ProtocolBuffer.Encoder.NUMERIC,  # 102

   ProtocolBuffer.Encoder.NUMERIC,  # 103

   ProtocolBuffer.Encoder.NUMERIC,  # 104

   ProtocolBuffer.Encoder.NUMERIC,  # 105

   ProtocolBuffer.Encoder.NUMERIC,  # 106

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x20,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2f,
    0x62,
    0x61,
    0x73,
    0x65,
    0x2f,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0d,
    0x47,
    0x44,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x42,
    0x61,
    0x73,
    0x65,
    0x13,
    0x1a,
    0x05,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x64,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x5f,
    0x4e,
    0x53,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x55,
    0x52,
    0x4c,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x55,
    0x52,
    0x4c,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x65,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4e,
    0x6f,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x66,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x4e,
    0x6f,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x67,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x4e,
    0x6f,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x68,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x45,
    0x78,
    0x70,
    0x69,
    0x72,
    0x79,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x69,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x49,
    0x50,
    0x41,
    0x64,
    0x64,
    0x72,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x06,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x43,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x0b,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0b,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x55,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0b,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x0b,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x45,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x0d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x0b,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x56,
    0x69,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x6a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x0b,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x0e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x0b,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x41,
    0x75,
    0x74,
    0x68,
    0x4d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x20,
    0x2d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x0b,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x28,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x49,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x65,
    0x72,
    0x20,
    0x29,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x2a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x2b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x44,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x2c,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x2e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x55,
    0x52,
    0x4c,
    0x20,
    0x2f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x46,
    0x69,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x46,
    0x6f,
    0x72,
    0x53,
    0x61,
    0x66,
    0x65,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x32,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x3c,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0f,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x46,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0c,
    0x4f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x5f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x50,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x13,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x4e,
    0x65,
    0x77,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x69,
    0x64,
    0x20,
    0x5a,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0d,
    0x4e,
    0x65,
    0x77,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x69,
    0x64,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x45,
    0x78,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x64,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['NewLangidInfo','GDocumentBase','GDocumentBase_Content','GDocumentBase_Directory']
