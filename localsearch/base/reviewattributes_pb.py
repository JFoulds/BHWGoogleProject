# This file automatically generated by protocol-compiler from localsearch/base/reviewattributes.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class ReviewAttributes(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 2710184 

  _TypeId_NAMES = {
    2710184: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)


  GENERIC_REVIEW =    0 
  EDITORIAL_REVIEW =    1 
  ZIPIT_REVIEW =    2 

  _REVIEW_TYPE_NAMES = {
    0: "GENERIC_REVIEW",
    1: "EDITORIAL_REVIEW",
    2: "ZIPIT_REVIEW",
  }

  def REVIEW_TYPE_Name(cls, x): return cls._REVIEW_TYPE_NAMES.get(x, "")
  REVIEW_TYPE_Name = classmethod(REVIEW_TYPE_Name)

  def __init__(self, contents=None):
    self.is_editorial_ = 0
    self.title_ = ""
    self.is_title_from_body_ = 0
    self.author_ = ""
    self.date_ = 0
    self.julian_date_ = 0
    self.rating_ = 0
    self.language_ = 0
    self.fingerprint_ = 0
    self.combined_quality_score_ = 0.0
    self.review_type_ = 0
    self.has_is_editorial_ = 0
    self.has_title_ = 0
    self.has_is_title_from_body_ = 0
    self.has_author_ = 0
    self.has_date_ = 0
    self.has_julian_date_ = 0
    self.has_rating_ = 0
    self.has_language_ = 0
    self.has_fingerprint_ = 0
    self.has_combined_quality_score_ = 0
    self.has_review_type_ = 0
    if contents is not None: self.MergeFromString(contents)

  def is_editorial(self): return self.is_editorial_

  def set_is_editorial(self, x):
    self.has_is_editorial_ = 1
    self.is_editorial_ = x

  def clear_is_editorial(self):
    self.has_is_editorial_ = 0
    self.is_editorial_ = 0

  def has_is_editorial(self): return self.has_is_editorial_

  def title(self): return self.title_

  def set_title(self, x):
    self.has_title_ = 1
    self.title_ = x

  def clear_title(self):
    self.has_title_ = 0
    self.title_ = ""

  def has_title(self): return self.has_title_

  def is_title_from_body(self): return self.is_title_from_body_

  def set_is_title_from_body(self, x):
    self.has_is_title_from_body_ = 1
    self.is_title_from_body_ = x

  def clear_is_title_from_body(self):
    self.has_is_title_from_body_ = 0
    self.is_title_from_body_ = 0

  def has_is_title_from_body(self): return self.has_is_title_from_body_

  def author(self): return self.author_

  def set_author(self, x):
    self.has_author_ = 1
    self.author_ = x

  def clear_author(self):
    self.has_author_ = 0
    self.author_ = ""

  def has_author(self): return self.has_author_

  def date(self): return self.date_

  def set_date(self, x):
    self.has_date_ = 1
    self.date_ = x

  def clear_date(self):
    self.has_date_ = 0
    self.date_ = 0

  def has_date(self): return self.has_date_

  def julian_date(self): return self.julian_date_

  def set_julian_date(self, x):
    self.has_julian_date_ = 1
    self.julian_date_ = x

  def clear_julian_date(self):
    self.has_julian_date_ = 0
    self.julian_date_ = 0

  def has_julian_date(self): return self.has_julian_date_

  def rating(self): return self.rating_

  def set_rating(self, x):
    self.has_rating_ = 1
    self.rating_ = x

  def clear_rating(self):
    self.has_rating_ = 0
    self.rating_ = 0

  def has_rating(self): return self.has_rating_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = 0

  def has_language(self): return self.has_language_

  def fingerprint(self): return self.fingerprint_

  def set_fingerprint(self, x):
    self.has_fingerprint_ = 1
    self.fingerprint_ = x

  def clear_fingerprint(self):
    self.has_fingerprint_ = 0
    self.fingerprint_ = 0

  def has_fingerprint(self): return self.has_fingerprint_

  def combined_quality_score(self): return self.combined_quality_score_

  def set_combined_quality_score(self, x):
    self.has_combined_quality_score_ = 1
    self.combined_quality_score_ = x

  def clear_combined_quality_score(self):
    self.has_combined_quality_score_ = 0
    self.combined_quality_score_ = 0.0

  def has_combined_quality_score(self): return self.has_combined_quality_score_

  def review_type(self): return self.review_type_

  def set_review_type(self, x):
    self.has_review_type_ = 1
    self.review_type_ = x

  def clear_review_type(self):
    self.has_review_type_ = 0
    self.review_type_ = 0

  def has_review_type(self): return self.has_review_type_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_is_editorial()): self.set_is_editorial(x.is_editorial())
    if (x.has_title()): self.set_title(x.title())
    if (x.has_is_title_from_body()): self.set_is_title_from_body(x.is_title_from_body())
    if (x.has_author()): self.set_author(x.author())
    if (x.has_date()): self.set_date(x.date())
    if (x.has_julian_date()): self.set_julian_date(x.julian_date())
    if (x.has_rating()): self.set_rating(x.rating())
    if (x.has_language()): self.set_language(x.language())
    if (x.has_fingerprint()): self.set_fingerprint(x.fingerprint())
    if (x.has_combined_quality_score()): self.set_combined_quality_score(x.combined_quality_score())
    if (x.has_review_type()): self.set_review_type(x.review_type())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'localsearch.ReviewAttributes', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'localsearch.ReviewAttributes')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'localsearch.ReviewAttributes', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'localsearch.ReviewAttributes', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'localsearch.ReviewAttributes', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_is_editorial_ != x.has_is_editorial_: return 0
    if self.has_is_editorial_ and self.is_editorial_ != x.is_editorial_: return 0
    if self.has_title_ != x.has_title_: return 0
    if self.has_title_ and self.title_ != x.title_: return 0
    if self.has_is_title_from_body_ != x.has_is_title_from_body_: return 0
    if self.has_is_title_from_body_ and self.is_title_from_body_ != x.is_title_from_body_: return 0
    if self.has_author_ != x.has_author_: return 0
    if self.has_author_ and self.author_ != x.author_: return 0
    if self.has_date_ != x.has_date_: return 0
    if self.has_date_ and self.date_ != x.date_: return 0
    if self.has_julian_date_ != x.has_julian_date_: return 0
    if self.has_julian_date_ and self.julian_date_ != x.julian_date_: return 0
    if self.has_rating_ != x.has_rating_: return 0
    if self.has_rating_ and self.rating_ != x.rating_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_fingerprint_ != x.has_fingerprint_: return 0
    if self.has_fingerprint_ and self.fingerprint_ != x.fingerprint_: return 0
    if self.has_combined_quality_score_ != x.has_combined_quality_score_: return 0
    if self.has_combined_quality_score_ and self.combined_quality_score_ != x.combined_quality_score_: return 0
    if self.has_review_type_ != x.has_review_type_: return 0
    if self.has_review_type_ and self.review_type_ != x.review_type_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_is_editorial_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: is_editorial not set.')
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_title_): n += 1 + self.lengthString(len(self.title_))
    if (self.has_is_title_from_body_): n += 2
    if (self.has_author_): n += 1 + self.lengthString(len(self.author_))
    if (self.has_date_): n += 1 + self.lengthVarInt64(self.date_)
    if (self.has_julian_date_): n += 1 + self.lengthVarInt64(self.julian_date_)
    if (self.has_rating_): n += 1 + self.lengthVarInt64(self.rating_)
    if (self.has_language_): n += 1 + self.lengthVarInt64(self.language_)
    if (self.has_fingerprint_): n += 9
    if (self.has_combined_quality_score_): n += 9
    if (self.has_review_type_): n += 1 + self.lengthVarInt64(self.review_type_)
    return n + 2

  def Clear(self):
    self.clear_is_editorial()
    self.clear_title()
    self.clear_is_title_from_body()
    self.clear_author()
    self.clear_date()
    self.clear_julian_date()
    self.clear_rating()
    self.clear_language()
    self.clear_fingerprint()
    self.clear_combined_quality_score()
    self.clear_review_type()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putBoolean(self.is_editorial_)
    if (self.has_title_):
      out.putVarInt32(18)
      out.putPrefixedString(self.title_)
    if (self.has_author_):
      out.putVarInt32(26)
      out.putPrefixedString(self.author_)
    if (self.has_date_):
      out.putVarInt32(32)
      out.putVarInt32(self.date_)
    if (self.has_rating_):
      out.putVarInt32(40)
      out.putVarInt32(self.rating_)
    if (self.has_julian_date_):
      out.putVarInt32(48)
      out.putVarInt32(self.julian_date_)
    if (self.has_review_type_):
      out.putVarInt32(56)
      out.putVarInt32(self.review_type_)
    if (self.has_language_):
      out.putVarInt32(64)
      out.putVarInt32(self.language_)
    if (self.has_fingerprint_):
      out.putVarInt32(73)
      out.put64(self.fingerprint_)
    if (self.has_is_title_from_body_):
      out.putVarInt32(80)
      out.putBoolean(self.is_title_from_body_)
    if (self.has_combined_quality_score_):
      out.putVarInt32(89)
      out.putDouble(self.combined_quality_score_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_is_editorial(d.getBoolean())
        continue
      if tt == 18:
        self.set_title(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_author(d.getPrefixedString())
        continue
      if tt == 32:
        self.set_date(d.getVarInt32())
        continue
      if tt == 40:
        self.set_rating(d.getVarInt32())
        continue
      if tt == 48:
        self.set_julian_date(d.getVarInt32())
        continue
      if tt == 56:
        self.set_review_type(d.getVarInt32())
        continue
      if tt == 64:
        self.set_language(d.getVarInt32())
        continue
      if tt == 73:
        self.set_fingerprint(d.get64())
        continue
      if tt == 80:
        self.set_is_title_from_body(d.getBoolean())
        continue
      if tt == 89:
        self.set_combined_quality_score(d.getDouble())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_is_editorial_: res+=prefix+("is_editorial: %s\n" % self.DebugFormatBool(self.is_editorial_))
    if self.has_title_: res+=prefix+("title: %s\n" % self.DebugFormatString(self.title_))
    if self.has_is_title_from_body_: res+=prefix+("is_title_from_body: %s\n" % self.DebugFormatBool(self.is_title_from_body_))
    if self.has_author_: res+=prefix+("author: %s\n" % self.DebugFormatString(self.author_))
    if self.has_date_: res+=prefix+("date: %s\n" % self.DebugFormatInt32(self.date_))
    if self.has_julian_date_: res+=prefix+("julian_date: %s\n" % self.DebugFormatInt32(self.julian_date_))
    if self.has_rating_: res+=prefix+("rating: %s\n" % self.DebugFormatInt32(self.rating_))
    if self.has_language_: res+=prefix+("language: %s\n" % self.DebugFormatInt32(self.language_))
    if self.has_fingerprint_: res+=prefix+("fingerprint: %s\n" % self.DebugFormatFixed64(self.fingerprint_))
    if self.has_combined_quality_score_: res+=prefix+("combined_quality_score: %s\n" % self.DebugFormat(self.combined_quality_score_))
    if self.has_review_type_: res+=prefix+("review_type: %s\n" % self.DebugFormatInt32(self.review_type_))
    return res

  kis_editorial = 1
  ktitle = 2
  kis_title_from_body = 10
  kauthor = 3
  kdate = 4
  kjulian_date = 6
  krating = 5
  klanguage = 8
  kfingerprint = 9
  kcombined_quality_score = 11
  kreview_type = 7

  _TEXT = (
   "ErrorCode",  #   0
   "is_editorial",  #   1
   "title",  #   2
   "author",  #   3
   "date",  #   4
   "rating",  #   5
   "julian_date",  #   6
   "review_type",  #   7
   "language",  #   8
   "fingerprint",  #   9
   "is_title_from_body",  #  10
   "combined_quality_score",  #  11
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.DOUBLE,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.DOUBLE,  #  11

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x27,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2f,
    0x62,
    0x61,
    0x73,
    0x65,
    0x2f,
    0x72,
    0x65,
    0x76,
    0x69,
    0x65,
    0x77,
    0x61,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x1c,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2e,
    0x52,
    0x65,
    0x76,
    0x69,
    0x65,
    0x77,
    0x41,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x73,
    0x13,
    0x1a,
    0x0c,
    0x69,
    0x73,
    0x5f,
    0x65,
    0x64,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x69,
    0x73,
    0x5f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x5f,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x5f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x6a,
    0x75,
    0x6c,
    0x69,
    0x61,
    0x6e,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x66,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x74,
    0x20,
    0x09,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x63,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x5f,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x5f,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x0b,
    0x28,
    0x01,
    0x30,
    0x01,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x72,
    0x65,
    0x76,
    0x69,
    0x65,
    0x77,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x68,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x0e,
    0x47,
    0x45,
    0x4e,
    0x45,
    0x52,
    0x49,
    0x43,
    0x5f,
    0x52,
    0x45,
    0x56,
    0x49,
    0x45,
    0x57,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xa8,
    0xb5,
    0xa5,
    0x01,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0b,
    0x52,
    0x45,
    0x56,
    0x49,
    0x45,
    0x57,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x47,
    0x45,
    0x4e,
    0x45,
    0x52,
    0x49,
    0x43,
    0x5f,
    0x52,
    0x45,
    0x56,
    0x49,
    0x45,
    0x57,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x45,
    0x44,
    0x49,
    0x54,
    0x4f,
    0x52,
    0x49,
    0x41,
    0x4c,
    0x5f,
    0x52,
    0x45,
    0x56,
    0x49,
    0x45,
    0x57,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x5a,
    0x49,
    0x50,
    0x49,
    0x54,
    0x5f,
    0x52,
    0x45,
    0x56,
    0x49,
    0x45,
    0x57,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['ReviewAttributes']
