# This file automatically generated by protocol-compiler from enterprise/license/license.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class Consts(ProtocolBuffer.ProtocolMessage):

  ENT_LICENSE_ID =    0 
  ENT_BOX_ID   =    1 
  ENT_LICENSE_VERSION =    2 
  ENT_LICENSE_GRACE_PERIOD =    3 
  ENT_LICENSE_MAX_FRONTENDS =    4 
  ENT_LICENSE_MAX_COLLECTIONS =    5 
  ENT_LICENSE_MAX_PAGES_OVERALL =    6 
  ENT_LICENSE_MAX_PAGES_PER_COLLECTION =    7 
  ENT_LICENSE_CREATION_DATE =    8 
  ENT_LICENSE_START_DATE =    9 
  ENT_LICENSE_END_DATE =   10 
  ENT_LICENSE_SERVING_TIME =   11 
  ENT_LICENSE_ORIGINAL_START_DATE =   12 
  ENT_LICENSE_ORIGINAL_END_DATE =   13 
  ENT_LICENSE_ORIGINAL_SERVING_TIME =   14 
  ENT_LICENSE_PROBLEMS =   15 
  ENT_LICENSE_ENABLE_SEKU_LITE =   16 
  ENT_LICENSE_ENABLE_TOOLBAR =   17 
  ENT_LICENSE_ENABLE_LDAP =   18 
  ENT_LICENSE_ENABLE_COOKIE_CRAWL =   19 
  ENT_LICENSE_ENABLE_CATEGORY =   20 
  ENT_LICENSE_ENABLE_SSO =   21 
  ENT_LICENSE_DATABASES =   22 
  ENT_LICENSE_FEEDS =   23 
  ENT_LICENSE_FILESYSTEM =   24 
  ENT_LICENSE_FILE_SYSTEMS =   25 
  ENT_LICENSE_ALERTS =   26 
  ENT_LICENSE_BATCH_CRAWL =   27 
  ENT_LICENSE_QUERY_EXPANSION =   28 
  ENT_LICENSE_SCORING_ADJUST =   29 
  ENT_LICENSE_CONNECTOR_FRAMEWORK =   30 
  ENT_LICENSE_CLUSTERING =   31 
  ENT_LICENSE_POLICY_ACCESS_CONTROL =   32 
  ENT_LICENSE_LEFT_TIME =   33 
  ENT_LICENSE_INFORMATION =   34 
  ENT_LICENSE_BASIC_ACCESS =   35 
  ENT_LICENSE_ADVANCED_ACCESS =   36 
  ENT_LICENSE_SUPPORT_END_DATE =   37 
  ENT_UNEXPECTED_ERROR =   38 
  ENT_WRONG_LICENSE_FORMAT =   39 
  ENT_WRONG_BOX_ID =   40 
  ENT_LIC_OK   =   41 
  ENT_LIC_OTHERS =   42 
  ENT_LIC_PARSE =   43 
  ENT_LIC_OUTDATED =   44 
  ENT_LIC_INVALID =   45 
  ENT_LIC_WRONG_FORMAT =   46 
  ENT_LIC_WRONG_BOX_ID =   47 
  ENT_LIC_TOOMANYCOLLECTIONS =   48 
  ENT_LIC_WARNING_SMALLER_THAN_LIMIT =   49 
  ENT_LIC_WARNING_LESS_PAGE_NEW_LIC =   50 
  ENT_LICENSE_FEDERATION =   51 
  ENT_LICENSE_LABS_SETTINGS =   52 
  ENT_LICENSE_ENABLE_KERBEROS_AT_LOGIN =   53 
  ENT_LICENSE_ENABLE_KERBEROS_AT_CRAWL =   54 
  ENT_LICENSE_ENABLE_KERBEROS_AT_SERVE =   55 
  ENT_LICENSE_ENABLE_KERBEROS_AT_ONEBOX =   56 
  ENT_LICENSE_ENABLE_KERBEROS_KT_PARSE =   57 

  _E_NAMES = {
    0: "ENT_LICENSE_ID",
    1: "ENT_BOX_ID",
    2: "ENT_LICENSE_VERSION",
    3: "ENT_LICENSE_GRACE_PERIOD",
    4: "ENT_LICENSE_MAX_FRONTENDS",
    5: "ENT_LICENSE_MAX_COLLECTIONS",
    6: "ENT_LICENSE_MAX_PAGES_OVERALL",
    7: "ENT_LICENSE_MAX_PAGES_PER_COLLECTION",
    8: "ENT_LICENSE_CREATION_DATE",
    9: "ENT_LICENSE_START_DATE",
    10: "ENT_LICENSE_END_DATE",
    11: "ENT_LICENSE_SERVING_TIME",
    12: "ENT_LICENSE_ORIGINAL_START_DATE",
    13: "ENT_LICENSE_ORIGINAL_END_DATE",
    14: "ENT_LICENSE_ORIGINAL_SERVING_TIME",
    15: "ENT_LICENSE_PROBLEMS",
    16: "ENT_LICENSE_ENABLE_SEKU_LITE",
    17: "ENT_LICENSE_ENABLE_TOOLBAR",
    18: "ENT_LICENSE_ENABLE_LDAP",
    19: "ENT_LICENSE_ENABLE_COOKIE_CRAWL",
    20: "ENT_LICENSE_ENABLE_CATEGORY",
    21: "ENT_LICENSE_ENABLE_SSO",
    22: "ENT_LICENSE_DATABASES",
    23: "ENT_LICENSE_FEEDS",
    24: "ENT_LICENSE_FILESYSTEM",
    25: "ENT_LICENSE_FILE_SYSTEMS",
    26: "ENT_LICENSE_ALERTS",
    27: "ENT_LICENSE_BATCH_CRAWL",
    28: "ENT_LICENSE_QUERY_EXPANSION",
    29: "ENT_LICENSE_SCORING_ADJUST",
    30: "ENT_LICENSE_CONNECTOR_FRAMEWORK",
    31: "ENT_LICENSE_CLUSTERING",
    32: "ENT_LICENSE_POLICY_ACCESS_CONTROL",
    33: "ENT_LICENSE_LEFT_TIME",
    34: "ENT_LICENSE_INFORMATION",
    35: "ENT_LICENSE_BASIC_ACCESS",
    36: "ENT_LICENSE_ADVANCED_ACCESS",
    37: "ENT_LICENSE_SUPPORT_END_DATE",
    38: "ENT_UNEXPECTED_ERROR",
    39: "ENT_WRONG_LICENSE_FORMAT",
    40: "ENT_WRONG_BOX_ID",
    41: "ENT_LIC_OK",
    42: "ENT_LIC_OTHERS",
    43: "ENT_LIC_PARSE",
    44: "ENT_LIC_OUTDATED",
    45: "ENT_LIC_INVALID",
    46: "ENT_LIC_WRONG_FORMAT",
    47: "ENT_LIC_WRONG_BOX_ID",
    48: "ENT_LIC_TOOMANYCOLLECTIONS",
    49: "ENT_LIC_WARNING_SMALLER_THAN_LIMIT",
    50: "ENT_LIC_WARNING_LESS_PAGE_NEW_LIC",
    51: "ENT_LICENSE_FEDERATION",
    52: "ENT_LICENSE_LABS_SETTINGS",
    53: "ENT_LICENSE_ENABLE_KERBEROS_AT_LOGIN",
    54: "ENT_LICENSE_ENABLE_KERBEROS_AT_CRAWL",
    55: "ENT_LICENSE_ENABLE_KERBEROS_AT_SERVE",
    56: "ENT_LICENSE_ENABLE_KERBEROS_AT_ONEBOX",
    57: "ENT_LICENSE_ENABLE_KERBEROS_KT_PARSE",
  }

  def E_Name(cls, x): return cls._E_NAMES.get(x, "")
  E_Name = classmethod(E_Name)


  QUERY_EXP_LEVEL_NONE =    0 
  QUERY_EXP_LEVEL_FULL =    1 
  QUERY_EXP_LEVEL_LOCAL =    2 

  _QueryExpansion_NAMES = {
    0: "QUERY_EXP_LEVEL_NONE",
    1: "QUERY_EXP_LEVEL_FULL",
    2: "QUERY_EXP_LEVEL_LOCAL",
  }

  def QueryExpansion_Name(cls, x): return cls._QueryExpansion_NAMES.get(x, "")
  QueryExpansion_Name = classmethod(QueryExpansion_Name)

  def __init__(self, contents=None):
    pass
    if contents is not None: self.MergeFromString(contents)


  def MergeFrom(self, x):
    assert x is not self

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'Consts', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'Consts')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'Consts', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'Consts', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'Consts', s)


  def Equals(self, x):
    if x is self: return 1
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    return n + 0

  def Clear(self):
    pass

  def OutputUnchecked(self, out):
    pass

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    return res


  _TEXT = (
   "ErrorCode",  #   0
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x20,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x2f,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x06,
    0x43,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x73,
    0x73,
    0x7a,
    0x01,
    0x45,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x42,
    0x4f,
    0x58,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x13,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x56,
    0x45,
    0x52,
    0x53,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x47,
    0x52,
    0x41,
    0x43,
    0x45,
    0x5f,
    0x50,
    0x45,
    0x52,
    0x49,
    0x4f,
    0x44,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x19,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4d,
    0x41,
    0x58,
    0x5f,
    0x46,
    0x52,
    0x4f,
    0x4e,
    0x54,
    0x45,
    0x4e,
    0x44,
    0x53,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4d,
    0x41,
    0x58,
    0x5f,
    0x43,
    0x4f,
    0x4c,
    0x4c,
    0x45,
    0x43,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x53,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1d,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4d,
    0x41,
    0x58,
    0x5f,
    0x50,
    0x41,
    0x47,
    0x45,
    0x53,
    0x5f,
    0x4f,
    0x56,
    0x45,
    0x52,
    0x41,
    0x4c,
    0x4c,
    0x98,
    0x01,
    0x06,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x24,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4d,
    0x41,
    0x58,
    0x5f,
    0x50,
    0x41,
    0x47,
    0x45,
    0x53,
    0x5f,
    0x50,
    0x45,
    0x52,
    0x5f,
    0x43,
    0x4f,
    0x4c,
    0x4c,
    0x45,
    0x43,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x19,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x43,
    0x52,
    0x45,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x53,
    0x54,
    0x41,
    0x52,
    0x54,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x09,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x44,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x53,
    0x45,
    0x52,
    0x56,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x54,
    0x49,
    0x4d,
    0x45,
    0x98,
    0x01,
    0x0b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1f,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4f,
    0x52,
    0x49,
    0x47,
    0x49,
    0x4e,
    0x41,
    0x4c,
    0x5f,
    0x53,
    0x54,
    0x41,
    0x52,
    0x54,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x0c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1d,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4f,
    0x52,
    0x49,
    0x47,
    0x49,
    0x4e,
    0x41,
    0x4c,
    0x5f,
    0x45,
    0x4e,
    0x44,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x0d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x21,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4f,
    0x52,
    0x49,
    0x47,
    0x49,
    0x4e,
    0x41,
    0x4c,
    0x5f,
    0x53,
    0x45,
    0x52,
    0x56,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x54,
    0x49,
    0x4d,
    0x45,
    0x98,
    0x01,
    0x0e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x50,
    0x52,
    0x4f,
    0x42,
    0x4c,
    0x45,
    0x4d,
    0x53,
    0x98,
    0x01,
    0x0f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1c,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x53,
    0x45,
    0x4b,
    0x55,
    0x5f,
    0x4c,
    0x49,
    0x54,
    0x45,
    0x98,
    0x01,
    0x10,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x54,
    0x4f,
    0x4f,
    0x4c,
    0x42,
    0x41,
    0x52,
    0x98,
    0x01,
    0x11,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x4c,
    0x44,
    0x41,
    0x50,
    0x98,
    0x01,
    0x12,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1f,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x43,
    0x4f,
    0x4f,
    0x4b,
    0x49,
    0x45,
    0x5f,
    0x43,
    0x52,
    0x41,
    0x57,
    0x4c,
    0x98,
    0x01,
    0x13,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x43,
    0x41,
    0x54,
    0x45,
    0x47,
    0x4f,
    0x52,
    0x59,
    0x98,
    0x01,
    0x14,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x53,
    0x53,
    0x4f,
    0x98,
    0x01,
    0x15,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x41,
    0x42,
    0x41,
    0x53,
    0x45,
    0x53,
    0x98,
    0x01,
    0x16,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x46,
    0x45,
    0x45,
    0x44,
    0x53,
    0x98,
    0x01,
    0x17,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x46,
    0x49,
    0x4c,
    0x45,
    0x53,
    0x59,
    0x53,
    0x54,
    0x45,
    0x4d,
    0x98,
    0x01,
    0x18,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x46,
    0x49,
    0x4c,
    0x45,
    0x5f,
    0x53,
    0x59,
    0x53,
    0x54,
    0x45,
    0x4d,
    0x53,
    0x98,
    0x01,
    0x19,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x41,
    0x4c,
    0x45,
    0x52,
    0x54,
    0x53,
    0x98,
    0x01,
    0x1a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x42,
    0x41,
    0x54,
    0x43,
    0x48,
    0x5f,
    0x43,
    0x52,
    0x41,
    0x57,
    0x4c,
    0x98,
    0x01,
    0x1b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x51,
    0x55,
    0x45,
    0x52,
    0x59,
    0x5f,
    0x45,
    0x58,
    0x50,
    0x41,
    0x4e,
    0x53,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x1c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x53,
    0x43,
    0x4f,
    0x52,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x41,
    0x44,
    0x4a,
    0x55,
    0x53,
    0x54,
    0x98,
    0x01,
    0x1d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1f,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x4e,
    0x45,
    0x43,
    0x54,
    0x4f,
    0x52,
    0x5f,
    0x46,
    0x52,
    0x41,
    0x4d,
    0x45,
    0x57,
    0x4f,
    0x52,
    0x4b,
    0x98,
    0x01,
    0x1e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x43,
    0x4c,
    0x55,
    0x53,
    0x54,
    0x45,
    0x52,
    0x49,
    0x4e,
    0x47,
    0x98,
    0x01,
    0x1f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x21,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x50,
    0x4f,
    0x4c,
    0x49,
    0x43,
    0x59,
    0x5f,
    0x41,
    0x43,
    0x43,
    0x45,
    0x53,
    0x53,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x52,
    0x4f,
    0x4c,
    0x98,
    0x01,
    0x20,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4c,
    0x45,
    0x46,
    0x54,
    0x5f,
    0x54,
    0x49,
    0x4d,
    0x45,
    0x98,
    0x01,
    0x21,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x49,
    0x4e,
    0x46,
    0x4f,
    0x52,
    0x4d,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x22,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x42,
    0x41,
    0x53,
    0x49,
    0x43,
    0x5f,
    0x41,
    0x43,
    0x43,
    0x45,
    0x53,
    0x53,
    0x98,
    0x01,
    0x23,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1b,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x41,
    0x44,
    0x56,
    0x41,
    0x4e,
    0x43,
    0x45,
    0x44,
    0x5f,
    0x41,
    0x43,
    0x43,
    0x45,
    0x53,
    0x53,
    0x98,
    0x01,
    0x24,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1c,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x53,
    0x55,
    0x50,
    0x50,
    0x4f,
    0x52,
    0x54,
    0x5f,
    0x45,
    0x4e,
    0x44,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x45,
    0x98,
    0x01,
    0x25,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x55,
    0x4e,
    0x45,
    0x58,
    0x50,
    0x45,
    0x43,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x45,
    0x52,
    0x52,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x26,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x57,
    0x52,
    0x4f,
    0x4e,
    0x47,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x46,
    0x4f,
    0x52,
    0x4d,
    0x41,
    0x54,
    0x98,
    0x01,
    0x27,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x57,
    0x52,
    0x4f,
    0x4e,
    0x47,
    0x5f,
    0x42,
    0x4f,
    0x58,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0x28,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x4f,
    0x4b,
    0x98,
    0x01,
    0x29,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x4f,
    0x54,
    0x48,
    0x45,
    0x52,
    0x53,
    0x98,
    0x01,
    0x2a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x50,
    0x41,
    0x52,
    0x53,
    0x45,
    0x98,
    0x01,
    0x2b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x4f,
    0x55,
    0x54,
    0x44,
    0x41,
    0x54,
    0x45,
    0x44,
    0x98,
    0x01,
    0x2c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x49,
    0x4e,
    0x56,
    0x41,
    0x4c,
    0x49,
    0x44,
    0x98,
    0x01,
    0x2d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x57,
    0x52,
    0x4f,
    0x4e,
    0x47,
    0x5f,
    0x46,
    0x4f,
    0x52,
    0x4d,
    0x41,
    0x54,
    0x98,
    0x01,
    0x2e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x57,
    0x52,
    0x4f,
    0x4e,
    0x47,
    0x5f,
    0x42,
    0x4f,
    0x58,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0x2f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x54,
    0x4f,
    0x4f,
    0x4d,
    0x41,
    0x4e,
    0x59,
    0x43,
    0x4f,
    0x4c,
    0x4c,
    0x45,
    0x43,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x53,
    0x98,
    0x01,
    0x30,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x22,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x57,
    0x41,
    0x52,
    0x4e,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x53,
    0x4d,
    0x41,
    0x4c,
    0x4c,
    0x45,
    0x52,
    0x5f,
    0x54,
    0x48,
    0x41,
    0x4e,
    0x5f,
    0x4c,
    0x49,
    0x4d,
    0x49,
    0x54,
    0x98,
    0x01,
    0x31,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x21,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x5f,
    0x57,
    0x41,
    0x52,
    0x4e,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x4c,
    0x45,
    0x53,
    0x53,
    0x5f,
    0x50,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x4e,
    0x45,
    0x57,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x98,
    0x01,
    0x32,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x46,
    0x45,
    0x44,
    0x45,
    0x52,
    0x41,
    0x54,
    0x49,
    0x4f,
    0x4e,
    0x98,
    0x01,
    0x33,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x19,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x4c,
    0x41,
    0x42,
    0x53,
    0x5f,
    0x53,
    0x45,
    0x54,
    0x54,
    0x49,
    0x4e,
    0x47,
    0x53,
    0x98,
    0x01,
    0x34,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x24,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x4b,
    0x45,
    0x52,
    0x42,
    0x45,
    0x52,
    0x4f,
    0x53,
    0x5f,
    0x41,
    0x54,
    0x5f,
    0x4c,
    0x4f,
    0x47,
    0x49,
    0x4e,
    0x98,
    0x01,
    0x35,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x24,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x4b,
    0x45,
    0x52,
    0x42,
    0x45,
    0x52,
    0x4f,
    0x53,
    0x5f,
    0x41,
    0x54,
    0x5f,
    0x43,
    0x52,
    0x41,
    0x57,
    0x4c,
    0x98,
    0x01,
    0x36,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x24,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x4b,
    0x45,
    0x52,
    0x42,
    0x45,
    0x52,
    0x4f,
    0x53,
    0x5f,
    0x41,
    0x54,
    0x5f,
    0x53,
    0x45,
    0x52,
    0x56,
    0x45,
    0x98,
    0x01,
    0x37,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x25,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x4b,
    0x45,
    0x52,
    0x42,
    0x45,
    0x52,
    0x4f,
    0x53,
    0x5f,
    0x41,
    0x54,
    0x5f,
    0x4f,
    0x4e,
    0x45,
    0x42,
    0x4f,
    0x58,
    0x98,
    0x01,
    0x38,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x24,
    0x45,
    0x4e,
    0x54,
    0x5f,
    0x4c,
    0x49,
    0x43,
    0x45,
    0x4e,
    0x53,
    0x45,
    0x5f,
    0x45,
    0x4e,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x4b,
    0x45,
    0x52,
    0x42,
    0x45,
    0x52,
    0x4f,
    0x53,
    0x5f,
    0x4b,
    0x54,
    0x5f,
    0x50,
    0x41,
    0x52,
    0x53,
    0x45,
    0x98,
    0x01,
    0x39,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0e,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x45,
    0x78,
    0x70,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x51,
    0x55,
    0x45,
    0x52,
    0x59,
    0x5f,
    0x45,
    0x58,
    0x50,
    0x5f,
    0x4c,
    0x45,
    0x56,
    0x45,
    0x4c,
    0x5f,
    0x4e,
    0x4f,
    0x4e,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x51,
    0x55,
    0x45,
    0x52,
    0x59,
    0x5f,
    0x45,
    0x58,
    0x50,
    0x5f,
    0x4c,
    0x45,
    0x56,
    0x45,
    0x4c,
    0x5f,
    0x46,
    0x55,
    0x4c,
    0x4c,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x51,
    0x55,
    0x45,
    0x52,
    0x59,
    0x5f,
    0x45,
    0x58,
    0x50,
    0x5f,
    0x4c,
    0x45,
    0x56,
    0x45,
    0x4c,
    0x5f,
    0x4c,
    0x4f,
    0x43,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class License(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.box_id_ = ""
    self.id_ = ""
    self.version_ = ""
    self.creation_date_ = 0
    self.grace_period_ = 0
    self.max_collections_ = 0
    self.max_frontends_ = 0
    self.max_pages_overall_ = 0
    self.max_pages_per_collection_ = 0
    self.serving_time_ = 0
    self.start_date_ = 0
    self.end_date_ = 0
    self.left_time_ = 0
    self.problems_ = 0
    self.original_end_date_ = 0
    self.original_serving_time_ = 0
    self.original_start_date_ = 0
    self.enable_seku_lite_ = 0
    self.enable_ldap_ = 0
    self.enable_toolbar_ = 0
    self.enable_cookie_crawl_ = 0
    self.enable_category_ = 0
    self.enable_sso_ = 0
    self.databases_ = 0
    self.feeds_ = 0
    self.batch_crawl_ = 0
    self.clustering_ = 0
    self.connector_framework_ = 0
    self.query_expansion_ = 0
    self.scoring_adjust_ = 0
    self.filesystem_ = 0
    self.federation_ = 0
    self.policy_access_control_ = 0
    self.labs_settings_ = ""
    self.clicklogging_ = 0
    self.alerts2_ = 0
    self.enable_kerberos_at_login_ = 0
    self.enable_kerberos_at_crawl_ = 0
    self.enable_kerberos_at_serve_ = 0
    self.enable_kerberos_at_onebox_ = 0
    self.enable_kerberos_kt_parse_ = 0
    self.has_box_id_ = 0
    self.has_id_ = 0
    self.has_version_ = 0
    self.has_creation_date_ = 0
    self.has_grace_period_ = 0
    self.has_max_collections_ = 0
    self.has_max_frontends_ = 0
    self.has_max_pages_overall_ = 0
    self.has_max_pages_per_collection_ = 0
    self.has_serving_time_ = 0
    self.has_start_date_ = 0
    self.has_end_date_ = 0
    self.has_left_time_ = 0
    self.has_problems_ = 0
    self.has_original_end_date_ = 0
    self.has_original_serving_time_ = 0
    self.has_original_start_date_ = 0
    self.has_enable_seku_lite_ = 0
    self.has_enable_ldap_ = 0
    self.has_enable_toolbar_ = 0
    self.has_enable_cookie_crawl_ = 0
    self.has_enable_category_ = 0
    self.has_enable_sso_ = 0
    self.has_databases_ = 0
    self.has_feeds_ = 0
    self.has_batch_crawl_ = 0
    self.has_clustering_ = 0
    self.has_connector_framework_ = 0
    self.has_query_expansion_ = 0
    self.has_scoring_adjust_ = 0
    self.has_filesystem_ = 0
    self.has_federation_ = 0
    self.has_policy_access_control_ = 0
    self.has_labs_settings_ = 0
    self.has_clicklogging_ = 0
    self.has_alerts2_ = 0
    self.has_enable_kerberos_at_login_ = 0
    self.has_enable_kerberos_at_crawl_ = 0
    self.has_enable_kerberos_at_serve_ = 0
    self.has_enable_kerberos_at_onebox_ = 0
    self.has_enable_kerberos_kt_parse_ = 0
    if contents is not None: self.MergeFromString(contents)

  def box_id(self): return self.box_id_

  def set_box_id(self, x):
    self.has_box_id_ = 1
    self.box_id_ = x

  def clear_box_id(self):
    self.has_box_id_ = 0
    self.box_id_ = ""

  def has_box_id(self): return self.has_box_id_

  def id(self): return self.id_

  def set_id(self, x):
    self.has_id_ = 1
    self.id_ = x

  def clear_id(self):
    self.has_id_ = 0
    self.id_ = ""

  def has_id(self): return self.has_id_

  def version(self): return self.version_

  def set_version(self, x):
    self.has_version_ = 1
    self.version_ = x

  def clear_version(self):
    self.has_version_ = 0
    self.version_ = ""

  def has_version(self): return self.has_version_

  def creation_date(self): return self.creation_date_

  def set_creation_date(self, x):
    self.has_creation_date_ = 1
    self.creation_date_ = x

  def clear_creation_date(self):
    self.has_creation_date_ = 0
    self.creation_date_ = 0

  def has_creation_date(self): return self.has_creation_date_

  def grace_period(self): return self.grace_period_

  def set_grace_period(self, x):
    self.has_grace_period_ = 1
    self.grace_period_ = x

  def clear_grace_period(self):
    self.has_grace_period_ = 0
    self.grace_period_ = 0

  def has_grace_period(self): return self.has_grace_period_

  def max_collections(self): return self.max_collections_

  def set_max_collections(self, x):
    self.has_max_collections_ = 1
    self.max_collections_ = x

  def clear_max_collections(self):
    self.has_max_collections_ = 0
    self.max_collections_ = 0

  def has_max_collections(self): return self.has_max_collections_

  def max_frontends(self): return self.max_frontends_

  def set_max_frontends(self, x):
    self.has_max_frontends_ = 1
    self.max_frontends_ = x

  def clear_max_frontends(self):
    self.has_max_frontends_ = 0
    self.max_frontends_ = 0

  def has_max_frontends(self): return self.has_max_frontends_

  def max_pages_overall(self): return self.max_pages_overall_

  def set_max_pages_overall(self, x):
    self.has_max_pages_overall_ = 1
    self.max_pages_overall_ = x

  def clear_max_pages_overall(self):
    self.has_max_pages_overall_ = 0
    self.max_pages_overall_ = 0

  def has_max_pages_overall(self): return self.has_max_pages_overall_

  def max_pages_per_collection(self): return self.max_pages_per_collection_

  def set_max_pages_per_collection(self, x):
    self.has_max_pages_per_collection_ = 1
    self.max_pages_per_collection_ = x

  def clear_max_pages_per_collection(self):
    self.has_max_pages_per_collection_ = 0
    self.max_pages_per_collection_ = 0

  def has_max_pages_per_collection(self): return self.has_max_pages_per_collection_

  def serving_time(self): return self.serving_time_

  def set_serving_time(self, x):
    self.has_serving_time_ = 1
    self.serving_time_ = x

  def clear_serving_time(self):
    self.has_serving_time_ = 0
    self.serving_time_ = 0

  def has_serving_time(self): return self.has_serving_time_

  def start_date(self): return self.start_date_

  def set_start_date(self, x):
    self.has_start_date_ = 1
    self.start_date_ = x

  def clear_start_date(self):
    self.has_start_date_ = 0
    self.start_date_ = 0

  def has_start_date(self): return self.has_start_date_

  def end_date(self): return self.end_date_

  def set_end_date(self, x):
    self.has_end_date_ = 1
    self.end_date_ = x

  def clear_end_date(self):
    self.has_end_date_ = 0
    self.end_date_ = 0

  def has_end_date(self): return self.has_end_date_

  def left_time(self): return self.left_time_

  def set_left_time(self, x):
    self.has_left_time_ = 1
    self.left_time_ = x

  def clear_left_time(self):
    self.has_left_time_ = 0
    self.left_time_ = 0

  def has_left_time(self): return self.has_left_time_

  def problems(self): return self.problems_

  def set_problems(self, x):
    self.has_problems_ = 1
    self.problems_ = x

  def clear_problems(self):
    self.has_problems_ = 0
    self.problems_ = 0

  def has_problems(self): return self.has_problems_

  def original_end_date(self): return self.original_end_date_

  def set_original_end_date(self, x):
    self.has_original_end_date_ = 1
    self.original_end_date_ = x

  def clear_original_end_date(self):
    self.has_original_end_date_ = 0
    self.original_end_date_ = 0

  def has_original_end_date(self): return self.has_original_end_date_

  def original_serving_time(self): return self.original_serving_time_

  def set_original_serving_time(self, x):
    self.has_original_serving_time_ = 1
    self.original_serving_time_ = x

  def clear_original_serving_time(self):
    self.has_original_serving_time_ = 0
    self.original_serving_time_ = 0

  def has_original_serving_time(self): return self.has_original_serving_time_

  def original_start_date(self): return self.original_start_date_

  def set_original_start_date(self, x):
    self.has_original_start_date_ = 1
    self.original_start_date_ = x

  def clear_original_start_date(self):
    self.has_original_start_date_ = 0
    self.original_start_date_ = 0

  def has_original_start_date(self): return self.has_original_start_date_

  def enable_seku_lite(self): return self.enable_seku_lite_

  def set_enable_seku_lite(self, x):
    self.has_enable_seku_lite_ = 1
    self.enable_seku_lite_ = x

  def clear_enable_seku_lite(self):
    self.has_enable_seku_lite_ = 0
    self.enable_seku_lite_ = 0

  def has_enable_seku_lite(self): return self.has_enable_seku_lite_

  def enable_ldap(self): return self.enable_ldap_

  def set_enable_ldap(self, x):
    self.has_enable_ldap_ = 1
    self.enable_ldap_ = x

  def clear_enable_ldap(self):
    self.has_enable_ldap_ = 0
    self.enable_ldap_ = 0

  def has_enable_ldap(self): return self.has_enable_ldap_

  def enable_toolbar(self): return self.enable_toolbar_

  def set_enable_toolbar(self, x):
    self.has_enable_toolbar_ = 1
    self.enable_toolbar_ = x

  def clear_enable_toolbar(self):
    self.has_enable_toolbar_ = 0
    self.enable_toolbar_ = 0

  def has_enable_toolbar(self): return self.has_enable_toolbar_

  def enable_cookie_crawl(self): return self.enable_cookie_crawl_

  def set_enable_cookie_crawl(self, x):
    self.has_enable_cookie_crawl_ = 1
    self.enable_cookie_crawl_ = x

  def clear_enable_cookie_crawl(self):
    self.has_enable_cookie_crawl_ = 0
    self.enable_cookie_crawl_ = 0

  def has_enable_cookie_crawl(self): return self.has_enable_cookie_crawl_

  def enable_category(self): return self.enable_category_

  def set_enable_category(self, x):
    self.has_enable_category_ = 1
    self.enable_category_ = x

  def clear_enable_category(self):
    self.has_enable_category_ = 0
    self.enable_category_ = 0

  def has_enable_category(self): return self.has_enable_category_

  def enable_sso(self): return self.enable_sso_

  def set_enable_sso(self, x):
    self.has_enable_sso_ = 1
    self.enable_sso_ = x

  def clear_enable_sso(self):
    self.has_enable_sso_ = 0
    self.enable_sso_ = 0

  def has_enable_sso(self): return self.has_enable_sso_

  def databases(self): return self.databases_

  def set_databases(self, x):
    self.has_databases_ = 1
    self.databases_ = x

  def clear_databases(self):
    self.has_databases_ = 0
    self.databases_ = 0

  def has_databases(self): return self.has_databases_

  def feeds(self): return self.feeds_

  def set_feeds(self, x):
    self.has_feeds_ = 1
    self.feeds_ = x

  def clear_feeds(self):
    self.has_feeds_ = 0
    self.feeds_ = 0

  def has_feeds(self): return self.has_feeds_

  def batch_crawl(self): return self.batch_crawl_

  def set_batch_crawl(self, x):
    self.has_batch_crawl_ = 1
    self.batch_crawl_ = x

  def clear_batch_crawl(self):
    self.has_batch_crawl_ = 0
    self.batch_crawl_ = 0

  def has_batch_crawl(self): return self.has_batch_crawl_

  def clustering(self): return self.clustering_

  def set_clustering(self, x):
    self.has_clustering_ = 1
    self.clustering_ = x

  def clear_clustering(self):
    self.has_clustering_ = 0
    self.clustering_ = 0

  def has_clustering(self): return self.has_clustering_

  def connector_framework(self): return self.connector_framework_

  def set_connector_framework(self, x):
    self.has_connector_framework_ = 1
    self.connector_framework_ = x

  def clear_connector_framework(self):
    self.has_connector_framework_ = 0
    self.connector_framework_ = 0

  def has_connector_framework(self): return self.has_connector_framework_

  def query_expansion(self): return self.query_expansion_

  def set_query_expansion(self, x):
    self.has_query_expansion_ = 1
    self.query_expansion_ = x

  def clear_query_expansion(self):
    self.has_query_expansion_ = 0
    self.query_expansion_ = 0

  def has_query_expansion(self): return self.has_query_expansion_

  def scoring_adjust(self): return self.scoring_adjust_

  def set_scoring_adjust(self, x):
    self.has_scoring_adjust_ = 1
    self.scoring_adjust_ = x

  def clear_scoring_adjust(self):
    self.has_scoring_adjust_ = 0
    self.scoring_adjust_ = 0

  def has_scoring_adjust(self): return self.has_scoring_adjust_

  def filesystem(self): return self.filesystem_

  def set_filesystem(self, x):
    self.has_filesystem_ = 1
    self.filesystem_ = x

  def clear_filesystem(self):
    self.has_filesystem_ = 0
    self.filesystem_ = 0

  def has_filesystem(self): return self.has_filesystem_

  def federation(self): return self.federation_

  def set_federation(self, x):
    self.has_federation_ = 1
    self.federation_ = x

  def clear_federation(self):
    self.has_federation_ = 0
    self.federation_ = 0

  def has_federation(self): return self.has_federation_

  def policy_access_control(self): return self.policy_access_control_

  def set_policy_access_control(self, x):
    self.has_policy_access_control_ = 1
    self.policy_access_control_ = x

  def clear_policy_access_control(self):
    self.has_policy_access_control_ = 0
    self.policy_access_control_ = 0

  def has_policy_access_control(self): return self.has_policy_access_control_

  def labs_settings(self): return self.labs_settings_

  def set_labs_settings(self, x):
    self.has_labs_settings_ = 1
    self.labs_settings_ = x

  def clear_labs_settings(self):
    self.has_labs_settings_ = 0
    self.labs_settings_ = ""

  def has_labs_settings(self): return self.has_labs_settings_

  def clicklogging(self): return self.clicklogging_

  def set_clicklogging(self, x):
    self.has_clicklogging_ = 1
    self.clicklogging_ = x

  def clear_clicklogging(self):
    self.has_clicklogging_ = 0
    self.clicklogging_ = 0

  def has_clicklogging(self): return self.has_clicklogging_

  def alerts2(self): return self.alerts2_

  def set_alerts2(self, x):
    self.has_alerts2_ = 1
    self.alerts2_ = x

  def clear_alerts2(self):
    self.has_alerts2_ = 0
    self.alerts2_ = 0

  def has_alerts2(self): return self.has_alerts2_

  def enable_kerberos_at_login(self): return self.enable_kerberos_at_login_

  def set_enable_kerberos_at_login(self, x):
    self.has_enable_kerberos_at_login_ = 1
    self.enable_kerberos_at_login_ = x

  def clear_enable_kerberos_at_login(self):
    self.has_enable_kerberos_at_login_ = 0
    self.enable_kerberos_at_login_ = 0

  def has_enable_kerberos_at_login(self): return self.has_enable_kerberos_at_login_

  def enable_kerberos_at_crawl(self): return self.enable_kerberos_at_crawl_

  def set_enable_kerberos_at_crawl(self, x):
    self.has_enable_kerberos_at_crawl_ = 1
    self.enable_kerberos_at_crawl_ = x

  def clear_enable_kerberos_at_crawl(self):
    self.has_enable_kerberos_at_crawl_ = 0
    self.enable_kerberos_at_crawl_ = 0

  def has_enable_kerberos_at_crawl(self): return self.has_enable_kerberos_at_crawl_

  def enable_kerberos_at_serve(self): return self.enable_kerberos_at_serve_

  def set_enable_kerberos_at_serve(self, x):
    self.has_enable_kerberos_at_serve_ = 1
    self.enable_kerberos_at_serve_ = x

  def clear_enable_kerberos_at_serve(self):
    self.has_enable_kerberos_at_serve_ = 0
    self.enable_kerberos_at_serve_ = 0

  def has_enable_kerberos_at_serve(self): return self.has_enable_kerberos_at_serve_

  def enable_kerberos_at_onebox(self): return self.enable_kerberos_at_onebox_

  def set_enable_kerberos_at_onebox(self, x):
    self.has_enable_kerberos_at_onebox_ = 1
    self.enable_kerberos_at_onebox_ = x

  def clear_enable_kerberos_at_onebox(self):
    self.has_enable_kerberos_at_onebox_ = 0
    self.enable_kerberos_at_onebox_ = 0

  def has_enable_kerberos_at_onebox(self): return self.has_enable_kerberos_at_onebox_

  def enable_kerberos_kt_parse(self): return self.enable_kerberos_kt_parse_

  def set_enable_kerberos_kt_parse(self, x):
    self.has_enable_kerberos_kt_parse_ = 1
    self.enable_kerberos_kt_parse_ = x

  def clear_enable_kerberos_kt_parse(self):
    self.has_enable_kerberos_kt_parse_ = 0
    self.enable_kerberos_kt_parse_ = 0

  def has_enable_kerberos_kt_parse(self): return self.has_enable_kerberos_kt_parse_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_box_id()): self.set_box_id(x.box_id())
    if (x.has_id()): self.set_id(x.id())
    if (x.has_version()): self.set_version(x.version())
    if (x.has_creation_date()): self.set_creation_date(x.creation_date())
    if (x.has_grace_period()): self.set_grace_period(x.grace_period())
    if (x.has_max_collections()): self.set_max_collections(x.max_collections())
    if (x.has_max_frontends()): self.set_max_frontends(x.max_frontends())
    if (x.has_max_pages_overall()): self.set_max_pages_overall(x.max_pages_overall())
    if (x.has_max_pages_per_collection()): self.set_max_pages_per_collection(x.max_pages_per_collection())
    if (x.has_serving_time()): self.set_serving_time(x.serving_time())
    if (x.has_start_date()): self.set_start_date(x.start_date())
    if (x.has_end_date()): self.set_end_date(x.end_date())
    if (x.has_left_time()): self.set_left_time(x.left_time())
    if (x.has_problems()): self.set_problems(x.problems())
    if (x.has_original_end_date()): self.set_original_end_date(x.original_end_date())
    if (x.has_original_serving_time()): self.set_original_serving_time(x.original_serving_time())
    if (x.has_original_start_date()): self.set_original_start_date(x.original_start_date())
    if (x.has_enable_seku_lite()): self.set_enable_seku_lite(x.enable_seku_lite())
    if (x.has_enable_ldap()): self.set_enable_ldap(x.enable_ldap())
    if (x.has_enable_toolbar()): self.set_enable_toolbar(x.enable_toolbar())
    if (x.has_enable_cookie_crawl()): self.set_enable_cookie_crawl(x.enable_cookie_crawl())
    if (x.has_enable_category()): self.set_enable_category(x.enable_category())
    if (x.has_enable_sso()): self.set_enable_sso(x.enable_sso())
    if (x.has_databases()): self.set_databases(x.databases())
    if (x.has_feeds()): self.set_feeds(x.feeds())
    if (x.has_batch_crawl()): self.set_batch_crawl(x.batch_crawl())
    if (x.has_clustering()): self.set_clustering(x.clustering())
    if (x.has_connector_framework()): self.set_connector_framework(x.connector_framework())
    if (x.has_query_expansion()): self.set_query_expansion(x.query_expansion())
    if (x.has_scoring_adjust()): self.set_scoring_adjust(x.scoring_adjust())
    if (x.has_filesystem()): self.set_filesystem(x.filesystem())
    if (x.has_federation()): self.set_federation(x.federation())
    if (x.has_policy_access_control()): self.set_policy_access_control(x.policy_access_control())
    if (x.has_labs_settings()): self.set_labs_settings(x.labs_settings())
    if (x.has_clicklogging()): self.set_clicklogging(x.clicklogging())
    if (x.has_alerts2()): self.set_alerts2(x.alerts2())
    if (x.has_enable_kerberos_at_login()): self.set_enable_kerberos_at_login(x.enable_kerberos_at_login())
    if (x.has_enable_kerberos_at_crawl()): self.set_enable_kerberos_at_crawl(x.enable_kerberos_at_crawl())
    if (x.has_enable_kerberos_at_serve()): self.set_enable_kerberos_at_serve(x.enable_kerberos_at_serve())
    if (x.has_enable_kerberos_at_onebox()): self.set_enable_kerberos_at_onebox(x.enable_kerberos_at_onebox())
    if (x.has_enable_kerberos_kt_parse()): self.set_enable_kerberos_kt_parse(x.enable_kerberos_kt_parse())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'License', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'License')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'License', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'License', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'License', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_box_id_ != x.has_box_id_: return 0
    if self.has_box_id_ and self.box_id_ != x.box_id_: return 0
    if self.has_id_ != x.has_id_: return 0
    if self.has_id_ and self.id_ != x.id_: return 0
    if self.has_version_ != x.has_version_: return 0
    if self.has_version_ and self.version_ != x.version_: return 0
    if self.has_creation_date_ != x.has_creation_date_: return 0
    if self.has_creation_date_ and self.creation_date_ != x.creation_date_: return 0
    if self.has_grace_period_ != x.has_grace_period_: return 0
    if self.has_grace_period_ and self.grace_period_ != x.grace_period_: return 0
    if self.has_max_collections_ != x.has_max_collections_: return 0
    if self.has_max_collections_ and self.max_collections_ != x.max_collections_: return 0
    if self.has_max_frontends_ != x.has_max_frontends_: return 0
    if self.has_max_frontends_ and self.max_frontends_ != x.max_frontends_: return 0
    if self.has_max_pages_overall_ != x.has_max_pages_overall_: return 0
    if self.has_max_pages_overall_ and self.max_pages_overall_ != x.max_pages_overall_: return 0
    if self.has_max_pages_per_collection_ != x.has_max_pages_per_collection_: return 0
    if self.has_max_pages_per_collection_ and self.max_pages_per_collection_ != x.max_pages_per_collection_: return 0
    if self.has_serving_time_ != x.has_serving_time_: return 0
    if self.has_serving_time_ and self.serving_time_ != x.serving_time_: return 0
    if self.has_start_date_ != x.has_start_date_: return 0
    if self.has_start_date_ and self.start_date_ != x.start_date_: return 0
    if self.has_end_date_ != x.has_end_date_: return 0
    if self.has_end_date_ and self.end_date_ != x.end_date_: return 0
    if self.has_left_time_ != x.has_left_time_: return 0
    if self.has_left_time_ and self.left_time_ != x.left_time_: return 0
    if self.has_problems_ != x.has_problems_: return 0
    if self.has_problems_ and self.problems_ != x.problems_: return 0
    if self.has_original_end_date_ != x.has_original_end_date_: return 0
    if self.has_original_end_date_ and self.original_end_date_ != x.original_end_date_: return 0
    if self.has_original_serving_time_ != x.has_original_serving_time_: return 0
    if self.has_original_serving_time_ and self.original_serving_time_ != x.original_serving_time_: return 0
    if self.has_original_start_date_ != x.has_original_start_date_: return 0
    if self.has_original_start_date_ and self.original_start_date_ != x.original_start_date_: return 0
    if self.has_enable_seku_lite_ != x.has_enable_seku_lite_: return 0
    if self.has_enable_seku_lite_ and self.enable_seku_lite_ != x.enable_seku_lite_: return 0
    if self.has_enable_ldap_ != x.has_enable_ldap_: return 0
    if self.has_enable_ldap_ and self.enable_ldap_ != x.enable_ldap_: return 0
    if self.has_enable_toolbar_ != x.has_enable_toolbar_: return 0
    if self.has_enable_toolbar_ and self.enable_toolbar_ != x.enable_toolbar_: return 0
    if self.has_enable_cookie_crawl_ != x.has_enable_cookie_crawl_: return 0
    if self.has_enable_cookie_crawl_ and self.enable_cookie_crawl_ != x.enable_cookie_crawl_: return 0
    if self.has_enable_category_ != x.has_enable_category_: return 0
    if self.has_enable_category_ and self.enable_category_ != x.enable_category_: return 0
    if self.has_enable_sso_ != x.has_enable_sso_: return 0
    if self.has_enable_sso_ and self.enable_sso_ != x.enable_sso_: return 0
    if self.has_databases_ != x.has_databases_: return 0
    if self.has_databases_ and self.databases_ != x.databases_: return 0
    if self.has_feeds_ != x.has_feeds_: return 0
    if self.has_feeds_ and self.feeds_ != x.feeds_: return 0
    if self.has_batch_crawl_ != x.has_batch_crawl_: return 0
    if self.has_batch_crawl_ and self.batch_crawl_ != x.batch_crawl_: return 0
    if self.has_clustering_ != x.has_clustering_: return 0
    if self.has_clustering_ and self.clustering_ != x.clustering_: return 0
    if self.has_connector_framework_ != x.has_connector_framework_: return 0
    if self.has_connector_framework_ and self.connector_framework_ != x.connector_framework_: return 0
    if self.has_query_expansion_ != x.has_query_expansion_: return 0
    if self.has_query_expansion_ and self.query_expansion_ != x.query_expansion_: return 0
    if self.has_scoring_adjust_ != x.has_scoring_adjust_: return 0
    if self.has_scoring_adjust_ and self.scoring_adjust_ != x.scoring_adjust_: return 0
    if self.has_filesystem_ != x.has_filesystem_: return 0
    if self.has_filesystem_ and self.filesystem_ != x.filesystem_: return 0
    if self.has_federation_ != x.has_federation_: return 0
    if self.has_federation_ and self.federation_ != x.federation_: return 0
    if self.has_policy_access_control_ != x.has_policy_access_control_: return 0
    if self.has_policy_access_control_ and self.policy_access_control_ != x.policy_access_control_: return 0
    if self.has_labs_settings_ != x.has_labs_settings_: return 0
    if self.has_labs_settings_ and self.labs_settings_ != x.labs_settings_: return 0
    if self.has_clicklogging_ != x.has_clicklogging_: return 0
    if self.has_clicklogging_ and self.clicklogging_ != x.clicklogging_: return 0
    if self.has_alerts2_ != x.has_alerts2_: return 0
    if self.has_alerts2_ and self.alerts2_ != x.alerts2_: return 0
    if self.has_enable_kerberos_at_login_ != x.has_enable_kerberos_at_login_: return 0
    if self.has_enable_kerberos_at_login_ and self.enable_kerberos_at_login_ != x.enable_kerberos_at_login_: return 0
    if self.has_enable_kerberos_at_crawl_ != x.has_enable_kerberos_at_crawl_: return 0
    if self.has_enable_kerberos_at_crawl_ and self.enable_kerberos_at_crawl_ != x.enable_kerberos_at_crawl_: return 0
    if self.has_enable_kerberos_at_serve_ != x.has_enable_kerberos_at_serve_: return 0
    if self.has_enable_kerberos_at_serve_ and self.enable_kerberos_at_serve_ != x.enable_kerberos_at_serve_: return 0
    if self.has_enable_kerberos_at_onebox_ != x.has_enable_kerberos_at_onebox_: return 0
    if self.has_enable_kerberos_at_onebox_ and self.enable_kerberos_at_onebox_ != x.enable_kerberos_at_onebox_: return 0
    if self.has_enable_kerberos_kt_parse_ != x.has_enable_kerberos_kt_parse_: return 0
    if self.has_enable_kerberos_kt_parse_ and self.enable_kerberos_kt_parse_ != x.enable_kerberos_kt_parse_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_box_id_): n += 1 + self.lengthString(len(self.box_id_))
    if (self.has_id_): n += 1 + self.lengthString(len(self.id_))
    if (self.has_version_): n += 1 + self.lengthString(len(self.version_))
    if (self.has_creation_date_): n += 1 + self.lengthVarInt64(self.creation_date_)
    if (self.has_grace_period_): n += 1 + self.lengthVarInt64(self.grace_period_)
    if (self.has_max_collections_): n += 1 + self.lengthVarInt64(self.max_collections_)
    if (self.has_max_frontends_): n += 1 + self.lengthVarInt64(self.max_frontends_)
    if (self.has_max_pages_overall_): n += 1 + self.lengthVarInt64(self.max_pages_overall_)
    if (self.has_max_pages_per_collection_): n += 1 + self.lengthVarInt64(self.max_pages_per_collection_)
    if (self.has_serving_time_): n += 1 + self.lengthVarInt64(self.serving_time_)
    if (self.has_start_date_): n += 1 + self.lengthVarInt64(self.start_date_)
    if (self.has_end_date_): n += 1 + self.lengthVarInt64(self.end_date_)
    if (self.has_left_time_): n += 1 + self.lengthVarInt64(self.left_time_)
    if (self.has_problems_): n += 1 + self.lengthVarInt64(self.problems_)
    if (self.has_original_end_date_): n += 1 + self.lengthVarInt64(self.original_end_date_)
    if (self.has_original_serving_time_): n += 2 + self.lengthVarInt64(self.original_serving_time_)
    if (self.has_original_start_date_): n += 2 + self.lengthVarInt64(self.original_start_date_)
    if (self.has_enable_seku_lite_): n += 3
    if (self.has_enable_ldap_): n += 3
    if (self.has_enable_toolbar_): n += 3
    if (self.has_enable_cookie_crawl_): n += 3
    if (self.has_enable_category_): n += 3
    if (self.has_enable_sso_): n += 3
    if (self.has_databases_): n += 3
    if (self.has_feeds_): n += 3
    if (self.has_batch_crawl_): n += 3
    if (self.has_clustering_): n += 3
    if (self.has_connector_framework_): n += 3
    if (self.has_query_expansion_): n += 3
    if (self.has_scoring_adjust_): n += 2 + self.lengthVarInt64(self.scoring_adjust_)
    if (self.has_filesystem_): n += 3
    if (self.has_federation_): n += 3
    if (self.has_policy_access_control_): n += 3
    if (self.has_labs_settings_): n += 2 + self.lengthString(len(self.labs_settings_))
    if (self.has_clicklogging_): n += 3
    if (self.has_alerts2_): n += 3
    if (self.has_enable_kerberos_at_login_): n += 3
    if (self.has_enable_kerberos_at_crawl_): n += 3
    if (self.has_enable_kerberos_at_serve_): n += 3
    if (self.has_enable_kerberos_at_onebox_): n += 3
    if (self.has_enable_kerberos_kt_parse_): n += 3
    return n + 0

  def Clear(self):
    self.clear_box_id()
    self.clear_id()
    self.clear_version()
    self.clear_creation_date()
    self.clear_grace_period()
    self.clear_max_collections()
    self.clear_max_frontends()
    self.clear_max_pages_overall()
    self.clear_max_pages_per_collection()
    self.clear_serving_time()
    self.clear_start_date()
    self.clear_end_date()
    self.clear_left_time()
    self.clear_problems()
    self.clear_original_end_date()
    self.clear_original_serving_time()
    self.clear_original_start_date()
    self.clear_enable_seku_lite()
    self.clear_enable_ldap()
    self.clear_enable_toolbar()
    self.clear_enable_cookie_crawl()
    self.clear_enable_category()
    self.clear_enable_sso()
    self.clear_databases()
    self.clear_feeds()
    self.clear_batch_crawl()
    self.clear_clustering()
    self.clear_connector_framework()
    self.clear_query_expansion()
    self.clear_scoring_adjust()
    self.clear_filesystem()
    self.clear_federation()
    self.clear_policy_access_control()
    self.clear_labs_settings()
    self.clear_clicklogging()
    self.clear_alerts2()
    self.clear_enable_kerberos_at_login()
    self.clear_enable_kerberos_at_crawl()
    self.clear_enable_kerberos_at_serve()
    self.clear_enable_kerberos_at_onebox()
    self.clear_enable_kerberos_kt_parse()

  def OutputUnchecked(self, out):
    if (self.has_box_id_):
      out.putVarInt32(10)
      out.putPrefixedString(self.box_id_)
    if (self.has_id_):
      out.putVarInt32(18)
      out.putPrefixedString(self.id_)
    if (self.has_version_):
      out.putVarInt32(26)
      out.putPrefixedString(self.version_)
    if (self.has_creation_date_):
      out.putVarInt32(32)
      out.putVarInt64(self.creation_date_)
    if (self.has_grace_period_):
      out.putVarInt32(40)
      out.putVarInt64(self.grace_period_)
    if (self.has_max_collections_):
      out.putVarInt32(48)
      out.putVarInt64(self.max_collections_)
    if (self.has_max_frontends_):
      out.putVarInt32(56)
      out.putVarInt64(self.max_frontends_)
    if (self.has_max_pages_overall_):
      out.putVarInt32(64)
      out.putVarInt64(self.max_pages_overall_)
    if (self.has_max_pages_per_collection_):
      out.putVarInt32(72)
      out.putVarInt64(self.max_pages_per_collection_)
    if (self.has_serving_time_):
      out.putVarInt32(80)
      out.putVarInt64(self.serving_time_)
    if (self.has_start_date_):
      out.putVarInt32(88)
      out.putVarInt64(self.start_date_)
    if (self.has_end_date_):
      out.putVarInt32(96)
      out.putVarInt64(self.end_date_)
    if (self.has_left_time_):
      out.putVarInt32(104)
      out.putVarInt64(self.left_time_)
    if (self.has_problems_):
      out.putVarInt32(112)
      out.putVarInt32(self.problems_)
    if (self.has_original_end_date_):
      out.putVarInt32(120)
      out.putVarInt64(self.original_end_date_)
    if (self.has_original_serving_time_):
      out.putVarInt32(128)
      out.putVarInt64(self.original_serving_time_)
    if (self.has_original_start_date_):
      out.putVarInt32(136)
      out.putVarInt64(self.original_start_date_)
    if (self.has_enable_seku_lite_):
      out.putVarInt32(144)
      out.putBoolean(self.enable_seku_lite_)
    if (self.has_enable_ldap_):
      out.putVarInt32(152)
      out.putBoolean(self.enable_ldap_)
    if (self.has_enable_toolbar_):
      out.putVarInt32(160)
      out.putBoolean(self.enable_toolbar_)
    if (self.has_enable_cookie_crawl_):
      out.putVarInt32(168)
      out.putBoolean(self.enable_cookie_crawl_)
    if (self.has_enable_category_):
      out.putVarInt32(176)
      out.putBoolean(self.enable_category_)
    if (self.has_enable_sso_):
      out.putVarInt32(184)
      out.putBoolean(self.enable_sso_)
    if (self.has_databases_):
      out.putVarInt32(192)
      out.putBoolean(self.databases_)
    if (self.has_feeds_):
      out.putVarInt32(200)
      out.putBoolean(self.feeds_)
    if (self.has_batch_crawl_):
      out.putVarInt32(208)
      out.putBoolean(self.batch_crawl_)
    if (self.has_clustering_):
      out.putVarInt32(216)
      out.putBoolean(self.clustering_)
    if (self.has_connector_framework_):
      out.putVarInt32(224)
      out.putBoolean(self.connector_framework_)
    if (self.has_query_expansion_):
      out.putVarInt32(232)
      out.putBoolean(self.query_expansion_)
    if (self.has_scoring_adjust_):
      out.putVarInt32(240)
      out.putVarInt32(self.scoring_adjust_)
    if (self.has_filesystem_):
      out.putVarInt32(248)
      out.putBoolean(self.filesystem_)
    if (self.has_federation_):
      out.putVarInt32(256)
      out.putBoolean(self.federation_)
    if (self.has_policy_access_control_):
      out.putVarInt32(264)
      out.putBoolean(self.policy_access_control_)
    if (self.has_labs_settings_):
      out.putVarInt32(274)
      out.putPrefixedString(self.labs_settings_)
    if (self.has_clicklogging_):
      out.putVarInt32(280)
      out.putBoolean(self.clicklogging_)
    if (self.has_alerts2_):
      out.putVarInt32(288)
      out.putBoolean(self.alerts2_)
    if (self.has_enable_kerberos_at_login_):
      out.putVarInt32(296)
      out.putBoolean(self.enable_kerberos_at_login_)
    if (self.has_enable_kerberos_at_crawl_):
      out.putVarInt32(304)
      out.putBoolean(self.enable_kerberos_at_crawl_)
    if (self.has_enable_kerberos_at_serve_):
      out.putVarInt32(312)
      out.putBoolean(self.enable_kerberos_at_serve_)
    if (self.has_enable_kerberos_at_onebox_):
      out.putVarInt32(320)
      out.putBoolean(self.enable_kerberos_at_onebox_)
    if (self.has_enable_kerberos_kt_parse_):
      out.putVarInt32(328)
      out.putBoolean(self.enable_kerberos_kt_parse_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_box_id(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_id(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_version(d.getPrefixedString())
        continue
      if tt == 32:
        self.set_creation_date(d.getVarInt64())
        continue
      if tt == 40:
        self.set_grace_period(d.getVarInt64())
        continue
      if tt == 48:
        self.set_max_collections(d.getVarInt64())
        continue
      if tt == 56:
        self.set_max_frontends(d.getVarInt64())
        continue
      if tt == 64:
        self.set_max_pages_overall(d.getVarInt64())
        continue
      if tt == 72:
        self.set_max_pages_per_collection(d.getVarInt64())
        continue
      if tt == 80:
        self.set_serving_time(d.getVarInt64())
        continue
      if tt == 88:
        self.set_start_date(d.getVarInt64())
        continue
      if tt == 96:
        self.set_end_date(d.getVarInt64())
        continue
      if tt == 104:
        self.set_left_time(d.getVarInt64())
        continue
      if tt == 112:
        self.set_problems(d.getVarInt32())
        continue
      if tt == 120:
        self.set_original_end_date(d.getVarInt64())
        continue
      if tt == 128:
        self.set_original_serving_time(d.getVarInt64())
        continue
      if tt == 136:
        self.set_original_start_date(d.getVarInt64())
        continue
      if tt == 144:
        self.set_enable_seku_lite(d.getBoolean())
        continue
      if tt == 152:
        self.set_enable_ldap(d.getBoolean())
        continue
      if tt == 160:
        self.set_enable_toolbar(d.getBoolean())
        continue
      if tt == 168:
        self.set_enable_cookie_crawl(d.getBoolean())
        continue
      if tt == 176:
        self.set_enable_category(d.getBoolean())
        continue
      if tt == 184:
        self.set_enable_sso(d.getBoolean())
        continue
      if tt == 192:
        self.set_databases(d.getBoolean())
        continue
      if tt == 200:
        self.set_feeds(d.getBoolean())
        continue
      if tt == 208:
        self.set_batch_crawl(d.getBoolean())
        continue
      if tt == 216:
        self.set_clustering(d.getBoolean())
        continue
      if tt == 224:
        self.set_connector_framework(d.getBoolean())
        continue
      if tt == 232:
        self.set_query_expansion(d.getBoolean())
        continue
      if tt == 240:
        self.set_scoring_adjust(d.getVarInt32())
        continue
      if tt == 248:
        self.set_filesystem(d.getBoolean())
        continue
      if tt == 256:
        self.set_federation(d.getBoolean())
        continue
      if tt == 264:
        self.set_policy_access_control(d.getBoolean())
        continue
      if tt == 274:
        self.set_labs_settings(d.getPrefixedString())
        continue
      if tt == 280:
        self.set_clicklogging(d.getBoolean())
        continue
      if tt == 288:
        self.set_alerts2(d.getBoolean())
        continue
      if tt == 296:
        self.set_enable_kerberos_at_login(d.getBoolean())
        continue
      if tt == 304:
        self.set_enable_kerberos_at_crawl(d.getBoolean())
        continue
      if tt == 312:
        self.set_enable_kerberos_at_serve(d.getBoolean())
        continue
      if tt == 320:
        self.set_enable_kerberos_at_onebox(d.getBoolean())
        continue
      if tt == 328:
        self.set_enable_kerberos_kt_parse(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_box_id_: res+=prefix+("box_id: %s\n" % self.DebugFormatString(self.box_id_))
    if self.has_id_: res+=prefix+("id: %s\n" % self.DebugFormatString(self.id_))
    if self.has_version_: res+=prefix+("version: %s\n" % self.DebugFormatString(self.version_))
    if self.has_creation_date_: res+=prefix+("creation_date: %s\n" % self.DebugFormatInt64(self.creation_date_))
    if self.has_grace_period_: res+=prefix+("grace_period: %s\n" % self.DebugFormatInt64(self.grace_period_))
    if self.has_max_collections_: res+=prefix+("max_collections: %s\n" % self.DebugFormatInt64(self.max_collections_))
    if self.has_max_frontends_: res+=prefix+("max_frontends: %s\n" % self.DebugFormatInt64(self.max_frontends_))
    if self.has_max_pages_overall_: res+=prefix+("max_pages_overall: %s\n" % self.DebugFormatInt64(self.max_pages_overall_))
    if self.has_max_pages_per_collection_: res+=prefix+("max_pages_per_collection: %s\n" % self.DebugFormatInt64(self.max_pages_per_collection_))
    if self.has_serving_time_: res+=prefix+("serving_time: %s\n" % self.DebugFormatInt64(self.serving_time_))
    if self.has_start_date_: res+=prefix+("start_date: %s\n" % self.DebugFormatInt64(self.start_date_))
    if self.has_end_date_: res+=prefix+("end_date: %s\n" % self.DebugFormatInt64(self.end_date_))
    if self.has_left_time_: res+=prefix+("left_time: %s\n" % self.DebugFormatInt64(self.left_time_))
    if self.has_problems_: res+=prefix+("problems: %s\n" % self.DebugFormatInt32(self.problems_))
    if self.has_original_end_date_: res+=prefix+("original_end_date: %s\n" % self.DebugFormatInt64(self.original_end_date_))
    if self.has_original_serving_time_: res+=prefix+("original_serving_time: %s\n" % self.DebugFormatInt64(self.original_serving_time_))
    if self.has_original_start_date_: res+=prefix+("original_start_date: %s\n" % self.DebugFormatInt64(self.original_start_date_))
    if self.has_enable_seku_lite_: res+=prefix+("enable_seku_lite: %s\n" % self.DebugFormatBool(self.enable_seku_lite_))
    if self.has_enable_ldap_: res+=prefix+("enable_ldap: %s\n" % self.DebugFormatBool(self.enable_ldap_))
    if self.has_enable_toolbar_: res+=prefix+("enable_toolbar: %s\n" % self.DebugFormatBool(self.enable_toolbar_))
    if self.has_enable_cookie_crawl_: res+=prefix+("enable_cookie_crawl: %s\n" % self.DebugFormatBool(self.enable_cookie_crawl_))
    if self.has_enable_category_: res+=prefix+("enable_category: %s\n" % self.DebugFormatBool(self.enable_category_))
    if self.has_enable_sso_: res+=prefix+("enable_sso: %s\n" % self.DebugFormatBool(self.enable_sso_))
    if self.has_databases_: res+=prefix+("databases: %s\n" % self.DebugFormatBool(self.databases_))
    if self.has_feeds_: res+=prefix+("feeds: %s\n" % self.DebugFormatBool(self.feeds_))
    if self.has_batch_crawl_: res+=prefix+("batch_crawl: %s\n" % self.DebugFormatBool(self.batch_crawl_))
    if self.has_clustering_: res+=prefix+("clustering: %s\n" % self.DebugFormatBool(self.clustering_))
    if self.has_connector_framework_: res+=prefix+("connector_framework: %s\n" % self.DebugFormatBool(self.connector_framework_))
    if self.has_query_expansion_: res+=prefix+("query_expansion: %s\n" % self.DebugFormatBool(self.query_expansion_))
    if self.has_scoring_adjust_: res+=prefix+("scoring_adjust: %s\n" % self.DebugFormatInt32(self.scoring_adjust_))
    if self.has_filesystem_: res+=prefix+("filesystem: %s\n" % self.DebugFormatBool(self.filesystem_))
    if self.has_federation_: res+=prefix+("federation: %s\n" % self.DebugFormatBool(self.federation_))
    if self.has_policy_access_control_: res+=prefix+("policy_access_control: %s\n" % self.DebugFormatBool(self.policy_access_control_))
    if self.has_labs_settings_: res+=prefix+("labs_settings: %s\n" % self.DebugFormatString(self.labs_settings_))
    if self.has_clicklogging_: res+=prefix+("clicklogging: %s\n" % self.DebugFormatBool(self.clicklogging_))
    if self.has_alerts2_: res+=prefix+("alerts2: %s\n" % self.DebugFormatBool(self.alerts2_))
    if self.has_enable_kerberos_at_login_: res+=prefix+("enable_kerberos_at_login: %s\n" % self.DebugFormatBool(self.enable_kerberos_at_login_))
    if self.has_enable_kerberos_at_crawl_: res+=prefix+("enable_kerberos_at_crawl: %s\n" % self.DebugFormatBool(self.enable_kerberos_at_crawl_))
    if self.has_enable_kerberos_at_serve_: res+=prefix+("enable_kerberos_at_serve: %s\n" % self.DebugFormatBool(self.enable_kerberos_at_serve_))
    if self.has_enable_kerberos_at_onebox_: res+=prefix+("enable_kerberos_at_onebox: %s\n" % self.DebugFormatBool(self.enable_kerberos_at_onebox_))
    if self.has_enable_kerberos_kt_parse_: res+=prefix+("enable_kerberos_kt_parse: %s\n" % self.DebugFormatBool(self.enable_kerberos_kt_parse_))
    return res

  kbox_id = 1
  kid = 2
  kversion = 3
  kcreation_date = 4
  kgrace_period = 5
  kmax_collections = 6
  kmax_frontends = 7
  kmax_pages_overall = 8
  kmax_pages_per_collection = 9
  kserving_time = 10
  kstart_date = 11
  kend_date = 12
  kleft_time = 13
  kproblems = 14
  koriginal_end_date = 15
  koriginal_serving_time = 16
  koriginal_start_date = 17
  kenable_seku_lite = 18
  kenable_ldap = 19
  kenable_toolbar = 20
  kenable_cookie_crawl = 21
  kenable_category = 22
  kenable_sso = 23
  kdatabases = 24
  kfeeds = 25
  kbatch_crawl = 26
  kclustering = 27
  kconnector_framework = 28
  kquery_expansion = 29
  kscoring_adjust = 30
  kfilesystem = 31
  kfederation = 32
  kpolicy_access_control = 33
  klabs_settings = 34
  kclicklogging = 35
  kalerts2 = 36
  kenable_kerberos_at_login = 37
  kenable_kerberos_at_crawl = 38
  kenable_kerberos_at_serve = 39
  kenable_kerberos_at_onebox = 40
  kenable_kerberos_kt_parse = 41

  _TEXT = (
   "ErrorCode",  #   0
   "box_id",  #   1
   "id",  #   2
   "version",  #   3
   "creation_date",  #   4
   "grace_period",  #   5
   "max_collections",  #   6
   "max_frontends",  #   7
   "max_pages_overall",  #   8
   "max_pages_per_collection",  #   9
   "serving_time",  #  10
   "start_date",  #  11
   "end_date",  #  12
   "left_time",  #  13
   "problems",  #  14
   "original_end_date",  #  15
   "original_serving_time",  #  16
   "original_start_date",  #  17
   "enable_seku_lite",  #  18
   "enable_ldap",  #  19
   "enable_toolbar",  #  20
   "enable_cookie_crawl",  #  21
   "enable_category",  #  22
   "enable_sso",  #  23
   "databases",  #  24
   "feeds",  #  25
   "batch_crawl",  #  26
   "clustering",  #  27
   "connector_framework",  #  28
   "query_expansion",  #  29
   "scoring_adjust",  #  30
   "filesystem",  #  31
   "federation",  #  32
   "policy_access_control",  #  33
   "labs_settings",  #  34
   "clicklogging",  #  35
   "alerts2",  #  36
   "enable_kerberos_at_login",  #  37
   "enable_kerberos_at_crawl",  #  38
   "enable_kerberos_at_serve",  #  39
   "enable_kerberos_at_onebox",  #  40
   "enable_kerberos_kt_parse",  #  41
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.NUMERIC,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.NUMERIC,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.NUMERIC,  #  18

   ProtocolBuffer.Encoder.NUMERIC,  #  19

   ProtocolBuffer.Encoder.NUMERIC,  #  20

   ProtocolBuffer.Encoder.NUMERIC,  #  21

   ProtocolBuffer.Encoder.NUMERIC,  #  22

   ProtocolBuffer.Encoder.NUMERIC,  #  23

   ProtocolBuffer.Encoder.NUMERIC,  #  24

   ProtocolBuffer.Encoder.NUMERIC,  #  25

   ProtocolBuffer.Encoder.NUMERIC,  #  26

   ProtocolBuffer.Encoder.NUMERIC,  #  27

   ProtocolBuffer.Encoder.NUMERIC,  #  28

   ProtocolBuffer.Encoder.NUMERIC,  #  29

   ProtocolBuffer.Encoder.NUMERIC,  #  30

   ProtocolBuffer.Encoder.NUMERIC,  #  31

   ProtocolBuffer.Encoder.NUMERIC,  #  32

   ProtocolBuffer.Encoder.NUMERIC,  #  33

   ProtocolBuffer.Encoder.STRING,  #  34

   ProtocolBuffer.Encoder.NUMERIC,  #  35

   ProtocolBuffer.Encoder.NUMERIC,  #  36

   ProtocolBuffer.Encoder.NUMERIC,  #  37

   ProtocolBuffer.Encoder.NUMERIC,  #  38

   ProtocolBuffer.Encoder.NUMERIC,  #  39

   ProtocolBuffer.Encoder.NUMERIC,  #  40

   ProtocolBuffer.Encoder.NUMERIC,  #  41

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x20,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x2f,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x07,
    0x4c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x13,
    0x1a,
    0x06,
    0x62,
    0x6f,
    0x78,
    0x5f,
    0x69,
    0x64,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x02,
    0x69,
    0x64,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x67,
    0x72,
    0x61,
    0x63,
    0x65,
    0x5f,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x6d,
    0x61,
    0x78,
    0x5f,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x6d,
    0x61,
    0x78,
    0x5f,
    0x66,
    0x72,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x6d,
    0x61,
    0x78,
    0x5f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x73,
    0x5f,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x6d,
    0x61,
    0x78,
    0x5f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x73,
    0x5f,
    0x70,
    0x65,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x65,
    0x6e,
    0x64,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x5f,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x0d,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x73,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x5f,
    0x65,
    0x6e,
    0x64,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x5f,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x10,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x5f,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x73,
    0x65,
    0x6b,
    0x75,
    0x5f,
    0x6c,
    0x69,
    0x74,
    0x65,
    0x20,
    0x12,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x6c,
    0x64,
    0x61,
    0x70,
    0x20,
    0x13,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x74,
    0x6f,
    0x6f,
    0x6c,
    0x62,
    0x61,
    0x72,
    0x20,
    0x14,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x5f,
    0x63,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x20,
    0x15,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x16,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x73,
    0x73,
    0x6f,
    0x20,
    0x17,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x64,
    0x61,
    0x74,
    0x61,
    0x62,
    0x61,
    0x73,
    0x65,
    0x73,
    0x20,
    0x18,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x66,
    0x65,
    0x65,
    0x64,
    0x73,
    0x20,
    0x19,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x62,
    0x61,
    0x74,
    0x63,
    0x68,
    0x5f,
    0x63,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x20,
    0x1a,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x63,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x1b,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x5f,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x20,
    0x1c,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x5f,
    0x65,
    0x78,
    0x70,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x1d,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x61,
    0x64,
    0x6a,
    0x75,
    0x73,
    0x74,
    0x20,
    0x1e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x66,
    0x69,
    0x6c,
    0x65,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x20,
    0x1f,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x66,
    0x65,
    0x64,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x20,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x79,
    0x5f,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x20,
    0x21,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x6c,
    0x61,
    0x62,
    0x73,
    0x5f,
    0x73,
    0x65,
    0x74,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x22,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x42,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x22,
    0x22,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x6c,
    0x6f,
    0x67,
    0x67,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x23,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x61,
    0x6c,
    0x65,
    0x72,
    0x74,
    0x73,
    0x32,
    0x20,
    0x24,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x6b,
    0x65,
    0x72,
    0x62,
    0x65,
    0x72,
    0x6f,
    0x73,
    0x5f,
    0x61,
    0x74,
    0x5f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x6e,
    0x20,
    0x25,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x6b,
    0x65,
    0x72,
    0x62,
    0x65,
    0x72,
    0x6f,
    0x73,
    0x5f,
    0x61,
    0x74,
    0x5f,
    0x63,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x20,
    0x26,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x6b,
    0x65,
    0x72,
    0x62,
    0x65,
    0x72,
    0x6f,
    0x73,
    0x5f,
    0x61,
    0x74,
    0x5f,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x20,
    0x27,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x6b,
    0x65,
    0x72,
    0x62,
    0x65,
    0x72,
    0x6f,
    0x73,
    0x5f,
    0x61,
    0x74,
    0x5f,
    0x6f,
    0x6e,
    0x65,
    0x62,
    0x6f,
    0x78,
    0x20,
    0x28,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x5f,
    0x6b,
    0x65,
    0x72,
    0x62,
    0x65,
    0x72,
    0x6f,
    0x73,
    0x5f,
    0x6b,
    0x74,
    0x5f,
    0x70,
    0x61,
    0x72,
    0x73,
    0x65,
    0x20,
    0x29,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['Consts','License']
