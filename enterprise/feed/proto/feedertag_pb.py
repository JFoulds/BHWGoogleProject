# This file automatically generated by protocol-compiler from enterprise/feed/proto/feedertag.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class FeederCommand_IndexData(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.termfp_ = 0
    self.position_ = 0
    self.attribute_ = 0
    self.has_termfp_ = 0
    self.has_position_ = 0
    self.has_attribute_ = 0
    if contents is not None: self.MergeFromString(contents)

  def termfp(self): return self.termfp_

  def set_termfp(self, x):
    self.has_termfp_ = 1
    self.termfp_ = x

  def clear_termfp(self):
    self.has_termfp_ = 0
    self.termfp_ = 0

  def has_termfp(self): return self.has_termfp_

  def position(self): return self.position_

  def set_position(self, x):
    self.has_position_ = 1
    self.position_ = x

  def clear_position(self):
    self.has_position_ = 0
    self.position_ = 0

  def has_position(self): return self.has_position_

  def attribute(self): return self.attribute_

  def set_attribute(self, x):
    self.has_attribute_ = 1
    self.attribute_ = x

  def clear_attribute(self):
    self.has_attribute_ = 0
    self.attribute_ = 0

  def has_attribute(self): return self.has_attribute_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_termfp()): self.set_termfp(x.termfp())
    if (x.has_position()): self.set_position(x.position())
    if (x.has_attribute()): self.set_attribute(x.attribute())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeederCommand', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeederCommand')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeederCommand', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeederCommand', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeederCommand', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_termfp_ != x.has_termfp_: return 0
    if self.has_termfp_ and self.termfp_ != x.termfp_: return 0
    if self.has_position_ != x.has_position_: return 0
    if self.has_position_ and self.position_ != x.position_: return 0
    if self.has_attribute_ != x.has_attribute_: return 0
    if self.has_attribute_ and self.attribute_ != x.attribute_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_termfp_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: termfp not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.termfp_)
    if (self.has_position_): n += 1 + self.lengthVarInt64(self.position_)
    if (self.has_attribute_): n += 1 + self.lengthVarInt64(self.attribute_)
    return n + 1

  def Clear(self):
    self.clear_termfp()
    self.clear_position()
    self.clear_attribute()

  def OutputUnchecked(self, out):
    out.putVarInt32(56)
    out.putVarUint64(self.termfp_)
    if (self.has_position_):
      out.putVarInt32(64)
      out.putVarInt64(self.position_)
    if (self.has_attribute_):
      out.putVarInt32(72)
      out.putVarInt64(self.attribute_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 52: break
      if tt == 56:
        self.set_termfp(d.getVarUint64())
        continue
      if tt == 64:
        self.set_position(d.getVarInt64())
        continue
      if tt == 72:
        self.set_attribute(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_termfp_: res+=prefix+("TermFP: %s\n" % self.DebugFormatInt64(self.termfp_))
    if self.has_position_: res+=prefix+("Position: %s\n" % self.DebugFormatInt64(self.position_))
    if self.has_attribute_: res+=prefix+("Attribute: %s\n" % self.DebugFormatInt64(self.attribute_))
    return res

class FeederCommand_ArchiveData(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.timestamp_ = 0
    self.epoch_ = 0
    self.initialpagerank_ = 0
    self.parentdocid_ = 0
    self.parentanchortext_ = ""
    self.language_ = 0
    self.encoding_ = 0
    self.urlafterredirects_ = ""
    self.redirectisperm_ = 0
    self.ipaddrbeforeredirects_ = 0
    self.fetchtype_ = 0
    self.convertedcontenttype_ = 0
    self.convertedcontent_ = ""
    self.uncompressedcontentlength_ = 0
    self.extractedlinks_ = ""
    self.has_timestamp_ = 0
    self.has_epoch_ = 0
    self.has_initialpagerank_ = 0
    self.has_parentdocid_ = 0
    self.has_parentanchortext_ = 0
    self.has_language_ = 0
    self.has_encoding_ = 0
    self.has_urlafterredirects_ = 0
    self.has_redirectisperm_ = 0
    self.has_ipaddrbeforeredirects_ = 0
    self.has_fetchtype_ = 0
    self.has_convertedcontenttype_ = 0
    self.has_convertedcontent_ = 0
    self.has_uncompressedcontentlength_ = 0
    self.has_extractedlinks_ = 0
    if contents is not None: self.MergeFromString(contents)

  def timestamp(self): return self.timestamp_

  def set_timestamp(self, x):
    self.has_timestamp_ = 1
    self.timestamp_ = x

  def clear_timestamp(self):
    self.has_timestamp_ = 0
    self.timestamp_ = 0

  def has_timestamp(self): return self.has_timestamp_

  def epoch(self): return self.epoch_

  def set_epoch(self, x):
    self.has_epoch_ = 1
    self.epoch_ = x

  def clear_epoch(self):
    self.has_epoch_ = 0
    self.epoch_ = 0

  def has_epoch(self): return self.has_epoch_

  def initialpagerank(self): return self.initialpagerank_

  def set_initialpagerank(self, x):
    self.has_initialpagerank_ = 1
    self.initialpagerank_ = x

  def clear_initialpagerank(self):
    self.has_initialpagerank_ = 0
    self.initialpagerank_ = 0

  def has_initialpagerank(self): return self.has_initialpagerank_

  def parentdocid(self): return self.parentdocid_

  def set_parentdocid(self, x):
    self.has_parentdocid_ = 1
    self.parentdocid_ = x

  def clear_parentdocid(self):
    self.has_parentdocid_ = 0
    self.parentdocid_ = 0

  def has_parentdocid(self): return self.has_parentdocid_

  def parentanchortext(self): return self.parentanchortext_

  def set_parentanchortext(self, x):
    self.has_parentanchortext_ = 1
    self.parentanchortext_ = x

  def clear_parentanchortext(self):
    self.has_parentanchortext_ = 0
    self.parentanchortext_ = ""

  def has_parentanchortext(self): return self.has_parentanchortext_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = 0

  def has_language(self): return self.has_language_

  def encoding(self): return self.encoding_

  def set_encoding(self, x):
    self.has_encoding_ = 1
    self.encoding_ = x

  def clear_encoding(self):
    self.has_encoding_ = 0
    self.encoding_ = 0

  def has_encoding(self): return self.has_encoding_

  def urlafterredirects(self): return self.urlafterredirects_

  def set_urlafterredirects(self, x):
    self.has_urlafterredirects_ = 1
    self.urlafterredirects_ = x

  def clear_urlafterredirects(self):
    self.has_urlafterredirects_ = 0
    self.urlafterredirects_ = ""

  def has_urlafterredirects(self): return self.has_urlafterredirects_

  def redirectisperm(self): return self.redirectisperm_

  def set_redirectisperm(self, x):
    self.has_redirectisperm_ = 1
    self.redirectisperm_ = x

  def clear_redirectisperm(self):
    self.has_redirectisperm_ = 0
    self.redirectisperm_ = 0

  def has_redirectisperm(self): return self.has_redirectisperm_

  def ipaddrbeforeredirects(self): return self.ipaddrbeforeredirects_

  def set_ipaddrbeforeredirects(self, x):
    self.has_ipaddrbeforeredirects_ = 1
    self.ipaddrbeforeredirects_ = x

  def clear_ipaddrbeforeredirects(self):
    self.has_ipaddrbeforeredirects_ = 0
    self.ipaddrbeforeredirects_ = 0

  def has_ipaddrbeforeredirects(self): return self.has_ipaddrbeforeredirects_

  def fetchtype(self): return self.fetchtype_

  def set_fetchtype(self, x):
    self.has_fetchtype_ = 1
    self.fetchtype_ = x

  def clear_fetchtype(self):
    self.has_fetchtype_ = 0
    self.fetchtype_ = 0

  def has_fetchtype(self): return self.has_fetchtype_

  def convertedcontenttype(self): return self.convertedcontenttype_

  def set_convertedcontenttype(self, x):
    self.has_convertedcontenttype_ = 1
    self.convertedcontenttype_ = x

  def clear_convertedcontenttype(self):
    self.has_convertedcontenttype_ = 0
    self.convertedcontenttype_ = 0

  def has_convertedcontenttype(self): return self.has_convertedcontenttype_

  def convertedcontent(self): return self.convertedcontent_

  def set_convertedcontent(self, x):
    self.has_convertedcontent_ = 1
    self.convertedcontent_ = x

  def clear_convertedcontent(self):
    self.has_convertedcontent_ = 0
    self.convertedcontent_ = ""

  def has_convertedcontent(self): return self.has_convertedcontent_

  def uncompressedcontentlength(self): return self.uncompressedcontentlength_

  def set_uncompressedcontentlength(self, x):
    self.has_uncompressedcontentlength_ = 1
    self.uncompressedcontentlength_ = x

  def clear_uncompressedcontentlength(self):
    self.has_uncompressedcontentlength_ = 0
    self.uncompressedcontentlength_ = 0

  def has_uncompressedcontentlength(self): return self.has_uncompressedcontentlength_

  def extractedlinks(self): return self.extractedlinks_

  def set_extractedlinks(self, x):
    self.has_extractedlinks_ = 1
    self.extractedlinks_ = x

  def clear_extractedlinks(self):
    self.has_extractedlinks_ = 0
    self.extractedlinks_ = ""

  def has_extractedlinks(self): return self.has_extractedlinks_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_timestamp()): self.set_timestamp(x.timestamp())
    if (x.has_epoch()): self.set_epoch(x.epoch())
    if (x.has_initialpagerank()): self.set_initialpagerank(x.initialpagerank())
    if (x.has_parentdocid()): self.set_parentdocid(x.parentdocid())
    if (x.has_parentanchortext()): self.set_parentanchortext(x.parentanchortext())
    if (x.has_language()): self.set_language(x.language())
    if (x.has_encoding()): self.set_encoding(x.encoding())
    if (x.has_urlafterredirects()): self.set_urlafterredirects(x.urlafterredirects())
    if (x.has_redirectisperm()): self.set_redirectisperm(x.redirectisperm())
    if (x.has_ipaddrbeforeredirects()): self.set_ipaddrbeforeredirects(x.ipaddrbeforeredirects())
    if (x.has_fetchtype()): self.set_fetchtype(x.fetchtype())
    if (x.has_convertedcontenttype()): self.set_convertedcontenttype(x.convertedcontenttype())
    if (x.has_convertedcontent()): self.set_convertedcontent(x.convertedcontent())
    if (x.has_uncompressedcontentlength()): self.set_uncompressedcontentlength(x.uncompressedcontentlength())
    if (x.has_extractedlinks()): self.set_extractedlinks(x.extractedlinks())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeederCommand', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeederCommand')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeederCommand', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeederCommand', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeederCommand', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_timestamp_ != x.has_timestamp_: return 0
    if self.has_timestamp_ and self.timestamp_ != x.timestamp_: return 0
    if self.has_epoch_ != x.has_epoch_: return 0
    if self.has_epoch_ and self.epoch_ != x.epoch_: return 0
    if self.has_initialpagerank_ != x.has_initialpagerank_: return 0
    if self.has_initialpagerank_ and self.initialpagerank_ != x.initialpagerank_: return 0
    if self.has_parentdocid_ != x.has_parentdocid_: return 0
    if self.has_parentdocid_ and self.parentdocid_ != x.parentdocid_: return 0
    if self.has_parentanchortext_ != x.has_parentanchortext_: return 0
    if self.has_parentanchortext_ and self.parentanchortext_ != x.parentanchortext_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_encoding_ != x.has_encoding_: return 0
    if self.has_encoding_ and self.encoding_ != x.encoding_: return 0
    if self.has_urlafterredirects_ != x.has_urlafterredirects_: return 0
    if self.has_urlafterredirects_ and self.urlafterredirects_ != x.urlafterredirects_: return 0
    if self.has_redirectisperm_ != x.has_redirectisperm_: return 0
    if self.has_redirectisperm_ and self.redirectisperm_ != x.redirectisperm_: return 0
    if self.has_ipaddrbeforeredirects_ != x.has_ipaddrbeforeredirects_: return 0
    if self.has_ipaddrbeforeredirects_ and self.ipaddrbeforeredirects_ != x.ipaddrbeforeredirects_: return 0
    if self.has_fetchtype_ != x.has_fetchtype_: return 0
    if self.has_fetchtype_ and self.fetchtype_ != x.fetchtype_: return 0
    if self.has_convertedcontenttype_ != x.has_convertedcontenttype_: return 0
    if self.has_convertedcontenttype_ and self.convertedcontenttype_ != x.convertedcontenttype_: return 0
    if self.has_convertedcontent_ != x.has_convertedcontent_: return 0
    if self.has_convertedcontent_ and self.convertedcontent_ != x.convertedcontent_: return 0
    if self.has_uncompressedcontentlength_ != x.has_uncompressedcontentlength_: return 0
    if self.has_uncompressedcontentlength_ and self.uncompressedcontentlength_ != x.uncompressedcontentlength_: return 0
    if self.has_extractedlinks_ != x.has_extractedlinks_: return 0
    if self.has_extractedlinks_ and self.extractedlinks_ != x.extractedlinks_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_timestamp_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: timestamp not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.timestamp_)
    if (self.has_epoch_): n += 2 + self.lengthVarInt64(self.epoch_)
    if (self.has_initialpagerank_): n += 2 + self.lengthVarInt64(self.initialpagerank_)
    if (self.has_parentdocid_): n += 2 + self.lengthVarInt64(self.parentdocid_)
    if (self.has_parentanchortext_): n += 2 + self.lengthString(len(self.parentanchortext_))
    if (self.has_language_): n += 2 + self.lengthVarInt64(self.language_)
    if (self.has_encoding_): n += 2 + self.lengthVarInt64(self.encoding_)
    if (self.has_urlafterredirects_): n += 2 + self.lengthString(len(self.urlafterredirects_))
    if (self.has_redirectisperm_): n += 3
    if (self.has_ipaddrbeforeredirects_): n += 2 + self.lengthVarInt64(self.ipaddrbeforeredirects_)
    if (self.has_fetchtype_): n += 2 + self.lengthVarInt64(self.fetchtype_)
    if (self.has_convertedcontenttype_): n += 2 + self.lengthVarInt64(self.convertedcontenttype_)
    if (self.has_convertedcontent_): n += 2 + self.lengthString(len(self.convertedcontent_))
    if (self.has_uncompressedcontentlength_): n += 2 + self.lengthVarInt64(self.uncompressedcontentlength_)
    if (self.has_extractedlinks_): n += 2 + self.lengthString(len(self.extractedlinks_))
    return n + 2

  def Clear(self):
    self.clear_timestamp()
    self.clear_epoch()
    self.clear_initialpagerank()
    self.clear_parentdocid()
    self.clear_parentanchortext()
    self.clear_language()
    self.clear_encoding()
    self.clear_urlafterredirects()
    self.clear_redirectisperm()
    self.clear_ipaddrbeforeredirects()
    self.clear_fetchtype()
    self.clear_convertedcontenttype()
    self.clear_convertedcontent()
    self.clear_uncompressedcontentlength()
    self.clear_extractedlinks()

  def OutputUnchecked(self, out):
    out.putVarInt32(408)
    out.putVarInt64(self.timestamp_)
    if (self.has_epoch_):
      out.putVarInt32(416)
      out.putVarInt64(self.epoch_)
    if (self.has_initialpagerank_):
      out.putVarInt32(440)
      out.putVarInt32(self.initialpagerank_)
    if (self.has_parentdocid_):
      out.putVarInt32(448)
      out.putVarUint64(self.parentdocid_)
    if (self.has_parentanchortext_):
      out.putVarInt32(458)
      out.putPrefixedString(self.parentanchortext_)
    if (self.has_language_):
      out.putVarInt32(480)
      out.putVarInt32(self.language_)
    if (self.has_encoding_):
      out.putVarInt32(488)
      out.putVarInt32(self.encoding_)
    if (self.has_urlafterredirects_):
      out.putVarInt32(498)
      out.putPrefixedString(self.urlafterredirects_)
    if (self.has_redirectisperm_):
      out.putVarInt32(504)
      out.putBoolean(self.redirectisperm_)
    if (self.has_ipaddrbeforeredirects_):
      out.putVarInt32(512)
      out.putVarInt32(self.ipaddrbeforeredirects_)
    if (self.has_fetchtype_):
      out.putVarInt32(520)
      out.putVarInt32(self.fetchtype_)
    if (self.has_convertedcontenttype_):
      out.putVarInt32(560)
      out.putVarInt32(self.convertedcontenttype_)
    if (self.has_convertedcontent_):
      out.putVarInt32(570)
      out.putPrefixedString(self.convertedcontent_)
    if (self.has_uncompressedcontentlength_):
      out.putVarInt32(576)
      out.putVarInt64(self.uncompressedcontentlength_)
    if (self.has_extractedlinks_):
      out.putVarInt32(642)
      out.putPrefixedString(self.extractedlinks_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 404: break
      if tt == 408:
        self.set_timestamp(d.getVarInt64())
        continue
      if tt == 416:
        self.set_epoch(d.getVarInt64())
        continue
      if tt == 440:
        self.set_initialpagerank(d.getVarInt32())
        continue
      if tt == 448:
        self.set_parentdocid(d.getVarUint64())
        continue
      if tt == 458:
        self.set_parentanchortext(d.getPrefixedString())
        continue
      if tt == 480:
        self.set_language(d.getVarInt32())
        continue
      if tt == 488:
        self.set_encoding(d.getVarInt32())
        continue
      if tt == 498:
        self.set_urlafterredirects(d.getPrefixedString())
        continue
      if tt == 504:
        self.set_redirectisperm(d.getBoolean())
        continue
      if tt == 512:
        self.set_ipaddrbeforeredirects(d.getVarInt32())
        continue
      if tt == 520:
        self.set_fetchtype(d.getVarInt32())
        continue
      if tt == 560:
        self.set_convertedcontenttype(d.getVarInt32())
        continue
      if tt == 570:
        self.set_convertedcontent(d.getPrefixedString())
        continue
      if tt == 576:
        self.set_uncompressedcontentlength(d.getVarInt64())
        continue
      if tt == 642:
        self.set_extractedlinks(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_timestamp_: res+=prefix+("Timestamp: %s\n" % self.DebugFormatInt64(self.timestamp_))
    if self.has_epoch_: res+=prefix+("Epoch: %s\n" % self.DebugFormatInt64(self.epoch_))
    if self.has_initialpagerank_: res+=prefix+("InitialPagerank: %s\n" % self.DebugFormatInt32(self.initialpagerank_))
    if self.has_parentdocid_: res+=prefix+("ParentDocId: %s\n" % self.DebugFormatInt64(self.parentdocid_))
    if self.has_parentanchortext_: res+=prefix+("ParentAnchorText: %s\n" % self.DebugFormatString(self.parentanchortext_))
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatInt32(self.language_))
    if self.has_encoding_: res+=prefix+("Encoding: %s\n" % self.DebugFormatInt32(self.encoding_))
    if self.has_urlafterredirects_: res+=prefix+("URLAfterRedirects: %s\n" % self.DebugFormatString(self.urlafterredirects_))
    if self.has_redirectisperm_: res+=prefix+("RedirectIsPerm: %s\n" % self.DebugFormatBool(self.redirectisperm_))
    if self.has_ipaddrbeforeredirects_: res+=prefix+("IPAddrBeforeRedirects: %s\n" % self.DebugFormatInt32(self.ipaddrbeforeredirects_))
    if self.has_fetchtype_: res+=prefix+("FetchType: %s\n" % self.DebugFormatInt32(self.fetchtype_))
    if self.has_convertedcontenttype_: res+=prefix+("ConvertedContentType: %s\n" % self.DebugFormatInt32(self.convertedcontenttype_))
    if self.has_convertedcontent_: res+=prefix+("ConvertedContent: %s\n" % self.DebugFormatString(self.convertedcontent_))
    if self.has_uncompressedcontentlength_: res+=prefix+("UncompressedContentLength: %s\n" % self.DebugFormatInt64(self.uncompressedcontentlength_))
    if self.has_extractedlinks_: res+=prefix+("ExtractedLinks: %s\n" % self.DebugFormatString(self.extractedlinks_))
    return res

class FeederCommand_Froogle(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.merchantid_ = ""
    self.filename_ = ""
    self.feedtime_ = 0
    self.has_merchantid_ = 0
    self.has_filename_ = 0
    self.has_feedtime_ = 0
    if contents is not None: self.MergeFromString(contents)

  def merchantid(self): return self.merchantid_

  def set_merchantid(self, x):
    self.has_merchantid_ = 1
    self.merchantid_ = x

  def clear_merchantid(self):
    self.has_merchantid_ = 0
    self.merchantid_ = ""

  def has_merchantid(self): return self.has_merchantid_

  def filename(self): return self.filename_

  def set_filename(self, x):
    self.has_filename_ = 1
    self.filename_ = x

  def clear_filename(self):
    self.has_filename_ = 0
    self.filename_ = ""

  def has_filename(self): return self.has_filename_

  def feedtime(self): return self.feedtime_

  def set_feedtime(self, x):
    self.has_feedtime_ = 1
    self.feedtime_ = x

  def clear_feedtime(self):
    self.has_feedtime_ = 0
    self.feedtime_ = 0

  def has_feedtime(self): return self.has_feedtime_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_merchantid()): self.set_merchantid(x.merchantid())
    if (x.has_filename()): self.set_filename(x.filename())
    if (x.has_feedtime()): self.set_feedtime(x.feedtime())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeederCommand', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeederCommand')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeederCommand', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeederCommand', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeederCommand', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_merchantid_ != x.has_merchantid_: return 0
    if self.has_merchantid_ and self.merchantid_ != x.merchantid_: return 0
    if self.has_filename_ != x.has_filename_: return 0
    if self.has_filename_ and self.filename_ != x.filename_: return 0
    if self.has_feedtime_ != x.has_feedtime_: return 0
    if self.has_feedtime_ and self.feedtime_ != x.feedtime_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_merchantid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: merchantid not set.')
    if (not self.has_filename_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: filename not set.')
    if (not self.has_feedtime_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feedtime not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.merchantid_))
    n += self.lengthString(len(self.filename_))
    n += self.lengthVarInt64(self.feedtime_)
    return n + 6

  def Clear(self):
    self.clear_merchantid()
    self.clear_filename()
    self.clear_feedtime()

  def OutputUnchecked(self, out):
    out.putVarInt32(810)
    out.putPrefixedString(self.merchantid_)
    out.putVarInt32(818)
    out.putPrefixedString(self.filename_)
    out.putVarInt32(824)
    out.putVarInt64(self.feedtime_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 804: break
      if tt == 810:
        self.set_merchantid(d.getPrefixedString())
        continue
      if tt == 818:
        self.set_filename(d.getPrefixedString())
        continue
      if tt == 824:
        self.set_feedtime(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_merchantid_: res+=prefix+("MerchantId: %s\n" % self.DebugFormatString(self.merchantid_))
    if self.has_filename_: res+=prefix+("FileName: %s\n" % self.DebugFormatString(self.filename_))
    if self.has_feedtime_: res+=prefix+("FeedTime: %s\n" % self.DebugFormatInt64(self.feedtime_))
    return res

class FeederCommand_Enterprise(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.datasource_ = ""
    self.feedfilepath_ = ""
    self.feedtime_ = 0
    self.feedtype_ = 0
    self.feedlength_ = 0
    self.feedchecksum_ = 0
    self.externalmetadata_ = ""
    self.displayurl_ = ""
    self.pagerank_ = 0
    self.has_datasource_ = 0
    self.has_feedfilepath_ = 0
    self.has_feedtime_ = 0
    self.has_feedtype_ = 0
    self.has_feedlength_ = 0
    self.has_feedchecksum_ = 0
    self.has_externalmetadata_ = 0
    self.has_displayurl_ = 0
    self.has_pagerank_ = 0
    if contents is not None: self.MergeFromString(contents)

  def datasource(self): return self.datasource_

  def set_datasource(self, x):
    self.has_datasource_ = 1
    self.datasource_ = x

  def clear_datasource(self):
    self.has_datasource_ = 0
    self.datasource_ = ""

  def has_datasource(self): return self.has_datasource_

  def feedfilepath(self): return self.feedfilepath_

  def set_feedfilepath(self, x):
    self.has_feedfilepath_ = 1
    self.feedfilepath_ = x

  def clear_feedfilepath(self):
    self.has_feedfilepath_ = 0
    self.feedfilepath_ = ""

  def has_feedfilepath(self): return self.has_feedfilepath_

  def feedtime(self): return self.feedtime_

  def set_feedtime(self, x):
    self.has_feedtime_ = 1
    self.feedtime_ = x

  def clear_feedtime(self):
    self.has_feedtime_ = 0
    self.feedtime_ = 0

  def has_feedtime(self): return self.has_feedtime_

  def feedtype(self): return self.feedtype_

  def set_feedtype(self, x):
    self.has_feedtype_ = 1
    self.feedtype_ = x

  def clear_feedtype(self):
    self.has_feedtype_ = 0
    self.feedtype_ = 0

  def has_feedtype(self): return self.has_feedtype_

  def feedlength(self): return self.feedlength_

  def set_feedlength(self, x):
    self.has_feedlength_ = 1
    self.feedlength_ = x

  def clear_feedlength(self):
    self.has_feedlength_ = 0
    self.feedlength_ = 0

  def has_feedlength(self): return self.has_feedlength_

  def feedchecksum(self): return self.feedchecksum_

  def set_feedchecksum(self, x):
    self.has_feedchecksum_ = 1
    self.feedchecksum_ = x

  def clear_feedchecksum(self):
    self.has_feedchecksum_ = 0
    self.feedchecksum_ = 0

  def has_feedchecksum(self): return self.has_feedchecksum_

  def externalmetadata(self): return self.externalmetadata_

  def set_externalmetadata(self, x):
    self.has_externalmetadata_ = 1
    self.externalmetadata_ = x

  def clear_externalmetadata(self):
    self.has_externalmetadata_ = 0
    self.externalmetadata_ = ""

  def has_externalmetadata(self): return self.has_externalmetadata_

  def displayurl(self): return self.displayurl_

  def set_displayurl(self, x):
    self.has_displayurl_ = 1
    self.displayurl_ = x

  def clear_displayurl(self):
    self.has_displayurl_ = 0
    self.displayurl_ = ""

  def has_displayurl(self): return self.has_displayurl_

  def pagerank(self): return self.pagerank_

  def set_pagerank(self, x):
    self.has_pagerank_ = 1
    self.pagerank_ = x

  def clear_pagerank(self):
    self.has_pagerank_ = 0
    self.pagerank_ = 0

  def has_pagerank(self): return self.has_pagerank_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_datasource()): self.set_datasource(x.datasource())
    if (x.has_feedfilepath()): self.set_feedfilepath(x.feedfilepath())
    if (x.has_feedtime()): self.set_feedtime(x.feedtime())
    if (x.has_feedtype()): self.set_feedtype(x.feedtype())
    if (x.has_feedlength()): self.set_feedlength(x.feedlength())
    if (x.has_feedchecksum()): self.set_feedchecksum(x.feedchecksum())
    if (x.has_externalmetadata()): self.set_externalmetadata(x.externalmetadata())
    if (x.has_displayurl()): self.set_displayurl(x.displayurl())
    if (x.has_pagerank()): self.set_pagerank(x.pagerank())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeederCommand', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeederCommand')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeederCommand', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeederCommand', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeederCommand', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_datasource_ != x.has_datasource_: return 0
    if self.has_datasource_ and self.datasource_ != x.datasource_: return 0
    if self.has_feedfilepath_ != x.has_feedfilepath_: return 0
    if self.has_feedfilepath_ and self.feedfilepath_ != x.feedfilepath_: return 0
    if self.has_feedtime_ != x.has_feedtime_: return 0
    if self.has_feedtime_ and self.feedtime_ != x.feedtime_: return 0
    if self.has_feedtype_ != x.has_feedtype_: return 0
    if self.has_feedtype_ and self.feedtype_ != x.feedtype_: return 0
    if self.has_feedlength_ != x.has_feedlength_: return 0
    if self.has_feedlength_ and self.feedlength_ != x.feedlength_: return 0
    if self.has_feedchecksum_ != x.has_feedchecksum_: return 0
    if self.has_feedchecksum_ and self.feedchecksum_ != x.feedchecksum_: return 0
    if self.has_externalmetadata_ != x.has_externalmetadata_: return 0
    if self.has_externalmetadata_ and self.externalmetadata_ != x.externalmetadata_: return 0
    if self.has_displayurl_ != x.has_displayurl_: return 0
    if self.has_displayurl_ and self.displayurl_ != x.displayurl_: return 0
    if self.has_pagerank_ != x.has_pagerank_: return 0
    if self.has_pagerank_ and self.pagerank_ != x.pagerank_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_datasource_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: datasource not set.')
    if (not self.has_feedtime_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feedtime not set.')
    if (not self.has_feedtype_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feedtype not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.datasource_))
    if (self.has_feedfilepath_): n += 2 + self.lengthString(len(self.feedfilepath_))
    n += self.lengthVarInt64(self.feedtime_)
    n += self.lengthVarInt64(self.feedtype_)
    if (self.has_feedlength_): n += 2 + self.lengthVarInt64(self.feedlength_)
    if (self.has_feedchecksum_): n += 2 + self.lengthVarInt64(self.feedchecksum_)
    if (self.has_externalmetadata_): n += 2 + self.lengthString(len(self.externalmetadata_))
    if (self.has_displayurl_): n += 2 + self.lengthString(len(self.displayurl_))
    if (self.has_pagerank_): n += 2 + self.lengthVarInt64(self.pagerank_)
    return n + 6

  def Clear(self):
    self.clear_datasource()
    self.clear_feedfilepath()
    self.clear_feedtime()
    self.clear_feedtype()
    self.clear_feedlength()
    self.clear_feedchecksum()
    self.clear_externalmetadata()
    self.clear_displayurl()
    self.clear_pagerank()

  def OutputUnchecked(self, out):
    out.putVarInt32(970)
    out.putPrefixedString(self.datasource_)
    if (self.has_feedfilepath_):
      out.putVarInt32(978)
      out.putPrefixedString(self.feedfilepath_)
    out.putVarInt32(984)
    out.putVarInt64(self.feedtime_)
    out.putVarInt32(992)
    out.putVarInt32(self.feedtype_)
    if (self.has_feedlength_):
      out.putVarInt32(1000)
      out.putVarInt64(self.feedlength_)
    if (self.has_feedchecksum_):
      out.putVarInt32(1008)
      out.putVarInt64(self.feedchecksum_)
    if (self.has_externalmetadata_):
      out.putVarInt32(1018)
      out.putPrefixedString(self.externalmetadata_)
    if (self.has_displayurl_):
      out.putVarInt32(1026)
      out.putPrefixedString(self.displayurl_)
    if (self.has_pagerank_):
      out.putVarInt32(1032)
      out.putVarInt32(self.pagerank_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 964: break
      if tt == 970:
        self.set_datasource(d.getPrefixedString())
        continue
      if tt == 978:
        self.set_feedfilepath(d.getPrefixedString())
        continue
      if tt == 984:
        self.set_feedtime(d.getVarInt64())
        continue
      if tt == 992:
        self.set_feedtype(d.getVarInt32())
        continue
      if tt == 1000:
        self.set_feedlength(d.getVarInt64())
        continue
      if tt == 1008:
        self.set_feedchecksum(d.getVarInt64())
        continue
      if tt == 1018:
        self.set_externalmetadata(d.getPrefixedString())
        continue
      if tt == 1026:
        self.set_displayurl(d.getPrefixedString())
        continue
      if tt == 1032:
        self.set_pagerank(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_datasource_: res+=prefix+("Datasource: %s\n" % self.DebugFormatString(self.datasource_))
    if self.has_feedfilepath_: res+=prefix+("FeedFilePath: %s\n" % self.DebugFormatString(self.feedfilepath_))
    if self.has_feedtime_: res+=prefix+("FeedTime: %s\n" % self.DebugFormatInt64(self.feedtime_))
    if self.has_feedtype_: res+=prefix+("FeedType: %s\n" % self.DebugFormatInt32(self.feedtype_))
    if self.has_feedlength_: res+=prefix+("FeedLength: %s\n" % self.DebugFormatInt64(self.feedlength_))
    if self.has_feedchecksum_: res+=prefix+("FeedChecksum: %s\n" % self.DebugFormatInt64(self.feedchecksum_))
    if self.has_externalmetadata_: res+=prefix+("ExternalMetadata: %s\n" % self.DebugFormatString(self.externalmetadata_))
    if self.has_displayurl_: res+=prefix+("DisplayUrl: %s\n" % self.DebugFormatString(self.displayurl_))
    if self.has_pagerank_: res+=prefix+("Pagerank: %s\n" % self.DebugFormatInt32(self.pagerank_))
    return res

class FeederCommand(ProtocolBuffer.ProtocolMessage):

  ADD_OP       =    0 
  DELETE_OP    =    1 

  _OperationEnum_NAMES = {
    0: "ADD_OP",
    1: "DELETE_OP",
  }

  def OperationEnum_Name(cls, x): return cls._OperationEnum_NAMES.get(x, "")
  OperationEnum_Name = classmethod(OperationEnum_Name)


  FULL_FEED    =    0 
  INCREMENTAL_FEED =    1 
  DELETE_DATASOURCE =    2 
  METADATA_AND_URL =    3 

  _FeedTypeEnum_NAMES = {
    0: "FULL_FEED",
    1: "INCREMENTAL_FEED",
    2: "DELETE_DATASOURCE",
    3: "METADATA_AND_URL",
  }

  def FeedTypeEnum_Name(cls, x): return cls._FeedTypeEnum_NAMES.get(x, "")
  FeedTypeEnum_Name = classmethod(FeedTypeEnum_Name)

  def __init__(self, contents=None):
    self.content_ = ""
    self.mimetype_ = ""
    self.url_ = ""
    self.priority_ = 0
    self.source_ = ""
    self.uncompressedcontentlength_ = 0
    self.datasource_ = ""
    self.operation_ = 0
    self.lastmodified_ = ""
    self.feedtime_ = 0
    self.authmethod_ = 0
    self.lock_ = 0
    self.isbrowsable_ = 1
    self.indexdata_ = []
    self.archivedata_ = None
    self.froogle_ = None
    self.enterprise_ = None
    self.has_content_ = 0
    self.has_mimetype_ = 0
    self.has_url_ = 0
    self.has_priority_ = 0
    self.has_source_ = 0
    self.has_uncompressedcontentlength_ = 0
    self.has_datasource_ = 0
    self.has_operation_ = 0
    self.has_lastmodified_ = 0
    self.has_feedtime_ = 0
    self.has_authmethod_ = 0
    self.has_lock_ = 0
    self.has_isbrowsable_ = 0
    self.has_archivedata_ = 0
    self.has_froogle_ = 0
    self.has_enterprise_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def content(self): return self.content_

  def set_content(self, x):
    self.has_content_ = 1
    self.content_ = x

  def clear_content(self):
    self.has_content_ = 0
    self.content_ = ""

  def has_content(self): return self.has_content_

  def mimetype(self): return self.mimetype_

  def set_mimetype(self, x):
    self.has_mimetype_ = 1
    self.mimetype_ = x

  def clear_mimetype(self):
    self.has_mimetype_ = 0
    self.mimetype_ = ""

  def has_mimetype(self): return self.has_mimetype_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def priority(self): return self.priority_

  def set_priority(self, x):
    self.has_priority_ = 1
    self.priority_ = x

  def clear_priority(self):
    self.has_priority_ = 0
    self.priority_ = 0

  def has_priority(self): return self.has_priority_

  def source(self): return self.source_

  def set_source(self, x):
    self.has_source_ = 1
    self.source_ = x

  def clear_source(self):
    self.has_source_ = 0
    self.source_ = ""

  def has_source(self): return self.has_source_

  def uncompressedcontentlength(self): return self.uncompressedcontentlength_

  def set_uncompressedcontentlength(self, x):
    self.has_uncompressedcontentlength_ = 1
    self.uncompressedcontentlength_ = x

  def clear_uncompressedcontentlength(self):
    self.has_uncompressedcontentlength_ = 0
    self.uncompressedcontentlength_ = 0

  def has_uncompressedcontentlength(self): return self.has_uncompressedcontentlength_

  def datasource(self): return self.datasource_

  def set_datasource(self, x):
    self.has_datasource_ = 1
    self.datasource_ = x

  def clear_datasource(self):
    self.has_datasource_ = 0
    self.datasource_ = ""

  def has_datasource(self): return self.has_datasource_

  def operation(self): return self.operation_

  def set_operation(self, x):
    self.has_operation_ = 1
    self.operation_ = x

  def clear_operation(self):
    self.has_operation_ = 0
    self.operation_ = 0

  def has_operation(self): return self.has_operation_

  def lastmodified(self): return self.lastmodified_

  def set_lastmodified(self, x):
    self.has_lastmodified_ = 1
    self.lastmodified_ = x

  def clear_lastmodified(self):
    self.has_lastmodified_ = 0
    self.lastmodified_ = ""

  def has_lastmodified(self): return self.has_lastmodified_

  def feedtime(self): return self.feedtime_

  def set_feedtime(self, x):
    self.has_feedtime_ = 1
    self.feedtime_ = x

  def clear_feedtime(self):
    self.has_feedtime_ = 0
    self.feedtime_ = 0

  def has_feedtime(self): return self.has_feedtime_

  def authmethod(self): return self.authmethod_

  def set_authmethod(self, x):
    self.has_authmethod_ = 1
    self.authmethod_ = x

  def clear_authmethod(self):
    self.has_authmethod_ = 0
    self.authmethod_ = 0

  def has_authmethod(self): return self.has_authmethod_

  def lock(self): return self.lock_

  def set_lock(self, x):
    self.has_lock_ = 1
    self.lock_ = x

  def clear_lock(self):
    self.has_lock_ = 0
    self.lock_ = 0

  def has_lock(self): return self.has_lock_

  def isbrowsable(self): return self.isbrowsable_

  def set_isbrowsable(self, x):
    self.has_isbrowsable_ = 1
    self.isbrowsable_ = x

  def clear_isbrowsable(self):
    self.has_isbrowsable_ = 0
    self.isbrowsable_ = 1

  def has_isbrowsable(self): return self.has_isbrowsable_

  def indexdata_size(self): return len(self.indexdata_)
  def indexdata_list(self): return self.indexdata_

  def indexdata(self, i):
    return self.indexdata_[i]

  def mutable_indexdata(self, i):
    return self.indexdata_[i]

  def add_indexdata(self):
    x = FeederCommand_IndexData()
    self.indexdata_.append(x)
    return x

  def clear_indexdata(self):
    self.indexdata_ = []
  def archivedata(self):
    if self.archivedata_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.archivedata_ is None: self.archivedata_ = FeederCommand_ArchiveData()
      finally:
        self.lazy_init_lock_.release()
    return self.archivedata_

  def mutable_archivedata(self): self.has_archivedata_ = 1; return self.archivedata()

  def clear_archivedata(self):
    #Warning: this method does not acquire the lock.
    self.has_archivedata_ = 0;
    if self.archivedata_ is not None: self.archivedata_.Clear()

  def has_archivedata(self): return self.has_archivedata_

  def froogle(self):
    if self.froogle_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.froogle_ is None: self.froogle_ = FeederCommand_Froogle()
      finally:
        self.lazy_init_lock_.release()
    return self.froogle_

  def mutable_froogle(self): self.has_froogle_ = 1; return self.froogle()

  def clear_froogle(self):
    #Warning: this method does not acquire the lock.
    self.has_froogle_ = 0;
    if self.froogle_ is not None: self.froogle_.Clear()

  def has_froogle(self): return self.has_froogle_

  def enterprise(self):
    if self.enterprise_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.enterprise_ is None: self.enterprise_ = FeederCommand_Enterprise()
      finally:
        self.lazy_init_lock_.release()
    return self.enterprise_

  def mutable_enterprise(self): self.has_enterprise_ = 1; return self.enterprise()

  def clear_enterprise(self):
    #Warning: this method does not acquire the lock.
    self.has_enterprise_ = 0;
    if self.enterprise_ is not None: self.enterprise_.Clear()

  def has_enterprise(self): return self.has_enterprise_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_content()): self.set_content(x.content())
    if (x.has_mimetype()): self.set_mimetype(x.mimetype())
    if (x.has_url()): self.set_url(x.url())
    if (x.has_priority()): self.set_priority(x.priority())
    if (x.has_source()): self.set_source(x.source())
    if (x.has_uncompressedcontentlength()): self.set_uncompressedcontentlength(x.uncompressedcontentlength())
    if (x.has_datasource()): self.set_datasource(x.datasource())
    if (x.has_operation()): self.set_operation(x.operation())
    if (x.has_lastmodified()): self.set_lastmodified(x.lastmodified())
    if (x.has_feedtime()): self.set_feedtime(x.feedtime())
    if (x.has_authmethod()): self.set_authmethod(x.authmethod())
    if (x.has_lock()): self.set_lock(x.lock())
    if (x.has_isbrowsable()): self.set_isbrowsable(x.isbrowsable())
    for i in xrange(x.indexdata_size()): self.add_indexdata().CopyFrom(x.indexdata(i))
    if (x.has_archivedata()): self.mutable_archivedata().MergeFrom(x.archivedata())
    if (x.has_froogle()): self.mutable_froogle().MergeFrom(x.froogle())
    if (x.has_enterprise()): self.mutable_enterprise().MergeFrom(x.enterprise())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeederCommand', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeederCommand')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeederCommand', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeederCommand', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeederCommand', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_content_ != x.has_content_: return 0
    if self.has_content_ and self.content_ != x.content_: return 0
    if self.has_mimetype_ != x.has_mimetype_: return 0
    if self.has_mimetype_ and self.mimetype_ != x.mimetype_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_priority_ != x.has_priority_: return 0
    if self.has_priority_ and self.priority_ != x.priority_: return 0
    if self.has_source_ != x.has_source_: return 0
    if self.has_source_ and self.source_ != x.source_: return 0
    if self.has_uncompressedcontentlength_ != x.has_uncompressedcontentlength_: return 0
    if self.has_uncompressedcontentlength_ and self.uncompressedcontentlength_ != x.uncompressedcontentlength_: return 0
    if self.has_datasource_ != x.has_datasource_: return 0
    if self.has_datasource_ and self.datasource_ != x.datasource_: return 0
    if self.has_operation_ != x.has_operation_: return 0
    if self.has_operation_ and self.operation_ != x.operation_: return 0
    if self.has_lastmodified_ != x.has_lastmodified_: return 0
    if self.has_lastmodified_ and self.lastmodified_ != x.lastmodified_: return 0
    if self.has_feedtime_ != x.has_feedtime_: return 0
    if self.has_feedtime_ and self.feedtime_ != x.feedtime_: return 0
    if self.has_authmethod_ != x.has_authmethod_: return 0
    if self.has_authmethod_ and self.authmethod_ != x.authmethod_: return 0
    if self.has_lock_ != x.has_lock_: return 0
    if self.has_lock_ and self.lock_ != x.lock_: return 0
    if self.has_isbrowsable_ != x.has_isbrowsable_: return 0
    if self.has_isbrowsable_ and self.isbrowsable_ != x.isbrowsable_: return 0
    if len(self.indexdata_) != len(x.indexdata_): return 0
    for e1, e2 in zip(self.indexdata_, x.indexdata_):
      if e1 != e2: return 0
    if self.has_archivedata_ != x.has_archivedata_: return 0
    if self.has_archivedata_ and self.archivedata_ != x.archivedata_: return 0
    if self.has_froogle_ != x.has_froogle_: return 0
    if self.has_froogle_ and self.froogle_ != x.froogle_: return 0
    if self.has_enterprise_ != x.has_enterprise_: return 0
    if self.has_enterprise_ and self.enterprise_ != x.enterprise_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.indexdata_)):
      if (not self.indexdata_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_archivedata_ and not self.archivedata_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_froogle_ and not self.froogle_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_enterprise_ and not self.enterprise_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_content_): n += 1 + self.lengthString(len(self.content_))
    if (self.has_mimetype_): n += 1 + self.lengthString(len(self.mimetype_))
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    if (self.has_priority_): n += 1 + self.lengthVarInt64(self.priority_)
    if (self.has_source_): n += 1 + self.lengthString(len(self.source_))
    if (self.has_uncompressedcontentlength_): n += 1 + self.lengthVarInt64(self.uncompressedcontentlength_)
    if (self.has_datasource_): n += 1 + self.lengthString(len(self.datasource_))
    if (self.has_operation_): n += 1 + self.lengthVarInt64(self.operation_)
    if (self.has_lastmodified_): n += 1 + self.lengthString(len(self.lastmodified_))
    if (self.has_feedtime_): n += 1 + self.lengthVarInt64(self.feedtime_)
    if (self.has_authmethod_): n += 1 + self.lengthVarInt64(self.authmethod_)
    if (self.has_lock_): n += 3
    if (self.has_isbrowsable_): n += 3
    n += 2 * len(self.indexdata_)
    for i in xrange(len(self.indexdata_)): n += self.indexdata_[i].ByteSize()
    if (self.has_archivedata_): n += 4 + self.archivedata_.ByteSize()
    if (self.has_froogle_): n += 4 + self.froogle_.ByteSize()
    if (self.has_enterprise_): n += 4 + self.enterprise_.ByteSize()
    return n + 0

  def Clear(self):
    self.clear_content()
    self.clear_mimetype()
    self.clear_url()
    self.clear_priority()
    self.clear_source()
    self.clear_uncompressedcontentlength()
    self.clear_datasource()
    self.clear_operation()
    self.clear_lastmodified()
    self.clear_feedtime()
    self.clear_authmethod()
    self.clear_lock()
    self.clear_isbrowsable()
    self.clear_indexdata()
    self.clear_archivedata()
    self.clear_froogle()
    self.clear_enterprise()

  def OutputUnchecked(self, out):
    if (self.has_content_):
      out.putVarInt32(10)
      out.putPrefixedString(self.content_)
    if (self.has_mimetype_):
      out.putVarInt32(18)
      out.putPrefixedString(self.mimetype_)
    if (self.has_url_):
      out.putVarInt32(26)
      out.putPrefixedString(self.url_)
    if (self.has_priority_):
      out.putVarInt32(32)
      out.putVarInt32(self.priority_)
    if (self.has_source_):
      out.putVarInt32(42)
      out.putPrefixedString(self.source_)
    for i in xrange(len(self.indexdata_)):
      out.putVarInt32(51)
      self.indexdata_[i].OutputUnchecked(out)
      out.putVarInt32(52)
    if (self.has_uncompressedcontentlength_):
      out.putVarInt32(80)
      out.putVarInt64(self.uncompressedcontentlength_)
    if (self.has_datasource_):
      out.putVarInt32(90)
      out.putPrefixedString(self.datasource_)
    if (self.has_operation_):
      out.putVarInt32(96)
      out.putVarInt32(self.operation_)
    if (self.has_lastmodified_):
      out.putVarInt32(106)
      out.putPrefixedString(self.lastmodified_)
    if (self.has_feedtime_):
      out.putVarInt32(112)
      out.putVarInt64(self.feedtime_)
    if (self.has_authmethod_):
      out.putVarInt32(120)
      out.putVarInt32(self.authmethod_)
    if (self.has_lock_):
      out.putVarInt32(128)
      out.putBoolean(self.lock_)
    if (self.has_isbrowsable_):
      out.putVarInt32(136)
      out.putBoolean(self.isbrowsable_)
    if (self.has_archivedata_):
      out.putVarInt32(403)
      self.archivedata_.OutputUnchecked(out)
      out.putVarInt32(404)
    if (self.has_froogle_):
      out.putVarInt32(803)
      self.froogle_.OutputUnchecked(out)
      out.putVarInt32(804)
    if (self.has_enterprise_):
      out.putVarInt32(963)
      self.enterprise_.OutputUnchecked(out)
      out.putVarInt32(964)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_content(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_mimetype(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 32:
        self.set_priority(d.getVarInt32())
        continue
      if tt == 42:
        self.set_source(d.getPrefixedString())
        continue
      if tt == 51:
        self.add_indexdata().TryMerge(d)
        continue
      if tt == 80:
        self.set_uncompressedcontentlength(d.getVarInt64())
        continue
      if tt == 90:
        self.set_datasource(d.getPrefixedString())
        continue
      if tt == 96:
        self.set_operation(d.getVarInt32())
        continue
      if tt == 106:
        self.set_lastmodified(d.getPrefixedString())
        continue
      if tt == 112:
        self.set_feedtime(d.getVarInt64())
        continue
      if tt == 120:
        self.set_authmethod(d.getVarInt32())
        continue
      if tt == 128:
        self.set_lock(d.getBoolean())
        continue
      if tt == 136:
        self.set_isbrowsable(d.getBoolean())
        continue
      if tt == 403:
        self.mutable_archivedata().TryMerge(d)
        continue
      if tt == 803:
        self.mutable_froogle().TryMerge(d)
        continue
      if tt == 963:
        self.mutable_enterprise().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_content_: res+=prefix+("Content: %s\n" % self.DebugFormatString(self.content_))
    if self.has_mimetype_: res+=prefix+("MimeType: %s\n" % self.DebugFormatString(self.mimetype_))
    if self.has_url_: res+=prefix+("URL: %s\n" % self.DebugFormatString(self.url_))
    if self.has_priority_: res+=prefix+("Priority: %s\n" % self.DebugFormatInt32(self.priority_))
    if self.has_source_: res+=prefix+("Source: %s\n" % self.DebugFormatString(self.source_))
    if self.has_uncompressedcontentlength_: res+=prefix+("UncompressedContentLength: %s\n" % self.DebugFormatInt64(self.uncompressedcontentlength_))
    if self.has_datasource_: res+=prefix+("Datasource: %s\n" % self.DebugFormatString(self.datasource_))
    if self.has_operation_: res+=prefix+("Operation: %s\n" % self.DebugFormatInt32(self.operation_))
    if self.has_lastmodified_: res+=prefix+("LastModified: %s\n" % self.DebugFormatString(self.lastmodified_))
    if self.has_feedtime_: res+=prefix+("FeedTime: %s\n" % self.DebugFormatInt64(self.feedtime_))
    if self.has_authmethod_: res+=prefix+("AuthMethod: %s\n" % self.DebugFormatInt32(self.authmethod_))
    if self.has_lock_: res+=prefix+("Lock: %s\n" % self.DebugFormatBool(self.lock_))
    if self.has_isbrowsable_: res+=prefix+("IsBrowsable: %s\n" % self.DebugFormatBool(self.isbrowsable_))
    cnt=0
    for e in self.indexdata_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("IndexData%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_archivedata_:
      res+=prefix+"ArchiveData {\n"
      res+=self.archivedata_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_froogle_:
      res+=prefix+"Froogle {\n"
      res+=self.froogle_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_enterprise_:
      res+=prefix+"Enterprise {\n"
      res+=self.enterprise_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    return res

  kContent = 1
  kMimeType = 2
  kURL = 3
  kPriority = 4
  kSource = 5
  kUncompressedContentLength = 10
  kDatasource = 11
  kOperation = 12
  kLastModified = 13
  kFeedTime = 14
  kAuthMethod = 15
  kLock = 16
  kIsBrowsable = 17
  kIndexDataGroup = 6
  kIndexDataTermFP = 7
  kIndexDataPosition = 8
  kIndexDataAttribute = 9
  kArchiveDataGroup = 50
  kArchiveDataTimestamp = 51
  kArchiveDataEpoch = 52
  kArchiveDataInitialPagerank = 55
  kArchiveDataParentDocId = 56
  kArchiveDataParentAnchorText = 57
  kArchiveDataLanguage = 60
  kArchiveDataEncoding = 61
  kArchiveDataURLAfterRedirects = 62
  kArchiveDataRedirectIsPerm = 63
  kArchiveDataIPAddrBeforeRedirects = 64
  kArchiveDataFetchType = 65
  kArchiveDataConvertedContentType = 70
  kArchiveDataConvertedContent = 71
  kArchiveDataUncompressedContentLength = 72
  kArchiveDataExtractedLinks = 80
  kFroogleGroup = 100
  kFroogleMerchantId = 101
  kFroogleFileName = 102
  kFroogleFeedTime = 103
  kEnterpriseGroup = 120
  kEnterpriseDatasource = 121
  kEnterpriseFeedFilePath = 122
  kEnterpriseFeedTime = 123
  kEnterpriseFeedType = 124
  kEnterpriseFeedLength = 125
  kEnterpriseFeedChecksum = 126
  kEnterpriseExternalMetadata = 127
  kEnterpriseDisplayUrl = 128
  kEnterprisePagerank = 129

  _TEXT = (
   "ErrorCode",  #   0
   "Content",  #   1
   "MimeType",  #   2
   "URL",  #   3
   "Priority",  #   4
   "Source",  #   5
   "IndexData",  #   6
   "TermFP",  #   7
   "Position",  #   8
   "Attribute",  #   9
   "UncompressedContentLength",  #  10
   "Datasource",  #  11
   "Operation",  #  12
   "LastModified",  #  13
   "FeedTime",  #  14
   "AuthMethod",  #  15
   "Lock",  #  16
   "IsBrowsable",  #  17
   None,  #  18
   None,  #  19
   None,  #  20
   None,  #  21
   None,  #  22
   None,  #  23
   None,  #  24
   None,  #  25
   None,  #  26
   None,  #  27
   None,  #  28
   None,  #  29
   None,  #  30
   None,  #  31
   None,  #  32
   None,  #  33
   None,  #  34
   None,  #  35
   None,  #  36
   None,  #  37
   None,  #  38
   None,  #  39
   None,  #  40
   None,  #  41
   None,  #  42
   None,  #  43
   None,  #  44
   None,  #  45
   None,  #  46
   None,  #  47
   None,  #  48
   None,  #  49
   "ArchiveData",  #  50
   "Timestamp",  #  51
   "Epoch",  #  52
   None,  #  53
   None,  #  54
   "InitialPagerank",  #  55
   "ParentDocId",  #  56
   "ParentAnchorText",  #  57
   None,  #  58
   None,  #  59
   "Language",  #  60
   "Encoding",  #  61
   "URLAfterRedirects",  #  62
   "RedirectIsPerm",  #  63
   "IPAddrBeforeRedirects",  #  64
   "FetchType",  #  65
   None,  #  66
   None,  #  67
   None,  #  68
   None,  #  69
   "ConvertedContentType",  #  70
   "ConvertedContent",  #  71
   "UncompressedContentLength",  #  72
   None,  #  73
   None,  #  74
   None,  #  75
   None,  #  76
   None,  #  77
   None,  #  78
   None,  #  79
   "ExtractedLinks",  #  80
   None,  #  81
   None,  #  82
   None,  #  83
   None,  #  84
   None,  #  85
   None,  #  86
   None,  #  87
   None,  #  88
   None,  #  89
   None,  #  90
   None,  #  91
   None,  #  92
   None,  #  93
   None,  #  94
   None,  #  95
   None,  #  96
   None,  #  97
   None,  #  98
   None,  #  99
   "Froogle",  # 100
   "MerchantId",  # 101
   "FileName",  # 102
   "FeedTime",  # 103
   None,  # 104
   None,  # 105
   None,  # 106
   None,  # 107
   None,  # 108
   None,  # 109
   None,  # 110
   None,  # 111
   None,  # 112
   None,  # 113
   None,  # 114
   None,  # 115
   None,  # 116
   None,  # 117
   None,  # 118
   None,  # 119
   "Enterprise",  # 120
   "Datasource",  # 121
   "FeedFilePath",  # 122
   "FeedTime",  # 123
   "FeedType",  # 124
   "FeedLength",  # 125
   "FeedChecksum",  # 126
   "ExternalMetadata",  # 127
   "DisplayUrl",  # 128
   "Pagerank",  # 129
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STARTGROUP,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.STRING,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.STRING,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.NUMERIC,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.MAX_TYPE,  #  18

   ProtocolBuffer.Encoder.MAX_TYPE,  #  19

   ProtocolBuffer.Encoder.MAX_TYPE,  #  20

   ProtocolBuffer.Encoder.MAX_TYPE,  #  21

   ProtocolBuffer.Encoder.MAX_TYPE,  #  22

   ProtocolBuffer.Encoder.MAX_TYPE,  #  23

   ProtocolBuffer.Encoder.MAX_TYPE,  #  24

   ProtocolBuffer.Encoder.MAX_TYPE,  #  25

   ProtocolBuffer.Encoder.MAX_TYPE,  #  26

   ProtocolBuffer.Encoder.MAX_TYPE,  #  27

   ProtocolBuffer.Encoder.MAX_TYPE,  #  28

   ProtocolBuffer.Encoder.MAX_TYPE,  #  29

   ProtocolBuffer.Encoder.MAX_TYPE,  #  30

   ProtocolBuffer.Encoder.MAX_TYPE,  #  31

   ProtocolBuffer.Encoder.MAX_TYPE,  #  32

   ProtocolBuffer.Encoder.MAX_TYPE,  #  33

   ProtocolBuffer.Encoder.MAX_TYPE,  #  34

   ProtocolBuffer.Encoder.MAX_TYPE,  #  35

   ProtocolBuffer.Encoder.MAX_TYPE,  #  36

   ProtocolBuffer.Encoder.MAX_TYPE,  #  37

   ProtocolBuffer.Encoder.MAX_TYPE,  #  38

   ProtocolBuffer.Encoder.MAX_TYPE,  #  39

   ProtocolBuffer.Encoder.MAX_TYPE,  #  40

   ProtocolBuffer.Encoder.MAX_TYPE,  #  41

   ProtocolBuffer.Encoder.MAX_TYPE,  #  42

   ProtocolBuffer.Encoder.MAX_TYPE,  #  43

   ProtocolBuffer.Encoder.MAX_TYPE,  #  44

   ProtocolBuffer.Encoder.MAX_TYPE,  #  45

   ProtocolBuffer.Encoder.MAX_TYPE,  #  46

   ProtocolBuffer.Encoder.MAX_TYPE,  #  47

   ProtocolBuffer.Encoder.MAX_TYPE,  #  48

   ProtocolBuffer.Encoder.MAX_TYPE,  #  49

   ProtocolBuffer.Encoder.STARTGROUP,  #  50

   ProtocolBuffer.Encoder.NUMERIC,  #  51

   ProtocolBuffer.Encoder.NUMERIC,  #  52

   ProtocolBuffer.Encoder.MAX_TYPE,  #  53

   ProtocolBuffer.Encoder.MAX_TYPE,  #  54

   ProtocolBuffer.Encoder.NUMERIC,  #  55

   ProtocolBuffer.Encoder.NUMERIC,  #  56

   ProtocolBuffer.Encoder.STRING,  #  57

   ProtocolBuffer.Encoder.MAX_TYPE,  #  58

   ProtocolBuffer.Encoder.MAX_TYPE,  #  59

   ProtocolBuffer.Encoder.NUMERIC,  #  60

   ProtocolBuffer.Encoder.NUMERIC,  #  61

   ProtocolBuffer.Encoder.STRING,  #  62

   ProtocolBuffer.Encoder.NUMERIC,  #  63

   ProtocolBuffer.Encoder.NUMERIC,  #  64

   ProtocolBuffer.Encoder.NUMERIC,  #  65

   ProtocolBuffer.Encoder.MAX_TYPE,  #  66

   ProtocolBuffer.Encoder.MAX_TYPE,  #  67

   ProtocolBuffer.Encoder.MAX_TYPE,  #  68

   ProtocolBuffer.Encoder.MAX_TYPE,  #  69

   ProtocolBuffer.Encoder.NUMERIC,  #  70

   ProtocolBuffer.Encoder.STRING,  #  71

   ProtocolBuffer.Encoder.NUMERIC,  #  72

   ProtocolBuffer.Encoder.MAX_TYPE,  #  73

   ProtocolBuffer.Encoder.MAX_TYPE,  #  74

   ProtocolBuffer.Encoder.MAX_TYPE,  #  75

   ProtocolBuffer.Encoder.MAX_TYPE,  #  76

   ProtocolBuffer.Encoder.MAX_TYPE,  #  77

   ProtocolBuffer.Encoder.MAX_TYPE,  #  78

   ProtocolBuffer.Encoder.MAX_TYPE,  #  79

   ProtocolBuffer.Encoder.STRING,  #  80

   ProtocolBuffer.Encoder.MAX_TYPE,  #  81

   ProtocolBuffer.Encoder.MAX_TYPE,  #  82

   ProtocolBuffer.Encoder.MAX_TYPE,  #  83

   ProtocolBuffer.Encoder.MAX_TYPE,  #  84

   ProtocolBuffer.Encoder.MAX_TYPE,  #  85

   ProtocolBuffer.Encoder.MAX_TYPE,  #  86

   ProtocolBuffer.Encoder.MAX_TYPE,  #  87

   ProtocolBuffer.Encoder.MAX_TYPE,  #  88

   ProtocolBuffer.Encoder.MAX_TYPE,  #  89

   ProtocolBuffer.Encoder.MAX_TYPE,  #  90

   ProtocolBuffer.Encoder.MAX_TYPE,  #  91

   ProtocolBuffer.Encoder.MAX_TYPE,  #  92

   ProtocolBuffer.Encoder.MAX_TYPE,  #  93

   ProtocolBuffer.Encoder.MAX_TYPE,  #  94

   ProtocolBuffer.Encoder.MAX_TYPE,  #  95

   ProtocolBuffer.Encoder.MAX_TYPE,  #  96

   ProtocolBuffer.Encoder.MAX_TYPE,  #  97

   ProtocolBuffer.Encoder.MAX_TYPE,  #  98

   ProtocolBuffer.Encoder.MAX_TYPE,  #  99

   ProtocolBuffer.Encoder.STARTGROUP,  # 100

   ProtocolBuffer.Encoder.STRING,  # 101

   ProtocolBuffer.Encoder.STRING,  # 102

   ProtocolBuffer.Encoder.NUMERIC,  # 103

   ProtocolBuffer.Encoder.MAX_TYPE,  # 104

   ProtocolBuffer.Encoder.MAX_TYPE,  # 105

   ProtocolBuffer.Encoder.MAX_TYPE,  # 106

   ProtocolBuffer.Encoder.MAX_TYPE,  # 107

   ProtocolBuffer.Encoder.MAX_TYPE,  # 108

   ProtocolBuffer.Encoder.MAX_TYPE,  # 109

   ProtocolBuffer.Encoder.MAX_TYPE,  # 110

   ProtocolBuffer.Encoder.MAX_TYPE,  # 111

   ProtocolBuffer.Encoder.MAX_TYPE,  # 112

   ProtocolBuffer.Encoder.MAX_TYPE,  # 113

   ProtocolBuffer.Encoder.MAX_TYPE,  # 114

   ProtocolBuffer.Encoder.MAX_TYPE,  # 115

   ProtocolBuffer.Encoder.MAX_TYPE,  # 116

   ProtocolBuffer.Encoder.MAX_TYPE,  # 117

   ProtocolBuffer.Encoder.MAX_TYPE,  # 118

   ProtocolBuffer.Encoder.MAX_TYPE,  # 119

   ProtocolBuffer.Encoder.STARTGROUP,  # 120

   ProtocolBuffer.Encoder.STRING,  # 121

   ProtocolBuffer.Encoder.STRING,  # 122

   ProtocolBuffer.Encoder.NUMERIC,  # 123

   ProtocolBuffer.Encoder.NUMERIC,  # 124

   ProtocolBuffer.Encoder.NUMERIC,  # 125

   ProtocolBuffer.Encoder.NUMERIC,  # 126

   ProtocolBuffer.Encoder.STRING,  # 127

   ProtocolBuffer.Encoder.STRING,  # 128

   ProtocolBuffer.Encoder.NUMERIC,  # 129

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x25,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x74,
    0x61,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0d,
    0x46,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x13,
    0x1a,
    0x07,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x4d,
    0x69,
    0x6d,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x55,
    0x52,
    0x4c,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x50,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x55,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x61,
    0x74,
    0x61,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x0b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x4f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x4c,
    0x61,
    0x73,
    0x74,
    0x4d,
    0x6f,
    0x64,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x20,
    0x0d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x46,
    0x65,
    0x65,
    0x64,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x41,
    0x75,
    0x74,
    0x68,
    0x4d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x4c,
    0x6f,
    0x63,
    0x6b,
    0x20,
    0x10,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x49,
    0x73,
    0x42,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x06,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x54,
    0x65,
    0x72,
    0x6d,
    0x46,
    0x50,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x41,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x32,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x33,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x11,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x20,
    0x34,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x11,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x49,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x37,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x11,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x50,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x64,
    0x20,
    0x38,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x11,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x50,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x54,
    0x65,
    0x78,
    0x74,
    0x20,
    0x39,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x11,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x3c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x11,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x45,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x3d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x11,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1d,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x55,
    0x52,
    0x4c,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x3e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x11,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x49,
    0x73,
    0x50,
    0x65,
    0x72,
    0x6d,
    0x20,
    0x3f,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x11,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x49,
    0x50,
    0x41,
    0x64,
    0x64,
    0x72,
    0x42,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x40,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x11,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x46,
    0x65,
    0x74,
    0x63,
    0x68,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x41,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x11,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x20,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x46,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x11,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x47,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x11,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x55,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x48,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x11,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x44,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x45,
    0x78,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x64,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x20,
    0x50,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x11,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x20,
    0x64,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x2e,
    0x4d,
    0x65,
    0x72,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x74,
    0x49,
    0x64,
    0x20,
    0x65,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x21,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x2e,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x66,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x21,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x2e,
    0x46,
    0x65,
    0x65,
    0x64,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x67,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x21,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x20,
    0x78,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x44,
    0x61,
    0x74,
    0x61,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x79,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x25,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x46,
    0x65,
    0x65,
    0x64,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x50,
    0x61,
    0x74,
    0x68,
    0x20,
    0x7a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x25,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x46,
    0x65,
    0x65,
    0x64,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x7b,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x60,
    0x25,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x46,
    0x65,
    0x65,
    0x64,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x7c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x25,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x46,
    0x65,
    0x65,
    0x64,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x7d,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x25,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x46,
    0x65,
    0x65,
    0x64,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x20,
    0x7e,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x25,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x45,
    0x78,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x7f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x25,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x44,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x80,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x25,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x81,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x25,
    0x14,
    0x73,
    0x7a,
    0x0d,
    0x4f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x45,
    0x6e,
    0x75,
    0x6d,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x06,
    0x41,
    0x44,
    0x44,
    0x5f,
    0x4f,
    0x50,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x44,
    0x45,
    0x4c,
    0x45,
    0x54,
    0x45,
    0x5f,
    0x4f,
    0x50,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0c,
    0x46,
    0x65,
    0x65,
    0x64,
    0x54,
    0x79,
    0x70,
    0x65,
    0x45,
    0x6e,
    0x75,
    0x6d,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x46,
    0x55,
    0x4c,
    0x4c,
    0x5f,
    0x46,
    0x45,
    0x45,
    0x44,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x49,
    0x4e,
    0x43,
    0x52,
    0x45,
    0x4d,
    0x45,
    0x4e,
    0x54,
    0x41,
    0x4c,
    0x5f,
    0x46,
    0x45,
    0x45,
    0x44,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x44,
    0x45,
    0x4c,
    0x45,
    0x54,
    0x45,
    0x5f,
    0x44,
    0x41,
    0x54,
    0x41,
    0x53,
    0x4f,
    0x55,
    0x52,
    0x43,
    0x45,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x4d,
    0x45,
    0x54,
    0x41,
    0x44,
    0x41,
    0x54,
    0x41,
    0x5f,
    0x41,
    0x4e,
    0x44,
    0x5f,
    0x55,
    0x52,
    0x4c,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class FeederResult(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.responsecode_ = 0
    self.url_ = ""
    self.has_responsecode_ = 0
    self.has_url_ = 0
    if contents is not None: self.MergeFromString(contents)

  def responsecode(self): return self.responsecode_

  def set_responsecode(self, x):
    self.has_responsecode_ = 1
    self.responsecode_ = x

  def clear_responsecode(self):
    self.has_responsecode_ = 0
    self.responsecode_ = 0

  def has_responsecode(self): return self.has_responsecode_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_responsecode()): self.set_responsecode(x.responsecode())
    if (x.has_url()): self.set_url(x.url())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeederResult', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeederResult')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeederResult', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeederResult', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeederResult', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_responsecode_ != x.has_responsecode_: return 0
    if self.has_responsecode_ and self.responsecode_ != x.responsecode_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_responsecode_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: responsecode not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.responsecode_)
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    return n + 1

  def Clear(self):
    self.clear_responsecode()
    self.clear_url()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.responsecode_)
    if (self.has_url_):
      out.putVarInt32(18)
      out.putPrefixedString(self.url_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_responsecode(d.getVarInt32())
        continue
      if tt == 18:
        self.set_url(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_responsecode_: res+=prefix+("ResponseCode: %s\n" % self.DebugFormatInt32(self.responsecode_))
    if self.has_url_: res+=prefix+("URL: %s\n" % self.DebugFormatString(self.url_))
    return res

  kResponseCode = 1
  kURL = 2

  _TEXT = (
   "ErrorCode",  #   0
   "ResponseCode",  #   1
   "URL",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x25,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x74,
    0x61,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0c,
    0x46,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x13,
    0x1a,
    0x0c,
    0x52,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x55,
    0x52,
    0x4c,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class FeederContentfilterResponse(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.responsecode_ = 0
    self.docid_ = 0
    self.sequenceid_ = 0
    self.has_responsecode_ = 0
    self.has_docid_ = 0
    self.has_sequenceid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def responsecode(self): return self.responsecode_

  def set_responsecode(self, x):
    self.has_responsecode_ = 1
    self.responsecode_ = x

  def clear_responsecode(self):
    self.has_responsecode_ = 0
    self.responsecode_ = 0

  def has_responsecode(self): return self.has_responsecode_

  def docid(self): return self.docid_

  def set_docid(self, x):
    self.has_docid_ = 1
    self.docid_ = x

  def clear_docid(self):
    self.has_docid_ = 0
    self.docid_ = 0

  def has_docid(self): return self.has_docid_

  def sequenceid(self): return self.sequenceid_

  def set_sequenceid(self, x):
    self.has_sequenceid_ = 1
    self.sequenceid_ = x

  def clear_sequenceid(self):
    self.has_sequenceid_ = 0
    self.sequenceid_ = 0

  def has_sequenceid(self): return self.has_sequenceid_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_responsecode()): self.set_responsecode(x.responsecode())
    if (x.has_docid()): self.set_docid(x.docid())
    if (x.has_sequenceid()): self.set_sequenceid(x.sequenceid())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeederContentfilterResponse', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeederContentfilterResponse')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeederContentfilterResponse', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeederContentfilterResponse', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeederContentfilterResponse', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_responsecode_ != x.has_responsecode_: return 0
    if self.has_responsecode_ and self.responsecode_ != x.responsecode_: return 0
    if self.has_docid_ != x.has_docid_: return 0
    if self.has_docid_ and self.docid_ != x.docid_: return 0
    if self.has_sequenceid_ != x.has_sequenceid_: return 0
    if self.has_sequenceid_ and self.sequenceid_ != x.sequenceid_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_responsecode_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: responsecode not set.')
    if (not self.has_docid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: docid not set.')
    if (not self.has_sequenceid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: sequenceid not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.responsecode_)
    n += self.lengthVarInt64(self.docid_)
    n += self.lengthVarInt64(self.sequenceid_)
    return n + 3

  def Clear(self):
    self.clear_responsecode()
    self.clear_docid()
    self.clear_sequenceid()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.responsecode_)
    out.putVarInt32(16)
    out.putVarInt64(self.docid_)
    out.putVarInt32(24)
    out.putVarInt64(self.sequenceid_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_responsecode(d.getVarInt32())
        continue
      if tt == 16:
        self.set_docid(d.getVarInt64())
        continue
      if tt == 24:
        self.set_sequenceid(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_responsecode_: res+=prefix+("ResponseCode: %s\n" % self.DebugFormatInt32(self.responsecode_))
    if self.has_docid_: res+=prefix+("DocId: %s\n" % self.DebugFormatInt64(self.docid_))
    if self.has_sequenceid_: res+=prefix+("SequenceId: %s\n" % self.DebugFormatInt64(self.sequenceid_))
    return res

  kResponseCode = 1
  kDocId = 2
  kSequenceId = 3

  _TEXT = (
   "ErrorCode",  #   0
   "ResponseCode",  #   1
   "DocId",  #   2
   "SequenceId",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x25,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x74,
    0x61,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x1b,
    0x46,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x66,
    0x69,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x13,
    0x1a,
    0x0c,
    0x52,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x64,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x53,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x49,
    0x64,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class DatasourceInfoProto(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.datasourcefprint_ = 0
    self.lock_ = 0
    self.isbrowsable_ = 1
    self.url_ = ""
    self.has_datasourcefprint_ = 0
    self.has_lock_ = 0
    self.has_isbrowsable_ = 0
    self.has_url_ = 0
    if contents is not None: self.MergeFromString(contents)

  def datasourcefprint(self): return self.datasourcefprint_

  def set_datasourcefprint(self, x):
    self.has_datasourcefprint_ = 1
    self.datasourcefprint_ = x

  def clear_datasourcefprint(self):
    self.has_datasourcefprint_ = 0
    self.datasourcefprint_ = 0

  def has_datasourcefprint(self): return self.has_datasourcefprint_

  def lock(self): return self.lock_

  def set_lock(self, x):
    self.has_lock_ = 1
    self.lock_ = x

  def clear_lock(self):
    self.has_lock_ = 0
    self.lock_ = 0

  def has_lock(self): return self.has_lock_

  def isbrowsable(self): return self.isbrowsable_

  def set_isbrowsable(self, x):
    self.has_isbrowsable_ = 1
    self.isbrowsable_ = x

  def clear_isbrowsable(self):
    self.has_isbrowsable_ = 0
    self.isbrowsable_ = 1

  def has_isbrowsable(self): return self.has_isbrowsable_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_datasourcefprint()): self.set_datasourcefprint(x.datasourcefprint())
    if (x.has_lock()): self.set_lock(x.lock())
    if (x.has_isbrowsable()): self.set_isbrowsable(x.isbrowsable())
    if (x.has_url()): self.set_url(x.url())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DatasourceInfoProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DatasourceInfoProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DatasourceInfoProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DatasourceInfoProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DatasourceInfoProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_datasourcefprint_ != x.has_datasourcefprint_: return 0
    if self.has_datasourcefprint_ and self.datasourcefprint_ != x.datasourcefprint_: return 0
    if self.has_lock_ != x.has_lock_: return 0
    if self.has_lock_ and self.lock_ != x.lock_: return 0
    if self.has_isbrowsable_ != x.has_isbrowsable_: return 0
    if self.has_isbrowsable_ and self.isbrowsable_ != x.isbrowsable_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_datasourcefprint_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: datasourcefprint not set.')
    if (not self.has_url_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: url not set.')
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_lock_): n += 2
    if (self.has_isbrowsable_): n += 2
    n += self.lengthString(len(self.url_))
    return n + 10

  def Clear(self):
    self.clear_datasourcefprint()
    self.clear_lock()
    self.clear_isbrowsable()
    self.clear_url()

  def OutputUnchecked(self, out):
    out.putVarInt32(9)
    out.put64(self.datasourcefprint_)
    if (self.has_lock_):
      out.putVarInt32(16)
      out.putBoolean(self.lock_)
    if (self.has_isbrowsable_):
      out.putVarInt32(24)
      out.putBoolean(self.isbrowsable_)
    out.putVarInt32(34)
    out.putPrefixedString(self.url_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 9:
        self.set_datasourcefprint(d.get64())
        continue
      if tt == 16:
        self.set_lock(d.getBoolean())
        continue
      if tt == 24:
        self.set_isbrowsable(d.getBoolean())
        continue
      if tt == 34:
        self.set_url(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_datasourcefprint_: res+=prefix+("DatasourceFprint: %s\n" % self.DebugFormatFixed64(self.datasourcefprint_))
    if self.has_lock_: res+=prefix+("Lock: %s\n" % self.DebugFormatBool(self.lock_))
    if self.has_isbrowsable_: res+=prefix+("IsBrowsable: %s\n" % self.DebugFormatBool(self.isbrowsable_))
    if self.has_url_: res+=prefix+("URL: %s\n" % self.DebugFormatString(self.url_))
    return res

  kDatasourceFprint = 1
  kLock = 2
  kIsBrowsable = 3
  kURL = 4

  _TEXT = (
   "ErrorCode",  #   0
   "DatasourceFprint",  #   1
   "Lock",  #   2
   "IsBrowsable",  #   3
   "URL",  #   4
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.DOUBLE,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x25,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x74,
    0x61,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x13,
    0x44,
    0x61,
    0x74,
    0x61,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x50,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x13,
    0x1a,
    0x10,
    0x44,
    0x61,
    0x74,
    0x61,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x46,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x74,
    0x20,
    0x01,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x4c,
    0x6f,
    0x63,
    0x6b,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x49,
    0x73,
    0x42,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x55,
    0x52,
    0x4c,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class FeedStatusProto(ProtocolBuffer.ProtocolMessage):

  ACCEPTED     =    0 
  IN_PROGRESS  =    1 
  COMPLETED    =    2 
  COMPLETED_WITH_SOME_ERRORS =    3 
  COMPLETED_FAILED =    4 

  _FeedStateEnum_NAMES = {
    0: "ACCEPTED",
    1: "IN_PROGRESS",
    2: "COMPLETED",
    3: "COMPLETED_WITH_SOME_ERRORS",
    4: "COMPLETED_FAILED",
  }

  def FeedStateEnum_Name(cls, x): return cls._FeedStateEnum_NAMES.get(x, "")
  FeedStateEnum_Name = classmethod(FeedStateEnum_Name)


  OK           =    0 
  PARSING_ERROR =    1 
  INTERNAL_ERROR =    2 

  _CompletionStatusCodeEnum_NAMES = {
    0: "OK",
    1: "PARSING_ERROR",
    2: "INTERNAL_ERROR",
  }

  def CompletionStatusCodeEnum_Name(cls, x): return cls._CompletionStatusCodeEnum_NAMES.get(x, "")
  CompletionStatusCodeEnum_Name = classmethod(CompletionStatusCodeEnum_Name)

  def __init__(self, contents=None):
    self.datasource_ = ""
    self.feedfilepath_ = ""
    self.feedtime_ = 0
    self.feedtype_ = 0
    self.feedstate_ = 0
    self.completionstatuscode_ = 0
    self.numrecordssuccess_ = 0
    self.numrecordserror_ = 0
    self.feedstatus_filename_ = ""
    self.processlog_ = ""
    self.has_datasource_ = 0
    self.has_feedfilepath_ = 0
    self.has_feedtime_ = 0
    self.has_feedtype_ = 0
    self.has_feedstate_ = 0
    self.has_completionstatuscode_ = 0
    self.has_numrecordssuccess_ = 0
    self.has_numrecordserror_ = 0
    self.has_feedstatus_filename_ = 0
    self.has_processlog_ = 0
    if contents is not None: self.MergeFromString(contents)

  def datasource(self): return self.datasource_

  def set_datasource(self, x):
    self.has_datasource_ = 1
    self.datasource_ = x

  def clear_datasource(self):
    self.has_datasource_ = 0
    self.datasource_ = ""

  def has_datasource(self): return self.has_datasource_

  def feedfilepath(self): return self.feedfilepath_

  def set_feedfilepath(self, x):
    self.has_feedfilepath_ = 1
    self.feedfilepath_ = x

  def clear_feedfilepath(self):
    self.has_feedfilepath_ = 0
    self.feedfilepath_ = ""

  def has_feedfilepath(self): return self.has_feedfilepath_

  def feedtime(self): return self.feedtime_

  def set_feedtime(self, x):
    self.has_feedtime_ = 1
    self.feedtime_ = x

  def clear_feedtime(self):
    self.has_feedtime_ = 0
    self.feedtime_ = 0

  def has_feedtime(self): return self.has_feedtime_

  def feedtype(self): return self.feedtype_

  def set_feedtype(self, x):
    self.has_feedtype_ = 1
    self.feedtype_ = x

  def clear_feedtype(self):
    self.has_feedtype_ = 0
    self.feedtype_ = 0

  def has_feedtype(self): return self.has_feedtype_

  def feedstate(self): return self.feedstate_

  def set_feedstate(self, x):
    self.has_feedstate_ = 1
    self.feedstate_ = x

  def clear_feedstate(self):
    self.has_feedstate_ = 0
    self.feedstate_ = 0

  def has_feedstate(self): return self.has_feedstate_

  def completionstatuscode(self): return self.completionstatuscode_

  def set_completionstatuscode(self, x):
    self.has_completionstatuscode_ = 1
    self.completionstatuscode_ = x

  def clear_completionstatuscode(self):
    self.has_completionstatuscode_ = 0
    self.completionstatuscode_ = 0

  def has_completionstatuscode(self): return self.has_completionstatuscode_

  def numrecordssuccess(self): return self.numrecordssuccess_

  def set_numrecordssuccess(self, x):
    self.has_numrecordssuccess_ = 1
    self.numrecordssuccess_ = x

  def clear_numrecordssuccess(self):
    self.has_numrecordssuccess_ = 0
    self.numrecordssuccess_ = 0

  def has_numrecordssuccess(self): return self.has_numrecordssuccess_

  def numrecordserror(self): return self.numrecordserror_

  def set_numrecordserror(self, x):
    self.has_numrecordserror_ = 1
    self.numrecordserror_ = x

  def clear_numrecordserror(self):
    self.has_numrecordserror_ = 0
    self.numrecordserror_ = 0

  def has_numrecordserror(self): return self.has_numrecordserror_

  def feedstatus_filename(self): return self.feedstatus_filename_

  def set_feedstatus_filename(self, x):
    self.has_feedstatus_filename_ = 1
    self.feedstatus_filename_ = x

  def clear_feedstatus_filename(self):
    self.has_feedstatus_filename_ = 0
    self.feedstatus_filename_ = ""

  def has_feedstatus_filename(self): return self.has_feedstatus_filename_

  def processlog(self): return self.processlog_

  def set_processlog(self, x):
    self.has_processlog_ = 1
    self.processlog_ = x

  def clear_processlog(self):
    self.has_processlog_ = 0
    self.processlog_ = ""

  def has_processlog(self): return self.has_processlog_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_datasource()): self.set_datasource(x.datasource())
    if (x.has_feedfilepath()): self.set_feedfilepath(x.feedfilepath())
    if (x.has_feedtime()): self.set_feedtime(x.feedtime())
    if (x.has_feedtype()): self.set_feedtype(x.feedtype())
    if (x.has_feedstate()): self.set_feedstate(x.feedstate())
    if (x.has_completionstatuscode()): self.set_completionstatuscode(x.completionstatuscode())
    if (x.has_numrecordssuccess()): self.set_numrecordssuccess(x.numrecordssuccess())
    if (x.has_numrecordserror()): self.set_numrecordserror(x.numrecordserror())
    if (x.has_feedstatus_filename()): self.set_feedstatus_filename(x.feedstatus_filename())
    if (x.has_processlog()): self.set_processlog(x.processlog())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeedStatusProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeedStatusProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeedStatusProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeedStatusProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeedStatusProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_datasource_ != x.has_datasource_: return 0
    if self.has_datasource_ and self.datasource_ != x.datasource_: return 0
    if self.has_feedfilepath_ != x.has_feedfilepath_: return 0
    if self.has_feedfilepath_ and self.feedfilepath_ != x.feedfilepath_: return 0
    if self.has_feedtime_ != x.has_feedtime_: return 0
    if self.has_feedtime_ and self.feedtime_ != x.feedtime_: return 0
    if self.has_feedtype_ != x.has_feedtype_: return 0
    if self.has_feedtype_ and self.feedtype_ != x.feedtype_: return 0
    if self.has_feedstate_ != x.has_feedstate_: return 0
    if self.has_feedstate_ and self.feedstate_ != x.feedstate_: return 0
    if self.has_completionstatuscode_ != x.has_completionstatuscode_: return 0
    if self.has_completionstatuscode_ and self.completionstatuscode_ != x.completionstatuscode_: return 0
    if self.has_numrecordssuccess_ != x.has_numrecordssuccess_: return 0
    if self.has_numrecordssuccess_ and self.numrecordssuccess_ != x.numrecordssuccess_: return 0
    if self.has_numrecordserror_ != x.has_numrecordserror_: return 0
    if self.has_numrecordserror_ and self.numrecordserror_ != x.numrecordserror_: return 0
    if self.has_feedstatus_filename_ != x.has_feedstatus_filename_: return 0
    if self.has_feedstatus_filename_ and self.feedstatus_filename_ != x.feedstatus_filename_: return 0
    if self.has_processlog_ != x.has_processlog_: return 0
    if self.has_processlog_ and self.processlog_ != x.processlog_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_datasource_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: datasource not set.')
    if (not self.has_feedtime_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feedtime not set.')
    if (not self.has_feedtype_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feedtype not set.')
    if (not self.has_feedstate_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feedstate not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.datasource_))
    if (self.has_feedfilepath_): n += 1 + self.lengthString(len(self.feedfilepath_))
    n += self.lengthVarInt64(self.feedtime_)
    n += self.lengthVarInt64(self.feedtype_)
    n += self.lengthVarInt64(self.feedstate_)
    if (self.has_completionstatuscode_): n += 1 + self.lengthVarInt64(self.completionstatuscode_)
    if (self.has_numrecordssuccess_): n += 1 + self.lengthVarInt64(self.numrecordssuccess_)
    if (self.has_numrecordserror_): n += 1 + self.lengthVarInt64(self.numrecordserror_)
    if (self.has_feedstatus_filename_): n += 1 + self.lengthString(len(self.feedstatus_filename_))
    if (self.has_processlog_): n += 1 + self.lengthString(len(self.processlog_))
    return n + 4

  def Clear(self):
    self.clear_datasource()
    self.clear_feedfilepath()
    self.clear_feedtime()
    self.clear_feedtype()
    self.clear_feedstate()
    self.clear_completionstatuscode()
    self.clear_numrecordssuccess()
    self.clear_numrecordserror()
    self.clear_feedstatus_filename()
    self.clear_processlog()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.datasource_)
    if (self.has_feedfilepath_):
      out.putVarInt32(18)
      out.putPrefixedString(self.feedfilepath_)
    out.putVarInt32(24)
    out.putVarInt64(self.feedtime_)
    out.putVarInt32(32)
    out.putVarInt32(self.feedtype_)
    out.putVarInt32(40)
    out.putVarInt32(self.feedstate_)
    if (self.has_completionstatuscode_):
      out.putVarInt32(48)
      out.putVarInt32(self.completionstatuscode_)
    if (self.has_numrecordssuccess_):
      out.putVarInt32(56)
      out.putVarInt32(self.numrecordssuccess_)
    if (self.has_numrecordserror_):
      out.putVarInt32(64)
      out.putVarInt32(self.numrecordserror_)
    if (self.has_feedstatus_filename_):
      out.putVarInt32(74)
      out.putPrefixedString(self.feedstatus_filename_)
    if (self.has_processlog_):
      out.putVarInt32(82)
      out.putPrefixedString(self.processlog_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_datasource(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_feedfilepath(d.getPrefixedString())
        continue
      if tt == 24:
        self.set_feedtime(d.getVarInt64())
        continue
      if tt == 32:
        self.set_feedtype(d.getVarInt32())
        continue
      if tt == 40:
        self.set_feedstate(d.getVarInt32())
        continue
      if tt == 48:
        self.set_completionstatuscode(d.getVarInt32())
        continue
      if tt == 56:
        self.set_numrecordssuccess(d.getVarInt32())
        continue
      if tt == 64:
        self.set_numrecordserror(d.getVarInt32())
        continue
      if tt == 74:
        self.set_feedstatus_filename(d.getPrefixedString())
        continue
      if tt == 82:
        self.set_processlog(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_datasource_: res+=prefix+("Datasource: %s\n" % self.DebugFormatString(self.datasource_))
    if self.has_feedfilepath_: res+=prefix+("FeedFilePath: %s\n" % self.DebugFormatString(self.feedfilepath_))
    if self.has_feedtime_: res+=prefix+("FeedTime: %s\n" % self.DebugFormatInt64(self.feedtime_))
    if self.has_feedtype_: res+=prefix+("FeedType: %s\n" % self.DebugFormatInt32(self.feedtype_))
    if self.has_feedstate_: res+=prefix+("FeedState: %s\n" % self.DebugFormatInt32(self.feedstate_))
    if self.has_completionstatuscode_: res+=prefix+("CompletionStatusCode: %s\n" % self.DebugFormatInt32(self.completionstatuscode_))
    if self.has_numrecordssuccess_: res+=prefix+("NumRecordsSuccess: %s\n" % self.DebugFormatInt32(self.numrecordssuccess_))
    if self.has_numrecordserror_: res+=prefix+("NumRecordsError: %s\n" % self.DebugFormatInt32(self.numrecordserror_))
    if self.has_feedstatus_filename_: res+=prefix+("feedstatus_filename: %s\n" % self.DebugFormatString(self.feedstatus_filename_))
    if self.has_processlog_: res+=prefix+("ProcessLog: %s\n" % self.DebugFormatString(self.processlog_))
    return res

  kDatasource = 1
  kFeedFilePath = 2
  kFeedTime = 3
  kFeedType = 4
  kFeedState = 5
  kCompletionStatusCode = 6
  kNumRecordsSuccess = 7
  kNumRecordsError = 8
  kfeedstatus_filename = 9
  kProcessLog = 10

  _TEXT = (
   "ErrorCode",  #   0
   "Datasource",  #   1
   "FeedFilePath",  #   2
   "FeedTime",  #   3
   "FeedType",  #   4
   "FeedState",  #   5
   "CompletionStatusCode",  #   6
   "NumRecordsSuccess",  #   7
   "NumRecordsError",  #   8
   "feedstatus_filename",  #   9
   "ProcessLog",  #  10
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.STRING,  #  10

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x25,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x74,
    0x61,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0f,
    0x46,
    0x65,
    0x65,
    0x64,
    0x53,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x50,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x61,
    0x74,
    0x61,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x46,
    0x65,
    0x65,
    0x64,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x50,
    0x61,
    0x74,
    0x68,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x46,
    0x65,
    0x65,
    0x64,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x46,
    0x65,
    0x65,
    0x64,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x46,
    0x65,
    0x65,
    0x64,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x4e,
    0x75,
    0x6d,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x53,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x4e,
    0x75,
    0x6d,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x45,
    0x72,
    0x72,
    0x6f,
    0x72,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x66,
    0x65,
    0x65,
    0x64,
    0x73,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x5f,
    0x66,
    0x69,
    0x6c,
    0x65,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x50,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x4c,
    0x6f,
    0x67,
    0x20,
    0x0a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x0d,
    0x46,
    0x65,
    0x65,
    0x64,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x45,
    0x6e,
    0x75,
    0x6d,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x08,
    0x41,
    0x43,
    0x43,
    0x45,
    0x50,
    0x54,
    0x45,
    0x44,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x49,
    0x4e,
    0x5f,
    0x50,
    0x52,
    0x4f,
    0x47,
    0x52,
    0x45,
    0x53,
    0x53,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x09,
    0x43,
    0x4f,
    0x4d,
    0x50,
    0x4c,
    0x45,
    0x54,
    0x45,
    0x44,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x43,
    0x4f,
    0x4d,
    0x50,
    0x4c,
    0x45,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x57,
    0x49,
    0x54,
    0x48,
    0x5f,
    0x53,
    0x4f,
    0x4d,
    0x45,
    0x5f,
    0x45,
    0x52,
    0x52,
    0x4f,
    0x52,
    0x53,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x43,
    0x4f,
    0x4d,
    0x50,
    0x4c,
    0x45,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x46,
    0x41,
    0x49,
    0x4c,
    0x45,
    0x44,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x18,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x45,
    0x6e,
    0x75,
    0x6d,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x02,
    0x4f,
    0x4b,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x50,
    0x41,
    0x52,
    0x53,
    0x49,
    0x4e,
    0x47,
    0x5f,
    0x45,
    0x52,
    0x52,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x49,
    0x4e,
    0x54,
    0x45,
    0x52,
    0x4e,
    0x41,
    0x4c,
    0x5f,
    0x45,
    0x52,
    0x52,
    0x4f,
    0x52,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class FeedergatePostProto(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.datasource_ = ""
    self.feedtype_ = ""
    self.data_ = ""
    self.has_datasource_ = 0
    self.has_feedtype_ = 0
    self.has_data_ = 0
    if contents is not None: self.MergeFromString(contents)

  def datasource(self): return self.datasource_

  def set_datasource(self, x):
    self.has_datasource_ = 1
    self.datasource_ = x

  def clear_datasource(self):
    self.has_datasource_ = 0
    self.datasource_ = ""

  def has_datasource(self): return self.has_datasource_

  def feedtype(self): return self.feedtype_

  def set_feedtype(self, x):
    self.has_feedtype_ = 1
    self.feedtype_ = x

  def clear_feedtype(self):
    self.has_feedtype_ = 0
    self.feedtype_ = ""

  def has_feedtype(self): return self.has_feedtype_

  def data(self): return self.data_

  def set_data(self, x):
    self.has_data_ = 1
    self.data_ = x

  def clear_data(self):
    self.has_data_ = 0
    self.data_ = ""

  def has_data(self): return self.has_data_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_datasource()): self.set_datasource(x.datasource())
    if (x.has_feedtype()): self.set_feedtype(x.feedtype())
    if (x.has_data()): self.set_data(x.data())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'FeedergatePostProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'FeedergatePostProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'FeedergatePostProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'FeedergatePostProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'FeedergatePostProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_datasource_ != x.has_datasource_: return 0
    if self.has_datasource_ and self.datasource_ != x.datasource_: return 0
    if self.has_feedtype_ != x.has_feedtype_: return 0
    if self.has_feedtype_ and self.feedtype_ != x.feedtype_: return 0
    if self.has_data_ != x.has_data_: return 0
    if self.has_data_ and self.data_ != x.data_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_datasource_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: datasource not set.')
    if (not self.has_feedtype_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: feedtype not set.')
    if (not self.has_data_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: data not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.datasource_))
    n += self.lengthString(len(self.feedtype_))
    n += self.lengthString(len(self.data_))
    return n + 3

  def Clear(self):
    self.clear_datasource()
    self.clear_feedtype()
    self.clear_data()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.datasource_)
    out.putVarInt32(18)
    out.putPrefixedString(self.feedtype_)
    out.putVarInt32(26)
    out.putPrefixedString(self.data_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_datasource(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_feedtype(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_data(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_datasource_: res+=prefix+("datasource: %s\n" % self.DebugFormatString(self.datasource_))
    if self.has_feedtype_: res+=prefix+("feedtype: %s\n" % self.DebugFormatString(self.feedtype_))
    if self.has_data_: res+=prefix+("data: %s\n" % self.DebugFormatString(self.data_))
    return res

  kdatasource = 1
  kfeedtype = 2
  kdata = 3

  _TEXT = (
   "ErrorCode",  #   0
   "datasource",  #   1
   "feedtype",  #   2
   "data",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x25,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x66,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x74,
    0x61,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x13,
    0x46,
    0x65,
    0x65,
    0x64,
    0x65,
    0x72,
    0x67,
    0x61,
    0x74,
    0x65,
    0x50,
    0x6f,
    0x73,
    0x74,
    0x50,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x13,
    0x1a,
    0x0a,
    0x64,
    0x61,
    0x74,
    0x61,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x66,
    0x65,
    0x65,
    0x64,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['FeederCommand','FeederCommand_IndexData','FeederCommand_ArchiveData','FeederCommand_Froogle','FeederCommand_Enterprise','FeederResult','FeederContentfilterResponse','DatasourceInfoProto','FeedStatusProto','FeedergatePostProto']
