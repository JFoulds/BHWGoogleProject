# This file automatically generated by protocol-compiler from enterprise/core/gfs/gfs_superblock.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class GFS_ReplicaInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.machine_name_ = ""
    self.up_to_date_ = 0
    self.last_error_ = ""
    self.has_machine_name_ = 0
    self.has_up_to_date_ = 0
    self.has_last_error_ = 0
    if contents is not None: self.MergeFromString(contents)

  def machine_name(self): return self.machine_name_

  def set_machine_name(self, x):
    self.has_machine_name_ = 1
    self.machine_name_ = x

  def clear_machine_name(self):
    self.has_machine_name_ = 0
    self.machine_name_ = ""

  def has_machine_name(self): return self.has_machine_name_

  def up_to_date(self): return self.up_to_date_

  def set_up_to_date(self, x):
    self.has_up_to_date_ = 1
    self.up_to_date_ = x

  def clear_up_to_date(self):
    self.has_up_to_date_ = 0
    self.up_to_date_ = 0

  def has_up_to_date(self): return self.has_up_to_date_

  def last_error(self): return self.last_error_

  def set_last_error(self, x):
    self.has_last_error_ = 1
    self.last_error_ = x

  def clear_last_error(self):
    self.has_last_error_ = 0
    self.last_error_ = ""

  def has_last_error(self): return self.has_last_error_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_machine_name()): self.set_machine_name(x.machine_name())
    if (x.has_up_to_date()): self.set_up_to_date(x.up_to_date())
    if (x.has_last_error()): self.set_last_error(x.last_error())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GFS_ReplicaInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GFS_ReplicaInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GFS_ReplicaInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GFS_ReplicaInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GFS_ReplicaInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_machine_name_ != x.has_machine_name_: return 0
    if self.has_machine_name_ and self.machine_name_ != x.machine_name_: return 0
    if self.has_up_to_date_ != x.has_up_to_date_: return 0
    if self.has_up_to_date_ and self.up_to_date_ != x.up_to_date_: return 0
    if self.has_last_error_ != x.has_last_error_: return 0
    if self.has_last_error_ and self.last_error_ != x.last_error_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_machine_name_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: machine_name not set.')
    if (not self.has_up_to_date_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: up_to_date not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.machine_name_))
    if (self.has_last_error_): n += 1 + self.lengthString(len(self.last_error_))
    return n + 3

  def Clear(self):
    self.clear_machine_name()
    self.clear_up_to_date()
    self.clear_last_error()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.machine_name_)
    out.putVarInt32(16)
    out.putBoolean(self.up_to_date_)
    if (self.has_last_error_):
      out.putVarInt32(26)
      out.putPrefixedString(self.last_error_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_machine_name(d.getPrefixedString())
        continue
      if tt == 16:
        self.set_up_to_date(d.getBoolean())
        continue
      if tt == 26:
        self.set_last_error(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_machine_name_: res+=prefix+("machine_name: %s\n" % self.DebugFormatString(self.machine_name_))
    if self.has_up_to_date_: res+=prefix+("up_to_date: %s\n" % self.DebugFormatBool(self.up_to_date_))
    if self.has_last_error_: res+=prefix+("last_error: %s\n" % self.DebugFormatString(self.last_error_))
    return res

  kmachine_name = 1
  kup_to_date = 2
  klast_error = 3

  _TEXT = (
   "ErrorCode",  #   0
   "machine_name",  #   1
   "up_to_date",  #   2
   "last_error",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x28,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x2f,
    0x67,
    0x66,
    0x73,
    0x2f,
    0x67,
    0x66,
    0x73,
    0x5f,
    0x73,
    0x75,
    0x70,
    0x65,
    0x72,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0f,
    0x47,
    0x46,
    0x53,
    0x5f,
    0x52,
    0x65,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x0c,
    0x6d,
    0x61,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x65,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x75,
    0x70,
    0x5f,
    0x74,
    0x6f,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x5f,
    0x65,
    0x72,
    0x72,
    0x6f,
    0x72,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class GFS_PrimaryInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.machine_name_ = ""
    self.start_time_ = 0
    self.has_machine_name_ = 0
    self.has_start_time_ = 0
    if contents is not None: self.MergeFromString(contents)

  def machine_name(self): return self.machine_name_

  def set_machine_name(self, x):
    self.has_machine_name_ = 1
    self.machine_name_ = x

  def clear_machine_name(self):
    self.has_machine_name_ = 0
    self.machine_name_ = ""

  def has_machine_name(self): return self.has_machine_name_

  def start_time(self): return self.start_time_

  def set_start_time(self, x):
    self.has_start_time_ = 1
    self.start_time_ = x

  def clear_start_time(self):
    self.has_start_time_ = 0
    self.start_time_ = 0

  def has_start_time(self): return self.has_start_time_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_machine_name()): self.set_machine_name(x.machine_name())
    if (x.has_start_time()): self.set_start_time(x.start_time())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GFS_PrimaryInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GFS_PrimaryInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GFS_PrimaryInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GFS_PrimaryInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GFS_PrimaryInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_machine_name_ != x.has_machine_name_: return 0
    if self.has_machine_name_ and self.machine_name_ != x.machine_name_: return 0
    if self.has_start_time_ != x.has_start_time_: return 0
    if self.has_start_time_ and self.start_time_ != x.start_time_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_machine_name_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: machine_name not set.')
    if (not self.has_start_time_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: start_time not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.machine_name_))
    n += self.lengthVarInt64(self.start_time_)
    return n + 2

  def Clear(self):
    self.clear_machine_name()
    self.clear_start_time()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.machine_name_)
    out.putVarInt32(16)
    out.putVarInt64(self.start_time_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_machine_name(d.getPrefixedString())
        continue
      if tt == 16:
        self.set_start_time(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_machine_name_: res+=prefix+("machine_name: %s\n" % self.DebugFormatString(self.machine_name_))
    if self.has_start_time_: res+=prefix+("start_time: %s\n" % self.DebugFormatInt64(self.start_time_))
    return res

  kmachine_name = 1
  kstart_time = 2

  _TEXT = (
   "ErrorCode",  #   0
   "machine_name",  #   1
   "start_time",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x28,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x2f,
    0x67,
    0x66,
    0x73,
    0x2f,
    0x67,
    0x66,
    0x73,
    0x5f,
    0x73,
    0x75,
    0x70,
    0x65,
    0x72,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0f,
    0x47,
    0x46,
    0x53,
    0x5f,
    0x50,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x0c,
    0x6d,
    0x61,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x65,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x5f,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class GFS_SuperBlock(ProtocolBuffer.ProtocolMessage):

  BASE         =    0 
  ARCHIVAL     =    1 
  CURRENT      =    0 

  _Version_NAMES = {
    0: "BASE",
    1: "ARCHIVAL",
    0: "CURRENT",
  }

  def Version_Name(cls, x): return cls._Version_NAMES.get(x, "")
  Version_Name = classmethod(Version_Name)

  def __init__(self, contents=None):
    self.version_ = 0
    self.cellname_ = ""
    self.last_main_ = ""
    self.logical_timestamp_ = 0
    self.replicas_ = []
    self.snapshot_serial_ = 0
    self.delta_serial_ = 0
    self.primary_rev_number_ = 0
    self.chunkservers_ = []
    self.old_primaries_ = []
    self.has_version_ = 0
    self.has_cellname_ = 0
    self.has_last_main_ = 0
    self.has_logical_timestamp_ = 0
    self.has_snapshot_serial_ = 0
    self.has_delta_serial_ = 0
    self.has_primary_rev_number_ = 0
    if contents is not None: self.MergeFromString(contents)

  def version(self): return self.version_

  def set_version(self, x):
    self.has_version_ = 1
    self.version_ = x

  def clear_version(self):
    self.has_version_ = 0
    self.version_ = 0

  def has_version(self): return self.has_version_

  def cellname(self): return self.cellname_

  def set_cellname(self, x):
    self.has_cellname_ = 1
    self.cellname_ = x

  def clear_cellname(self):
    self.has_cellname_ = 0
    self.cellname_ = ""

  def has_cellname(self): return self.has_cellname_

  def last_main(self): return self.last_main_

  def set_last_main(self, x):
    self.has_last_main_ = 1
    self.last_main_ = x

  def clear_last_main(self):
    self.has_last_main_ = 0
    self.last_main_ = ""

  def has_last_main(self): return self.has_last_main_

  def logical_timestamp(self): return self.logical_timestamp_

  def set_logical_timestamp(self, x):
    self.has_logical_timestamp_ = 1
    self.logical_timestamp_ = x

  def clear_logical_timestamp(self):
    self.has_logical_timestamp_ = 0
    self.logical_timestamp_ = 0

  def has_logical_timestamp(self): return self.has_logical_timestamp_

  def replicas_size(self): return len(self.replicas_)
  def replicas_list(self): return self.replicas_

  def replicas(self, i):
    return self.replicas_[i]

  def mutable_replicas(self, i):
    return self.replicas_[i]

  def add_replicas(self):
    x = GFS_ReplicaInfo()
    self.replicas_.append(x)
    return x

  def clear_replicas(self):
    self.replicas_ = []
  def snapshot_serial(self): return self.snapshot_serial_

  def set_snapshot_serial(self, x):
    self.has_snapshot_serial_ = 1
    self.snapshot_serial_ = x

  def clear_snapshot_serial(self):
    self.has_snapshot_serial_ = 0
    self.snapshot_serial_ = 0

  def has_snapshot_serial(self): return self.has_snapshot_serial_

  def delta_serial(self): return self.delta_serial_

  def set_delta_serial(self, x):
    self.has_delta_serial_ = 1
    self.delta_serial_ = x

  def clear_delta_serial(self):
    self.has_delta_serial_ = 0
    self.delta_serial_ = 0

  def has_delta_serial(self): return self.has_delta_serial_

  def primary_rev_number(self): return self.primary_rev_number_

  def set_primary_rev_number(self, x):
    self.has_primary_rev_number_ = 1
    self.primary_rev_number_ = x

  def clear_primary_rev_number(self):
    self.has_primary_rev_number_ = 0
    self.primary_rev_number_ = 0

  def has_primary_rev_number(self): return self.has_primary_rev_number_

  def chunkservers_size(self): return len(self.chunkservers_)
  def chunkservers_list(self): return self.chunkservers_

  def chunkservers(self, i):
    return self.chunkservers_[i]

  def set_chunkservers(self, i, x):
    self.chunkservers_[i] = x

  def add_chunkservers(self, x):
    self.chunkservers_.append(x)

  def clear_chunkservers(self):
    self.chunkservers_ = []

  def old_primaries_size(self): return len(self.old_primaries_)
  def old_primaries_list(self): return self.old_primaries_

  def old_primaries(self, i):
    return self.old_primaries_[i]

  def mutable_old_primaries(self, i):
    return self.old_primaries_[i]

  def add_old_primaries(self):
    x = GFS_PrimaryInfo()
    self.old_primaries_.append(x)
    return x

  def clear_old_primaries(self):
    self.old_primaries_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_version()): self.set_version(x.version())
    if (x.has_cellname()): self.set_cellname(x.cellname())
    if (x.has_last_main()): self.set_last_main(x.last_main())
    if (x.has_logical_timestamp()): self.set_logical_timestamp(x.logical_timestamp())
    for i in xrange(x.replicas_size()): self.add_replicas().CopyFrom(x.replicas(i))
    if (x.has_snapshot_serial()): self.set_snapshot_serial(x.snapshot_serial())
    if (x.has_delta_serial()): self.set_delta_serial(x.delta_serial())
    if (x.has_primary_rev_number()): self.set_primary_rev_number(x.primary_rev_number())
    for i in xrange(x.chunkservers_size()): self.add_chunkservers(x.chunkservers(i))
    for i in xrange(x.old_primaries_size()): self.add_old_primaries().CopyFrom(x.old_primaries(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GFS_SuperBlock', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GFS_SuperBlock')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GFS_SuperBlock', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GFS_SuperBlock', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GFS_SuperBlock', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_version_ != x.has_version_: return 0
    if self.has_version_ and self.version_ != x.version_: return 0
    if self.has_cellname_ != x.has_cellname_: return 0
    if self.has_cellname_ and self.cellname_ != x.cellname_: return 0
    if self.has_last_main_ != x.has_last_main_: return 0
    if self.has_last_main_ and self.last_main_ != x.last_main_: return 0
    if self.has_logical_timestamp_ != x.has_logical_timestamp_: return 0
    if self.has_logical_timestamp_ and self.logical_timestamp_ != x.logical_timestamp_: return 0
    if len(self.replicas_) != len(x.replicas_): return 0
    for e1, e2 in zip(self.replicas_, x.replicas_):
      if e1 != e2: return 0
    if self.has_snapshot_serial_ != x.has_snapshot_serial_: return 0
    if self.has_snapshot_serial_ and self.snapshot_serial_ != x.snapshot_serial_: return 0
    if self.has_delta_serial_ != x.has_delta_serial_: return 0
    if self.has_delta_serial_ and self.delta_serial_ != x.delta_serial_: return 0
    if self.has_primary_rev_number_ != x.has_primary_rev_number_: return 0
    if self.has_primary_rev_number_ and self.primary_rev_number_ != x.primary_rev_number_: return 0
    if len(self.chunkservers_) != len(x.chunkservers_): return 0
    for e1, e2 in zip(self.chunkservers_, x.chunkservers_):
      if e1 != e2: return 0
    if len(self.old_primaries_) != len(x.old_primaries_): return 0
    for e1, e2 in zip(self.old_primaries_, x.old_primaries_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_cellname_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: cellname not set.')
    if (not self.has_last_main_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: last_main not set.')
    if (not self.has_logical_timestamp_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: logical_timestamp not set.')
    for i in xrange(len(self.replicas_)):
      if (not self.replicas_[i].IsInitialized(debug_strs)): initialized=0
    if (not self.has_snapshot_serial_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: snapshot_serial not set.')
    if (not self.has_delta_serial_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: delta_serial not set.')
    if (not self.has_primary_rev_number_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: primary_rev_number not set.')
    for i in xrange(len(self.old_primaries_)):
      if (not self.old_primaries_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_version_): n += 1 + self.lengthVarInt64(self.version_)
    n += self.lengthString(len(self.cellname_))
    n += self.lengthString(len(self.last_main_))
    n += self.lengthVarInt64(self.logical_timestamp_)
    n += 1 * len(self.replicas_)
    for i in xrange(len(self.replicas_)): n += self.lengthString(self.replicas_[i].ByteSize())
    n += self.lengthVarInt64(self.snapshot_serial_)
    n += self.lengthVarInt64(self.delta_serial_)
    n += self.lengthVarInt64(self.primary_rev_number_)
    n += 1 * len(self.chunkservers_)
    for i in xrange(len(self.chunkservers_)): n += self.lengthString(len(self.chunkservers_[i]))
    n += 1 * len(self.old_primaries_)
    for i in xrange(len(self.old_primaries_)): n += self.lengthString(self.old_primaries_[i].ByteSize())
    return n + 6

  def Clear(self):
    self.clear_version()
    self.clear_cellname()
    self.clear_last_main()
    self.clear_logical_timestamp()
    self.clear_replicas()
    self.clear_snapshot_serial()
    self.clear_delta_serial()
    self.clear_primary_rev_number()
    self.clear_chunkservers()
    self.clear_old_primaries()

  def OutputUnchecked(self, out):
    out.putVarInt32(10)
    out.putPrefixedString(self.cellname_)
    out.putVarInt32(18)
    out.putPrefixedString(self.last_main_)
    out.putVarInt32(24)
    out.putVarInt64(self.logical_timestamp_)
    for i in xrange(len(self.replicas_)):
      out.putVarInt32(34)
      out.putVarInt32(self.replicas_[i].ByteSize())
      self.replicas_[i].OutputUnchecked(out)
    out.putVarInt32(40)
    out.putVarInt64(self.snapshot_serial_)
    out.putVarInt32(48)
    out.putVarInt64(self.delta_serial_)
    out.putVarInt32(56)
    out.putVarInt64(self.primary_rev_number_)
    for i in xrange(len(self.chunkservers_)):
      out.putVarInt32(66)
      out.putPrefixedString(self.chunkservers_[i])
    for i in xrange(len(self.old_primaries_)):
      out.putVarInt32(74)
      out.putVarInt32(self.old_primaries_[i].ByteSize())
      self.old_primaries_[i].OutputUnchecked(out)
    if (self.has_version_):
      out.putVarInt32(80)
      out.putVarInt32(self.version_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_cellname(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_last_main(d.getPrefixedString())
        continue
      if tt == 24:
        self.set_logical_timestamp(d.getVarInt64())
        continue
      if tt == 34:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_replicas().TryMerge(tmp)
        continue
      if tt == 40:
        self.set_snapshot_serial(d.getVarInt64())
        continue
      if tt == 48:
        self.set_delta_serial(d.getVarInt64())
        continue
      if tt == 56:
        self.set_primary_rev_number(d.getVarInt64())
        continue
      if tt == 66:
        self.add_chunkservers(d.getPrefixedString())
        continue
      if tt == 74:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_old_primaries().TryMerge(tmp)
        continue
      if tt == 80:
        self.set_version(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_version_: res+=prefix+("version: %s\n" % self.DebugFormatInt32(self.version_))
    if self.has_cellname_: res+=prefix+("cellname: %s\n" % self.DebugFormatString(self.cellname_))
    if self.has_last_main_: res+=prefix+("last_main: %s\n" % self.DebugFormatString(self.last_main_))
    if self.has_logical_timestamp_: res+=prefix+("logical_timestamp: %s\n" % self.DebugFormatInt64(self.logical_timestamp_))
    cnt=0
    for e in self.replicas_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("replicas%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_snapshot_serial_: res+=prefix+("snapshot_serial: %s\n" % self.DebugFormatInt64(self.snapshot_serial_))
    if self.has_delta_serial_: res+=prefix+("delta_serial: %s\n" % self.DebugFormatInt64(self.delta_serial_))
    if self.has_primary_rev_number_: res+=prefix+("primary_rev_number: %s\n" % self.DebugFormatInt64(self.primary_rev_number_))
    cnt=0
    for e in self.chunkservers_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("chunkservers%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    cnt=0
    for e in self.old_primaries_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("old_primaries%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    return res

  kversion = 10
  kcellname = 1
  klast_main = 2
  klogical_timestamp = 3
  kreplicas = 4
  ksnapshot_serial = 5
  kdelta_serial = 6
  kprimary_rev_number = 7
  kchunkservers = 8
  kold_primaries = 9

  _TEXT = (
   "ErrorCode",  #   0
   "cellname",  #   1
   "last_main",  #   2
   "logical_timestamp",  #   3
   "replicas",  #   4
   "snapshot_serial",  #   5
   "delta_serial",  #   6
   "primary_rev_number",  #   7
   "chunkservers",  #   8
   "old_primaries",  #   9
   "version",  #  10
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.STRING,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x28,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x2f,
    0x67,
    0x66,
    0x73,
    0x2f,
    0x67,
    0x66,
    0x73,
    0x5f,
    0x73,
    0x75,
    0x70,
    0x65,
    0x72,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0e,
    0x47,
    0x46,
    0x53,
    0x5f,
    0x53,
    0x75,
    0x70,
    0x65,
    0x72,
    0x42,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x13,
    0x1a,
    0x07,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x5f,
    0x6d,
    0x61,
    0x73,
    0x74,
    0x65,
    0x72,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x73,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0f,
    0x47,
    0x46,
    0x53,
    0x5f,
    0x52,
    0x65,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x73,
    0x6e,
    0x61,
    0x70,
    0x73,
    0x68,
    0x6f,
    0x74,
    0x5f,
    0x73,
    0x65,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x64,
    0x65,
    0x6c,
    0x74,
    0x61,
    0x5f,
    0x73,
    0x65,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x5f,
    0x72,
    0x65,
    0x76,
    0x5f,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x63,
    0x68,
    0x75,
    0x6e,
    0x6b,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x73,
    0x20,
    0x08,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x6f,
    0x6c,
    0x64,
    0x5f,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x0f,
    0x47,
    0x46,
    0x53,
    0x5f,
    0x50,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x14,
    0x73,
    0x7a,
    0x07,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x04,
    0x42,
    0x41,
    0x53,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x08,
    0x41,
    0x52,
    0x43,
    0x48,
    0x49,
    0x56,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x07,
    0x43,
    0x55,
    0x52,
    0x52,
    0x45,
    0x4e,
    0x54,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['GFS_ReplicaInfo','GFS_PrimaryInfo','GFS_SuperBlock']
