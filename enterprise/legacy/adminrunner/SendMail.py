#!/usr/bin/python2.4
#
# (c) 2002 Google inc
# cpopescu@google.com
#
# Helper to send mail
#
###############################################################################

import time
import commands
import string

from google3.enterprise.legacy.util import E
from google3.enterprise.tools import M
from google3.pyglib import logging

###############################################################################

# TEST_MAIL_HANDLER_HOOK exists to make writing unit (and other types) test
# easier.  If it is set with a handler, it will be called instead of mail
# actually being sent.
# Handler should be of the form:
#   handler(smtpHost, toAddresses, fromAddress, subject, msgBody)
TEST_MAIL_HANDLER_HOOK = None

def send(cfg, to, problem, subject, msgText, logSubject):

  # No mails in install mode
  if cfg.getInstallState() == "INSTALL": return

  smtpHost   = cfg.getGlobalParam("SMTP_SERVER")
  fromEmail  = cfg.getGlobalParam("OUTGOING_EMAIL_SENDER")
  allSubject = None

  if not to:
    if problem:
      to = cfg.getGlobalParam("PROBLEM_EMAIL")
    else:
      to = cfg.getGlobalParam("NOTIFICATION_EMAIL")
  # if to is empty, we still go through the whole process, but bail out right
  # before actually sending the email.  we want all the side effects to still
  # happen (logging, testing hooks, etc..)

  # if "*EMAIL" is None, commands.mkarg() will throw a TypeError exception
  if not to:
    to = ""
  else:
    to = string.strip(to)

  if problem:
    allSubject = "%s: %s" % (
      cfg.getGlobalParam("ENT_LICENSE_INFORMATION").get("ENT_BOX_ID", ""),
      cfg.getGlobalParam("EMAIL_PROBLEM_PREFIX")
      )
  else:
    allSubject = "%s: %s" % (
      cfg.getGlobalParam("ENT_LICENSE_INFORMATION").get("ENT_BOX_ID", ""),
      cfg.getGlobalParam("EMAIL_NOTIFICATION_PREFIX")
      )

  allSubject = allSubject + subject

  # Log the subject
  if logSubject:
    logging.info('Sending mail: To: %s; Subject: %s' % (repr(to),
                                                        repr(subject)))
    cfg.writeAdminRunnerOpMsg(subject)

  dateString = time.strftime("%Y/%m/%d %H:%M:%S",
                             E.getLocaltime(time.time()))
  if msgText:
    msgText = msgText + "\n"
  else:
    msgText = ""


  ipAddr = cfg.getGlobalParam("EXTERNAL_WEB_IP")
  body = "%s [%s @%s from %s]" % (msgText, M.MSG_MAIL_AUTOGENERATED, dateString,
                                  ipAddr)

  # if we have a testing hook, call that
  if TEST_MAIL_HANDLER_HOOK != None:
    logging.info("calling TEST_MAIL_HANDLER_HOOK instead of mailnotify")
    to_list = filter(None, map(string.strip, string.split(to, ",")))
    TEST_MAIL_HANDLER_HOOK(smtpHost, to_list, fromEmail, allSubject, body)
    return

  # if to is empty, bail out
  if not (to and smtpHost): return

  # We execute this and not call the function directly because mailnotify
  # uses signal and we might call this from a secondary thread.
  E.execute([E.LOCALHOST],
            ". %s; cd %s/local/google3/enterprise/legacy/util; "\
            "./mailnotify.py %s %s %s %s %s" % (
    cfg.getGlobalParam('ENTERPRISE_BASHRC'),
    E.getEnterpriseHome(),
    commands.mkarg(smtpHost),
    commands.mkarg(allSubject),
    commands.mkarg(fromEmail),
    commands.mkarg(to),
    commands.mkarg(body)), None, 0)

###############################################################################

if __name__ == "__main__":
  import sys
  sys.exit("Import this module")
