# This file automatically generated by protocol-compiler from enterprise/apps/clicklog/clickevent.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class ClickEvent(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.ip_address_ = 0
    self.time100_ = 0
    self.click_type_ = ""
    self.session_id_ = ""
    self.click_data_ = ""
    self.query_ = ""
    self.rank_ = 0
    self.start_ = 0
    self.url_ = ""
    self.site_ = ""
    self.has_ip_address_ = 0
    self.has_time100_ = 0
    self.has_click_type_ = 0
    self.has_session_id_ = 0
    self.has_click_data_ = 0
    self.has_query_ = 0
    self.has_rank_ = 0
    self.has_start_ = 0
    self.has_url_ = 0
    self.has_site_ = 0
    if contents is not None: self.MergeFromString(contents)

  def ip_address(self): return self.ip_address_

  def set_ip_address(self, x):
    self.has_ip_address_ = 1
    self.ip_address_ = x

  def clear_ip_address(self):
    self.has_ip_address_ = 0
    self.ip_address_ = 0

  def has_ip_address(self): return self.has_ip_address_

  def time100(self): return self.time100_

  def set_time100(self, x):
    self.has_time100_ = 1
    self.time100_ = x

  def clear_time100(self):
    self.has_time100_ = 0
    self.time100_ = 0

  def has_time100(self): return self.has_time100_

  def click_type(self): return self.click_type_

  def set_click_type(self, x):
    self.has_click_type_ = 1
    self.click_type_ = x

  def clear_click_type(self):
    self.has_click_type_ = 0
    self.click_type_ = ""

  def has_click_type(self): return self.has_click_type_

  def session_id(self): return self.session_id_

  def set_session_id(self, x):
    self.has_session_id_ = 1
    self.session_id_ = x

  def clear_session_id(self):
    self.has_session_id_ = 0
    self.session_id_ = ""

  def has_session_id(self): return self.has_session_id_

  def click_data(self): return self.click_data_

  def set_click_data(self, x):
    self.has_click_data_ = 1
    self.click_data_ = x

  def clear_click_data(self):
    self.has_click_data_ = 0
    self.click_data_ = ""

  def has_click_data(self): return self.has_click_data_

  def query(self): return self.query_

  def set_query(self, x):
    self.has_query_ = 1
    self.query_ = x

  def clear_query(self):
    self.has_query_ = 0
    self.query_ = ""

  def has_query(self): return self.has_query_

  def rank(self): return self.rank_

  def set_rank(self, x):
    self.has_rank_ = 1
    self.rank_ = x

  def clear_rank(self):
    self.has_rank_ = 0
    self.rank_ = 0

  def has_rank(self): return self.has_rank_

  def start(self): return self.start_

  def set_start(self, x):
    self.has_start_ = 1
    self.start_ = x

  def clear_start(self):
    self.has_start_ = 0
    self.start_ = 0

  def has_start(self): return self.has_start_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def site(self): return self.site_

  def set_site(self, x):
    self.has_site_ = 1
    self.site_ = x

  def clear_site(self):
    self.has_site_ = 0
    self.site_ = ""

  def has_site(self): return self.has_site_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_ip_address()): self.set_ip_address(x.ip_address())
    if (x.has_time100()): self.set_time100(x.time100())
    if (x.has_click_type()): self.set_click_type(x.click_type())
    if (x.has_session_id()): self.set_session_id(x.session_id())
    if (x.has_click_data()): self.set_click_data(x.click_data())
    if (x.has_query()): self.set_query(x.query())
    if (x.has_rank()): self.set_rank(x.rank())
    if (x.has_start()): self.set_start(x.start())
    if (x.has_url()): self.set_url(x.url())
    if (x.has_site()): self.set_site(x.site())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'enterprise_apps_clicklog.ClickEvent', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'enterprise_apps_clicklog.ClickEvent')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'enterprise_apps_clicklog.ClickEvent', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'enterprise_apps_clicklog.ClickEvent', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'enterprise_apps_clicklog.ClickEvent', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_ip_address_ != x.has_ip_address_: return 0
    if self.has_ip_address_ and self.ip_address_ != x.ip_address_: return 0
    if self.has_time100_ != x.has_time100_: return 0
    if self.has_time100_ and self.time100_ != x.time100_: return 0
    if self.has_click_type_ != x.has_click_type_: return 0
    if self.has_click_type_ and self.click_type_ != x.click_type_: return 0
    if self.has_session_id_ != x.has_session_id_: return 0
    if self.has_session_id_ and self.session_id_ != x.session_id_: return 0
    if self.has_click_data_ != x.has_click_data_: return 0
    if self.has_click_data_ and self.click_data_ != x.click_data_: return 0
    if self.has_query_ != x.has_query_: return 0
    if self.has_query_ and self.query_ != x.query_: return 0
    if self.has_rank_ != x.has_rank_: return 0
    if self.has_rank_ and self.rank_ != x.rank_: return 0
    if self.has_start_ != x.has_start_: return 0
    if self.has_start_ and self.start_ != x.start_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_site_ != x.has_site_: return 0
    if self.has_site_ and self.site_ != x.site_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_ip_address_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: ip_address not set.')
    if (not self.has_time100_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: time100 not set.')
    if (not self.has_click_type_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: click_type not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.time100_)
    n += self.lengthString(len(self.click_type_))
    if (self.has_session_id_): n += 1 + self.lengthString(len(self.session_id_))
    if (self.has_click_data_): n += 1 + self.lengthString(len(self.click_data_))
    if (self.has_query_): n += 1 + self.lengthString(len(self.query_))
    if (self.has_rank_): n += 1 + self.lengthVarInt64(self.rank_)
    if (self.has_start_): n += 1 + self.lengthVarInt64(self.start_)
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    if (self.has_site_): n += 1 + self.lengthString(len(self.site_))
    return n + 7

  def Clear(self):
    self.clear_ip_address()
    self.clear_time100()
    self.clear_click_type()
    self.clear_session_id()
    self.clear_click_data()
    self.clear_query()
    self.clear_rank()
    self.clear_start()
    self.clear_url()
    self.clear_site()

  def OutputUnchecked(self, out):
    out.putVarInt32(13)
    out.put32(self.ip_address_)
    out.putVarInt32(16)
    out.putVarInt64(self.time100_)
    out.putVarInt32(26)
    out.putPrefixedString(self.click_type_)
    if (self.has_session_id_):
      out.putVarInt32(34)
      out.putPrefixedString(self.session_id_)
    if (self.has_click_data_):
      out.putVarInt32(42)
      out.putPrefixedString(self.click_data_)
    if (self.has_query_):
      out.putVarInt32(50)
      out.putPrefixedString(self.query_)
    if (self.has_rank_):
      out.putVarInt32(56)
      out.putVarInt32(self.rank_)
    if (self.has_start_):
      out.putVarInt32(64)
      out.putVarInt32(self.start_)
    if (self.has_url_):
      out.putVarInt32(74)
      out.putPrefixedString(self.url_)
    if (self.has_site_):
      out.putVarInt32(82)
      out.putPrefixedString(self.site_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 13:
        self.set_ip_address(d.get32())
        continue
      if tt == 16:
        self.set_time100(d.getVarInt64())
        continue
      if tt == 26:
        self.set_click_type(d.getPrefixedString())
        continue
      if tt == 34:
        self.set_session_id(d.getPrefixedString())
        continue
      if tt == 42:
        self.set_click_data(d.getPrefixedString())
        continue
      if tt == 50:
        self.set_query(d.getPrefixedString())
        continue
      if tt == 56:
        self.set_rank(d.getVarInt32())
        continue
      if tt == 64:
        self.set_start(d.getVarInt32())
        continue
      if tt == 74:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 82:
        self.set_site(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_ip_address_: res+=prefix+("ip_address: %s\n" % self.DebugFormatFixed32(self.ip_address_))
    if self.has_time100_: res+=prefix+("time100: %s\n" % self.DebugFormatInt64(self.time100_))
    if self.has_click_type_: res+=prefix+("click_type: %s\n" % self.DebugFormatString(self.click_type_))
    if self.has_session_id_: res+=prefix+("session_id: %s\n" % self.DebugFormatString(self.session_id_))
    if self.has_click_data_: res+=prefix+("click_data: %s\n" % self.DebugFormatString(self.click_data_))
    if self.has_query_: res+=prefix+("query: %s\n" % self.DebugFormatString(self.query_))
    if self.has_rank_: res+=prefix+("rank: %s\n" % self.DebugFormatInt32(self.rank_))
    if self.has_start_: res+=prefix+("start: %s\n" % self.DebugFormatInt32(self.start_))
    if self.has_url_: res+=prefix+("url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_site_: res+=prefix+("site: %s\n" % self.DebugFormatString(self.site_))
    return res

  kip_address = 1
  ktime100 = 2
  kclick_type = 3
  ksession_id = 4
  kclick_data = 5
  kquery = 6
  krank = 7
  kstart = 8
  kurl = 9
  ksite = 10

  _TEXT = (
   "ErrorCode",  #   0
   "ip_address",  #   1
   "time100",  #   2
   "click_type",  #   3
   "session_id",  #   4
   "click_data",  #   5
   "query",  #   6
   "rank",  #   7
   "start",  #   8
   "url",  #   9
   "site",  #  10
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.FLOAT,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.STRING,  #  10

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x29,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x2f,
    0x61,
    0x70,
    0x70,
    0x73,
    0x2f,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x6c,
    0x6f,
    0x67,
    0x2f,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x23,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x5f,
    0x61,
    0x70,
    0x70,
    0x73,
    0x5f,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x6c,
    0x6f,
    0x67,
    0x2e,
    0x43,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x13,
    0x1a,
    0x0a,
    0x69,
    0x70,
    0x5f,
    0x61,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x20,
    0x01,
    0x28,
    0x05,
    0x30,
    0x07,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x31,
    0x30,
    0x30,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x73,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x69,
    0x64,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x5f,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0x0a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['ClickEvent']
