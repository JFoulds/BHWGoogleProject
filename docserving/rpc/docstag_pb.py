# This file automatically generated by protocol-compiler from docserving/rpc/docstag.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

from google3.froogle.base.froogle_price_pb import FrooglePrice
from google3.science_search.citation.science_citation_pb import ScienceCitation
from google3.science_search.citation.legal_citation_pb import LegalCitation
from google3.science_search.citation.legal_citation_pb import LegalDate
from google3.science_search.citation.legal_citation_pb import LegalPerson
from google3.premiumcontent.common.premiuminfo_pb import PremiumArticleInfo
from google3.ocean.data.docinfo.ocean_docinfo_pb import OceanDocTag
from google3.quality.sitemap.proto.sitemap_pb import Sitemap
from google3.quality.local.proto.localwwwinfo_pb import LocalWWWInfo
from google3.quality.labels.proto.google_label_data_pb import GoogleLabelData
from google3.quality.manybox.proto.manybox_pb import ManyboxData
class DocsTag_ResultCategory(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.topdirname_ = ""
    self.topcatname_ = ""
    self.title_ = ""
    self.description_ = ""
    self.has_topdirname_ = 0
    self.has_topcatname_ = 0
    self.has_title_ = 0
    self.has_description_ = 0
    if contents is not None: self.MergeFromString(contents)

  def topdirname(self): return self.topdirname_

  def set_topdirname(self, x):
    self.has_topdirname_ = 1
    self.topdirname_ = x

  def clear_topdirname(self):
    self.has_topdirname_ = 0
    self.topdirname_ = ""

  def has_topdirname(self): return self.has_topdirname_

  def topcatname(self): return self.topcatname_

  def set_topcatname(self, x):
    self.has_topcatname_ = 1
    self.topcatname_ = x

  def clear_topcatname(self):
    self.has_topcatname_ = 0
    self.topcatname_ = ""

  def has_topcatname(self): return self.has_topcatname_

  def title(self): return self.title_

  def set_title(self, x):
    self.has_title_ = 1
    self.title_ = x

  def clear_title(self):
    self.has_title_ = 0
    self.title_ = ""

  def has_title(self): return self.has_title_

  def description(self): return self.description_

  def set_description(self, x):
    self.has_description_ = 1
    self.description_ = x

  def clear_description(self):
    self.has_description_ = 0
    self.description_ = ""

  def has_description(self): return self.has_description_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_topdirname()): self.set_topdirname(x.topdirname())
    if (x.has_topcatname()): self.set_topcatname(x.topcatname())
    if (x.has_title()): self.set_title(x.title())
    if (x.has_description()): self.set_description(x.description())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocsTag', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocsTag')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocsTag', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocsTag', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocsTag', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_topdirname_ != x.has_topdirname_: return 0
    if self.has_topdirname_ and self.topdirname_ != x.topdirname_: return 0
    if self.has_topcatname_ != x.has_topcatname_: return 0
    if self.has_topcatname_ and self.topcatname_ != x.topcatname_: return 0
    if self.has_title_ != x.has_title_: return 0
    if self.has_title_ and self.title_ != x.title_: return 0
    if self.has_description_ != x.has_description_: return 0
    if self.has_description_ and self.description_ != x.description_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_topdirname_): n += 2 + self.lengthString(len(self.topdirname_))
    if (self.has_topcatname_): n += 2 + self.lengthString(len(self.topcatname_))
    if (self.has_title_): n += 2 + self.lengthString(len(self.title_))
    if (self.has_description_): n += 2 + self.lengthString(len(self.description_))
    return n + 0

  def Clear(self):
    self.clear_topdirname()
    self.clear_topcatname()
    self.clear_title()
    self.clear_description()

  def OutputUnchecked(self, out):
    if (self.has_topdirname_):
      out.putVarInt32(458)
      out.putPrefixedString(self.topdirname_)
    if (self.has_topcatname_):
      out.putVarInt32(466)
      out.putPrefixedString(self.topcatname_)
    if (self.has_title_):
      out.putVarInt32(474)
      out.putPrefixedString(self.title_)
    if (self.has_description_):
      out.putVarInt32(482)
      out.putPrefixedString(self.description_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 108: break
      if tt == 458:
        self.set_topdirname(d.getPrefixedString())
        continue
      if tt == 466:
        self.set_topcatname(d.getPrefixedString())
        continue
      if tt == 474:
        self.set_title(d.getPrefixedString())
        continue
      if tt == 482:
        self.set_description(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_topdirname_: res+=prefix+("TopDirName: %s\n" % self.DebugFormatString(self.topdirname_))
    if self.has_topcatname_: res+=prefix+("TopCatName: %s\n" % self.DebugFormatString(self.topcatname_))
    if self.has_title_: res+=prefix+("Title: %s\n" % self.DebugFormatString(self.title_))
    if self.has_description_: res+=prefix+("Description: %s\n" % self.DebugFormatString(self.description_))
    return res

class DocsTag_ResultEntity(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.position_ = 0
    self.length_ = 0
    self.category_ = 0
    self.surface_ = ""
    self.value_ = ""
    self.probability_ = 0.0
    self.has_position_ = 0
    self.has_length_ = 0
    self.has_category_ = 0
    self.has_surface_ = 0
    self.has_value_ = 0
    self.has_probability_ = 0
    if contents is not None: self.MergeFromString(contents)

  def position(self): return self.position_

  def set_position(self, x):
    self.has_position_ = 1
    self.position_ = x

  def clear_position(self):
    self.has_position_ = 0
    self.position_ = 0

  def has_position(self): return self.has_position_

  def length(self): return self.length_

  def set_length(self, x):
    self.has_length_ = 1
    self.length_ = x

  def clear_length(self):
    self.has_length_ = 0
    self.length_ = 0

  def has_length(self): return self.has_length_

  def category(self): return self.category_

  def set_category(self, x):
    self.has_category_ = 1
    self.category_ = x

  def clear_category(self):
    self.has_category_ = 0
    self.category_ = 0

  def has_category(self): return self.has_category_

  def surface(self): return self.surface_

  def set_surface(self, x):
    self.has_surface_ = 1
    self.surface_ = x

  def clear_surface(self):
    self.has_surface_ = 0
    self.surface_ = ""

  def has_surface(self): return self.has_surface_

  def value(self): return self.value_

  def set_value(self, x):
    self.has_value_ = 1
    self.value_ = x

  def clear_value(self):
    self.has_value_ = 0
    self.value_ = ""

  def has_value(self): return self.has_value_

  def probability(self): return self.probability_

  def set_probability(self, x):
    self.has_probability_ = 1
    self.probability_ = x

  def clear_probability(self):
    self.has_probability_ = 0
    self.probability_ = 0.0

  def has_probability(self): return self.has_probability_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_position()): self.set_position(x.position())
    if (x.has_length()): self.set_length(x.length())
    if (x.has_category()): self.set_category(x.category())
    if (x.has_surface()): self.set_surface(x.surface())
    if (x.has_value()): self.set_value(x.value())
    if (x.has_probability()): self.set_probability(x.probability())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocsTag', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocsTag')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocsTag', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocsTag', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocsTag', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_position_ != x.has_position_: return 0
    if self.has_position_ and self.position_ != x.position_: return 0
    if self.has_length_ != x.has_length_: return 0
    if self.has_length_ and self.length_ != x.length_: return 0
    if self.has_category_ != x.has_category_: return 0
    if self.has_category_ and self.category_ != x.category_: return 0
    if self.has_surface_ != x.has_surface_: return 0
    if self.has_surface_ and self.surface_ != x.surface_: return 0
    if self.has_value_ != x.has_value_: return 0
    if self.has_value_ and self.value_ != x.value_: return 0
    if self.has_probability_ != x.has_probability_: return 0
    if self.has_probability_ and self.probability_ != x.probability_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_position_): n += 2 + self.lengthVarInt64(self.position_)
    if (self.has_length_): n += 2 + self.lengthVarInt64(self.length_)
    if (self.has_category_): n += 2 + self.lengthVarInt64(self.category_)
    if (self.has_surface_): n += 2 + self.lengthString(len(self.surface_))
    if (self.has_value_): n += 2 + self.lengthString(len(self.value_))
    if (self.has_probability_): n += 6
    return n + 0

  def Clear(self):
    self.clear_position()
    self.clear_length()
    self.clear_category()
    self.clear_surface()
    self.clear_value()
    self.clear_probability()

  def OutputUnchecked(self, out):
    if (self.has_position_):
      out.putVarInt32(736)
      out.putVarInt64(self.position_)
    if (self.has_length_):
      out.putVarInt32(744)
      out.putVarInt32(self.length_)
    if (self.has_category_):
      out.putVarInt32(752)
      out.putVarInt32(self.category_)
    if (self.has_surface_):
      out.putVarInt32(762)
      out.putPrefixedString(self.surface_)
    if (self.has_value_):
      out.putVarInt32(770)
      out.putPrefixedString(self.value_)
    if (self.has_probability_):
      out.putVarInt32(781)
      out.putFloat(self.probability_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 732: break
      if tt == 736:
        self.set_position(d.getVarInt64())
        continue
      if tt == 744:
        self.set_length(d.getVarInt32())
        continue
      if tt == 752:
        self.set_category(d.getVarInt32())
        continue
      if tt == 762:
        self.set_surface(d.getPrefixedString())
        continue
      if tt == 770:
        self.set_value(d.getPrefixedString())
        continue
      if tt == 781:
        self.set_probability(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_position_: res+=prefix+("Position: %s\n" % self.DebugFormatInt64(self.position_))
    if self.has_length_: res+=prefix+("Length: %s\n" % self.DebugFormatInt32(self.length_))
    if self.has_category_: res+=prefix+("Category: %s\n" % self.DebugFormatInt32(self.category_))
    if self.has_surface_: res+=prefix+("Surface: %s\n" % self.DebugFormatString(self.surface_))
    if self.has_value_: res+=prefix+("Value: %s\n" % self.DebugFormatString(self.value_))
    if self.has_probability_: res+=prefix+("Probability: %s\n" % self.DebugFormatFloat(self.probability_))
    return res

class DocsTag_ResultUsenetGuidThreadPairs(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.groupid_ = ""
    self.threadid_ = ""
    self.has_groupid_ = 0
    self.has_threadid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def groupid(self): return self.groupid_

  def set_groupid(self, x):
    self.has_groupid_ = 1
    self.groupid_ = x

  def clear_groupid(self):
    self.has_groupid_ = 0
    self.groupid_ = ""

  def has_groupid(self): return self.has_groupid_

  def threadid(self): return self.threadid_

  def set_threadid(self, x):
    self.has_threadid_ = 1
    self.threadid_ = x

  def clear_threadid(self):
    self.has_threadid_ = 0
    self.threadid_ = ""

  def has_threadid(self): return self.has_threadid_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_groupid()): self.set_groupid(x.groupid())
    if (x.has_threadid()): self.set_threadid(x.threadid())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocsTag', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocsTag')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocsTag', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocsTag', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocsTag', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_groupid_ != x.has_groupid_: return 0
    if self.has_groupid_ and self.groupid_ != x.groupid_: return 0
    if self.has_threadid_ != x.has_threadid_: return 0
    if self.has_threadid_ and self.threadid_ != x.threadid_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_groupid_): n += 2 + self.lengthString(len(self.groupid_))
    if (self.has_threadid_): n += 2 + self.lengthString(len(self.threadid_))
    return n + 0

  def Clear(self):
    self.clear_groupid()
    self.clear_threadid()

  def OutputUnchecked(self, out):
    if (self.has_groupid_):
      out.putVarInt32(890)
      out.putPrefixedString(self.groupid_)
    if (self.has_threadid_):
      out.putVarInt32(898)
      out.putPrefixedString(self.threadid_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 884: break
      if tt == 890:
        self.set_groupid(d.getPrefixedString())
        continue
      if tt == 898:
        self.set_threadid(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_groupid_: res+=prefix+("GroupId: %s\n" % self.DebugFormatString(self.groupid_))
    if self.has_threadid_: res+=prefix+("ThreadId: %s\n" % self.DebugFormatString(self.threadid_))
    return res

class DocsTag_ResultMultisnippet(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.snippet_ = ""
    self.metadata_ = ""
    self.has_snippet_ = 0
    self.has_metadata_ = 0
    if contents is not None: self.MergeFromString(contents)

  def snippet(self): return self.snippet_

  def set_snippet(self, x):
    self.has_snippet_ = 1
    self.snippet_ = x

  def clear_snippet(self):
    self.has_snippet_ = 0
    self.snippet_ = ""

  def has_snippet(self): return self.has_snippet_

  def metadata(self): return self.metadata_

  def set_metadata(self, x):
    self.has_metadata_ = 1
    self.metadata_ = x

  def clear_metadata(self):
    self.has_metadata_ = 0
    self.metadata_ = ""

  def has_metadata(self): return self.has_metadata_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_snippet()): self.set_snippet(x.snippet())
    if (x.has_metadata()): self.set_metadata(x.metadata())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocsTag', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocsTag')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocsTag', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocsTag', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocsTag', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_snippet_ != x.has_snippet_: return 0
    if self.has_snippet_ and self.snippet_ != x.snippet_: return 0
    if self.has_metadata_ != x.has_metadata_: return 0
    if self.has_metadata_ and self.metadata_ != x.metadata_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_snippet_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: snippet not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.snippet_))
    if (self.has_metadata_): n += 2 + self.lengthString(len(self.metadata_))
    return n + 2

  def Clear(self):
    self.clear_snippet()
    self.clear_metadata()

  def OutputUnchecked(self, out):
    out.putVarInt32(914)
    out.putPrefixedString(self.snippet_)
    if (self.has_metadata_):
      out.putVarInt32(922)
      out.putPrefixedString(self.metadata_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 908: break
      if tt == 914:
        self.set_snippet(d.getPrefixedString())
        continue
      if tt == 922:
        self.set_metadata(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_snippet_: res+=prefix+("snippet: %s\n" % self.DebugFormatString(self.snippet_))
    if self.has_metadata_: res+=prefix+("metadata: %s\n" % self.DebugFormatString(self.metadata_))
    return res

class DocsTag_Result(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.resultpos_ = 0
    self.docid_ = 0
    self.url_ = ""
    self.isempty_ = 0
    self.urlafterredirects_ = ""
    self.title_ = ""
    self.docversionid_ = 0
    self.snippets_ = ""
    self.snippetbylinedate_ = 0
    self.multisnippet_ = []
    self.sitemap_ = None
    self.localinfo_ = None
    self.manybox_ = None
    self.hasmessagetype_ = []
    self.debuginfo_ = ""
    self.snippetevents_ = 0
    self.snippethash_ = 0
    self.language_ = 0
    self.docencoding_ = 0
    self.contenttype_ = 0
    self.visualtype_ = 0
    self.responsecode_ = 0
    self.filter_ = 0
    self.pagelen_ = 0
    self.seennoarchive_ = 0
    self.seennosnippet_ = 0
    self.seennoindex_ = 0
    self.seennotterm_ = 0
    self.metatag_ = ""
    self.failssafesearch_ = 0
    self.outsidedaterange_ = 0
    self.lastmodtime_ = 0
    self.lastcrawltime_ = 0
    self.ipaddress_ = ""
    self.indexdataversion_ = ""
    self.filetypesearch_ = 0
    self.filetyperefurl_ = ""
    self.inlineimage_ = 0
    self.imagewidth_ = 0
    self.imageheight_ = 0
    self.imagesize_ = 0
    self.imagethumbnailwidth_ = 0
    self.imagethumbnailheight_ = 0
    self.imagethumbnailsize_ = 0
    self.body_ = ""
    self.bodylinesclipped_ = 0
    self.cachehighlightedterms_ = ""
    self.cachenonhighlightedterms_ = ""
    self.categoryresults_ = ""
    self.googlelabeldata_ = None
    self.usenetsubject_ = ""
    self.usenetauthorname_ = ""
    self.usenetauthoremail_ = ""
    self.usenetfollowupto_ = ""
    self.usenetmsgid_ = ""
    self.usenetdate_ = ""
    self.usenetreference_ = ""
    self.usenetnewsgroup_ = ""
    self.usenetguid_ = ""
    self.usenetguidthreadpairs_ = []
    self.filetypeid_ = 0
    self.deprecatedscanningsnippety_ = 0
    self.deprecatedscanningsnippetx_ = 0
    self.deprecatedscanningsnippetgeo_ = ""
    self.deprecatedscanningimagewidth_ = 0
    self.deprecatedscanningimageheight_ = 0
    self.deprecatedscanningimageusesmall_ = 0
    self.repptroffset_ = 0
    self.category_ = []
    self.qequestioncreatets_ = 0
    self.qemodifiedts_ = 0
    self.qeendts_ = 0
    self.qesubject_ = ""
    self.qeprice_ = 0.0
    self.qeratingvalue_ = 0
    self.qelastquestionuid_ = 0
    self.qelastansweruid_ = 0
    self.qeansweruserid_ = 0
    self.qeanswerusername_ = ""
    self.qequestionuserid_ = 0
    self.qequestionusername_ = ""
    self.qeisanswerable_ = 0
    self.qecatid_ = 0
    self.qeratingcomments_ = ""
    self.qelockowner_ = 0
    self.qenumcomments_ = 0
    self.qelockownerusername_ = ""
    self.secureid_ = ""
    self.froogleimgurl_ = []
    self.froogleselectedimgurl_ = ""
    self.froogleprice_ = ""
    self.froogleextractedprice_ = None
    self.frooglecategoryid_ = 0
    self.frooglemerchantid_ = ""
    self.entity_ = []
    self.science_ = None
    self.premium_ = None
    self.ocean_tag_ = None
    self.displayurl_ = ""
    self.c2c_direction_ = 0
    self.has_resultpos_ = 0
    self.has_docid_ = 0
    self.has_url_ = 0
    self.has_isempty_ = 0
    self.has_urlafterredirects_ = 0
    self.has_title_ = 0
    self.has_docversionid_ = 0
    self.has_snippets_ = 0
    self.has_snippetbylinedate_ = 0
    self.has_sitemap_ = 0
    self.has_localinfo_ = 0
    self.has_manybox_ = 0
    self.has_debuginfo_ = 0
    self.has_snippetevents_ = 0
    self.has_snippethash_ = 0
    self.has_language_ = 0
    self.has_docencoding_ = 0
    self.has_contenttype_ = 0
    self.has_visualtype_ = 0
    self.has_responsecode_ = 0
    self.has_filter_ = 0
    self.has_pagelen_ = 0
    self.has_seennoarchive_ = 0
    self.has_seennosnippet_ = 0
    self.has_seennoindex_ = 0
    self.has_seennotterm_ = 0
    self.has_metatag_ = 0
    self.has_failssafesearch_ = 0
    self.has_outsidedaterange_ = 0
    self.has_lastmodtime_ = 0
    self.has_lastcrawltime_ = 0
    self.has_ipaddress_ = 0
    self.has_indexdataversion_ = 0
    self.has_filetypesearch_ = 0
    self.has_filetyperefurl_ = 0
    self.has_inlineimage_ = 0
    self.has_imagewidth_ = 0
    self.has_imageheight_ = 0
    self.has_imagesize_ = 0
    self.has_imagethumbnailwidth_ = 0
    self.has_imagethumbnailheight_ = 0
    self.has_imagethumbnailsize_ = 0
    self.has_body_ = 0
    self.has_bodylinesclipped_ = 0
    self.has_cachehighlightedterms_ = 0
    self.has_cachenonhighlightedterms_ = 0
    self.has_categoryresults_ = 0
    self.has_googlelabeldata_ = 0
    self.has_usenetsubject_ = 0
    self.has_usenetauthorname_ = 0
    self.has_usenetauthoremail_ = 0
    self.has_usenetfollowupto_ = 0
    self.has_usenetmsgid_ = 0
    self.has_usenetdate_ = 0
    self.has_usenetreference_ = 0
    self.has_usenetnewsgroup_ = 0
    self.has_usenetguid_ = 0
    self.has_filetypeid_ = 0
    self.has_deprecatedscanningsnippety_ = 0
    self.has_deprecatedscanningsnippetx_ = 0
    self.has_deprecatedscanningsnippetgeo_ = 0
    self.has_deprecatedscanningimagewidth_ = 0
    self.has_deprecatedscanningimageheight_ = 0
    self.has_deprecatedscanningimageusesmall_ = 0
    self.has_repptroffset_ = 0
    self.has_qequestioncreatets_ = 0
    self.has_qemodifiedts_ = 0
    self.has_qeendts_ = 0
    self.has_qesubject_ = 0
    self.has_qeprice_ = 0
    self.has_qeratingvalue_ = 0
    self.has_qelastquestionuid_ = 0
    self.has_qelastansweruid_ = 0
    self.has_qeansweruserid_ = 0
    self.has_qeanswerusername_ = 0
    self.has_qequestionuserid_ = 0
    self.has_qequestionusername_ = 0
    self.has_qeisanswerable_ = 0
    self.has_qecatid_ = 0
    self.has_qeratingcomments_ = 0
    self.has_qelockowner_ = 0
    self.has_qenumcomments_ = 0
    self.has_qelockownerusername_ = 0
    self.has_secureid_ = 0
    self.has_froogleselectedimgurl_ = 0
    self.has_froogleprice_ = 0
    self.has_froogleextractedprice_ = 0
    self.has_frooglecategoryid_ = 0
    self.has_frooglemerchantid_ = 0
    self.has_science_ = 0
    self.has_premium_ = 0
    self.has_ocean_tag_ = 0
    self.has_displayurl_ = 0
    self.has_c2c_direction_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def resultpos(self): return self.resultpos_

  def set_resultpos(self, x):
    self.has_resultpos_ = 1
    self.resultpos_ = x

  def clear_resultpos(self):
    self.has_resultpos_ = 0
    self.resultpos_ = 0

  def has_resultpos(self): return self.has_resultpos_

  def docid(self): return self.docid_

  def set_docid(self, x):
    self.has_docid_ = 1
    self.docid_ = x

  def clear_docid(self):
    self.has_docid_ = 0
    self.docid_ = 0

  def has_docid(self): return self.has_docid_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def isempty(self): return self.isempty_

  def set_isempty(self, x):
    self.has_isempty_ = 1
    self.isempty_ = x

  def clear_isempty(self):
    self.has_isempty_ = 0
    self.isempty_ = 0

  def has_isempty(self): return self.has_isempty_

  def urlafterredirects(self): return self.urlafterredirects_

  def set_urlafterredirects(self, x):
    self.has_urlafterredirects_ = 1
    self.urlafterredirects_ = x

  def clear_urlafterredirects(self):
    self.has_urlafterredirects_ = 0
    self.urlafterredirects_ = ""

  def has_urlafterredirects(self): return self.has_urlafterredirects_

  def title(self): return self.title_

  def set_title(self, x):
    self.has_title_ = 1
    self.title_ = x

  def clear_title(self):
    self.has_title_ = 0
    self.title_ = ""

  def has_title(self): return self.has_title_

  def docversionid(self): return self.docversionid_

  def set_docversionid(self, x):
    self.has_docversionid_ = 1
    self.docversionid_ = x

  def clear_docversionid(self):
    self.has_docversionid_ = 0
    self.docversionid_ = 0

  def has_docversionid(self): return self.has_docversionid_

  def snippets(self): return self.snippets_

  def set_snippets(self, x):
    self.has_snippets_ = 1
    self.snippets_ = x

  def clear_snippets(self):
    self.has_snippets_ = 0
    self.snippets_ = ""

  def has_snippets(self): return self.has_snippets_

  def snippetbylinedate(self): return self.snippetbylinedate_

  def set_snippetbylinedate(self, x):
    self.has_snippetbylinedate_ = 1
    self.snippetbylinedate_ = x

  def clear_snippetbylinedate(self):
    self.has_snippetbylinedate_ = 0
    self.snippetbylinedate_ = 0

  def has_snippetbylinedate(self): return self.has_snippetbylinedate_

  def multisnippet_size(self): return len(self.multisnippet_)
  def multisnippet_list(self): return self.multisnippet_

  def multisnippet(self, i):
    return self.multisnippet_[i]

  def mutable_multisnippet(self, i):
    return self.multisnippet_[i]

  def add_multisnippet(self):
    x = DocsTag_ResultMultisnippet()
    self.multisnippet_.append(x)
    return x

  def clear_multisnippet(self):
    self.multisnippet_ = []
  def sitemap(self):
    if self.sitemap_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.sitemap_ is None: self.sitemap_ = Sitemap()
      finally:
        self.lazy_init_lock_.release()
    return self.sitemap_

  def mutable_sitemap(self): self.has_sitemap_ = 1; return self.sitemap()

  def clear_sitemap(self):
    #Warning: this method does not acquire the lock.
    self.has_sitemap_ = 0;
    if self.sitemap_ is not None: self.sitemap_.Clear()

  def has_sitemap(self): return self.has_sitemap_

  def localinfo(self):
    if self.localinfo_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.localinfo_ is None: self.localinfo_ = LocalWWWInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.localinfo_

  def mutable_localinfo(self): self.has_localinfo_ = 1; return self.localinfo()

  def clear_localinfo(self):
    #Warning: this method does not acquire the lock.
    self.has_localinfo_ = 0;
    if self.localinfo_ is not None: self.localinfo_.Clear()

  def has_localinfo(self): return self.has_localinfo_

  def manybox(self):
    if self.manybox_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.manybox_ is None: self.manybox_ = ManyboxData()
      finally:
        self.lazy_init_lock_.release()
    return self.manybox_

  def mutable_manybox(self): self.has_manybox_ = 1; return self.manybox()

  def clear_manybox(self):
    #Warning: this method does not acquire the lock.
    self.has_manybox_ = 0;
    if self.manybox_ is not None: self.manybox_.Clear()

  def has_manybox(self): return self.has_manybox_

  def hasmessagetype_size(self): return len(self.hasmessagetype_)
  def hasmessagetype_list(self): return self.hasmessagetype_

  def hasmessagetype(self, i):
    return self.hasmessagetype_[i]

  def set_hasmessagetype(self, i, x):
    self.hasmessagetype_[i] = x

  def add_hasmessagetype(self, x):
    self.hasmessagetype_.append(x)

  def clear_hasmessagetype(self):
    self.hasmessagetype_ = []

  def debuginfo(self): return self.debuginfo_

  def set_debuginfo(self, x):
    self.has_debuginfo_ = 1
    self.debuginfo_ = x

  def clear_debuginfo(self):
    self.has_debuginfo_ = 0
    self.debuginfo_ = ""

  def has_debuginfo(self): return self.has_debuginfo_

  def snippetevents(self): return self.snippetevents_

  def set_snippetevents(self, x):
    self.has_snippetevents_ = 1
    self.snippetevents_ = x

  def clear_snippetevents(self):
    self.has_snippetevents_ = 0
    self.snippetevents_ = 0

  def has_snippetevents(self): return self.has_snippetevents_

  def snippethash(self): return self.snippethash_

  def set_snippethash(self, x):
    self.has_snippethash_ = 1
    self.snippethash_ = x

  def clear_snippethash(self):
    self.has_snippethash_ = 0
    self.snippethash_ = 0

  def has_snippethash(self): return self.has_snippethash_

  def language(self): return self.language_

  def set_language(self, x):
    self.has_language_ = 1
    self.language_ = x

  def clear_language(self):
    self.has_language_ = 0
    self.language_ = 0

  def has_language(self): return self.has_language_

  def docencoding(self): return self.docencoding_

  def set_docencoding(self, x):
    self.has_docencoding_ = 1
    self.docencoding_ = x

  def clear_docencoding(self):
    self.has_docencoding_ = 0
    self.docencoding_ = 0

  def has_docencoding(self): return self.has_docencoding_

  def contenttype(self): return self.contenttype_

  def set_contenttype(self, x):
    self.has_contenttype_ = 1
    self.contenttype_ = x

  def clear_contenttype(self):
    self.has_contenttype_ = 0
    self.contenttype_ = 0

  def has_contenttype(self): return self.has_contenttype_

  def visualtype(self): return self.visualtype_

  def set_visualtype(self, x):
    self.has_visualtype_ = 1
    self.visualtype_ = x

  def clear_visualtype(self):
    self.has_visualtype_ = 0
    self.visualtype_ = 0

  def has_visualtype(self): return self.has_visualtype_

  def responsecode(self): return self.responsecode_

  def set_responsecode(self, x):
    self.has_responsecode_ = 1
    self.responsecode_ = x

  def clear_responsecode(self):
    self.has_responsecode_ = 0
    self.responsecode_ = 0

  def has_responsecode(self): return self.has_responsecode_

  def filter(self): return self.filter_

  def set_filter(self, x):
    self.has_filter_ = 1
    self.filter_ = x

  def clear_filter(self):
    self.has_filter_ = 0
    self.filter_ = 0

  def has_filter(self): return self.has_filter_

  def pagelen(self): return self.pagelen_

  def set_pagelen(self, x):
    self.has_pagelen_ = 1
    self.pagelen_ = x

  def clear_pagelen(self):
    self.has_pagelen_ = 0
    self.pagelen_ = 0

  def has_pagelen(self): return self.has_pagelen_

  def seennoarchive(self): return self.seennoarchive_

  def set_seennoarchive(self, x):
    self.has_seennoarchive_ = 1
    self.seennoarchive_ = x

  def clear_seennoarchive(self):
    self.has_seennoarchive_ = 0
    self.seennoarchive_ = 0

  def has_seennoarchive(self): return self.has_seennoarchive_

  def seennosnippet(self): return self.seennosnippet_

  def set_seennosnippet(self, x):
    self.has_seennosnippet_ = 1
    self.seennosnippet_ = x

  def clear_seennosnippet(self):
    self.has_seennosnippet_ = 0
    self.seennosnippet_ = 0

  def has_seennosnippet(self): return self.has_seennosnippet_

  def seennoindex(self): return self.seennoindex_

  def set_seennoindex(self, x):
    self.has_seennoindex_ = 1
    self.seennoindex_ = x

  def clear_seennoindex(self):
    self.has_seennoindex_ = 0
    self.seennoindex_ = 0

  def has_seennoindex(self): return self.has_seennoindex_

  def seennotterm(self): return self.seennotterm_

  def set_seennotterm(self, x):
    self.has_seennotterm_ = 1
    self.seennotterm_ = x

  def clear_seennotterm(self):
    self.has_seennotterm_ = 0
    self.seennotterm_ = 0

  def has_seennotterm(self): return self.has_seennotterm_

  def metatag(self): return self.metatag_

  def set_metatag(self, x):
    self.has_metatag_ = 1
    self.metatag_ = x

  def clear_metatag(self):
    self.has_metatag_ = 0
    self.metatag_ = ""

  def has_metatag(self): return self.has_metatag_

  def failssafesearch(self): return self.failssafesearch_

  def set_failssafesearch(self, x):
    self.has_failssafesearch_ = 1
    self.failssafesearch_ = x

  def clear_failssafesearch(self):
    self.has_failssafesearch_ = 0
    self.failssafesearch_ = 0

  def has_failssafesearch(self): return self.has_failssafesearch_

  def outsidedaterange(self): return self.outsidedaterange_

  def set_outsidedaterange(self, x):
    self.has_outsidedaterange_ = 1
    self.outsidedaterange_ = x

  def clear_outsidedaterange(self):
    self.has_outsidedaterange_ = 0
    self.outsidedaterange_ = 0

  def has_outsidedaterange(self): return self.has_outsidedaterange_

  def lastmodtime(self): return self.lastmodtime_

  def set_lastmodtime(self, x):
    self.has_lastmodtime_ = 1
    self.lastmodtime_ = x

  def clear_lastmodtime(self):
    self.has_lastmodtime_ = 0
    self.lastmodtime_ = 0

  def has_lastmodtime(self): return self.has_lastmodtime_

  def lastcrawltime(self): return self.lastcrawltime_

  def set_lastcrawltime(self, x):
    self.has_lastcrawltime_ = 1
    self.lastcrawltime_ = x

  def clear_lastcrawltime(self):
    self.has_lastcrawltime_ = 0
    self.lastcrawltime_ = 0

  def has_lastcrawltime(self): return self.has_lastcrawltime_

  def ipaddress(self): return self.ipaddress_

  def set_ipaddress(self, x):
    self.has_ipaddress_ = 1
    self.ipaddress_ = x

  def clear_ipaddress(self):
    self.has_ipaddress_ = 0
    self.ipaddress_ = ""

  def has_ipaddress(self): return self.has_ipaddress_

  def indexdataversion(self): return self.indexdataversion_

  def set_indexdataversion(self, x):
    self.has_indexdataversion_ = 1
    self.indexdataversion_ = x

  def clear_indexdataversion(self):
    self.has_indexdataversion_ = 0
    self.indexdataversion_ = ""

  def has_indexdataversion(self): return self.has_indexdataversion_

  def filetypesearch(self): return self.filetypesearch_

  def set_filetypesearch(self, x):
    self.has_filetypesearch_ = 1
    self.filetypesearch_ = x

  def clear_filetypesearch(self):
    self.has_filetypesearch_ = 0
    self.filetypesearch_ = 0

  def has_filetypesearch(self): return self.has_filetypesearch_

  def filetyperefurl(self): return self.filetyperefurl_

  def set_filetyperefurl(self, x):
    self.has_filetyperefurl_ = 1
    self.filetyperefurl_ = x

  def clear_filetyperefurl(self):
    self.has_filetyperefurl_ = 0
    self.filetyperefurl_ = ""

  def has_filetyperefurl(self): return self.has_filetyperefurl_

  def inlineimage(self): return self.inlineimage_

  def set_inlineimage(self, x):
    self.has_inlineimage_ = 1
    self.inlineimage_ = x

  def clear_inlineimage(self):
    self.has_inlineimage_ = 0
    self.inlineimage_ = 0

  def has_inlineimage(self): return self.has_inlineimage_

  def imagewidth(self): return self.imagewidth_

  def set_imagewidth(self, x):
    self.has_imagewidth_ = 1
    self.imagewidth_ = x

  def clear_imagewidth(self):
    self.has_imagewidth_ = 0
    self.imagewidth_ = 0

  def has_imagewidth(self): return self.has_imagewidth_

  def imageheight(self): return self.imageheight_

  def set_imageheight(self, x):
    self.has_imageheight_ = 1
    self.imageheight_ = x

  def clear_imageheight(self):
    self.has_imageheight_ = 0
    self.imageheight_ = 0

  def has_imageheight(self): return self.has_imageheight_

  def imagesize(self): return self.imagesize_

  def set_imagesize(self, x):
    self.has_imagesize_ = 1
    self.imagesize_ = x

  def clear_imagesize(self):
    self.has_imagesize_ = 0
    self.imagesize_ = 0

  def has_imagesize(self): return self.has_imagesize_

  def imagethumbnailwidth(self): return self.imagethumbnailwidth_

  def set_imagethumbnailwidth(self, x):
    self.has_imagethumbnailwidth_ = 1
    self.imagethumbnailwidth_ = x

  def clear_imagethumbnailwidth(self):
    self.has_imagethumbnailwidth_ = 0
    self.imagethumbnailwidth_ = 0

  def has_imagethumbnailwidth(self): return self.has_imagethumbnailwidth_

  def imagethumbnailheight(self): return self.imagethumbnailheight_

  def set_imagethumbnailheight(self, x):
    self.has_imagethumbnailheight_ = 1
    self.imagethumbnailheight_ = x

  def clear_imagethumbnailheight(self):
    self.has_imagethumbnailheight_ = 0
    self.imagethumbnailheight_ = 0

  def has_imagethumbnailheight(self): return self.has_imagethumbnailheight_

  def imagethumbnailsize(self): return self.imagethumbnailsize_

  def set_imagethumbnailsize(self, x):
    self.has_imagethumbnailsize_ = 1
    self.imagethumbnailsize_ = x

  def clear_imagethumbnailsize(self):
    self.has_imagethumbnailsize_ = 0
    self.imagethumbnailsize_ = 0

  def has_imagethumbnailsize(self): return self.has_imagethumbnailsize_

  def body(self): return self.body_

  def set_body(self, x):
    self.has_body_ = 1
    self.body_ = x

  def clear_body(self):
    self.has_body_ = 0
    self.body_ = ""

  def has_body(self): return self.has_body_

  def bodylinesclipped(self): return self.bodylinesclipped_

  def set_bodylinesclipped(self, x):
    self.has_bodylinesclipped_ = 1
    self.bodylinesclipped_ = x

  def clear_bodylinesclipped(self):
    self.has_bodylinesclipped_ = 0
    self.bodylinesclipped_ = 0

  def has_bodylinesclipped(self): return self.has_bodylinesclipped_

  def cachehighlightedterms(self): return self.cachehighlightedterms_

  def set_cachehighlightedterms(self, x):
    self.has_cachehighlightedterms_ = 1
    self.cachehighlightedterms_ = x

  def clear_cachehighlightedterms(self):
    self.has_cachehighlightedterms_ = 0
    self.cachehighlightedterms_ = ""

  def has_cachehighlightedterms(self): return self.has_cachehighlightedterms_

  def cachenonhighlightedterms(self): return self.cachenonhighlightedterms_

  def set_cachenonhighlightedterms(self, x):
    self.has_cachenonhighlightedterms_ = 1
    self.cachenonhighlightedterms_ = x

  def clear_cachenonhighlightedterms(self):
    self.has_cachenonhighlightedterms_ = 0
    self.cachenonhighlightedterms_ = ""

  def has_cachenonhighlightedterms(self): return self.has_cachenonhighlightedterms_

  def categoryresults(self): return self.categoryresults_

  def set_categoryresults(self, x):
    self.has_categoryresults_ = 1
    self.categoryresults_ = x

  def clear_categoryresults(self):
    self.has_categoryresults_ = 0
    self.categoryresults_ = ""

  def has_categoryresults(self): return self.has_categoryresults_

  def googlelabeldata(self):
    if self.googlelabeldata_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.googlelabeldata_ is None: self.googlelabeldata_ = GoogleLabelData()
      finally:
        self.lazy_init_lock_.release()
    return self.googlelabeldata_

  def mutable_googlelabeldata(self): self.has_googlelabeldata_ = 1; return self.googlelabeldata()

  def clear_googlelabeldata(self):
    #Warning: this method does not acquire the lock.
    self.has_googlelabeldata_ = 0;
    if self.googlelabeldata_ is not None: self.googlelabeldata_.Clear()

  def has_googlelabeldata(self): return self.has_googlelabeldata_

  def usenetsubject(self): return self.usenetsubject_

  def set_usenetsubject(self, x):
    self.has_usenetsubject_ = 1
    self.usenetsubject_ = x

  def clear_usenetsubject(self):
    self.has_usenetsubject_ = 0
    self.usenetsubject_ = ""

  def has_usenetsubject(self): return self.has_usenetsubject_

  def usenetauthorname(self): return self.usenetauthorname_

  def set_usenetauthorname(self, x):
    self.has_usenetauthorname_ = 1
    self.usenetauthorname_ = x

  def clear_usenetauthorname(self):
    self.has_usenetauthorname_ = 0
    self.usenetauthorname_ = ""

  def has_usenetauthorname(self): return self.has_usenetauthorname_

  def usenetauthoremail(self): return self.usenetauthoremail_

  def set_usenetauthoremail(self, x):
    self.has_usenetauthoremail_ = 1
    self.usenetauthoremail_ = x

  def clear_usenetauthoremail(self):
    self.has_usenetauthoremail_ = 0
    self.usenetauthoremail_ = ""

  def has_usenetauthoremail(self): return self.has_usenetauthoremail_

  def usenetfollowupto(self): return self.usenetfollowupto_

  def set_usenetfollowupto(self, x):
    self.has_usenetfollowupto_ = 1
    self.usenetfollowupto_ = x

  def clear_usenetfollowupto(self):
    self.has_usenetfollowupto_ = 0
    self.usenetfollowupto_ = ""

  def has_usenetfollowupto(self): return self.has_usenetfollowupto_

  def usenetmsgid(self): return self.usenetmsgid_

  def set_usenetmsgid(self, x):
    self.has_usenetmsgid_ = 1
    self.usenetmsgid_ = x

  def clear_usenetmsgid(self):
    self.has_usenetmsgid_ = 0
    self.usenetmsgid_ = ""

  def has_usenetmsgid(self): return self.has_usenetmsgid_

  def usenetdate(self): return self.usenetdate_

  def set_usenetdate(self, x):
    self.has_usenetdate_ = 1
    self.usenetdate_ = x

  def clear_usenetdate(self):
    self.has_usenetdate_ = 0
    self.usenetdate_ = ""

  def has_usenetdate(self): return self.has_usenetdate_

  def usenetreference(self): return self.usenetreference_

  def set_usenetreference(self, x):
    self.has_usenetreference_ = 1
    self.usenetreference_ = x

  def clear_usenetreference(self):
    self.has_usenetreference_ = 0
    self.usenetreference_ = ""

  def has_usenetreference(self): return self.has_usenetreference_

  def usenetnewsgroup(self): return self.usenetnewsgroup_

  def set_usenetnewsgroup(self, x):
    self.has_usenetnewsgroup_ = 1
    self.usenetnewsgroup_ = x

  def clear_usenetnewsgroup(self):
    self.has_usenetnewsgroup_ = 0
    self.usenetnewsgroup_ = ""

  def has_usenetnewsgroup(self): return self.has_usenetnewsgroup_

  def usenetguid(self): return self.usenetguid_

  def set_usenetguid(self, x):
    self.has_usenetguid_ = 1
    self.usenetguid_ = x

  def clear_usenetguid(self):
    self.has_usenetguid_ = 0
    self.usenetguid_ = ""

  def has_usenetguid(self): return self.has_usenetguid_

  def usenetguidthreadpairs_size(self): return len(self.usenetguidthreadpairs_)
  def usenetguidthreadpairs_list(self): return self.usenetguidthreadpairs_

  def usenetguidthreadpairs(self, i):
    return self.usenetguidthreadpairs_[i]

  def mutable_usenetguidthreadpairs(self, i):
    return self.usenetguidthreadpairs_[i]

  def add_usenetguidthreadpairs(self):
    x = DocsTag_ResultUsenetGuidThreadPairs()
    self.usenetguidthreadpairs_.append(x)
    return x

  def clear_usenetguidthreadpairs(self):
    self.usenetguidthreadpairs_ = []
  def filetypeid(self): return self.filetypeid_

  def set_filetypeid(self, x):
    self.has_filetypeid_ = 1
    self.filetypeid_ = x

  def clear_filetypeid(self):
    self.has_filetypeid_ = 0
    self.filetypeid_ = 0

  def has_filetypeid(self): return self.has_filetypeid_

  def deprecatedscanningsnippety(self): return self.deprecatedscanningsnippety_

  def set_deprecatedscanningsnippety(self, x):
    self.has_deprecatedscanningsnippety_ = 1
    self.deprecatedscanningsnippety_ = x

  def clear_deprecatedscanningsnippety(self):
    self.has_deprecatedscanningsnippety_ = 0
    self.deprecatedscanningsnippety_ = 0

  def has_deprecatedscanningsnippety(self): return self.has_deprecatedscanningsnippety_

  def deprecatedscanningsnippetx(self): return self.deprecatedscanningsnippetx_

  def set_deprecatedscanningsnippetx(self, x):
    self.has_deprecatedscanningsnippetx_ = 1
    self.deprecatedscanningsnippetx_ = x

  def clear_deprecatedscanningsnippetx(self):
    self.has_deprecatedscanningsnippetx_ = 0
    self.deprecatedscanningsnippetx_ = 0

  def has_deprecatedscanningsnippetx(self): return self.has_deprecatedscanningsnippetx_

  def deprecatedscanningsnippetgeo(self): return self.deprecatedscanningsnippetgeo_

  def set_deprecatedscanningsnippetgeo(self, x):
    self.has_deprecatedscanningsnippetgeo_ = 1
    self.deprecatedscanningsnippetgeo_ = x

  def clear_deprecatedscanningsnippetgeo(self):
    self.has_deprecatedscanningsnippetgeo_ = 0
    self.deprecatedscanningsnippetgeo_ = ""

  def has_deprecatedscanningsnippetgeo(self): return self.has_deprecatedscanningsnippetgeo_

  def deprecatedscanningimagewidth(self): return self.deprecatedscanningimagewidth_

  def set_deprecatedscanningimagewidth(self, x):
    self.has_deprecatedscanningimagewidth_ = 1
    self.deprecatedscanningimagewidth_ = x

  def clear_deprecatedscanningimagewidth(self):
    self.has_deprecatedscanningimagewidth_ = 0
    self.deprecatedscanningimagewidth_ = 0

  def has_deprecatedscanningimagewidth(self): return self.has_deprecatedscanningimagewidth_

  def deprecatedscanningimageheight(self): return self.deprecatedscanningimageheight_

  def set_deprecatedscanningimageheight(self, x):
    self.has_deprecatedscanningimageheight_ = 1
    self.deprecatedscanningimageheight_ = x

  def clear_deprecatedscanningimageheight(self):
    self.has_deprecatedscanningimageheight_ = 0
    self.deprecatedscanningimageheight_ = 0

  def has_deprecatedscanningimageheight(self): return self.has_deprecatedscanningimageheight_

  def deprecatedscanningimageusesmall(self): return self.deprecatedscanningimageusesmall_

  def set_deprecatedscanningimageusesmall(self, x):
    self.has_deprecatedscanningimageusesmall_ = 1
    self.deprecatedscanningimageusesmall_ = x

  def clear_deprecatedscanningimageusesmall(self):
    self.has_deprecatedscanningimageusesmall_ = 0
    self.deprecatedscanningimageusesmall_ = 0

  def has_deprecatedscanningimageusesmall(self): return self.has_deprecatedscanningimageusesmall_

  def repptroffset(self): return self.repptroffset_

  def set_repptroffset(self, x):
    self.has_repptroffset_ = 1
    self.repptroffset_ = x

  def clear_repptroffset(self):
    self.has_repptroffset_ = 0
    self.repptroffset_ = 0

  def has_repptroffset(self): return self.has_repptroffset_

  def category_size(self): return len(self.category_)
  def category_list(self): return self.category_

  def category(self, i):
    return self.category_[i]

  def mutable_category(self, i):
    return self.category_[i]

  def add_category(self):
    x = DocsTag_ResultCategory()
    self.category_.append(x)
    return x

  def clear_category(self):
    self.category_ = []
  def qequestioncreatets(self): return self.qequestioncreatets_

  def set_qequestioncreatets(self, x):
    self.has_qequestioncreatets_ = 1
    self.qequestioncreatets_ = x

  def clear_qequestioncreatets(self):
    self.has_qequestioncreatets_ = 0
    self.qequestioncreatets_ = 0

  def has_qequestioncreatets(self): return self.has_qequestioncreatets_

  def qemodifiedts(self): return self.qemodifiedts_

  def set_qemodifiedts(self, x):
    self.has_qemodifiedts_ = 1
    self.qemodifiedts_ = x

  def clear_qemodifiedts(self):
    self.has_qemodifiedts_ = 0
    self.qemodifiedts_ = 0

  def has_qemodifiedts(self): return self.has_qemodifiedts_

  def qeendts(self): return self.qeendts_

  def set_qeendts(self, x):
    self.has_qeendts_ = 1
    self.qeendts_ = x

  def clear_qeendts(self):
    self.has_qeendts_ = 0
    self.qeendts_ = 0

  def has_qeendts(self): return self.has_qeendts_

  def qesubject(self): return self.qesubject_

  def set_qesubject(self, x):
    self.has_qesubject_ = 1
    self.qesubject_ = x

  def clear_qesubject(self):
    self.has_qesubject_ = 0
    self.qesubject_ = ""

  def has_qesubject(self): return self.has_qesubject_

  def qeprice(self): return self.qeprice_

  def set_qeprice(self, x):
    self.has_qeprice_ = 1
    self.qeprice_ = x

  def clear_qeprice(self):
    self.has_qeprice_ = 0
    self.qeprice_ = 0.0

  def has_qeprice(self): return self.has_qeprice_

  def qeratingvalue(self): return self.qeratingvalue_

  def set_qeratingvalue(self, x):
    self.has_qeratingvalue_ = 1
    self.qeratingvalue_ = x

  def clear_qeratingvalue(self):
    self.has_qeratingvalue_ = 0
    self.qeratingvalue_ = 0

  def has_qeratingvalue(self): return self.has_qeratingvalue_

  def qelastquestionuid(self): return self.qelastquestionuid_

  def set_qelastquestionuid(self, x):
    self.has_qelastquestionuid_ = 1
    self.qelastquestionuid_ = x

  def clear_qelastquestionuid(self):
    self.has_qelastquestionuid_ = 0
    self.qelastquestionuid_ = 0

  def has_qelastquestionuid(self): return self.has_qelastquestionuid_

  def qelastansweruid(self): return self.qelastansweruid_

  def set_qelastansweruid(self, x):
    self.has_qelastansweruid_ = 1
    self.qelastansweruid_ = x

  def clear_qelastansweruid(self):
    self.has_qelastansweruid_ = 0
    self.qelastansweruid_ = 0

  def has_qelastansweruid(self): return self.has_qelastansweruid_

  def qeansweruserid(self): return self.qeansweruserid_

  def set_qeansweruserid(self, x):
    self.has_qeansweruserid_ = 1
    self.qeansweruserid_ = x

  def clear_qeansweruserid(self):
    self.has_qeansweruserid_ = 0
    self.qeansweruserid_ = 0

  def has_qeansweruserid(self): return self.has_qeansweruserid_

  def qeanswerusername(self): return self.qeanswerusername_

  def set_qeanswerusername(self, x):
    self.has_qeanswerusername_ = 1
    self.qeanswerusername_ = x

  def clear_qeanswerusername(self):
    self.has_qeanswerusername_ = 0
    self.qeanswerusername_ = ""

  def has_qeanswerusername(self): return self.has_qeanswerusername_

  def qequestionuserid(self): return self.qequestionuserid_

  def set_qequestionuserid(self, x):
    self.has_qequestionuserid_ = 1
    self.qequestionuserid_ = x

  def clear_qequestionuserid(self):
    self.has_qequestionuserid_ = 0
    self.qequestionuserid_ = 0

  def has_qequestionuserid(self): return self.has_qequestionuserid_

  def qequestionusername(self): return self.qequestionusername_

  def set_qequestionusername(self, x):
    self.has_qequestionusername_ = 1
    self.qequestionusername_ = x

  def clear_qequestionusername(self):
    self.has_qequestionusername_ = 0
    self.qequestionusername_ = ""

  def has_qequestionusername(self): return self.has_qequestionusername_

  def qeisanswerable(self): return self.qeisanswerable_

  def set_qeisanswerable(self, x):
    self.has_qeisanswerable_ = 1
    self.qeisanswerable_ = x

  def clear_qeisanswerable(self):
    self.has_qeisanswerable_ = 0
    self.qeisanswerable_ = 0

  def has_qeisanswerable(self): return self.has_qeisanswerable_

  def qecatid(self): return self.qecatid_

  def set_qecatid(self, x):
    self.has_qecatid_ = 1
    self.qecatid_ = x

  def clear_qecatid(self):
    self.has_qecatid_ = 0
    self.qecatid_ = 0

  def has_qecatid(self): return self.has_qecatid_

  def qeratingcomments(self): return self.qeratingcomments_

  def set_qeratingcomments(self, x):
    self.has_qeratingcomments_ = 1
    self.qeratingcomments_ = x

  def clear_qeratingcomments(self):
    self.has_qeratingcomments_ = 0
    self.qeratingcomments_ = ""

  def has_qeratingcomments(self): return self.has_qeratingcomments_

  def qelockowner(self): return self.qelockowner_

  def set_qelockowner(self, x):
    self.has_qelockowner_ = 1
    self.qelockowner_ = x

  def clear_qelockowner(self):
    self.has_qelockowner_ = 0
    self.qelockowner_ = 0

  def has_qelockowner(self): return self.has_qelockowner_

  def qenumcomments(self): return self.qenumcomments_

  def set_qenumcomments(self, x):
    self.has_qenumcomments_ = 1
    self.qenumcomments_ = x

  def clear_qenumcomments(self):
    self.has_qenumcomments_ = 0
    self.qenumcomments_ = 0

  def has_qenumcomments(self): return self.has_qenumcomments_

  def qelockownerusername(self): return self.qelockownerusername_

  def set_qelockownerusername(self, x):
    self.has_qelockownerusername_ = 1
    self.qelockownerusername_ = x

  def clear_qelockownerusername(self):
    self.has_qelockownerusername_ = 0
    self.qelockownerusername_ = ""

  def has_qelockownerusername(self): return self.has_qelockownerusername_

  def secureid(self): return self.secureid_

  def set_secureid(self, x):
    self.has_secureid_ = 1
    self.secureid_ = x

  def clear_secureid(self):
    self.has_secureid_ = 0
    self.secureid_ = ""

  def has_secureid(self): return self.has_secureid_

  def froogleimgurl_size(self): return len(self.froogleimgurl_)
  def froogleimgurl_list(self): return self.froogleimgurl_

  def froogleimgurl(self, i):
    return self.froogleimgurl_[i]

  def set_froogleimgurl(self, i, x):
    self.froogleimgurl_[i] = x

  def add_froogleimgurl(self, x):
    self.froogleimgurl_.append(x)

  def clear_froogleimgurl(self):
    self.froogleimgurl_ = []

  def froogleselectedimgurl(self): return self.froogleselectedimgurl_

  def set_froogleselectedimgurl(self, x):
    self.has_froogleselectedimgurl_ = 1
    self.froogleselectedimgurl_ = x

  def clear_froogleselectedimgurl(self):
    self.has_froogleselectedimgurl_ = 0
    self.froogleselectedimgurl_ = ""

  def has_froogleselectedimgurl(self): return self.has_froogleselectedimgurl_

  def froogleprice(self): return self.froogleprice_

  def set_froogleprice(self, x):
    self.has_froogleprice_ = 1
    self.froogleprice_ = x

  def clear_froogleprice(self):
    self.has_froogleprice_ = 0
    self.froogleprice_ = ""

  def has_froogleprice(self): return self.has_froogleprice_

  def froogleextractedprice(self):
    if self.froogleextractedprice_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.froogleextractedprice_ is None: self.froogleextractedprice_ = FrooglePrice()
      finally:
        self.lazy_init_lock_.release()
    return self.froogleextractedprice_

  def mutable_froogleextractedprice(self): self.has_froogleextractedprice_ = 1; return self.froogleextractedprice()

  def clear_froogleextractedprice(self):
    #Warning: this method does not acquire the lock.
    self.has_froogleextractedprice_ = 0;
    if self.froogleextractedprice_ is not None: self.froogleextractedprice_.Clear()

  def has_froogleextractedprice(self): return self.has_froogleextractedprice_

  def frooglecategoryid(self): return self.frooglecategoryid_

  def set_frooglecategoryid(self, x):
    self.has_frooglecategoryid_ = 1
    self.frooglecategoryid_ = x

  def clear_frooglecategoryid(self):
    self.has_frooglecategoryid_ = 0
    self.frooglecategoryid_ = 0

  def has_frooglecategoryid(self): return self.has_frooglecategoryid_

  def frooglemerchantid(self): return self.frooglemerchantid_

  def set_frooglemerchantid(self, x):
    self.has_frooglemerchantid_ = 1
    self.frooglemerchantid_ = x

  def clear_frooglemerchantid(self):
    self.has_frooglemerchantid_ = 0
    self.frooglemerchantid_ = ""

  def has_frooglemerchantid(self): return self.has_frooglemerchantid_

  def entity_size(self): return len(self.entity_)
  def entity_list(self): return self.entity_

  def entity(self, i):
    return self.entity_[i]

  def mutable_entity(self, i):
    return self.entity_[i]

  def add_entity(self):
    x = DocsTag_ResultEntity()
    self.entity_.append(x)
    return x

  def clear_entity(self):
    self.entity_ = []
  def science(self):
    if self.science_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.science_ is None: self.science_ = ScienceCitation()
      finally:
        self.lazy_init_lock_.release()
    return self.science_

  def mutable_science(self): self.has_science_ = 1; return self.science()

  def clear_science(self):
    #Warning: this method does not acquire the lock.
    self.has_science_ = 0;
    if self.science_ is not None: self.science_.Clear()

  def has_science(self): return self.has_science_

  def premium(self):
    if self.premium_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.premium_ is None: self.premium_ = PremiumArticleInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.premium_

  def mutable_premium(self): self.has_premium_ = 1; return self.premium()

  def clear_premium(self):
    #Warning: this method does not acquire the lock.
    self.has_premium_ = 0;
    if self.premium_ is not None: self.premium_.Clear()

  def has_premium(self): return self.has_premium_

  def ocean_tag(self):
    if self.ocean_tag_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.ocean_tag_ is None: self.ocean_tag_ = OceanDocTag()
      finally:
        self.lazy_init_lock_.release()
    return self.ocean_tag_

  def mutable_ocean_tag(self): self.has_ocean_tag_ = 1; return self.ocean_tag()

  def clear_ocean_tag(self):
    #Warning: this method does not acquire the lock.
    self.has_ocean_tag_ = 0;
    if self.ocean_tag_ is not None: self.ocean_tag_.Clear()

  def has_ocean_tag(self): return self.has_ocean_tag_

  def displayurl(self): return self.displayurl_

  def set_displayurl(self, x):
    self.has_displayurl_ = 1
    self.displayurl_ = x

  def clear_displayurl(self):
    self.has_displayurl_ = 0
    self.displayurl_ = ""

  def has_displayurl(self): return self.has_displayurl_

  def c2c_direction(self): return self.c2c_direction_

  def set_c2c_direction(self, x):
    self.has_c2c_direction_ = 1
    self.c2c_direction_ = x

  def clear_c2c_direction(self):
    self.has_c2c_direction_ = 0
    self.c2c_direction_ = 0

  def has_c2c_direction(self): return self.has_c2c_direction_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_resultpos()): self.set_resultpos(x.resultpos())
    if (x.has_docid()): self.set_docid(x.docid())
    if (x.has_url()): self.set_url(x.url())
    if (x.has_isempty()): self.set_isempty(x.isempty())
    if (x.has_urlafterredirects()): self.set_urlafterredirects(x.urlafterredirects())
    if (x.has_title()): self.set_title(x.title())
    if (x.has_docversionid()): self.set_docversionid(x.docversionid())
    if (x.has_snippets()): self.set_snippets(x.snippets())
    if (x.has_snippetbylinedate()): self.set_snippetbylinedate(x.snippetbylinedate())
    for i in xrange(x.multisnippet_size()): self.add_multisnippet().CopyFrom(x.multisnippet(i))
    if (x.has_sitemap()): self.mutable_sitemap().MergeFrom(x.sitemap())
    if (x.has_localinfo()): self.mutable_localinfo().MergeFrom(x.localinfo())
    if (x.has_manybox()): self.mutable_manybox().MergeFrom(x.manybox())
    for i in xrange(x.hasmessagetype_size()): self.add_hasmessagetype(x.hasmessagetype(i))
    if (x.has_debuginfo()): self.set_debuginfo(x.debuginfo())
    if (x.has_snippetevents()): self.set_snippetevents(x.snippetevents())
    if (x.has_snippethash()): self.set_snippethash(x.snippethash())
    if (x.has_language()): self.set_language(x.language())
    if (x.has_docencoding()): self.set_docencoding(x.docencoding())
    if (x.has_contenttype()): self.set_contenttype(x.contenttype())
    if (x.has_visualtype()): self.set_visualtype(x.visualtype())
    if (x.has_responsecode()): self.set_responsecode(x.responsecode())
    if (x.has_filter()): self.set_filter(x.filter())
    if (x.has_pagelen()): self.set_pagelen(x.pagelen())
    if (x.has_seennoarchive()): self.set_seennoarchive(x.seennoarchive())
    if (x.has_seennosnippet()): self.set_seennosnippet(x.seennosnippet())
    if (x.has_seennoindex()): self.set_seennoindex(x.seennoindex())
    if (x.has_seennotterm()): self.set_seennotterm(x.seennotterm())
    if (x.has_metatag()): self.set_metatag(x.metatag())
    if (x.has_failssafesearch()): self.set_failssafesearch(x.failssafesearch())
    if (x.has_outsidedaterange()): self.set_outsidedaterange(x.outsidedaterange())
    if (x.has_lastmodtime()): self.set_lastmodtime(x.lastmodtime())
    if (x.has_lastcrawltime()): self.set_lastcrawltime(x.lastcrawltime())
    if (x.has_ipaddress()): self.set_ipaddress(x.ipaddress())
    if (x.has_indexdataversion()): self.set_indexdataversion(x.indexdataversion())
    if (x.has_filetypesearch()): self.set_filetypesearch(x.filetypesearch())
    if (x.has_filetyperefurl()): self.set_filetyperefurl(x.filetyperefurl())
    if (x.has_inlineimage()): self.set_inlineimage(x.inlineimage())
    if (x.has_imagewidth()): self.set_imagewidth(x.imagewidth())
    if (x.has_imageheight()): self.set_imageheight(x.imageheight())
    if (x.has_imagesize()): self.set_imagesize(x.imagesize())
    if (x.has_imagethumbnailwidth()): self.set_imagethumbnailwidth(x.imagethumbnailwidth())
    if (x.has_imagethumbnailheight()): self.set_imagethumbnailheight(x.imagethumbnailheight())
    if (x.has_imagethumbnailsize()): self.set_imagethumbnailsize(x.imagethumbnailsize())
    if (x.has_body()): self.set_body(x.body())
    if (x.has_bodylinesclipped()): self.set_bodylinesclipped(x.bodylinesclipped())
    if (x.has_cachehighlightedterms()): self.set_cachehighlightedterms(x.cachehighlightedterms())
    if (x.has_cachenonhighlightedterms()): self.set_cachenonhighlightedterms(x.cachenonhighlightedterms())
    if (x.has_categoryresults()): self.set_categoryresults(x.categoryresults())
    if (x.has_googlelabeldata()): self.mutable_googlelabeldata().MergeFrom(x.googlelabeldata())
    if (x.has_usenetsubject()): self.set_usenetsubject(x.usenetsubject())
    if (x.has_usenetauthorname()): self.set_usenetauthorname(x.usenetauthorname())
    if (x.has_usenetauthoremail()): self.set_usenetauthoremail(x.usenetauthoremail())
    if (x.has_usenetfollowupto()): self.set_usenetfollowupto(x.usenetfollowupto())
    if (x.has_usenetmsgid()): self.set_usenetmsgid(x.usenetmsgid())
    if (x.has_usenetdate()): self.set_usenetdate(x.usenetdate())
    if (x.has_usenetreference()): self.set_usenetreference(x.usenetreference())
    if (x.has_usenetnewsgroup()): self.set_usenetnewsgroup(x.usenetnewsgroup())
    if (x.has_usenetguid()): self.set_usenetguid(x.usenetguid())
    for i in xrange(x.usenetguidthreadpairs_size()): self.add_usenetguidthreadpairs().CopyFrom(x.usenetguidthreadpairs(i))
    if (x.has_filetypeid()): self.set_filetypeid(x.filetypeid())
    if (x.has_deprecatedscanningsnippety()): self.set_deprecatedscanningsnippety(x.deprecatedscanningsnippety())
    if (x.has_deprecatedscanningsnippetx()): self.set_deprecatedscanningsnippetx(x.deprecatedscanningsnippetx())
    if (x.has_deprecatedscanningsnippetgeo()): self.set_deprecatedscanningsnippetgeo(x.deprecatedscanningsnippetgeo())
    if (x.has_deprecatedscanningimagewidth()): self.set_deprecatedscanningimagewidth(x.deprecatedscanningimagewidth())
    if (x.has_deprecatedscanningimageheight()): self.set_deprecatedscanningimageheight(x.deprecatedscanningimageheight())
    if (x.has_deprecatedscanningimageusesmall()): self.set_deprecatedscanningimageusesmall(x.deprecatedscanningimageusesmall())
    if (x.has_repptroffset()): self.set_repptroffset(x.repptroffset())
    for i in xrange(x.category_size()): self.add_category().CopyFrom(x.category(i))
    if (x.has_qequestioncreatets()): self.set_qequestioncreatets(x.qequestioncreatets())
    if (x.has_qemodifiedts()): self.set_qemodifiedts(x.qemodifiedts())
    if (x.has_qeendts()): self.set_qeendts(x.qeendts())
    if (x.has_qesubject()): self.set_qesubject(x.qesubject())
    if (x.has_qeprice()): self.set_qeprice(x.qeprice())
    if (x.has_qeratingvalue()): self.set_qeratingvalue(x.qeratingvalue())
    if (x.has_qelastquestionuid()): self.set_qelastquestionuid(x.qelastquestionuid())
    if (x.has_qelastansweruid()): self.set_qelastansweruid(x.qelastansweruid())
    if (x.has_qeansweruserid()): self.set_qeansweruserid(x.qeansweruserid())
    if (x.has_qeanswerusername()): self.set_qeanswerusername(x.qeanswerusername())
    if (x.has_qequestionuserid()): self.set_qequestionuserid(x.qequestionuserid())
    if (x.has_qequestionusername()): self.set_qequestionusername(x.qequestionusername())
    if (x.has_qeisanswerable()): self.set_qeisanswerable(x.qeisanswerable())
    if (x.has_qecatid()): self.set_qecatid(x.qecatid())
    if (x.has_qeratingcomments()): self.set_qeratingcomments(x.qeratingcomments())
    if (x.has_qelockowner()): self.set_qelockowner(x.qelockowner())
    if (x.has_qenumcomments()): self.set_qenumcomments(x.qenumcomments())
    if (x.has_qelockownerusername()): self.set_qelockownerusername(x.qelockownerusername())
    if (x.has_secureid()): self.set_secureid(x.secureid())
    for i in xrange(x.froogleimgurl_size()): self.add_froogleimgurl(x.froogleimgurl(i))
    if (x.has_froogleselectedimgurl()): self.set_froogleselectedimgurl(x.froogleselectedimgurl())
    if (x.has_froogleprice()): self.set_froogleprice(x.froogleprice())
    if (x.has_froogleextractedprice()): self.mutable_froogleextractedprice().MergeFrom(x.froogleextractedprice())
    if (x.has_frooglecategoryid()): self.set_frooglecategoryid(x.frooglecategoryid())
    if (x.has_frooglemerchantid()): self.set_frooglemerchantid(x.frooglemerchantid())
    for i in xrange(x.entity_size()): self.add_entity().CopyFrom(x.entity(i))
    if (x.has_science()): self.mutable_science().MergeFrom(x.science())
    if (x.has_premium()): self.mutable_premium().MergeFrom(x.premium())
    if (x.has_ocean_tag()): self.mutable_ocean_tag().MergeFrom(x.ocean_tag())
    if (x.has_displayurl()): self.set_displayurl(x.displayurl())
    if (x.has_c2c_direction()): self.set_c2c_direction(x.c2c_direction())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocsTag', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocsTag')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocsTag', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocsTag', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocsTag', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_resultpos_ != x.has_resultpos_: return 0
    if self.has_resultpos_ and self.resultpos_ != x.resultpos_: return 0
    if self.has_docid_ != x.has_docid_: return 0
    if self.has_docid_ and self.docid_ != x.docid_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_isempty_ != x.has_isempty_: return 0
    if self.has_isempty_ and self.isempty_ != x.isempty_: return 0
    if self.has_urlafterredirects_ != x.has_urlafterredirects_: return 0
    if self.has_urlafterredirects_ and self.urlafterredirects_ != x.urlafterredirects_: return 0
    if self.has_title_ != x.has_title_: return 0
    if self.has_title_ and self.title_ != x.title_: return 0
    if self.has_docversionid_ != x.has_docversionid_: return 0
    if self.has_docversionid_ and self.docversionid_ != x.docversionid_: return 0
    if self.has_snippets_ != x.has_snippets_: return 0
    if self.has_snippets_ and self.snippets_ != x.snippets_: return 0
    if self.has_snippetbylinedate_ != x.has_snippetbylinedate_: return 0
    if self.has_snippetbylinedate_ and self.snippetbylinedate_ != x.snippetbylinedate_: return 0
    if len(self.multisnippet_) != len(x.multisnippet_): return 0
    for e1, e2 in zip(self.multisnippet_, x.multisnippet_):
      if e1 != e2: return 0
    if self.has_sitemap_ != x.has_sitemap_: return 0
    if self.has_sitemap_ and self.sitemap_ != x.sitemap_: return 0
    if self.has_localinfo_ != x.has_localinfo_: return 0
    if self.has_localinfo_ and self.localinfo_ != x.localinfo_: return 0
    if self.has_manybox_ != x.has_manybox_: return 0
    if self.has_manybox_ and self.manybox_ != x.manybox_: return 0
    if len(self.hasmessagetype_) != len(x.hasmessagetype_): return 0
    for e1, e2 in zip(self.hasmessagetype_, x.hasmessagetype_):
      if e1 != e2: return 0
    if self.has_debuginfo_ != x.has_debuginfo_: return 0
    if self.has_debuginfo_ and self.debuginfo_ != x.debuginfo_: return 0
    if self.has_snippetevents_ != x.has_snippetevents_: return 0
    if self.has_snippetevents_ and self.snippetevents_ != x.snippetevents_: return 0
    if self.has_snippethash_ != x.has_snippethash_: return 0
    if self.has_snippethash_ and self.snippethash_ != x.snippethash_: return 0
    if self.has_language_ != x.has_language_: return 0
    if self.has_language_ and self.language_ != x.language_: return 0
    if self.has_docencoding_ != x.has_docencoding_: return 0
    if self.has_docencoding_ and self.docencoding_ != x.docencoding_: return 0
    if self.has_contenttype_ != x.has_contenttype_: return 0
    if self.has_contenttype_ and self.contenttype_ != x.contenttype_: return 0
    if self.has_visualtype_ != x.has_visualtype_: return 0
    if self.has_visualtype_ and self.visualtype_ != x.visualtype_: return 0
    if self.has_responsecode_ != x.has_responsecode_: return 0
    if self.has_responsecode_ and self.responsecode_ != x.responsecode_: return 0
    if self.has_filter_ != x.has_filter_: return 0
    if self.has_filter_ and self.filter_ != x.filter_: return 0
    if self.has_pagelen_ != x.has_pagelen_: return 0
    if self.has_pagelen_ and self.pagelen_ != x.pagelen_: return 0
    if self.has_seennoarchive_ != x.has_seennoarchive_: return 0
    if self.has_seennoarchive_ and self.seennoarchive_ != x.seennoarchive_: return 0
    if self.has_seennosnippet_ != x.has_seennosnippet_: return 0
    if self.has_seennosnippet_ and self.seennosnippet_ != x.seennosnippet_: return 0
    if self.has_seennoindex_ != x.has_seennoindex_: return 0
    if self.has_seennoindex_ and self.seennoindex_ != x.seennoindex_: return 0
    if self.has_seennotterm_ != x.has_seennotterm_: return 0
    if self.has_seennotterm_ and self.seennotterm_ != x.seennotterm_: return 0
    if self.has_metatag_ != x.has_metatag_: return 0
    if self.has_metatag_ and self.metatag_ != x.metatag_: return 0
    if self.has_failssafesearch_ != x.has_failssafesearch_: return 0
    if self.has_failssafesearch_ and self.failssafesearch_ != x.failssafesearch_: return 0
    if self.has_outsidedaterange_ != x.has_outsidedaterange_: return 0
    if self.has_outsidedaterange_ and self.outsidedaterange_ != x.outsidedaterange_: return 0
    if self.has_lastmodtime_ != x.has_lastmodtime_: return 0
    if self.has_lastmodtime_ and self.lastmodtime_ != x.lastmodtime_: return 0
    if self.has_lastcrawltime_ != x.has_lastcrawltime_: return 0
    if self.has_lastcrawltime_ and self.lastcrawltime_ != x.lastcrawltime_: return 0
    if self.has_ipaddress_ != x.has_ipaddress_: return 0
    if self.has_ipaddress_ and self.ipaddress_ != x.ipaddress_: return 0
    if self.has_indexdataversion_ != x.has_indexdataversion_: return 0
    if self.has_indexdataversion_ and self.indexdataversion_ != x.indexdataversion_: return 0
    if self.has_filetypesearch_ != x.has_filetypesearch_: return 0
    if self.has_filetypesearch_ and self.filetypesearch_ != x.filetypesearch_: return 0
    if self.has_filetyperefurl_ != x.has_filetyperefurl_: return 0
    if self.has_filetyperefurl_ and self.filetyperefurl_ != x.filetyperefurl_: return 0
    if self.has_inlineimage_ != x.has_inlineimage_: return 0
    if self.has_inlineimage_ and self.inlineimage_ != x.inlineimage_: return 0
    if self.has_imagewidth_ != x.has_imagewidth_: return 0
    if self.has_imagewidth_ and self.imagewidth_ != x.imagewidth_: return 0
    if self.has_imageheight_ != x.has_imageheight_: return 0
    if self.has_imageheight_ and self.imageheight_ != x.imageheight_: return 0
    if self.has_imagesize_ != x.has_imagesize_: return 0
    if self.has_imagesize_ and self.imagesize_ != x.imagesize_: return 0
    if self.has_imagethumbnailwidth_ != x.has_imagethumbnailwidth_: return 0
    if self.has_imagethumbnailwidth_ and self.imagethumbnailwidth_ != x.imagethumbnailwidth_: return 0
    if self.has_imagethumbnailheight_ != x.has_imagethumbnailheight_: return 0
    if self.has_imagethumbnailheight_ and self.imagethumbnailheight_ != x.imagethumbnailheight_: return 0
    if self.has_imagethumbnailsize_ != x.has_imagethumbnailsize_: return 0
    if self.has_imagethumbnailsize_ and self.imagethumbnailsize_ != x.imagethumbnailsize_: return 0
    if self.has_body_ != x.has_body_: return 0
    if self.has_body_ and self.body_ != x.body_: return 0
    if self.has_bodylinesclipped_ != x.has_bodylinesclipped_: return 0
    if self.has_bodylinesclipped_ and self.bodylinesclipped_ != x.bodylinesclipped_: return 0
    if self.has_cachehighlightedterms_ != x.has_cachehighlightedterms_: return 0
    if self.has_cachehighlightedterms_ and self.cachehighlightedterms_ != x.cachehighlightedterms_: return 0
    if self.has_cachenonhighlightedterms_ != x.has_cachenonhighlightedterms_: return 0
    if self.has_cachenonhighlightedterms_ and self.cachenonhighlightedterms_ != x.cachenonhighlightedterms_: return 0
    if self.has_categoryresults_ != x.has_categoryresults_: return 0
    if self.has_categoryresults_ and self.categoryresults_ != x.categoryresults_: return 0
    if self.has_googlelabeldata_ != x.has_googlelabeldata_: return 0
    if self.has_googlelabeldata_ and self.googlelabeldata_ != x.googlelabeldata_: return 0
    if self.has_usenetsubject_ != x.has_usenetsubject_: return 0
    if self.has_usenetsubject_ and self.usenetsubject_ != x.usenetsubject_: return 0
    if self.has_usenetauthorname_ != x.has_usenetauthorname_: return 0
    if self.has_usenetauthorname_ and self.usenetauthorname_ != x.usenetauthorname_: return 0
    if self.has_usenetauthoremail_ != x.has_usenetauthoremail_: return 0
    if self.has_usenetauthoremail_ and self.usenetauthoremail_ != x.usenetauthoremail_: return 0
    if self.has_usenetfollowupto_ != x.has_usenetfollowupto_: return 0
    if self.has_usenetfollowupto_ and self.usenetfollowupto_ != x.usenetfollowupto_: return 0
    if self.has_usenetmsgid_ != x.has_usenetmsgid_: return 0
    if self.has_usenetmsgid_ and self.usenetmsgid_ != x.usenetmsgid_: return 0
    if self.has_usenetdate_ != x.has_usenetdate_: return 0
    if self.has_usenetdate_ and self.usenetdate_ != x.usenetdate_: return 0
    if self.has_usenetreference_ != x.has_usenetreference_: return 0
    if self.has_usenetreference_ and self.usenetreference_ != x.usenetreference_: return 0
    if self.has_usenetnewsgroup_ != x.has_usenetnewsgroup_: return 0
    if self.has_usenetnewsgroup_ and self.usenetnewsgroup_ != x.usenetnewsgroup_: return 0
    if self.has_usenetguid_ != x.has_usenetguid_: return 0
    if self.has_usenetguid_ and self.usenetguid_ != x.usenetguid_: return 0
    if len(self.usenetguidthreadpairs_) != len(x.usenetguidthreadpairs_): return 0
    for e1, e2 in zip(self.usenetguidthreadpairs_, x.usenetguidthreadpairs_):
      if e1 != e2: return 0
    if self.has_filetypeid_ != x.has_filetypeid_: return 0
    if self.has_filetypeid_ and self.filetypeid_ != x.filetypeid_: return 0
    if self.has_deprecatedscanningsnippety_ != x.has_deprecatedscanningsnippety_: return 0
    if self.has_deprecatedscanningsnippety_ and self.deprecatedscanningsnippety_ != x.deprecatedscanningsnippety_: return 0
    if self.has_deprecatedscanningsnippetx_ != x.has_deprecatedscanningsnippetx_: return 0
    if self.has_deprecatedscanningsnippetx_ and self.deprecatedscanningsnippetx_ != x.deprecatedscanningsnippetx_: return 0
    if self.has_deprecatedscanningsnippetgeo_ != x.has_deprecatedscanningsnippetgeo_: return 0
    if self.has_deprecatedscanningsnippetgeo_ and self.deprecatedscanningsnippetgeo_ != x.deprecatedscanningsnippetgeo_: return 0
    if self.has_deprecatedscanningimagewidth_ != x.has_deprecatedscanningimagewidth_: return 0
    if self.has_deprecatedscanningimagewidth_ and self.deprecatedscanningimagewidth_ != x.deprecatedscanningimagewidth_: return 0
    if self.has_deprecatedscanningimageheight_ != x.has_deprecatedscanningimageheight_: return 0
    if self.has_deprecatedscanningimageheight_ and self.deprecatedscanningimageheight_ != x.deprecatedscanningimageheight_: return 0
    if self.has_deprecatedscanningimageusesmall_ != x.has_deprecatedscanningimageusesmall_: return 0
    if self.has_deprecatedscanningimageusesmall_ and self.deprecatedscanningimageusesmall_ != x.deprecatedscanningimageusesmall_: return 0
    if self.has_repptroffset_ != x.has_repptroffset_: return 0
    if self.has_repptroffset_ and self.repptroffset_ != x.repptroffset_: return 0
    if len(self.category_) != len(x.category_): return 0
    for e1, e2 in zip(self.category_, x.category_):
      if e1 != e2: return 0
    if self.has_qequestioncreatets_ != x.has_qequestioncreatets_: return 0
    if self.has_qequestioncreatets_ and self.qequestioncreatets_ != x.qequestioncreatets_: return 0
    if self.has_qemodifiedts_ != x.has_qemodifiedts_: return 0
    if self.has_qemodifiedts_ and self.qemodifiedts_ != x.qemodifiedts_: return 0
    if self.has_qeendts_ != x.has_qeendts_: return 0
    if self.has_qeendts_ and self.qeendts_ != x.qeendts_: return 0
    if self.has_qesubject_ != x.has_qesubject_: return 0
    if self.has_qesubject_ and self.qesubject_ != x.qesubject_: return 0
    if self.has_qeprice_ != x.has_qeprice_: return 0
    if self.has_qeprice_ and self.qeprice_ != x.qeprice_: return 0
    if self.has_qeratingvalue_ != x.has_qeratingvalue_: return 0
    if self.has_qeratingvalue_ and self.qeratingvalue_ != x.qeratingvalue_: return 0
    if self.has_qelastquestionuid_ != x.has_qelastquestionuid_: return 0
    if self.has_qelastquestionuid_ and self.qelastquestionuid_ != x.qelastquestionuid_: return 0
    if self.has_qelastansweruid_ != x.has_qelastansweruid_: return 0
    if self.has_qelastansweruid_ and self.qelastansweruid_ != x.qelastansweruid_: return 0
    if self.has_qeansweruserid_ != x.has_qeansweruserid_: return 0
    if self.has_qeansweruserid_ and self.qeansweruserid_ != x.qeansweruserid_: return 0
    if self.has_qeanswerusername_ != x.has_qeanswerusername_: return 0
    if self.has_qeanswerusername_ and self.qeanswerusername_ != x.qeanswerusername_: return 0
    if self.has_qequestionuserid_ != x.has_qequestionuserid_: return 0
    if self.has_qequestionuserid_ and self.qequestionuserid_ != x.qequestionuserid_: return 0
    if self.has_qequestionusername_ != x.has_qequestionusername_: return 0
    if self.has_qequestionusername_ and self.qequestionusername_ != x.qequestionusername_: return 0
    if self.has_qeisanswerable_ != x.has_qeisanswerable_: return 0
    if self.has_qeisanswerable_ and self.qeisanswerable_ != x.qeisanswerable_: return 0
    if self.has_qecatid_ != x.has_qecatid_: return 0
    if self.has_qecatid_ and self.qecatid_ != x.qecatid_: return 0
    if self.has_qeratingcomments_ != x.has_qeratingcomments_: return 0
    if self.has_qeratingcomments_ and self.qeratingcomments_ != x.qeratingcomments_: return 0
    if self.has_qelockowner_ != x.has_qelockowner_: return 0
    if self.has_qelockowner_ and self.qelockowner_ != x.qelockowner_: return 0
    if self.has_qenumcomments_ != x.has_qenumcomments_: return 0
    if self.has_qenumcomments_ and self.qenumcomments_ != x.qenumcomments_: return 0
    if self.has_qelockownerusername_ != x.has_qelockownerusername_: return 0
    if self.has_qelockownerusername_ and self.qelockownerusername_ != x.qelockownerusername_: return 0
    if self.has_secureid_ != x.has_secureid_: return 0
    if self.has_secureid_ and self.secureid_ != x.secureid_: return 0
    if len(self.froogleimgurl_) != len(x.froogleimgurl_): return 0
    for e1, e2 in zip(self.froogleimgurl_, x.froogleimgurl_):
      if e1 != e2: return 0
    if self.has_froogleselectedimgurl_ != x.has_froogleselectedimgurl_: return 0
    if self.has_froogleselectedimgurl_ and self.froogleselectedimgurl_ != x.froogleselectedimgurl_: return 0
    if self.has_froogleprice_ != x.has_froogleprice_: return 0
    if self.has_froogleprice_ and self.froogleprice_ != x.froogleprice_: return 0
    if self.has_froogleextractedprice_ != x.has_froogleextractedprice_: return 0
    if self.has_froogleextractedprice_ and self.froogleextractedprice_ != x.froogleextractedprice_: return 0
    if self.has_frooglecategoryid_ != x.has_frooglecategoryid_: return 0
    if self.has_frooglecategoryid_ and self.frooglecategoryid_ != x.frooglecategoryid_: return 0
    if self.has_frooglemerchantid_ != x.has_frooglemerchantid_: return 0
    if self.has_frooglemerchantid_ and self.frooglemerchantid_ != x.frooglemerchantid_: return 0
    if len(self.entity_) != len(x.entity_): return 0
    for e1, e2 in zip(self.entity_, x.entity_):
      if e1 != e2: return 0
    if self.has_science_ != x.has_science_: return 0
    if self.has_science_ and self.science_ != x.science_: return 0
    if self.has_premium_ != x.has_premium_: return 0
    if self.has_premium_ and self.premium_ != x.premium_: return 0
    if self.has_ocean_tag_ != x.has_ocean_tag_: return 0
    if self.has_ocean_tag_ and self.ocean_tag_ != x.ocean_tag_: return 0
    if self.has_displayurl_ != x.has_displayurl_: return 0
    if self.has_displayurl_ and self.displayurl_ != x.displayurl_: return 0
    if self.has_c2c_direction_ != x.has_c2c_direction_: return 0
    if self.has_c2c_direction_ and self.c2c_direction_ != x.c2c_direction_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.multisnippet_)):
      if (not self.multisnippet_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_sitemap_ and not self.sitemap_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_localinfo_ and not self.localinfo_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_manybox_ and not self.manybox_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_googlelabeldata_ and not self.googlelabeldata_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.usenetguidthreadpairs_)):
      if (not self.usenetguidthreadpairs_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.category_)):
      if (not self.category_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_froogleextractedprice_ and not self.froogleextractedprice_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.entity_)):
      if (not self.entity_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_science_ and not self.science_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_premium_ and not self.premium_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_ocean_tag_ and not self.ocean_tag_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_resultpos_): n += 1 + self.lengthVarInt64(self.resultpos_)
    if (self.has_docid_): n += 1 + self.lengthVarInt64(self.docid_)
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    if (self.has_isempty_): n += 1 + self.lengthVarInt64(self.isempty_)
    if (self.has_urlafterredirects_): n += 2 + self.lengthString(len(self.urlafterredirects_))
    if (self.has_title_): n += 1 + self.lengthString(len(self.title_))
    if (self.has_docversionid_): n += 2 + self.lengthVarInt64(self.docversionid_)
    if (self.has_snippets_): n += 1 + self.lengthString(len(self.snippets_))
    if (self.has_snippetbylinedate_): n += 2 + self.lengthVarInt64(self.snippetbylinedate_)
    n += 4 * len(self.multisnippet_)
    for i in xrange(len(self.multisnippet_)): n += self.multisnippet_[i].ByteSize()
    if (self.has_sitemap_): n += 2 + self.lengthString(self.sitemap_.ByteSize())
    if (self.has_localinfo_): n += 2 + self.lengthString(self.localinfo_.ByteSize())
    if (self.has_manybox_): n += 2 + self.lengthString(self.manybox_.ByteSize())
    n += 2 * len(self.hasmessagetype_)
    for i in xrange(len(self.hasmessagetype_)): n += self.lengthVarInt64(self.hasmessagetype_[i])
    if (self.has_debuginfo_): n += 2 + self.lengthString(len(self.debuginfo_))
    if (self.has_snippetevents_): n += 2 + self.lengthVarInt64(self.snippetevents_)
    if (self.has_snippethash_): n += 2 + self.lengthVarInt64(self.snippethash_)
    if (self.has_language_): n += 1 + self.lengthVarInt64(self.language_)
    if (self.has_docencoding_): n += 1 + self.lengthVarInt64(self.docencoding_)
    if (self.has_contenttype_): n += 1 + self.lengthVarInt64(self.contenttype_)
    if (self.has_visualtype_): n += 2 + self.lengthVarInt64(self.visualtype_)
    if (self.has_responsecode_): n += 1 + self.lengthVarInt64(self.responsecode_)
    if (self.has_filter_): n += 2 + self.lengthVarInt64(self.filter_)
    if (self.has_pagelen_): n += 1 + self.lengthVarInt64(self.pagelen_)
    if (self.has_seennoarchive_): n += 1 + self.lengthVarInt64(self.seennoarchive_)
    if (self.has_seennosnippet_): n += 2 + self.lengthVarInt64(self.seennosnippet_)
    if (self.has_seennoindex_): n += 2 + self.lengthVarInt64(self.seennoindex_)
    if (self.has_seennotterm_): n += 2 + self.lengthVarInt64(self.seennotterm_)
    if (self.has_metatag_): n += 2 + self.lengthString(len(self.metatag_))
    if (self.has_failssafesearch_): n += 2 + self.lengthVarInt64(self.failssafesearch_)
    if (self.has_outsidedaterange_): n += 2 + self.lengthVarInt64(self.outsidedaterange_)
    if (self.has_lastmodtime_): n += 2 + self.lengthVarInt64(self.lastmodtime_)
    if (self.has_lastcrawltime_): n += 2 + self.lengthVarInt64(self.lastcrawltime_)
    if (self.has_ipaddress_): n += 2 + self.lengthString(len(self.ipaddress_))
    if (self.has_indexdataversion_): n += 2 + self.lengthString(len(self.indexdataversion_))
    if (self.has_filetypesearch_): n += 2 + self.lengthVarInt64(self.filetypesearch_)
    if (self.has_filetyperefurl_): n += 2 + self.lengthString(len(self.filetyperefurl_))
    if (self.has_inlineimage_): n += 2 + self.lengthVarInt64(self.inlineimage_)
    if (self.has_imagewidth_): n += 2 + self.lengthVarInt64(self.imagewidth_)
    if (self.has_imageheight_): n += 2 + self.lengthVarInt64(self.imageheight_)
    if (self.has_imagesize_): n += 2 + self.lengthVarInt64(self.imagesize_)
    if (self.has_imagethumbnailwidth_): n += 2 + self.lengthVarInt64(self.imagethumbnailwidth_)
    if (self.has_imagethumbnailheight_): n += 2 + self.lengthVarInt64(self.imagethumbnailheight_)
    if (self.has_imagethumbnailsize_): n += 2 + self.lengthVarInt64(self.imagethumbnailsize_)
    if (self.has_body_): n += 2 + self.lengthString(len(self.body_))
    if (self.has_bodylinesclipped_): n += 2 + self.lengthVarInt64(self.bodylinesclipped_)
    if (self.has_cachehighlightedterms_): n += 2 + self.lengthString(len(self.cachehighlightedterms_))
    if (self.has_cachenonhighlightedterms_): n += 2 + self.lengthString(len(self.cachenonhighlightedterms_))
    if (self.has_categoryresults_): n += 2 + self.lengthString(len(self.categoryresults_))
    if (self.has_googlelabeldata_): n += 1 + self.lengthString(self.googlelabeldata_.ByteSize())
    if (self.has_usenetsubject_): n += 2 + self.lengthString(len(self.usenetsubject_))
    if (self.has_usenetauthorname_): n += 2 + self.lengthString(len(self.usenetauthorname_))
    if (self.has_usenetauthoremail_): n += 2 + self.lengthString(len(self.usenetauthoremail_))
    if (self.has_usenetfollowupto_): n += 2 + self.lengthString(len(self.usenetfollowupto_))
    if (self.has_usenetmsgid_): n += 2 + self.lengthString(len(self.usenetmsgid_))
    if (self.has_usenetdate_): n += 2 + self.lengthString(len(self.usenetdate_))
    if (self.has_usenetreference_): n += 2 + self.lengthString(len(self.usenetreference_))
    if (self.has_usenetnewsgroup_): n += 2 + self.lengthString(len(self.usenetnewsgroup_))
    if (self.has_usenetguid_): n += 2 + self.lengthString(len(self.usenetguid_))
    n += 4 * len(self.usenetguidthreadpairs_)
    for i in xrange(len(self.usenetguidthreadpairs_)): n += self.usenetguidthreadpairs_[i].ByteSize()
    if (self.has_filetypeid_): n += 2 + self.lengthVarInt64(self.filetypeid_)
    if (self.has_deprecatedscanningsnippety_): n += 2 + self.lengthVarInt64(self.deprecatedscanningsnippety_)
    if (self.has_deprecatedscanningsnippetx_): n += 2 + self.lengthVarInt64(self.deprecatedscanningsnippetx_)
    if (self.has_deprecatedscanningsnippetgeo_): n += 2 + self.lengthString(len(self.deprecatedscanningsnippetgeo_))
    if (self.has_deprecatedscanningimagewidth_): n += 2 + self.lengthVarInt64(self.deprecatedscanningimagewidth_)
    if (self.has_deprecatedscanningimageheight_): n += 2 + self.lengthVarInt64(self.deprecatedscanningimageheight_)
    if (self.has_deprecatedscanningimageusesmall_): n += 3
    if (self.has_repptroffset_): n += 2 + self.lengthVarInt64(self.repptroffset_)
    n += 2 * len(self.category_)
    for i in xrange(len(self.category_)): n += self.category_[i].ByteSize()
    if (self.has_qequestioncreatets_): n += 2 + self.lengthVarInt64(self.qequestioncreatets_)
    if (self.has_qemodifiedts_): n += 2 + self.lengthVarInt64(self.qemodifiedts_)
    if (self.has_qeendts_): n += 2 + self.lengthVarInt64(self.qeendts_)
    if (self.has_qesubject_): n += 2 + self.lengthString(len(self.qesubject_))
    if (self.has_qeprice_): n += 6
    if (self.has_qeratingvalue_): n += 2 + self.lengthVarInt64(self.qeratingvalue_)
    if (self.has_qelastquestionuid_): n += 2 + self.lengthVarInt64(self.qelastquestionuid_)
    if (self.has_qelastansweruid_): n += 2 + self.lengthVarInt64(self.qelastansweruid_)
    if (self.has_qeansweruserid_): n += 2 + self.lengthVarInt64(self.qeansweruserid_)
    if (self.has_qeanswerusername_): n += 2 + self.lengthString(len(self.qeanswerusername_))
    if (self.has_qequestionuserid_): n += 2 + self.lengthVarInt64(self.qequestionuserid_)
    if (self.has_qequestionusername_): n += 2 + self.lengthString(len(self.qequestionusername_))
    if (self.has_qeisanswerable_): n += 3
    if (self.has_qecatid_): n += 2 + self.lengthVarInt64(self.qecatid_)
    if (self.has_qeratingcomments_): n += 2 + self.lengthString(len(self.qeratingcomments_))
    if (self.has_qelockowner_): n += 2 + self.lengthVarInt64(self.qelockowner_)
    if (self.has_qenumcomments_): n += 2 + self.lengthVarInt64(self.qenumcomments_)
    if (self.has_qelockownerusername_): n += 2 + self.lengthString(len(self.qelockownerusername_))
    if (self.has_secureid_): n += 2 + self.lengthString(len(self.secureid_))
    n += 2 * len(self.froogleimgurl_)
    for i in xrange(len(self.froogleimgurl_)): n += self.lengthString(len(self.froogleimgurl_[i]))
    if (self.has_froogleselectedimgurl_): n += 2 + self.lengthString(len(self.froogleselectedimgurl_))
    if (self.has_froogleprice_): n += 2 + self.lengthString(len(self.froogleprice_))
    if (self.has_froogleextractedprice_): n += 2 + self.lengthString(self.froogleextractedprice_.ByteSize())
    if (self.has_frooglecategoryid_): n += 2 + self.lengthVarInt64(self.frooglecategoryid_)
    if (self.has_frooglemerchantid_): n += 2 + self.lengthString(len(self.frooglemerchantid_))
    n += 4 * len(self.entity_)
    for i in xrange(len(self.entity_)): n += self.entity_[i].ByteSize()
    if (self.has_science_): n += 2 + self.lengthString(self.science_.ByteSize())
    if (self.has_premium_): n += 2 + self.lengthString(self.premium_.ByteSize())
    if (self.has_ocean_tag_): n += 2 + self.lengthString(self.ocean_tag_.ByteSize())
    if (self.has_displayurl_): n += 2 + self.lengthString(len(self.displayurl_))
    if (self.has_c2c_direction_): n += 2 + self.lengthVarInt64(self.c2c_direction_)
    return n + 0

  def Clear(self):
    self.clear_resultpos()
    self.clear_docid()
    self.clear_url()
    self.clear_isempty()
    self.clear_urlafterredirects()
    self.clear_title()
    self.clear_docversionid()
    self.clear_snippets()
    self.clear_snippetbylinedate()
    self.clear_multisnippet()
    self.clear_sitemap()
    self.clear_localinfo()
    self.clear_manybox()
    self.clear_hasmessagetype()
    self.clear_debuginfo()
    self.clear_snippetevents()
    self.clear_snippethash()
    self.clear_language()
    self.clear_docencoding()
    self.clear_contenttype()
    self.clear_visualtype()
    self.clear_responsecode()
    self.clear_filter()
    self.clear_pagelen()
    self.clear_seennoarchive()
    self.clear_seennosnippet()
    self.clear_seennoindex()
    self.clear_seennotterm()
    self.clear_metatag()
    self.clear_failssafesearch()
    self.clear_outsidedaterange()
    self.clear_lastmodtime()
    self.clear_lastcrawltime()
    self.clear_ipaddress()
    self.clear_indexdataversion()
    self.clear_filetypesearch()
    self.clear_filetyperefurl()
    self.clear_inlineimage()
    self.clear_imagewidth()
    self.clear_imageheight()
    self.clear_imagesize()
    self.clear_imagethumbnailwidth()
    self.clear_imagethumbnailheight()
    self.clear_imagethumbnailsize()
    self.clear_body()
    self.clear_bodylinesclipped()
    self.clear_cachehighlightedterms()
    self.clear_cachenonhighlightedterms()
    self.clear_categoryresults()
    self.clear_googlelabeldata()
    self.clear_usenetsubject()
    self.clear_usenetauthorname()
    self.clear_usenetauthoremail()
    self.clear_usenetfollowupto()
    self.clear_usenetmsgid()
    self.clear_usenetdate()
    self.clear_usenetreference()
    self.clear_usenetnewsgroup()
    self.clear_usenetguid()
    self.clear_usenetguidthreadpairs()
    self.clear_filetypeid()
    self.clear_deprecatedscanningsnippety()
    self.clear_deprecatedscanningsnippetx()
    self.clear_deprecatedscanningsnippetgeo()
    self.clear_deprecatedscanningimagewidth()
    self.clear_deprecatedscanningimageheight()
    self.clear_deprecatedscanningimageusesmall()
    self.clear_repptroffset()
    self.clear_category()
    self.clear_qequestioncreatets()
    self.clear_qemodifiedts()
    self.clear_qeendts()
    self.clear_qesubject()
    self.clear_qeprice()
    self.clear_qeratingvalue()
    self.clear_qelastquestionuid()
    self.clear_qelastansweruid()
    self.clear_qeansweruserid()
    self.clear_qeanswerusername()
    self.clear_qequestionuserid()
    self.clear_qequestionusername()
    self.clear_qeisanswerable()
    self.clear_qecatid()
    self.clear_qeratingcomments()
    self.clear_qelockowner()
    self.clear_qenumcomments()
    self.clear_qelockownerusername()
    self.clear_secureid()
    self.clear_froogleimgurl()
    self.clear_froogleselectedimgurl()
    self.clear_froogleprice()
    self.clear_froogleextractedprice()
    self.clear_frooglecategoryid()
    self.clear_frooglemerchantid()
    self.clear_entity()
    self.clear_science()
    self.clear_premium()
    self.clear_ocean_tag()
    self.clear_displayurl()
    self.clear_c2c_direction()

  def OutputUnchecked(self, out):
    if (self.has_resultpos_):
      out.putVarInt32(16)
      out.putVarInt64(self.resultpos_)
    if (self.has_docid_):
      out.putVarInt32(24)
      out.putVarInt64(self.docid_)
    if (self.has_url_):
      out.putVarInt32(34)
      out.putPrefixedString(self.url_)
    if (self.has_title_):
      out.putVarInt32(42)
      out.putPrefixedString(self.title_)
    if (self.has_snippets_):
      out.putVarInt32(50)
      out.putPrefixedString(self.snippets_)
    if (self.has_language_):
      out.putVarInt32(56)
      out.putVarInt64(self.language_)
    if (self.has_docencoding_):
      out.putVarInt32(64)
      out.putVarInt64(self.docencoding_)
    if (self.has_contenttype_):
      out.putVarInt32(72)
      out.putVarInt64(self.contenttype_)
    if (self.has_responsecode_):
      out.putVarInt32(80)
      out.putVarInt64(self.responsecode_)
    if (self.has_pagelen_):
      out.putVarInt32(88)
      out.putVarInt64(self.pagelen_)
    if (self.has_seennoarchive_):
      out.putVarInt32(96)
      out.putVarInt64(self.seennoarchive_)
    for i in xrange(len(self.category_)):
      out.putVarInt32(107)
      self.category_[i].OutputUnchecked(out)
      out.putVarInt32(108)
    if (self.has_isempty_):
      out.putVarInt32(112)
      out.putVarInt64(self.isempty_)
    if (self.has_googlelabeldata_):
      out.putVarInt32(122)
      out.putVarInt32(self.googlelabeldata_.ByteSize())
      self.googlelabeldata_.OutputUnchecked(out)
    if (self.has_urlafterredirects_):
      out.putVarInt32(130)
      out.putPrefixedString(self.urlafterredirects_)
    if (self.has_seennoindex_):
      out.putVarInt32(136)
      out.putVarInt64(self.seennoindex_)
    if (self.has_seennotterm_):
      out.putVarInt32(144)
      out.putVarInt64(self.seennotterm_)
    if (self.has_metatag_):
      out.putVarInt32(154)
      out.putPrefixedString(self.metatag_)
    if (self.has_failssafesearch_):
      out.putVarInt32(160)
      out.putVarInt64(self.failssafesearch_)
    if (self.has_outsidedaterange_):
      out.putVarInt32(168)
      out.putVarInt64(self.outsidedaterange_)
    if (self.has_lastmodtime_):
      out.putVarInt32(184)
      out.putVarInt64(self.lastmodtime_)
    if (self.has_filetypesearch_):
      out.putVarInt32(192)
      out.putVarInt64(self.filetypesearch_)
    if (self.has_filetyperefurl_):
      out.putVarInt32(202)
      out.putPrefixedString(self.filetyperefurl_)
    if (self.has_inlineimage_):
      out.putVarInt32(208)
      out.putVarInt64(self.inlineimage_)
    if (self.has_imagewidth_):
      out.putVarInt32(216)
      out.putVarInt64(self.imagewidth_)
    if (self.has_imageheight_):
      out.putVarInt32(224)
      out.putVarInt64(self.imageheight_)
    if (self.has_imagesize_):
      out.putVarInt32(232)
      out.putVarInt64(self.imagesize_)
    if (self.has_imagethumbnailwidth_):
      out.putVarInt32(240)
      out.putVarInt64(self.imagethumbnailwidth_)
    if (self.has_imagethumbnailheight_):
      out.putVarInt32(248)
      out.putVarInt64(self.imagethumbnailheight_)
    if (self.has_imagethumbnailsize_):
      out.putVarInt32(256)
      out.putVarInt64(self.imagethumbnailsize_)
    if (self.has_body_):
      out.putVarInt32(266)
      out.putPrefixedString(self.body_)
    if (self.has_bodylinesclipped_):
      out.putVarInt32(272)
      out.putVarInt64(self.bodylinesclipped_)
    if (self.has_cachehighlightedterms_):
      out.putVarInt32(282)
      out.putPrefixedString(self.cachehighlightedterms_)
    if (self.has_cachenonhighlightedterms_):
      out.putVarInt32(290)
      out.putPrefixedString(self.cachenonhighlightedterms_)
    if (self.has_categoryresults_):
      out.putVarInt32(298)
      out.putPrefixedString(self.categoryresults_)
    if (self.has_usenetsubject_):
      out.putVarInt32(306)
      out.putPrefixedString(self.usenetsubject_)
    if (self.has_usenetauthorname_):
      out.putVarInt32(314)
      out.putPrefixedString(self.usenetauthorname_)
    if (self.has_usenetauthoremail_):
      out.putVarInt32(322)
      out.putPrefixedString(self.usenetauthoremail_)
    if (self.has_usenetfollowupto_):
      out.putVarInt32(330)
      out.putPrefixedString(self.usenetfollowupto_)
    if (self.has_usenetmsgid_):
      out.putVarInt32(338)
      out.putPrefixedString(self.usenetmsgid_)
    if (self.has_usenetdate_):
      out.putVarInt32(346)
      out.putPrefixedString(self.usenetdate_)
    if (self.has_usenetreference_):
      out.putVarInt32(354)
      out.putPrefixedString(self.usenetreference_)
    if (self.has_usenetnewsgroup_):
      out.putVarInt32(362)
      out.putPrefixedString(self.usenetnewsgroup_)
    if (self.has_debuginfo_):
      out.putVarInt32(370)
      out.putPrefixedString(self.debuginfo_)
    if (self.has_seennosnippet_):
      out.putVarInt32(376)
      out.putVarInt64(self.seennosnippet_)
    if (self.has_filetypeid_):
      out.putVarInt32(384)
      out.putVarInt64(self.filetypeid_)
    if (self.has_lastcrawltime_):
      out.putVarInt32(392)
      out.putVarInt64(self.lastcrawltime_)
    if (self.has_deprecatedscanningsnippety_):
      out.putVarInt32(400)
      out.putVarInt64(self.deprecatedscanningsnippety_)
    if (self.has_deprecatedscanningsnippetx_):
      out.putVarInt32(408)
      out.putVarInt64(self.deprecatedscanningsnippetx_)
    if (self.has_deprecatedscanningsnippetgeo_):
      out.putVarInt32(418)
      out.putPrefixedString(self.deprecatedscanningsnippetgeo_)
    if (self.has_deprecatedscanningimagewidth_):
      out.putVarInt32(424)
      out.putVarInt64(self.deprecatedscanningimagewidth_)
    if (self.has_deprecatedscanningimageheight_):
      out.putVarInt32(432)
      out.putVarInt64(self.deprecatedscanningimageheight_)
    if (self.has_deprecatedscanningimageusesmall_):
      out.putVarInt32(440)
      out.putBoolean(self.deprecatedscanningimageusesmall_)
    if (self.has_repptroffset_):
      out.putVarInt32(448)
      out.putVarInt64(self.repptroffset_)
    if (self.has_qequestioncreatets_):
      out.putVarInt32(488)
      out.putVarInt32(self.qequestioncreatets_)
    if (self.has_qemodifiedts_):
      out.putVarInt32(496)
      out.putVarInt32(self.qemodifiedts_)
    if (self.has_qeendts_):
      out.putVarInt32(504)
      out.putVarInt32(self.qeendts_)
    if (self.has_qesubject_):
      out.putVarInt32(514)
      out.putPrefixedString(self.qesubject_)
    if (self.has_qeprice_):
      out.putVarInt32(525)
      out.putFloat(self.qeprice_)
    if (self.has_qeratingvalue_):
      out.putVarInt32(528)
      out.putVarInt32(self.qeratingvalue_)
    if (self.has_qelastquestionuid_):
      out.putVarInt32(536)
      out.putVarInt64(self.qelastquestionuid_)
    if (self.has_qelastansweruid_):
      out.putVarInt32(544)
      out.putVarInt64(self.qelastansweruid_)
    if (self.has_qeansweruserid_):
      out.putVarInt32(552)
      out.putVarInt64(self.qeansweruserid_)
    if (self.has_qeanswerusername_):
      out.putVarInt32(562)
      out.putPrefixedString(self.qeanswerusername_)
    if (self.has_qequestionuserid_):
      out.putVarInt32(568)
      out.putVarInt64(self.qequestionuserid_)
    if (self.has_qequestionusername_):
      out.putVarInt32(578)
      out.putPrefixedString(self.qequestionusername_)
    if (self.has_qeisanswerable_):
      out.putVarInt32(584)
      out.putBoolean(self.qeisanswerable_)
    if (self.has_qecatid_):
      out.putVarInt32(592)
      out.putVarInt32(self.qecatid_)
    if (self.has_qeratingcomments_):
      out.putVarInt32(602)
      out.putPrefixedString(self.qeratingcomments_)
    if (self.has_qelockowner_):
      out.putVarInt32(608)
      out.putVarInt64(self.qelockowner_)
    if (self.has_qenumcomments_):
      out.putVarInt32(616)
      out.putVarInt32(self.qenumcomments_)
    if (self.has_secureid_):
      out.putVarInt32(626)
      out.putPrefixedString(self.secureid_)
    if (self.has_ipaddress_):
      out.putVarInt32(634)
      out.putPrefixedString(self.ipaddress_)
    for i in xrange(len(self.froogleimgurl_)):
      out.putVarInt32(706)
      out.putPrefixedString(self.froogleimgurl_[i])
    if (self.has_froogleselectedimgurl_):
      out.putVarInt32(714)
      out.putPrefixedString(self.froogleselectedimgurl_)
    if (self.has_froogleprice_):
      out.putVarInt32(722)
      out.putPrefixedString(self.froogleprice_)
    for i in xrange(len(self.entity_)):
      out.putVarInt32(731)
      self.entity_[i].OutputUnchecked(out)
      out.putVarInt32(732)
    if (self.has_froogleextractedprice_):
      out.putVarInt32(786)
      out.putVarInt32(self.froogleextractedprice_.ByteSize())
      self.froogleextractedprice_.OutputUnchecked(out)
    if (self.has_frooglecategoryid_):
      out.putVarInt32(792)
      out.putVarInt32(self.frooglecategoryid_)
    if (self.has_frooglemerchantid_):
      out.putVarInt32(810)
      out.putPrefixedString(self.frooglemerchantid_)
    if (self.has_indexdataversion_):
      out.putVarInt32(818)
      out.putPrefixedString(self.indexdataversion_)
    if (self.has_qelockownerusername_):
      out.putVarInt32(826)
      out.putPrefixedString(self.qelockownerusername_)
    if (self.has_docversionid_):
      out.putVarInt32(832)
      out.putVarInt64(self.docversionid_)
    if (self.has_filter_):
      out.putVarInt32(840)
      out.putVarInt64(self.filter_)
    if (self.has_science_):
      out.putVarInt32(850)
      out.putVarInt32(self.science_.ByteSize())
      self.science_.OutputUnchecked(out)
    if (self.has_ocean_tag_):
      out.putVarInt32(866)
      out.putVarInt32(self.ocean_tag_.ByteSize())
      self.ocean_tag_.OutputUnchecked(out)
    if (self.has_usenetguid_):
      out.putVarInt32(874)
      out.putPrefixedString(self.usenetguid_)
    for i in xrange(len(self.usenetguidthreadpairs_)):
      out.putVarInt32(883)
      self.usenetguidthreadpairs_[i].OutputUnchecked(out)
      out.putVarInt32(884)
    for i in xrange(len(self.multisnippet_)):
      out.putVarInt32(907)
      self.multisnippet_[i].OutputUnchecked(out)
      out.putVarInt32(908)
    if (self.has_snippetevents_):
      out.putVarInt32(928)
      out.putVarInt32(self.snippetevents_)
    if (self.has_snippethash_):
      out.putVarInt32(936)
      out.putVarInt64(self.snippethash_)
    if (self.has_sitemap_):
      out.putVarInt32(946)
      out.putVarInt32(self.sitemap_.ByteSize())
      self.sitemap_.OutputUnchecked(out)
    if (self.has_localinfo_):
      out.putVarInt32(954)
      out.putVarInt32(self.localinfo_.ByteSize())
      self.localinfo_.OutputUnchecked(out)
    if (self.has_premium_):
      out.putVarInt32(962)
      out.putVarInt32(self.premium_.ByteSize())
      self.premium_.OutputUnchecked(out)
    if (self.has_manybox_):
      out.putVarInt32(970)
      out.putVarInt32(self.manybox_.ByteSize())
      self.manybox_.OutputUnchecked(out)
    for i in xrange(len(self.hasmessagetype_)):
      out.putVarInt32(976)
      out.putVarInt32(self.hasmessagetype_[i])
    if (self.has_displayurl_):
      out.putVarInt32(986)
      out.putPrefixedString(self.displayurl_)
    if (self.has_c2c_direction_):
      out.putVarInt32(992)
      out.putVarInt32(self.c2c_direction_)
    if (self.has_snippetbylinedate_):
      out.putVarInt32(1008)
      out.putVarInt64(self.snippetbylinedate_)
    if (self.has_visualtype_):
      out.putVarInt32(1016)
      out.putVarInt64(self.visualtype_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 16:
        self.set_resultpos(d.getVarInt64())
        continue
      if tt == 24:
        self.set_docid(d.getVarInt64())
        continue
      if tt == 34:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 42:
        self.set_title(d.getPrefixedString())
        continue
      if tt == 50:
        self.set_snippets(d.getPrefixedString())
        continue
      if tt == 56:
        self.set_language(d.getVarInt64())
        continue
      if tt == 64:
        self.set_docencoding(d.getVarInt64())
        continue
      if tt == 72:
        self.set_contenttype(d.getVarInt64())
        continue
      if tt == 80:
        self.set_responsecode(d.getVarInt64())
        continue
      if tt == 88:
        self.set_pagelen(d.getVarInt64())
        continue
      if tt == 96:
        self.set_seennoarchive(d.getVarInt64())
        continue
      if tt == 107:
        self.add_category().TryMerge(d)
        continue
      if tt == 112:
        self.set_isempty(d.getVarInt64())
        continue
      if tt == 122:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_googlelabeldata().TryMerge(tmp)
        continue
      if tt == 130:
        self.set_urlafterredirects(d.getPrefixedString())
        continue
      if tt == 136:
        self.set_seennoindex(d.getVarInt64())
        continue
      if tt == 144:
        self.set_seennotterm(d.getVarInt64())
        continue
      if tt == 154:
        self.set_metatag(d.getPrefixedString())
        continue
      if tt == 160:
        self.set_failssafesearch(d.getVarInt64())
        continue
      if tt == 168:
        self.set_outsidedaterange(d.getVarInt64())
        continue
      if tt == 184:
        self.set_lastmodtime(d.getVarInt64())
        continue
      if tt == 192:
        self.set_filetypesearch(d.getVarInt64())
        continue
      if tt == 202:
        self.set_filetyperefurl(d.getPrefixedString())
        continue
      if tt == 208:
        self.set_inlineimage(d.getVarInt64())
        continue
      if tt == 216:
        self.set_imagewidth(d.getVarInt64())
        continue
      if tt == 224:
        self.set_imageheight(d.getVarInt64())
        continue
      if tt == 232:
        self.set_imagesize(d.getVarInt64())
        continue
      if tt == 240:
        self.set_imagethumbnailwidth(d.getVarInt64())
        continue
      if tt == 248:
        self.set_imagethumbnailheight(d.getVarInt64())
        continue
      if tt == 256:
        self.set_imagethumbnailsize(d.getVarInt64())
        continue
      if tt == 266:
        self.set_body(d.getPrefixedString())
        continue
      if tt == 272:
        self.set_bodylinesclipped(d.getVarInt64())
        continue
      if tt == 282:
        self.set_cachehighlightedterms(d.getPrefixedString())
        continue
      if tt == 290:
        self.set_cachenonhighlightedterms(d.getPrefixedString())
        continue
      if tt == 298:
        self.set_categoryresults(d.getPrefixedString())
        continue
      if tt == 306:
        self.set_usenetsubject(d.getPrefixedString())
        continue
      if tt == 314:
        self.set_usenetauthorname(d.getPrefixedString())
        continue
      if tt == 322:
        self.set_usenetauthoremail(d.getPrefixedString())
        continue
      if tt == 330:
        self.set_usenetfollowupto(d.getPrefixedString())
        continue
      if tt == 338:
        self.set_usenetmsgid(d.getPrefixedString())
        continue
      if tt == 346:
        self.set_usenetdate(d.getPrefixedString())
        continue
      if tt == 354:
        self.set_usenetreference(d.getPrefixedString())
        continue
      if tt == 362:
        self.set_usenetnewsgroup(d.getPrefixedString())
        continue
      if tt == 370:
        self.set_debuginfo(d.getPrefixedString())
        continue
      if tt == 376:
        self.set_seennosnippet(d.getVarInt64())
        continue
      if tt == 384:
        self.set_filetypeid(d.getVarInt64())
        continue
      if tt == 392:
        self.set_lastcrawltime(d.getVarInt64())
        continue
      if tt == 400:
        self.set_deprecatedscanningsnippety(d.getVarInt64())
        continue
      if tt == 408:
        self.set_deprecatedscanningsnippetx(d.getVarInt64())
        continue
      if tt == 418:
        self.set_deprecatedscanningsnippetgeo(d.getPrefixedString())
        continue
      if tt == 424:
        self.set_deprecatedscanningimagewidth(d.getVarInt64())
        continue
      if tt == 432:
        self.set_deprecatedscanningimageheight(d.getVarInt64())
        continue
      if tt == 440:
        self.set_deprecatedscanningimageusesmall(d.getBoolean())
        continue
      if tt == 448:
        self.set_repptroffset(d.getVarInt64())
        continue
      if tt == 488:
        self.set_qequestioncreatets(d.getVarInt32())
        continue
      if tt == 496:
        self.set_qemodifiedts(d.getVarInt32())
        continue
      if tt == 504:
        self.set_qeendts(d.getVarInt32())
        continue
      if tt == 514:
        self.set_qesubject(d.getPrefixedString())
        continue
      if tt == 525:
        self.set_qeprice(d.getFloat())
        continue
      if tt == 528:
        self.set_qeratingvalue(d.getVarInt32())
        continue
      if tt == 536:
        self.set_qelastquestionuid(d.getVarInt64())
        continue
      if tt == 544:
        self.set_qelastansweruid(d.getVarInt64())
        continue
      if tt == 552:
        self.set_qeansweruserid(d.getVarInt64())
        continue
      if tt == 562:
        self.set_qeanswerusername(d.getPrefixedString())
        continue
      if tt == 568:
        self.set_qequestionuserid(d.getVarInt64())
        continue
      if tt == 578:
        self.set_qequestionusername(d.getPrefixedString())
        continue
      if tt == 584:
        self.set_qeisanswerable(d.getBoolean())
        continue
      if tt == 592:
        self.set_qecatid(d.getVarInt32())
        continue
      if tt == 602:
        self.set_qeratingcomments(d.getPrefixedString())
        continue
      if tt == 608:
        self.set_qelockowner(d.getVarInt64())
        continue
      if tt == 616:
        self.set_qenumcomments(d.getVarInt32())
        continue
      if tt == 626:
        self.set_secureid(d.getPrefixedString())
        continue
      if tt == 634:
        self.set_ipaddress(d.getPrefixedString())
        continue
      if tt == 706:
        self.add_froogleimgurl(d.getPrefixedString())
        continue
      if tt == 714:
        self.set_froogleselectedimgurl(d.getPrefixedString())
        continue
      if tt == 722:
        self.set_froogleprice(d.getPrefixedString())
        continue
      if tt == 731:
        self.add_entity().TryMerge(d)
        continue
      if tt == 786:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_froogleextractedprice().TryMerge(tmp)
        continue
      if tt == 792:
        self.set_frooglecategoryid(d.getVarInt32())
        continue
      if tt == 810:
        self.set_frooglemerchantid(d.getPrefixedString())
        continue
      if tt == 818:
        self.set_indexdataversion(d.getPrefixedString())
        continue
      if tt == 826:
        self.set_qelockownerusername(d.getPrefixedString())
        continue
      if tt == 832:
        self.set_docversionid(d.getVarInt64())
        continue
      if tt == 840:
        self.set_filter(d.getVarInt64())
        continue
      if tt == 850:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_science().TryMerge(tmp)
        continue
      if tt == 866:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_ocean_tag().TryMerge(tmp)
        continue
      if tt == 874:
        self.set_usenetguid(d.getPrefixedString())
        continue
      if tt == 883:
        self.add_usenetguidthreadpairs().TryMerge(d)
        continue
      if tt == 907:
        self.add_multisnippet().TryMerge(d)
        continue
      if tt == 928:
        self.set_snippetevents(d.getVarInt32())
        continue
      if tt == 936:
        self.set_snippethash(d.getVarInt64())
        continue
      if tt == 946:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_sitemap().TryMerge(tmp)
        continue
      if tt == 954:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_localinfo().TryMerge(tmp)
        continue
      if tt == 962:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_premium().TryMerge(tmp)
        continue
      if tt == 970:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_manybox().TryMerge(tmp)
        continue
      if tt == 976:
        self.add_hasmessagetype(d.getVarInt32())
        continue
      if tt == 986:
        self.set_displayurl(d.getPrefixedString())
        continue
      if tt == 992:
        self.set_c2c_direction(d.getVarInt32())
        continue
      if tt == 1008:
        self.set_snippetbylinedate(d.getVarInt64())
        continue
      if tt == 1016:
        self.set_visualtype(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_resultpos_: res+=prefix+("ResultPos: %s\n" % self.DebugFormatInt64(self.resultpos_))
    if self.has_docid_: res+=prefix+("Docid: %s\n" % self.DebugFormatInt64(self.docid_))
    if self.has_url_: res+=prefix+("Url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_isempty_: res+=prefix+("IsEmpty: %s\n" % self.DebugFormatInt64(self.isempty_))
    if self.has_urlafterredirects_: res+=prefix+("UrlAfterRedirects: %s\n" % self.DebugFormatString(self.urlafterredirects_))
    if self.has_title_: res+=prefix+("Title: %s\n" % self.DebugFormatString(self.title_))
    if self.has_docversionid_: res+=prefix+("DocVersionId: %s\n" % self.DebugFormatInt64(self.docversionid_))
    if self.has_snippets_: res+=prefix+("Snippets: %s\n" % self.DebugFormatString(self.snippets_))
    if self.has_snippetbylinedate_: res+=prefix+("SnippetBylineDate: %s\n" % self.DebugFormatInt64(self.snippetbylinedate_))
    cnt=0
    for e in self.multisnippet_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Multisnippet%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_sitemap_:
      res+=prefix+"Sitemap <\n"
      res+=self.sitemap_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_localinfo_:
      res+=prefix+"LocalInfo <\n"
      res+=self.localinfo_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_manybox_:
      res+=prefix+"Manybox <\n"
      res+=self.manybox_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    cnt=0
    for e in self.hasmessagetype_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("HasMessageType%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    if self.has_debuginfo_: res+=prefix+("DebugInfo: %s\n" % self.DebugFormatString(self.debuginfo_))
    if self.has_snippetevents_: res+=prefix+("SnippetEvents: %s\n" % self.DebugFormatInt32(self.snippetevents_))
    if self.has_snippethash_: res+=prefix+("SnippetHash: %s\n" % self.DebugFormatInt64(self.snippethash_))
    if self.has_language_: res+=prefix+("Language: %s\n" % self.DebugFormatInt64(self.language_))
    if self.has_docencoding_: res+=prefix+("DocEncoding: %s\n" % self.DebugFormatInt64(self.docencoding_))
    if self.has_contenttype_: res+=prefix+("ContentType: %s\n" % self.DebugFormatInt64(self.contenttype_))
    if self.has_visualtype_: res+=prefix+("VisualType: %s\n" % self.DebugFormatInt64(self.visualtype_))
    if self.has_responsecode_: res+=prefix+("ResponseCode: %s\n" % self.DebugFormatInt64(self.responsecode_))
    if self.has_filter_: res+=prefix+("Filter: %s\n" % self.DebugFormatInt64(self.filter_))
    if self.has_pagelen_: res+=prefix+("PageLen: %s\n" % self.DebugFormatInt64(self.pagelen_))
    if self.has_seennoarchive_: res+=prefix+("SeenNoarchive: %s\n" % self.DebugFormatInt64(self.seennoarchive_))
    if self.has_seennosnippet_: res+=prefix+("SeenNosnippet: %s\n" % self.DebugFormatInt64(self.seennosnippet_))
    if self.has_seennoindex_: res+=prefix+("SeenNoindex: %s\n" % self.DebugFormatInt64(self.seennoindex_))
    if self.has_seennotterm_: res+=prefix+("SeenNotTerm: %s\n" % self.DebugFormatInt64(self.seennotterm_))
    if self.has_metatag_: res+=prefix+("MetaTag: %s\n" % self.DebugFormatString(self.metatag_))
    if self.has_failssafesearch_: res+=prefix+("FailsSafesearch: %s\n" % self.DebugFormatInt64(self.failssafesearch_))
    if self.has_outsidedaterange_: res+=prefix+("OutsideDaterange: %s\n" % self.DebugFormatInt64(self.outsidedaterange_))
    if self.has_lastmodtime_: res+=prefix+("LastmodTime: %s\n" % self.DebugFormatInt64(self.lastmodtime_))
    if self.has_lastcrawltime_: res+=prefix+("LastcrawlTime: %s\n" % self.DebugFormatInt64(self.lastcrawltime_))
    if self.has_ipaddress_: res+=prefix+("IPAddress: %s\n" % self.DebugFormatString(self.ipaddress_))
    if self.has_indexdataversion_: res+=prefix+("IndexDataVersion: %s\n" % self.DebugFormatString(self.indexdataversion_))
    if self.has_filetypesearch_: res+=prefix+("FileTypeSearch: %s\n" % self.DebugFormatInt64(self.filetypesearch_))
    if self.has_filetyperefurl_: res+=prefix+("FileTypeRefUrl: %s\n" % self.DebugFormatString(self.filetyperefurl_))
    if self.has_inlineimage_: res+=prefix+("InlineImage: %s\n" % self.DebugFormatInt64(self.inlineimage_))
    if self.has_imagewidth_: res+=prefix+("ImageWidth: %s\n" % self.DebugFormatInt64(self.imagewidth_))
    if self.has_imageheight_: res+=prefix+("ImageHeight: %s\n" % self.DebugFormatInt64(self.imageheight_))
    if self.has_imagesize_: res+=prefix+("ImageSize: %s\n" % self.DebugFormatInt64(self.imagesize_))
    if self.has_imagethumbnailwidth_: res+=prefix+("ImageThumbnailWidth: %s\n" % self.DebugFormatInt64(self.imagethumbnailwidth_))
    if self.has_imagethumbnailheight_: res+=prefix+("ImageThumbnailHeight: %s\n" % self.DebugFormatInt64(self.imagethumbnailheight_))
    if self.has_imagethumbnailsize_: res+=prefix+("ImageThumbnailSize: %s\n" % self.DebugFormatInt64(self.imagethumbnailsize_))
    if self.has_body_: res+=prefix+("Body: %s\n" % self.DebugFormatString(self.body_))
    if self.has_bodylinesclipped_: res+=prefix+("BodyLinesClipped: %s\n" % self.DebugFormatInt64(self.bodylinesclipped_))
    if self.has_cachehighlightedterms_: res+=prefix+("CacheHighlightedTerms: %s\n" % self.DebugFormatString(self.cachehighlightedterms_))
    if self.has_cachenonhighlightedterms_: res+=prefix+("CacheNonHighlightedTerms: %s\n" % self.DebugFormatString(self.cachenonhighlightedterms_))
    if self.has_categoryresults_: res+=prefix+("CategoryResults: %s\n" % self.DebugFormatString(self.categoryresults_))
    if self.has_googlelabeldata_:
      res+=prefix+"GoogleLabelData <\n"
      res+=self.googlelabeldata_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_usenetsubject_: res+=prefix+("UsenetSubject: %s\n" % self.DebugFormatString(self.usenetsubject_))
    if self.has_usenetauthorname_: res+=prefix+("UsenetAuthorName: %s\n" % self.DebugFormatString(self.usenetauthorname_))
    if self.has_usenetauthoremail_: res+=prefix+("UsenetAuthorEmail: %s\n" % self.DebugFormatString(self.usenetauthoremail_))
    if self.has_usenetfollowupto_: res+=prefix+("UsenetFollowupTo: %s\n" % self.DebugFormatString(self.usenetfollowupto_))
    if self.has_usenetmsgid_: res+=prefix+("UsenetMsgid: %s\n" % self.DebugFormatString(self.usenetmsgid_))
    if self.has_usenetdate_: res+=prefix+("UsenetDate: %s\n" % self.DebugFormatString(self.usenetdate_))
    if self.has_usenetreference_: res+=prefix+("UsenetReference: %s\n" % self.DebugFormatString(self.usenetreference_))
    if self.has_usenetnewsgroup_: res+=prefix+("UsenetNewsgroup: %s\n" % self.DebugFormatString(self.usenetnewsgroup_))
    if self.has_usenetguid_: res+=prefix+("UsenetGuid: %s\n" % self.DebugFormatString(self.usenetguid_))
    cnt=0
    for e in self.usenetguidthreadpairs_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("UsenetGuidThreadPairs%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_filetypeid_: res+=prefix+("FileTypeID: %s\n" % self.DebugFormatInt64(self.filetypeid_))
    if self.has_deprecatedscanningsnippety_: res+=prefix+("DeprecatedScanningSnippetY: %s\n" % self.DebugFormatInt64(self.deprecatedscanningsnippety_))
    if self.has_deprecatedscanningsnippetx_: res+=prefix+("DeprecatedScanningSnippetX: %s\n" % self.DebugFormatInt64(self.deprecatedscanningsnippetx_))
    if self.has_deprecatedscanningsnippetgeo_: res+=prefix+("DeprecatedScanningSnippetGeo: %s\n" % self.DebugFormatString(self.deprecatedscanningsnippetgeo_))
    if self.has_deprecatedscanningimagewidth_: res+=prefix+("DeprecatedScanningImageWidth: %s\n" % self.DebugFormatInt64(self.deprecatedscanningimagewidth_))
    if self.has_deprecatedscanningimageheight_: res+=prefix+("DeprecatedScanningImageHeight: %s\n" % self.DebugFormatInt64(self.deprecatedscanningimageheight_))
    if self.has_deprecatedscanningimageusesmall_: res+=prefix+("DeprecatedScanningImageUseSmall: %s\n" % self.DebugFormatBool(self.deprecatedscanningimageusesmall_))
    if self.has_repptroffset_: res+=prefix+("RepptrOffset: %s\n" % self.DebugFormatInt64(self.repptroffset_))
    cnt=0
    for e in self.category_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Category%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_qequestioncreatets_: res+=prefix+("QEQuestionCreateTs: %s\n" % self.DebugFormatInt32(self.qequestioncreatets_))
    if self.has_qemodifiedts_: res+=prefix+("QEModifiedTS: %s\n" % self.DebugFormatInt32(self.qemodifiedts_))
    if self.has_qeendts_: res+=prefix+("QEEndTs: %s\n" % self.DebugFormatInt32(self.qeendts_))
    if self.has_qesubject_: res+=prefix+("QESubject: %s\n" % self.DebugFormatString(self.qesubject_))
    if self.has_qeprice_: res+=prefix+("QEPrice: %s\n" % self.DebugFormatFloat(self.qeprice_))
    if self.has_qeratingvalue_: res+=prefix+("QERatingValue: %s\n" % self.DebugFormatInt32(self.qeratingvalue_))
    if self.has_qelastquestionuid_: res+=prefix+("QELastQuestionUID: %s\n" % self.DebugFormatInt64(self.qelastquestionuid_))
    if self.has_qelastansweruid_: res+=prefix+("QELastAnswerUID: %s\n" % self.DebugFormatInt64(self.qelastansweruid_))
    if self.has_qeansweruserid_: res+=prefix+("QEAnswerUserID: %s\n" % self.DebugFormatInt64(self.qeansweruserid_))
    if self.has_qeanswerusername_: res+=prefix+("QEAnswerUsername: %s\n" % self.DebugFormatString(self.qeanswerusername_))
    if self.has_qequestionuserid_: res+=prefix+("QEQuestionUserID: %s\n" % self.DebugFormatInt64(self.qequestionuserid_))
    if self.has_qequestionusername_: res+=prefix+("QEQuestionUsername: %s\n" % self.DebugFormatString(self.qequestionusername_))
    if self.has_qeisanswerable_: res+=prefix+("QEIsAnswerable: %s\n" % self.DebugFormatBool(self.qeisanswerable_))
    if self.has_qecatid_: res+=prefix+("QECatId: %s\n" % self.DebugFormatInt32(self.qecatid_))
    if self.has_qeratingcomments_: res+=prefix+("QERatingComments: %s\n" % self.DebugFormatString(self.qeratingcomments_))
    if self.has_qelockowner_: res+=prefix+("QELockOwner: %s\n" % self.DebugFormatInt64(self.qelockowner_))
    if self.has_qenumcomments_: res+=prefix+("QENumComments: %s\n" % self.DebugFormatInt32(self.qenumcomments_))
    if self.has_qelockownerusername_: res+=prefix+("QELockOwnerUsername: %s\n" % self.DebugFormatString(self.qelockownerusername_))
    if self.has_secureid_: res+=prefix+("SecureID: %s\n" % self.DebugFormatString(self.secureid_))
    cnt=0
    for e in self.froogleimgurl_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("FroogleImgUrl%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_froogleselectedimgurl_: res+=prefix+("FroogleSelectedImgUrl: %s\n" % self.DebugFormatString(self.froogleselectedimgurl_))
    if self.has_froogleprice_: res+=prefix+("FrooglePrice: %s\n" % self.DebugFormatString(self.froogleprice_))
    if self.has_froogleextractedprice_:
      res+=prefix+"FroogleExtractedPrice <\n"
      res+=self.froogleextractedprice_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_frooglecategoryid_: res+=prefix+("FroogleCategoryId: %s\n" % self.DebugFormatInt32(self.frooglecategoryid_))
    if self.has_frooglemerchantid_: res+=prefix+("FroogleMerchantId: %s\n" % self.DebugFormatString(self.frooglemerchantid_))
    cnt=0
    for e in self.entity_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Entity%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_science_:
      res+=prefix+"Science <\n"
      res+=self.science_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_premium_:
      res+=prefix+"Premium <\n"
      res+=self.premium_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_ocean_tag_:
      res+=prefix+"Ocean_Tag <\n"
      res+=self.ocean_tag_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    if self.has_displayurl_: res+=prefix+("DisplayUrl: %s\n" % self.DebugFormatString(self.displayurl_))
    if self.has_c2c_direction_: res+=prefix+("C2C_Direction: %s\n" % self.DebugFormatInt32(self.c2c_direction_))
    return res

class DocsTag(ProtocolBuffer.ProtocolMessage):

  FILTER_NONE  =    0 
  FILTER_DUPSNIPPET =    1 
  FILTER_MULTIHOST =    2 
  FILTER_BADURL =    3 
  FILTER_NOURL =    4 
  FILTER_FOREIGN_ENCODING =    5 
  FILTER_NOUSENET =    6 
  FILTER_OTHER =    7 
  FILTER_MULTIPATH =    8 
  FILTER_APPROX_DUPSNIPPET =    9 
  FILTER_SIMILAR_URL =   10 
  FILTER_IDENTICAL_URL =   11 
  FILTER_NEWS_STORY =   12 
  FILTER_DMCA  =   13 
  FILTER_RESTRICTED_ACCESS =   14 
  FILTER_EMPTY_DOCUMENT =   15 
  FILTER_BADURL_SPAM =   16 
  FILTER_NOT_TERM =   17 
  FILTER_PERSONALIZED_RESULT =   18 
  FILTER_LOCAL_LAW =   19 
  FILTER_US_LAW =   20 
  FILTER_BLOCK =   21 
  FILTER_PREMIUM_CLUSTER =   22 
  FILTER_EMPTY_SNIPPET_NAVFRACT =   23 
  FILTER_NONENTITLED_PREMIUM =   24 

  _FILTER_TYPE_NAMES = {
    0: "FILTER_NONE",
    1: "FILTER_DUPSNIPPET",
    2: "FILTER_MULTIHOST",
    3: "FILTER_BADURL",
    4: "FILTER_NOURL",
    5: "FILTER_FOREIGN_ENCODING",
    6: "FILTER_NOUSENET",
    7: "FILTER_OTHER",
    8: "FILTER_MULTIPATH",
    9: "FILTER_APPROX_DUPSNIPPET",
    10: "FILTER_SIMILAR_URL",
    11: "FILTER_IDENTICAL_URL",
    12: "FILTER_NEWS_STORY",
    13: "FILTER_DMCA",
    14: "FILTER_RESTRICTED_ACCESS",
    15: "FILTER_EMPTY_DOCUMENT",
    16: "FILTER_BADURL_SPAM",
    17: "FILTER_NOT_TERM",
    18: "FILTER_PERSONALIZED_RESULT",
    19: "FILTER_LOCAL_LAW",
    20: "FILTER_US_LAW",
    21: "FILTER_BLOCK",
    22: "FILTER_PREMIUM_CLUSTER",
    23: "FILTER_EMPTY_SNIPPET_NAVFRACT",
    24: "FILTER_NONENTITLED_PREMIUM",
  }

  def FILTER_TYPE_Name(cls, x): return cls._FILTER_TYPE_NAMES.get(x, "")
  FILTER_TYPE_Name = classmethod(FILTER_TYPE_Name)

  def __init__(self, contents=None):
    self.version_ = 0
    self.obsoleteresultsdataversion_ = ""
    self.result_ = []
    self.has_version_ = 0
    self.has_obsoleteresultsdataversion_ = 0
    if contents is not None: self.MergeFromString(contents)

  def version(self): return self.version_

  def set_version(self, x):
    self.has_version_ = 1
    self.version_ = x

  def clear_version(self):
    self.has_version_ = 0
    self.version_ = 0

  def has_version(self): return self.has_version_

  def obsoleteresultsdataversion(self): return self.obsoleteresultsdataversion_

  def set_obsoleteresultsdataversion(self, x):
    self.has_obsoleteresultsdataversion_ = 1
    self.obsoleteresultsdataversion_ = x

  def clear_obsoleteresultsdataversion(self):
    self.has_obsoleteresultsdataversion_ = 0
    self.obsoleteresultsdataversion_ = ""

  def has_obsoleteresultsdataversion(self): return self.has_obsoleteresultsdataversion_

  def result_size(self): return len(self.result_)
  def result_list(self): return self.result_

  def result(self, i):
    return self.result_[i]

  def mutable_result(self, i):
    return self.result_[i]

  def add_result(self):
    x = DocsTag_Result()
    self.result_.append(x)
    return x

  def clear_result(self):
    self.result_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_version()): self.set_version(x.version())
    if (x.has_obsoleteresultsdataversion()): self.set_obsoleteresultsdataversion(x.obsoleteresultsdataversion())
    for i in xrange(x.result_size()): self.add_result().CopyFrom(x.result(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocsTag', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocsTag')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocsTag', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocsTag', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocsTag', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_version_ != x.has_version_: return 0
    if self.has_version_ and self.version_ != x.version_: return 0
    if self.has_obsoleteresultsdataversion_ != x.has_obsoleteresultsdataversion_: return 0
    if self.has_obsoleteresultsdataversion_ and self.obsoleteresultsdataversion_ != x.obsoleteresultsdataversion_: return 0
    if len(self.result_) != len(x.result_): return 0
    for e1, e2 in zip(self.result_, x.result_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.result_)):
      if (not self.result_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_version_): n += 2 + self.lengthVarInt64(self.version_)
    if (self.has_obsoleteresultsdataversion_): n += 2 + self.lengthString(len(self.obsoleteresultsdataversion_))
    n += 2 * len(self.result_)
    for i in xrange(len(self.result_)): n += self.result_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_version()
    self.clear_obsoleteresultsdataversion()
    self.clear_result()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.result_)):
      out.putVarInt32(11)
      self.result_[i].OutputUnchecked(out)
      out.putVarInt32(12)
    if (self.has_obsoleteresultsdataversion_):
      out.putVarInt32(698)
      out.putPrefixedString(self.obsoleteresultsdataversion_)
    if (self.has_version_):
      out.putVarInt32(800)
      out.putVarInt64(self.version_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_result().TryMerge(d)
        continue
      if tt == 698:
        self.set_obsoleteresultsdataversion(d.getPrefixedString())
        continue
      if tt == 800:
        self.set_version(d.getVarInt64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_version_: res+=prefix+("Version: %s\n" % self.DebugFormatInt64(self.version_))
    if self.has_obsoleteresultsdataversion_: res+=prefix+("ObsoleteResultsDataVersion: %s\n" % self.DebugFormatString(self.obsoleteresultsdataversion_))
    cnt=0
    for e in self.result_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Result%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kVersion = 100
  kObsoleteResultsDataVersion = 87
  kResultGroup = 1
  kResultResultPos = 2
  kResultDocid = 3
  kResultUrl = 4
  kResultIsEmpty = 14
  kResultUrlAfterRedirects = 16
  kResultTitle = 5
  kResultDocVersionId = 104
  kResultSnippets = 6
  kResultSnippetBylineDate = 126
  kResultMultisnippetGroup = 113
  kResultMultisnippetsnippet = 114
  kResultMultisnippetmetadata = 115
  kResultSitemap = 118
  kResultLocalInfo = 119
  kResultManybox = 121
  kResultHasMessageType = 122
  kResultDebugInfo = 46
  kResultSnippetEvents = 116
  kResultSnippetHash = 117
  kResultLanguage = 7
  kResultDocEncoding = 8
  kResultContentType = 9
  kResultVisualType = 127
  kResultResponseCode = 10
  kResultFilter = 105
  kResultPageLen = 11
  kResultSeenNoarchive = 12
  kResultSeenNosnippet = 47
  kResultSeenNoindex = 17
  kResultSeenNotTerm = 18
  kResultMetaTag = 19
  kResultFailsSafesearch = 20
  kResultOutsideDaterange = 21
  kResultLastmodTime = 23
  kResultLastcrawlTime = 49
  kResultIPAddress = 79
  kResultIndexDataVersion = 102
  kResultFileTypeSearch = 24
  kResultFileTypeRefUrl = 25
  kResultInlineImage = 26
  kResultImageWidth = 27
  kResultImageHeight = 28
  kResultImageSize = 29
  kResultImageThumbnailWidth = 30
  kResultImageThumbnailHeight = 31
  kResultImageThumbnailSize = 32
  kResultBody = 33
  kResultBodyLinesClipped = 34
  kResultCacheHighlightedTerms = 35
  kResultCacheNonHighlightedTerms = 36
  kResultCategoryResults = 37
  kResultGoogleLabelData = 15
  kResultUsenetSubject = 38
  kResultUsenetAuthorName = 39
  kResultUsenetAuthorEmail = 40
  kResultUsenetFollowupTo = 41
  kResultUsenetMsgid = 42
  kResultUsenetDate = 43
  kResultUsenetReference = 44
  kResultUsenetNewsgroup = 45
  kResultUsenetGuid = 109
  kResultUsenetGuidThreadPairsGroup = 110
  kResultUsenetGuidThreadPairsGroupId = 111
  kResultUsenetGuidThreadPairsThreadId = 112
  kResultFileTypeID = 48
  kResultDeprecatedScanningSnippetY = 50
  kResultDeprecatedScanningSnippetX = 51
  kResultDeprecatedScanningSnippetGeo = 52
  kResultDeprecatedScanningImageWidth = 53
  kResultDeprecatedScanningImageHeight = 54
  kResultDeprecatedScanningImageUseSmall = 55
  kResultRepptrOffset = 56
  kResultCategoryGroup = 13
  kResultCategoryTopDirName = 57
  kResultCategoryTopCatName = 58
  kResultCategoryTitle = 59
  kResultCategoryDescription = 60
  kResultQEQuestionCreateTs = 61
  kResultQEModifiedTS = 62
  kResultQEEndTs = 63
  kResultQESubject = 64
  kResultQEPrice = 65
  kResultQERatingValue = 66
  kResultQELastQuestionUID = 67
  kResultQELastAnswerUID = 68
  kResultQEAnswerUserID = 69
  kResultQEAnswerUsername = 70
  kResultQEQuestionUserID = 71
  kResultQEQuestionUsername = 72
  kResultQEIsAnswerable = 73
  kResultQECatId = 74
  kResultQERatingComments = 75
  kResultQELockOwner = 76
  kResultQENumComments = 77
  kResultQELockOwnerUsername = 103
  kResultSecureID = 78
  kResultFroogleImgUrl = 88
  kResultFroogleSelectedImgUrl = 89
  kResultFrooglePrice = 90
  kResultFroogleExtractedPrice = 98
  kResultFroogleCategoryId = 99
  kResultFroogleMerchantId = 101
  kResultEntityGroup = 91
  kResultEntityPosition = 92
  kResultEntityLength = 93
  kResultEntityCategory = 94
  kResultEntitySurface = 95
  kResultEntityValue = 96
  kResultEntityProbability = 97
  kResultScience = 106
  kResultPremium = 120
  kResultOcean_Tag = 108
  kResultDisplayUrl = 123
  kResultC2C_Direction = 124

  _TEXT = (
   "ErrorCode",  #   0
   "Result",  #   1
   "ResultPos",  #   2
   "Docid",  #   3
   "Url",  #   4
   "Title",  #   5
   "Snippets",  #   6
   "Language",  #   7
   "DocEncoding",  #   8
   "ContentType",  #   9
   "ResponseCode",  #  10
   "PageLen",  #  11
   "SeenNoarchive",  #  12
   "Category",  #  13
   "IsEmpty",  #  14
   "GoogleLabelData",  #  15
   "UrlAfterRedirects",  #  16
   "SeenNoindex",  #  17
   "SeenNotTerm",  #  18
   "MetaTag",  #  19
   "FailsSafesearch",  #  20
   "OutsideDaterange",  #  21
   None,  #  22
   "LastmodTime",  #  23
   "FileTypeSearch",  #  24
   "FileTypeRefUrl",  #  25
   "InlineImage",  #  26
   "ImageWidth",  #  27
   "ImageHeight",  #  28
   "ImageSize",  #  29
   "ImageThumbnailWidth",  #  30
   "ImageThumbnailHeight",  #  31
   "ImageThumbnailSize",  #  32
   "Body",  #  33
   "BodyLinesClipped",  #  34
   "CacheHighlightedTerms",  #  35
   "CacheNonHighlightedTerms",  #  36
   "CategoryResults",  #  37
   "UsenetSubject",  #  38
   "UsenetAuthorName",  #  39
   "UsenetAuthorEmail",  #  40
   "UsenetFollowupTo",  #  41
   "UsenetMsgid",  #  42
   "UsenetDate",  #  43
   "UsenetReference",  #  44
   "UsenetNewsgroup",  #  45
   "DebugInfo",  #  46
   "SeenNosnippet",  #  47
   "FileTypeID",  #  48
   "LastcrawlTime",  #  49
   "DeprecatedScanningSnippetY",  #  50
   "DeprecatedScanningSnippetX",  #  51
   "DeprecatedScanningSnippetGeo",  #  52
   "DeprecatedScanningImageWidth",  #  53
   "DeprecatedScanningImageHeight",  #  54
   "DeprecatedScanningImageUseSmall",  #  55
   "RepptrOffset",  #  56
   "TopDirName",  #  57
   "TopCatName",  #  58
   "Title",  #  59
   "Description",  #  60
   "QEQuestionCreateTs",  #  61
   "QEModifiedTS",  #  62
   "QEEndTs",  #  63
   "QESubject",  #  64
   "QEPrice",  #  65
   "QERatingValue",  #  66
   "QELastQuestionUID",  #  67
   "QELastAnswerUID",  #  68
   "QEAnswerUserID",  #  69
   "QEAnswerUsername",  #  70
   "QEQuestionUserID",  #  71
   "QEQuestionUsername",  #  72
   "QEIsAnswerable",  #  73
   "QECatId",  #  74
   "QERatingComments",  #  75
   "QELockOwner",  #  76
   "QENumComments",  #  77
   "SecureID",  #  78
   "IPAddress",  #  79
   None,  #  80
   None,  #  81
   None,  #  82
   None,  #  83
   None,  #  84
   None,  #  85
   None,  #  86
   "ObsoleteResultsDataVersion",  #  87
   "FroogleImgUrl",  #  88
   "FroogleSelectedImgUrl",  #  89
   "FrooglePrice",  #  90
   "Entity",  #  91
   "Position",  #  92
   "Length",  #  93
   "Category",  #  94
   "Surface",  #  95
   "Value",  #  96
   "Probability",  #  97
   "FroogleExtractedPrice",  #  98
   "FroogleCategoryId",  #  99
   "Version",  # 100
   "FroogleMerchantId",  # 101
   "IndexDataVersion",  # 102
   "QELockOwnerUsername",  # 103
   "DocVersionId",  # 104
   "Filter",  # 105
   "Science",  # 106
   None,  # 107
   "Ocean_Tag",  # 108
   "UsenetGuid",  # 109
   "UsenetGuidThreadPairs",  # 110
   "GroupId",  # 111
   "ThreadId",  # 112
   "Multisnippet",  # 113
   "snippet",  # 114
   "metadata",  # 115
   "SnippetEvents",  # 116
   "SnippetHash",  # 117
   "Sitemap",  # 118
   "LocalInfo",  # 119
   "Premium",  # 120
   "Manybox",  # 121
   "HasMessageType",  # 122
   "DisplayUrl",  # 123
   "C2C_Direction",  # 124
   None,  # 125
   "SnippetBylineDate",  # 126
   "VisualType",  # 127
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.STARTGROUP,  #  13

   ProtocolBuffer.Encoder.NUMERIC,  #  14

   ProtocolBuffer.Encoder.STRING,  #  15

   ProtocolBuffer.Encoder.STRING,  #  16

   ProtocolBuffer.Encoder.NUMERIC,  #  17

   ProtocolBuffer.Encoder.NUMERIC,  #  18

   ProtocolBuffer.Encoder.STRING,  #  19

   ProtocolBuffer.Encoder.NUMERIC,  #  20

   ProtocolBuffer.Encoder.NUMERIC,  #  21

   ProtocolBuffer.Encoder.MAX_TYPE,  #  22

   ProtocolBuffer.Encoder.NUMERIC,  #  23

   ProtocolBuffer.Encoder.NUMERIC,  #  24

   ProtocolBuffer.Encoder.STRING,  #  25

   ProtocolBuffer.Encoder.NUMERIC,  #  26

   ProtocolBuffer.Encoder.NUMERIC,  #  27

   ProtocolBuffer.Encoder.NUMERIC,  #  28

   ProtocolBuffer.Encoder.NUMERIC,  #  29

   ProtocolBuffer.Encoder.NUMERIC,  #  30

   ProtocolBuffer.Encoder.NUMERIC,  #  31

   ProtocolBuffer.Encoder.NUMERIC,  #  32

   ProtocolBuffer.Encoder.STRING,  #  33

   ProtocolBuffer.Encoder.NUMERIC,  #  34

   ProtocolBuffer.Encoder.STRING,  #  35

   ProtocolBuffer.Encoder.STRING,  #  36

   ProtocolBuffer.Encoder.STRING,  #  37

   ProtocolBuffer.Encoder.STRING,  #  38

   ProtocolBuffer.Encoder.STRING,  #  39

   ProtocolBuffer.Encoder.STRING,  #  40

   ProtocolBuffer.Encoder.STRING,  #  41

   ProtocolBuffer.Encoder.STRING,  #  42

   ProtocolBuffer.Encoder.STRING,  #  43

   ProtocolBuffer.Encoder.STRING,  #  44

   ProtocolBuffer.Encoder.STRING,  #  45

   ProtocolBuffer.Encoder.STRING,  #  46

   ProtocolBuffer.Encoder.NUMERIC,  #  47

   ProtocolBuffer.Encoder.NUMERIC,  #  48

   ProtocolBuffer.Encoder.NUMERIC,  #  49

   ProtocolBuffer.Encoder.NUMERIC,  #  50

   ProtocolBuffer.Encoder.NUMERIC,  #  51

   ProtocolBuffer.Encoder.STRING,  #  52

   ProtocolBuffer.Encoder.NUMERIC,  #  53

   ProtocolBuffer.Encoder.NUMERIC,  #  54

   ProtocolBuffer.Encoder.NUMERIC,  #  55

   ProtocolBuffer.Encoder.NUMERIC,  #  56

   ProtocolBuffer.Encoder.STRING,  #  57

   ProtocolBuffer.Encoder.STRING,  #  58

   ProtocolBuffer.Encoder.STRING,  #  59

   ProtocolBuffer.Encoder.STRING,  #  60

   ProtocolBuffer.Encoder.NUMERIC,  #  61

   ProtocolBuffer.Encoder.NUMERIC,  #  62

   ProtocolBuffer.Encoder.NUMERIC,  #  63

   ProtocolBuffer.Encoder.STRING,  #  64

   ProtocolBuffer.Encoder.FLOAT,  #  65

   ProtocolBuffer.Encoder.NUMERIC,  #  66

   ProtocolBuffer.Encoder.NUMERIC,  #  67

   ProtocolBuffer.Encoder.NUMERIC,  #  68

   ProtocolBuffer.Encoder.NUMERIC,  #  69

   ProtocolBuffer.Encoder.STRING,  #  70

   ProtocolBuffer.Encoder.NUMERIC,  #  71

   ProtocolBuffer.Encoder.STRING,  #  72

   ProtocolBuffer.Encoder.NUMERIC,  #  73

   ProtocolBuffer.Encoder.NUMERIC,  #  74

   ProtocolBuffer.Encoder.STRING,  #  75

   ProtocolBuffer.Encoder.NUMERIC,  #  76

   ProtocolBuffer.Encoder.NUMERIC,  #  77

   ProtocolBuffer.Encoder.STRING,  #  78

   ProtocolBuffer.Encoder.STRING,  #  79

   ProtocolBuffer.Encoder.MAX_TYPE,  #  80

   ProtocolBuffer.Encoder.MAX_TYPE,  #  81

   ProtocolBuffer.Encoder.MAX_TYPE,  #  82

   ProtocolBuffer.Encoder.MAX_TYPE,  #  83

   ProtocolBuffer.Encoder.MAX_TYPE,  #  84

   ProtocolBuffer.Encoder.MAX_TYPE,  #  85

   ProtocolBuffer.Encoder.MAX_TYPE,  #  86

   ProtocolBuffer.Encoder.STRING,  #  87

   ProtocolBuffer.Encoder.STRING,  #  88

   ProtocolBuffer.Encoder.STRING,  #  89

   ProtocolBuffer.Encoder.STRING,  #  90

   ProtocolBuffer.Encoder.STARTGROUP,  #  91

   ProtocolBuffer.Encoder.NUMERIC,  #  92

   ProtocolBuffer.Encoder.NUMERIC,  #  93

   ProtocolBuffer.Encoder.NUMERIC,  #  94

   ProtocolBuffer.Encoder.STRING,  #  95

   ProtocolBuffer.Encoder.STRING,  #  96

   ProtocolBuffer.Encoder.FLOAT,  #  97

   ProtocolBuffer.Encoder.STRING,  #  98

   ProtocolBuffer.Encoder.NUMERIC,  #  99

   ProtocolBuffer.Encoder.NUMERIC,  # 100

   ProtocolBuffer.Encoder.STRING,  # 101

   ProtocolBuffer.Encoder.STRING,  # 102

   ProtocolBuffer.Encoder.STRING,  # 103

   ProtocolBuffer.Encoder.NUMERIC,  # 104

   ProtocolBuffer.Encoder.NUMERIC,  # 105

   ProtocolBuffer.Encoder.STRING,  # 106

   ProtocolBuffer.Encoder.MAX_TYPE,  # 107

   ProtocolBuffer.Encoder.STRING,  # 108

   ProtocolBuffer.Encoder.STRING,  # 109

   ProtocolBuffer.Encoder.STARTGROUP,  # 110

   ProtocolBuffer.Encoder.STRING,  # 111

   ProtocolBuffer.Encoder.STRING,  # 112

   ProtocolBuffer.Encoder.STARTGROUP,  # 113

   ProtocolBuffer.Encoder.STRING,  # 114

   ProtocolBuffer.Encoder.STRING,  # 115

   ProtocolBuffer.Encoder.NUMERIC,  # 116

   ProtocolBuffer.Encoder.NUMERIC,  # 117

   ProtocolBuffer.Encoder.STRING,  # 118

   ProtocolBuffer.Encoder.STRING,  # 119

   ProtocolBuffer.Encoder.STRING,  # 120

   ProtocolBuffer.Encoder.STRING,  # 121

   ProtocolBuffer.Encoder.NUMERIC,  # 122

   ProtocolBuffer.Encoder.STRING,  # 123

   ProtocolBuffer.Encoder.NUMERIC,  # 124

   ProtocolBuffer.Encoder.MAX_TYPE,  # 125

   ProtocolBuffer.Encoder.NUMERIC,  # 126

   ProtocolBuffer.Encoder.NUMERIC,  # 127

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x1c,
    0x64,
    0x6f,
    0x63,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x64,
    0x6f,
    0x63,
    0x73,
    0x74,
    0x61,
    0x67,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x07,
    0x44,
    0x6f,
    0x63,
    0x73,
    0x54,
    0x61,
    0x67,
    0x13,
    0x1a,
    0x07,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x64,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x4f,
    0x62,
    0x73,
    0x6f,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x44,
    0x61,
    0x74,
    0x61,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x57,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x50,
    0x6f,
    0x73,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x73,
    0x45,
    0x6d,
    0x70,
    0x74,
    0x79,
    0x20,
    0x0e,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x72,
    0x6c,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x52,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x10,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x49,
    0x64,
    0x20,
    0x68,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x02,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x73,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x42,
    0x79,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x44,
    0x61,
    0x74,
    0x65,
    0x20,
    0x7e,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x73,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x20,
    0x71,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x73,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x2e,
    0x73,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x20,
    0x72,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x73,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x2e,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x64,
    0x61,
    0x74,
    0x61,
    0x20,
    0x73,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x20,
    0x76,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x07,
    0x53,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x77,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0c,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x57,
    0x57,
    0x57,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4d,
    0x61,
    0x6e,
    0x79,
    0x62,
    0x6f,
    0x78,
    0x20,
    0x79,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0b,
    0x4d,
    0x61,
    0x6e,
    0x79,
    0x62,
    0x6f,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x48,
    0x61,
    0x73,
    0x4d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x7a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x2e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x74,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x48,
    0x61,
    0x73,
    0x68,
    0x20,
    0x75,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x45,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x56,
    0x69,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x7f,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x02,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x69,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x20,
    0x69,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x02,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x4c,
    0x65,
    0x6e,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x65,
    0x65,
    0x6e,
    0x4e,
    0x6f,
    0x61,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x65,
    0x65,
    0x6e,
    0x4e,
    0x6f,
    0x73,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x20,
    0x2f,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x65,
    0x65,
    0x6e,
    0x4e,
    0x6f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x11,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x65,
    0x65,
    0x6e,
    0x4e,
    0x6f,
    0x74,
    0x54,
    0x65,
    0x72,
    0x6d,
    0x20,
    0x12,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x54,
    0x61,
    0x67,
    0x20,
    0x13,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x61,
    0x69,
    0x6c,
    0x73,
    0x53,
    0x61,
    0x66,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x14,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4f,
    0x75,
    0x74,
    0x73,
    0x69,
    0x64,
    0x65,
    0x44,
    0x61,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x20,
    0x15,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4c,
    0x61,
    0x73,
    0x74,
    0x6d,
    0x6f,
    0x64,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x17,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4c,
    0x61,
    0x73,
    0x74,
    0x63,
    0x72,
    0x61,
    0x77,
    0x6c,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x31,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x50,
    0x41,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x20,
    0x4f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x44,
    0x61,
    0x74,
    0x61,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x66,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x18,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x52,
    0x65,
    0x66,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x19,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x20,
    0x1a,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x57,
    0x69,
    0x64,
    0x74,
    0x68,
    0x20,
    0x1b,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x48,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x1c,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x53,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x1d,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x54,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x6e,
    0x61,
    0x69,
    0x6c,
    0x57,
    0x69,
    0x64,
    0x74,
    0x68,
    0x20,
    0x1e,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x54,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x6e,
    0x61,
    0x69,
    0x6c,
    0x48,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x1f,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x54,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x6e,
    0x61,
    0x69,
    0x6c,
    0x53,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x20,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x42,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x21,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x42,
    0x6f,
    0x64,
    0x79,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x43,
    0x6c,
    0x69,
    0x70,
    0x70,
    0x65,
    0x64,
    0x20,
    0x22,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x63,
    0x68,
    0x65,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x65,
    0x64,
    0x54,
    0x65,
    0x72,
    0x6d,
    0x73,
    0x20,
    0x23,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x63,
    0x68,
    0x65,
    0x4e,
    0x6f,
    0x6e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x65,
    0x64,
    0x54,
    0x65,
    0x72,
    0x6d,
    0x73,
    0x20,
    0x24,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x20,
    0x25,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x47,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x4c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x44,
    0x61,
    0x74,
    0x61,
    0x20,
    0x0f,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x1e,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x5f,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x73,
    0x2e,
    0x47,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x4c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x44,
    0x61,
    0x74,
    0x61,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x53,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x26,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x27,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x41,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x45,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x20,
    0x28,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x46,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x75,
    0x70,
    0x54,
    0x6f,
    0x20,
    0x29,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x4d,
    0x73,
    0x67,
    0x69,
    0x64,
    0x20,
    0x2a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x44,
    0x61,
    0x74,
    0x65,
    0x20,
    0x2b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x2c,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x4e,
    0x65,
    0x77,
    0x73,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x20,
    0x2d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x47,
    0x75,
    0x69,
    0x64,
    0x20,
    0x6d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x47,
    0x75,
    0x69,
    0x64,
    0x54,
    0x68,
    0x72,
    0x65,
    0x61,
    0x64,
    0x50,
    0x61,
    0x69,
    0x72,
    0x73,
    0x20,
    0x6e,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x47,
    0x75,
    0x69,
    0x64,
    0x54,
    0x68,
    0x72,
    0x65,
    0x61,
    0x64,
    0x50,
    0x61,
    0x69,
    0x72,
    0x73,
    0x2e,
    0x47,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x49,
    0x64,
    0x20,
    0x6f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x40,
    0x14,
    0x13,
    0x1a,
    0x25,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x55,
    0x73,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x47,
    0x75,
    0x69,
    0x64,
    0x54,
    0x68,
    0x72,
    0x65,
    0x61,
    0x64,
    0x50,
    0x61,
    0x69,
    0x72,
    0x73,
    0x2e,
    0x54,
    0x68,
    0x72,
    0x65,
    0x61,
    0x64,
    0x49,
    0x64,
    0x20,
    0x70,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x40,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x69,
    0x6c,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x44,
    0x20,
    0x30,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x59,
    0x20,
    0x32,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x58,
    0x20,
    0x33,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x47,
    0x65,
    0x6f,
    0x20,
    0x34,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x57,
    0x69,
    0x64,
    0x74,
    0x68,
    0x20,
    0x35,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x24,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x48,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x36,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x55,
    0x73,
    0x65,
    0x53,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x37,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x52,
    0x65,
    0x70,
    0x70,
    0x74,
    0x72,
    0x4f,
    0x66,
    0x66,
    0x73,
    0x65,
    0x74,
    0x20,
    0x38,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x0d,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x54,
    0x6f,
    0x70,
    0x44,
    0x69,
    0x72,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x39,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x4b,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x54,
    0x6f,
    0x70,
    0x43,
    0x61,
    0x74,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x3a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x4b,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x3b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x4b,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x44,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x3c,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x4b,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x51,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x54,
    0x73,
    0x20,
    0x3d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x4d,
    0x6f,
    0x64,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x54,
    0x53,
    0x20,
    0x3e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x45,
    0x6e,
    0x64,
    0x54,
    0x73,
    0x20,
    0x3f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x53,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x40,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x50,
    0x72,
    0x69,
    0x63,
    0x65,
    0x20,
    0x41,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x52,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x56,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x42,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x4c,
    0x61,
    0x73,
    0x74,
    0x51,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x55,
    0x49,
    0x44,
    0x20,
    0x43,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x4c,
    0x61,
    0x73,
    0x74,
    0x41,
    0x6e,
    0x73,
    0x77,
    0x65,
    0x72,
    0x55,
    0x49,
    0x44,
    0x20,
    0x44,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x41,
    0x6e,
    0x73,
    0x77,
    0x65,
    0x72,
    0x55,
    0x73,
    0x65,
    0x72,
    0x49,
    0x44,
    0x20,
    0x45,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x41,
    0x6e,
    0x73,
    0x77,
    0x65,
    0x72,
    0x55,
    0x73,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x46,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x51,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x55,
    0x73,
    0x65,
    0x72,
    0x49,
    0x44,
    0x20,
    0x47,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x51,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x55,
    0x73,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x48,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x49,
    0x73,
    0x41,
    0x6e,
    0x73,
    0x77,
    0x65,
    0x72,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x49,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x43,
    0x61,
    0x74,
    0x49,
    0x64,
    0x20,
    0x4a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x52,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x4b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x4c,
    0x6f,
    0x63,
    0x6b,
    0x4f,
    0x77,
    0x6e,
    0x65,
    0x72,
    0x20,
    0x4c,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x4e,
    0x75,
    0x6d,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x4d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x51,
    0x45,
    0x4c,
    0x6f,
    0x63,
    0x6b,
    0x4f,
    0x77,
    0x6e,
    0x65,
    0x72,
    0x55,
    0x73,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x67,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x65,
    0x63,
    0x75,
    0x72,
    0x65,
    0x49,
    0x44,
    0x20,
    0x4e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x49,
    0x6d,
    0x67,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x58,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x49,
    0x6d,
    0x67,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x59,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x50,
    0x72,
    0x69,
    0x63,
    0x65,
    0x20,
    0x5a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x45,
    0x78,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x64,
    0x50,
    0x72,
    0x69,
    0x63,
    0x65,
    0x20,
    0x62,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0c,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x50,
    0x72,
    0x69,
    0x63,
    0x65,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x49,
    0x64,
    0x20,
    0x63,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x4d,
    0x65,
    0x72,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x74,
    0x49,
    0x64,
    0x20,
    0x65,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x20,
    0x5b,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x5c,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x60,
    0x69,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x5d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x69,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x5e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x69,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x53,
    0x75,
    0x72,
    0x66,
    0x61,
    0x63,
    0x65,
    0x20,
    0x5f,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x69,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x56,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x60,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x69,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x45,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x50,
    0x72,
    0x6f,
    0x62,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x61,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x60,
    0x69,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6a,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0f,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x43,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x20,
    0x78,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x12,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x41,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x4f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x5f,
    0x54,
    0x61,
    0x67,
    0x20,
    0x6c,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x0b,
    0x4f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x44,
    0x6f,
    0x63,
    0x54,
    0x61,
    0x67,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x44,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x55,
    0x72,
    0x6c,
    0x20,
    0x7b,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x43,
    0x32,
    0x43,
    0x5f,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x7c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x02,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x0b,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4e,
    0x4f,
    0x4e,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x44,
    0x55,
    0x50,
    0x53,
    0x4e,
    0x49,
    0x50,
    0x50,
    0x45,
    0x54,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4d,
    0x55,
    0x4c,
    0x54,
    0x49,
    0x48,
    0x4f,
    0x53,
    0x54,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4e,
    0x4f,
    0x55,
    0x52,
    0x4c,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x17,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x46,
    0x4f,
    0x52,
    0x45,
    0x49,
    0x47,
    0x4e,
    0x5f,
    0x45,
    0x4e,
    0x43,
    0x4f,
    0x44,
    0x49,
    0x4e,
    0x47,
    0x98,
    0x01,
    0x05,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4e,
    0x4f,
    0x55,
    0x53,
    0x45,
    0x4e,
    0x45,
    0x54,
    0x98,
    0x01,
    0x06,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4f,
    0x54,
    0x48,
    0x45,
    0x52,
    0x98,
    0x01,
    0x07,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4d,
    0x55,
    0x4c,
    0x54,
    0x49,
    0x50,
    0x41,
    0x54,
    0x48,
    0x98,
    0x01,
    0x08,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x41,
    0x50,
    0x50,
    0x52,
    0x4f,
    0x58,
    0x5f,
    0x44,
    0x55,
    0x50,
    0x53,
    0x4e,
    0x49,
    0x50,
    0x50,
    0x45,
    0x54,
    0x98,
    0x01,
    0x09,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x53,
    0x49,
    0x4d,
    0x49,
    0x4c,
    0x41,
    0x52,
    0x5f,
    0x55,
    0x52,
    0x4c,
    0x98,
    0x01,
    0x0a,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x49,
    0x44,
    0x45,
    0x4e,
    0x54,
    0x49,
    0x43,
    0x41,
    0x4c,
    0x5f,
    0x55,
    0x52,
    0x4c,
    0x98,
    0x01,
    0x0b,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4e,
    0x45,
    0x57,
    0x53,
    0x5f,
    0x53,
    0x54,
    0x4f,
    0x52,
    0x59,
    0x98,
    0x01,
    0x0c,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0b,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x44,
    0x4d,
    0x43,
    0x41,
    0x98,
    0x01,
    0x0d,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x18,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x52,
    0x45,
    0x53,
    0x54,
    0x52,
    0x49,
    0x43,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x41,
    0x43,
    0x43,
    0x45,
    0x53,
    0x53,
    0x98,
    0x01,
    0x0e,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x15,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x45,
    0x4d,
    0x50,
    0x54,
    0x59,
    0x5f,
    0x44,
    0x4f,
    0x43,
    0x55,
    0x4d,
    0x45,
    0x4e,
    0x54,
    0x98,
    0x01,
    0x0f,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x42,
    0x41,
    0x44,
    0x55,
    0x52,
    0x4c,
    0x5f,
    0x53,
    0x50,
    0x41,
    0x4d,
    0x98,
    0x01,
    0x10,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4e,
    0x4f,
    0x54,
    0x5f,
    0x54,
    0x45,
    0x52,
    0x4d,
    0x98,
    0x01,
    0x11,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x50,
    0x45,
    0x52,
    0x53,
    0x4f,
    0x4e,
    0x41,
    0x4c,
    0x49,
    0x5a,
    0x45,
    0x44,
    0x5f,
    0x52,
    0x45,
    0x53,
    0x55,
    0x4c,
    0x54,
    0x98,
    0x01,
    0x12,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x10,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4c,
    0x4f,
    0x43,
    0x41,
    0x4c,
    0x5f,
    0x4c,
    0x41,
    0x57,
    0x98,
    0x01,
    0x13,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x55,
    0x53,
    0x5f,
    0x4c,
    0x41,
    0x57,
    0x98,
    0x01,
    0x14,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x42,
    0x4c,
    0x4f,
    0x43,
    0x4b,
    0x98,
    0x01,
    0x15,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x50,
    0x52,
    0x45,
    0x4d,
    0x49,
    0x55,
    0x4d,
    0x5f,
    0x43,
    0x4c,
    0x55,
    0x53,
    0x54,
    0x45,
    0x52,
    0x98,
    0x01,
    0x16,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1d,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x45,
    0x4d,
    0x50,
    0x54,
    0x59,
    0x5f,
    0x53,
    0x4e,
    0x49,
    0x50,
    0x50,
    0x45,
    0x54,
    0x5f,
    0x4e,
    0x41,
    0x56,
    0x46,
    0x52,
    0x41,
    0x43,
    0x54,
    0x98,
    0x01,
    0x17,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x1a,
    0x46,
    0x49,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x5f,
    0x4e,
    0x4f,
    0x4e,
    0x45,
    0x4e,
    0x54,
    0x49,
    0x54,
    0x4c,
    0x45,
    0x44,
    0x5f,
    0x50,
    0x52,
    0x45,
    0x4d,
    0x49,
    0x55,
    0x4d,
    0x98,
    0x01,
    0x18,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['DocsTag','DocsTag_ResultCategory','DocsTag_ResultEntity','DocsTag_ResultUsenetGuidThreadPairs','DocsTag_ResultMultisnippet','DocsTag_Result']
