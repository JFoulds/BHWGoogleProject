# This file automatically generated by protocol-compiler from docserving/rpc/doccommand.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

from google3.mustang.aggregation.proto.aggregate_pb import IndexResultsAggregation
class DocCommandProto_DocItemSnippetOverridePositionContent(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.position_ = 0
    self.length_ = 0
    self.has_position_ = 0
    self.has_length_ = 0
    if contents is not None: self.MergeFromString(contents)

  def position(self): return self.position_

  def set_position(self, x):
    self.has_position_ = 1
    self.position_ = x

  def clear_position(self):
    self.has_position_ = 0
    self.position_ = 0

  def has_position(self): return self.has_position_

  def length(self): return self.length_

  def set_length(self, x):
    self.has_length_ = 1
    self.length_ = x

  def clear_length(self):
    self.has_length_ = 0
    self.length_ = 0

  def has_length(self): return self.has_length_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_position()): self.set_position(x.position())
    if (x.has_length()): self.set_length(x.length())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_position_ != x.has_position_: return 0
    if self.has_position_ and self.position_ != x.position_: return 0
    if self.has_length_ != x.has_length_: return 0
    if self.has_length_ and self.length_ != x.length_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_position_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: position not set.')
    if (not self.has_length_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: length not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.position_)
    n += self.lengthVarInt64(self.length_)
    return n + 4

  def Clear(self):
    self.clear_position()
    self.clear_length()

  def OutputUnchecked(self, out):
    out.putVarInt32(600)
    out.putVarInt32(self.position_)
    out.putVarInt32(608)
    out.putVarInt32(self.length_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 596: break
      if tt == 600:
        self.set_position(d.getVarInt32())
        continue
      if tt == 608:
        self.set_length(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_position_: res+=prefix+("Position: %s\n" % self.DebugFormatInt32(self.position_))
    if self.has_length_: res+=prefix+("Length: %s\n" % self.DebugFormatInt32(self.length_))
    return res

class DocCommandProto_DocItemSnippetOverrideResultsInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.snippetcharsperline_ = 0
    self.maxnumsnippets_ = 0
    self.maxsnippetchars_ = 0
    self.has_snippetcharsperline_ = 0
    self.has_maxnumsnippets_ = 0
    self.has_maxsnippetchars_ = 0
    if contents is not None: self.MergeFromString(contents)

  def snippetcharsperline(self): return self.snippetcharsperline_

  def set_snippetcharsperline(self, x):
    self.has_snippetcharsperline_ = 1
    self.snippetcharsperline_ = x

  def clear_snippetcharsperline(self):
    self.has_snippetcharsperline_ = 0
    self.snippetcharsperline_ = 0

  def has_snippetcharsperline(self): return self.has_snippetcharsperline_

  def maxnumsnippets(self): return self.maxnumsnippets_

  def set_maxnumsnippets(self, x):
    self.has_maxnumsnippets_ = 1
    self.maxnumsnippets_ = x

  def clear_maxnumsnippets(self):
    self.has_maxnumsnippets_ = 0
    self.maxnumsnippets_ = 0

  def has_maxnumsnippets(self): return self.has_maxnumsnippets_

  def maxsnippetchars(self): return self.maxsnippetchars_

  def set_maxsnippetchars(self, x):
    self.has_maxsnippetchars_ = 1
    self.maxsnippetchars_ = x

  def clear_maxsnippetchars(self):
    self.has_maxsnippetchars_ = 0
    self.maxsnippetchars_ = 0

  def has_maxsnippetchars(self): return self.has_maxsnippetchars_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_snippetcharsperline()): self.set_snippetcharsperline(x.snippetcharsperline())
    if (x.has_maxnumsnippets()): self.set_maxnumsnippets(x.maxnumsnippets())
    if (x.has_maxsnippetchars()): self.set_maxsnippetchars(x.maxsnippetchars())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_snippetcharsperline_ != x.has_snippetcharsperline_: return 0
    if self.has_snippetcharsperline_ and self.snippetcharsperline_ != x.snippetcharsperline_: return 0
    if self.has_maxnumsnippets_ != x.has_maxnumsnippets_: return 0
    if self.has_maxnumsnippets_ and self.maxnumsnippets_ != x.maxnumsnippets_: return 0
    if self.has_maxsnippetchars_ != x.has_maxsnippetchars_: return 0
    if self.has_maxsnippetchars_ and self.maxsnippetchars_ != x.maxsnippetchars_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_snippetcharsperline_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: snippetcharsperline not set.')
    if (not self.has_maxnumsnippets_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: maxnumsnippets not set.')
    if (not self.has_maxsnippetchars_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: maxsnippetchars not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.snippetcharsperline_)
    n += self.lengthVarInt64(self.maxnumsnippets_)
    n += self.lengthVarInt64(self.maxsnippetchars_)
    return n + 6

  def Clear(self):
    self.clear_snippetcharsperline()
    self.clear_maxnumsnippets()
    self.clear_maxsnippetchars()

  def OutputUnchecked(self, out):
    out.putVarInt32(736)
    out.putVarInt32(self.snippetcharsperline_)
    out.putVarInt32(744)
    out.putVarInt32(self.maxnumsnippets_)
    out.putVarInt32(752)
    out.putVarInt32(self.maxsnippetchars_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 732: break
      if tt == 736:
        self.set_snippetcharsperline(d.getVarInt32())
        continue
      if tt == 744:
        self.set_maxnumsnippets(d.getVarInt32())
        continue
      if tt == 752:
        self.set_maxsnippetchars(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_snippetcharsperline_: res+=prefix+("SnippetCharsPerLine: %s\n" % self.DebugFormatInt32(self.snippetcharsperline_))
    if self.has_maxnumsnippets_: res+=prefix+("MaxNumSnippets: %s\n" % self.DebugFormatInt32(self.maxnumsnippets_))
    if self.has_maxsnippetchars_: res+=prefix+("MaxSnippetChars: %s\n" % self.DebugFormatInt32(self.maxsnippetchars_))
    return res

class DocCommandProto_DeprecatedMagazineInfoHighlight(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.linex_ = 0
    self.liney_ = 0
    self.linew_ = 0
    self.lineh_ = 0
    self.wordx_ = 0
    self.wordy_ = 0
    self.wordw_ = 0
    self.wordh_ = 0
    self.has_linex_ = 0
    self.has_liney_ = 0
    self.has_linew_ = 0
    self.has_lineh_ = 0
    self.has_wordx_ = 0
    self.has_wordy_ = 0
    self.has_wordw_ = 0
    self.has_wordh_ = 0
    if contents is not None: self.MergeFromString(contents)

  def linex(self): return self.linex_

  def set_linex(self, x):
    self.has_linex_ = 1
    self.linex_ = x

  def clear_linex(self):
    self.has_linex_ = 0
    self.linex_ = 0

  def has_linex(self): return self.has_linex_

  def liney(self): return self.liney_

  def set_liney(self, x):
    self.has_liney_ = 1
    self.liney_ = x

  def clear_liney(self):
    self.has_liney_ = 0
    self.liney_ = 0

  def has_liney(self): return self.has_liney_

  def linew(self): return self.linew_

  def set_linew(self, x):
    self.has_linew_ = 1
    self.linew_ = x

  def clear_linew(self):
    self.has_linew_ = 0
    self.linew_ = 0

  def has_linew(self): return self.has_linew_

  def lineh(self): return self.lineh_

  def set_lineh(self, x):
    self.has_lineh_ = 1
    self.lineh_ = x

  def clear_lineh(self):
    self.has_lineh_ = 0
    self.lineh_ = 0

  def has_lineh(self): return self.has_lineh_

  def wordx(self): return self.wordx_

  def set_wordx(self, x):
    self.has_wordx_ = 1
    self.wordx_ = x

  def clear_wordx(self):
    self.has_wordx_ = 0
    self.wordx_ = 0

  def has_wordx(self): return self.has_wordx_

  def wordy(self): return self.wordy_

  def set_wordy(self, x):
    self.has_wordy_ = 1
    self.wordy_ = x

  def clear_wordy(self):
    self.has_wordy_ = 0
    self.wordy_ = 0

  def has_wordy(self): return self.has_wordy_

  def wordw(self): return self.wordw_

  def set_wordw(self, x):
    self.has_wordw_ = 1
    self.wordw_ = x

  def clear_wordw(self):
    self.has_wordw_ = 0
    self.wordw_ = 0

  def has_wordw(self): return self.has_wordw_

  def wordh(self): return self.wordh_

  def set_wordh(self, x):
    self.has_wordh_ = 1
    self.wordh_ = x

  def clear_wordh(self):
    self.has_wordh_ = 0
    self.wordh_ = 0

  def has_wordh(self): return self.has_wordh_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_linex()): self.set_linex(x.linex())
    if (x.has_liney()): self.set_liney(x.liney())
    if (x.has_linew()): self.set_linew(x.linew())
    if (x.has_lineh()): self.set_lineh(x.lineh())
    if (x.has_wordx()): self.set_wordx(x.wordx())
    if (x.has_wordy()): self.set_wordy(x.wordy())
    if (x.has_wordw()): self.set_wordw(x.wordw())
    if (x.has_wordh()): self.set_wordh(x.wordh())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_linex_ != x.has_linex_: return 0
    if self.has_linex_ and self.linex_ != x.linex_: return 0
    if self.has_liney_ != x.has_liney_: return 0
    if self.has_liney_ and self.liney_ != x.liney_: return 0
    if self.has_linew_ != x.has_linew_: return 0
    if self.has_linew_ and self.linew_ != x.linew_: return 0
    if self.has_lineh_ != x.has_lineh_: return 0
    if self.has_lineh_ and self.lineh_ != x.lineh_: return 0
    if self.has_wordx_ != x.has_wordx_: return 0
    if self.has_wordx_ and self.wordx_ != x.wordx_: return 0
    if self.has_wordy_ != x.has_wordy_: return 0
    if self.has_wordy_ and self.wordy_ != x.wordy_: return 0
    if self.has_wordw_ != x.has_wordw_: return 0
    if self.has_wordw_ and self.wordw_ != x.wordw_: return 0
    if self.has_wordh_ != x.has_wordh_: return 0
    if self.has_wordh_ and self.wordh_ != x.wordh_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_linex_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: linex not set.')
    if (not self.has_liney_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: liney not set.')
    if (not self.has_linew_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: linew not set.')
    if (not self.has_lineh_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: lineh not set.')
    if (not self.has_wordx_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: wordx not set.')
    if (not self.has_wordy_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: wordy not set.')
    if (not self.has_wordw_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: wordw not set.')
    if (not self.has_wordh_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: wordh not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.linex_)
    n += self.lengthVarInt64(self.liney_)
    n += self.lengthVarInt64(self.linew_)
    n += self.lengthVarInt64(self.lineh_)
    n += self.lengthVarInt64(self.wordx_)
    n += self.lengthVarInt64(self.wordy_)
    n += self.lengthVarInt64(self.wordw_)
    n += self.lengthVarInt64(self.wordh_)
    return n + 16

  def Clear(self):
    self.clear_linex()
    self.clear_liney()
    self.clear_linew()
    self.clear_lineh()
    self.clear_wordx()
    self.clear_wordy()
    self.clear_wordw()
    self.clear_wordh()

  def OutputUnchecked(self, out):
    out.putVarInt32(320)
    out.putVarInt32(self.wordx_)
    out.putVarInt32(328)
    out.putVarInt32(self.wordy_)
    out.putVarInt32(336)
    out.putVarInt32(self.wordw_)
    out.putVarInt32(344)
    out.putVarInt32(self.wordh_)
    out.putVarInt32(496)
    out.putVarInt32(self.linex_)
    out.putVarInt32(504)
    out.putVarInt32(self.liney_)
    out.putVarInt32(512)
    out.putVarInt32(self.linew_)
    out.putVarInt32(520)
    out.putVarInt32(self.lineh_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 316: break
      if tt == 320:
        self.set_wordx(d.getVarInt32())
        continue
      if tt == 328:
        self.set_wordy(d.getVarInt32())
        continue
      if tt == 336:
        self.set_wordw(d.getVarInt32())
        continue
      if tt == 344:
        self.set_wordh(d.getVarInt32())
        continue
      if tt == 496:
        self.set_linex(d.getVarInt32())
        continue
      if tt == 504:
        self.set_liney(d.getVarInt32())
        continue
      if tt == 512:
        self.set_linew(d.getVarInt32())
        continue
      if tt == 520:
        self.set_lineh(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_linex_: res+=prefix+("LineX: %s\n" % self.DebugFormatInt32(self.linex_))
    if self.has_liney_: res+=prefix+("LineY: %s\n" % self.DebugFormatInt32(self.liney_))
    if self.has_linew_: res+=prefix+("LineW: %s\n" % self.DebugFormatInt32(self.linew_))
    if self.has_lineh_: res+=prefix+("LineH: %s\n" % self.DebugFormatInt32(self.lineh_))
    if self.has_wordx_: res+=prefix+("WordX: %s\n" % self.DebugFormatInt32(self.wordx_))
    if self.has_wordy_: res+=prefix+("WordY: %s\n" % self.DebugFormatInt32(self.wordy_))
    if self.has_wordw_: res+=prefix+("WordW: %s\n" % self.DebugFormatInt32(self.wordw_))
    if self.has_wordh_: res+=prefix+("WordH: %s\n" % self.DebugFormatInt32(self.wordh_))
    return res

class DocCommandProto_DocItemSnippetOverride(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.positioncontent_ = []
    self.localsearch_content_id_ = 0
    self.context_rejection_mask_ = 0
    self.resultsinfo_ = None
    self.has_localsearch_content_id_ = 0
    self.has_context_rejection_mask_ = 0
    self.has_resultsinfo_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def positioncontent_size(self): return len(self.positioncontent_)
  def positioncontent_list(self): return self.positioncontent_

  def positioncontent(self, i):
    return self.positioncontent_[i]

  def mutable_positioncontent(self, i):
    return self.positioncontent_[i]

  def add_positioncontent(self):
    x = DocCommandProto_DocItemSnippetOverridePositionContent()
    self.positioncontent_.append(x)
    return x

  def clear_positioncontent(self):
    self.positioncontent_ = []
  def localsearch_content_id(self): return self.localsearch_content_id_

  def set_localsearch_content_id(self, x):
    self.has_localsearch_content_id_ = 1
    self.localsearch_content_id_ = x

  def clear_localsearch_content_id(self):
    self.has_localsearch_content_id_ = 0
    self.localsearch_content_id_ = 0

  def has_localsearch_content_id(self): return self.has_localsearch_content_id_

  def context_rejection_mask(self): return self.context_rejection_mask_

  def set_context_rejection_mask(self, x):
    self.has_context_rejection_mask_ = 1
    self.context_rejection_mask_ = x

  def clear_context_rejection_mask(self):
    self.has_context_rejection_mask_ = 0
    self.context_rejection_mask_ = 0

  def has_context_rejection_mask(self): return self.has_context_rejection_mask_

  def resultsinfo(self):
    if self.resultsinfo_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.resultsinfo_ is None: self.resultsinfo_ = DocCommandProto_DocItemSnippetOverrideResultsInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.resultsinfo_

  def mutable_resultsinfo(self): self.has_resultsinfo_ = 1; return self.resultsinfo()

  def clear_resultsinfo(self):
    #Warning: this method does not acquire the lock.
    self.has_resultsinfo_ = 0;
    if self.resultsinfo_ is not None: self.resultsinfo_.Clear()

  def has_resultsinfo(self): return self.has_resultsinfo_


  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.positioncontent_size()): self.add_positioncontent().CopyFrom(x.positioncontent(i))
    if (x.has_localsearch_content_id()): self.set_localsearch_content_id(x.localsearch_content_id())
    if (x.has_context_rejection_mask()): self.set_context_rejection_mask(x.context_rejection_mask())
    if (x.has_resultsinfo()): self.mutable_resultsinfo().MergeFrom(x.resultsinfo())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.positioncontent_) != len(x.positioncontent_): return 0
    for e1, e2 in zip(self.positioncontent_, x.positioncontent_):
      if e1 != e2: return 0
    if self.has_localsearch_content_id_ != x.has_localsearch_content_id_: return 0
    if self.has_localsearch_content_id_ and self.localsearch_content_id_ != x.localsearch_content_id_: return 0
    if self.has_context_rejection_mask_ != x.has_context_rejection_mask_: return 0
    if self.has_context_rejection_mask_ and self.context_rejection_mask_ != x.context_rejection_mask_: return 0
    if self.has_resultsinfo_ != x.has_resultsinfo_: return 0
    if self.has_resultsinfo_ and self.resultsinfo_ != x.resultsinfo_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.positioncontent_)):
      if (not self.positioncontent_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_resultsinfo_ and not self.resultsinfo_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += 4 * len(self.positioncontent_)
    for i in xrange(len(self.positioncontent_)): n += self.positioncontent_[i].ByteSize()
    if (self.has_localsearch_content_id_): n += 2 + self.lengthVarInt64(self.localsearch_content_id_)
    if (self.has_context_rejection_mask_): n += 2 + self.lengthVarInt64(self.context_rejection_mask_)
    if (self.has_resultsinfo_): n += 4 + self.resultsinfo_.ByteSize()
    return n + 0

  def Clear(self):
    self.clear_positioncontent()
    self.clear_localsearch_content_id()
    self.clear_context_rejection_mask()
    self.clear_resultsinfo()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.positioncontent_)):
      out.putVarInt32(595)
      self.positioncontent_[i].OutputUnchecked(out)
      out.putVarInt32(596)
    if (self.has_localsearch_content_id_):
      out.putVarInt32(720)
      out.putVarInt32(self.localsearch_content_id_)
    if (self.has_resultsinfo_):
      out.putVarInt32(731)
      self.resultsinfo_.OutputUnchecked(out)
      out.putVarInt32(732)
    if (self.has_context_rejection_mask_):
      out.putVarInt32(784)
      out.putVarInt32(self.context_rejection_mask_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 588: break
      if tt == 595:
        self.add_positioncontent().TryMerge(d)
        continue
      if tt == 720:
        self.set_localsearch_content_id(d.getVarInt32())
        continue
      if tt == 731:
        self.mutable_resultsinfo().TryMerge(d)
        continue
      if tt == 784:
        self.set_context_rejection_mask(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.positioncontent_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("PositionContent%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_localsearch_content_id_: res+=prefix+("localsearch_content_id: %s\n" % self.DebugFormatInt32(self.localsearch_content_id_))
    if self.has_context_rejection_mask_: res+=prefix+("context_rejection_mask: %s\n" % self.DebugFormatInt32(self.context_rejection_mask_))
    if self.has_resultsinfo_:
      res+=prefix+"ResultsInfo {\n"
      res+=self.resultsinfo_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    return res

class DocCommandProto_ResultsInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.snippetcharsperline_ = 0
    self.maxnumsnippets_ = 0
    self.maxsnippetchars_ = 0
    self.has_snippetcharsperline_ = 0
    self.has_maxnumsnippets_ = 0
    self.has_maxsnippetchars_ = 0
    if contents is not None: self.MergeFromString(contents)

  def snippetcharsperline(self): return self.snippetcharsperline_

  def set_snippetcharsperline(self, x):
    self.has_snippetcharsperline_ = 1
    self.snippetcharsperline_ = x

  def clear_snippetcharsperline(self):
    self.has_snippetcharsperline_ = 0
    self.snippetcharsperline_ = 0

  def has_snippetcharsperline(self): return self.has_snippetcharsperline_

  def maxnumsnippets(self): return self.maxnumsnippets_

  def set_maxnumsnippets(self, x):
    self.has_maxnumsnippets_ = 1
    self.maxnumsnippets_ = x

  def clear_maxnumsnippets(self):
    self.has_maxnumsnippets_ = 0
    self.maxnumsnippets_ = 0

  def has_maxnumsnippets(self): return self.has_maxnumsnippets_

  def maxsnippetchars(self): return self.maxsnippetchars_

  def set_maxsnippetchars(self, x):
    self.has_maxsnippetchars_ = 1
    self.maxsnippetchars_ = x

  def clear_maxsnippetchars(self):
    self.has_maxsnippetchars_ = 0
    self.maxsnippetchars_ = 0

  def has_maxsnippetchars(self): return self.has_maxsnippetchars_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_snippetcharsperline()): self.set_snippetcharsperline(x.snippetcharsperline())
    if (x.has_maxnumsnippets()): self.set_maxnumsnippets(x.maxnumsnippets())
    if (x.has_maxsnippetchars()): self.set_maxsnippetchars(x.maxsnippetchars())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_snippetcharsperline_ != x.has_snippetcharsperline_: return 0
    if self.has_snippetcharsperline_ and self.snippetcharsperline_ != x.snippetcharsperline_: return 0
    if self.has_maxnumsnippets_ != x.has_maxnumsnippets_: return 0
    if self.has_maxnumsnippets_ and self.maxnumsnippets_ != x.maxnumsnippets_: return 0
    if self.has_maxsnippetchars_ != x.has_maxsnippetchars_: return 0
    if self.has_maxsnippetchars_ and self.maxsnippetchars_ != x.maxsnippetchars_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_snippetcharsperline_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: snippetcharsperline not set.')
    if (not self.has_maxnumsnippets_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: maxnumsnippets not set.')
    if (not self.has_maxsnippetchars_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: maxsnippetchars not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.snippetcharsperline_)
    n += self.lengthVarInt64(self.maxnumsnippets_)
    n += self.lengthVarInt64(self.maxsnippetchars_)
    return n + 3

  def Clear(self):
    self.clear_snippetcharsperline()
    self.clear_maxnumsnippets()
    self.clear_maxsnippetchars()

  def OutputUnchecked(self, out):
    out.putVarInt32(72)
    out.putVarInt32(self.snippetcharsperline_)
    out.putVarInt32(80)
    out.putVarInt32(self.maxnumsnippets_)
    out.putVarInt32(88)
    out.putVarInt32(self.maxsnippetchars_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 68: break
      if tt == 72:
        self.set_snippetcharsperline(d.getVarInt32())
        continue
      if tt == 80:
        self.set_maxnumsnippets(d.getVarInt32())
        continue
      if tt == 88:
        self.set_maxsnippetchars(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_snippetcharsperline_: res+=prefix+("SnippetCharsPerLine: %s\n" % self.DebugFormatInt32(self.snippetcharsperline_))
    if self.has_maxnumsnippets_: res+=prefix+("MaxNumSnippets: %s\n" % self.DebugFormatInt32(self.maxnumsnippets_))
    if self.has_maxsnippetchars_: res+=prefix+("MaxSnippetChars: %s\n" % self.DebugFormatInt32(self.maxsnippetchars_))
    return res

class DocCommandProto_DeprecatedMagazineInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.scantype_ = ""
    self.issmall_ = 0
    self.numhighlight_ = 0
    self.snipx_ = 0
    self.snipy_ = 0
    self.imagewidth_ = 0
    self.imageheight_ = 0
    self.highlight_ = []
    self.has_scantype_ = 0
    self.has_issmall_ = 0
    self.has_numhighlight_ = 0
    self.has_snipx_ = 0
    self.has_snipy_ = 0
    self.has_imagewidth_ = 0
    self.has_imageheight_ = 0
    if contents is not None: self.MergeFromString(contents)

  def scantype(self): return self.scantype_

  def set_scantype(self, x):
    self.has_scantype_ = 1
    self.scantype_ = x

  def clear_scantype(self):
    self.has_scantype_ = 0
    self.scantype_ = ""

  def has_scantype(self): return self.has_scantype_

  def issmall(self): return self.issmall_

  def set_issmall(self, x):
    self.has_issmall_ = 1
    self.issmall_ = x

  def clear_issmall(self):
    self.has_issmall_ = 0
    self.issmall_ = 0

  def has_issmall(self): return self.has_issmall_

  def numhighlight(self): return self.numhighlight_

  def set_numhighlight(self, x):
    self.has_numhighlight_ = 1
    self.numhighlight_ = x

  def clear_numhighlight(self):
    self.has_numhighlight_ = 0
    self.numhighlight_ = 0

  def has_numhighlight(self): return self.has_numhighlight_

  def snipx(self): return self.snipx_

  def set_snipx(self, x):
    self.has_snipx_ = 1
    self.snipx_ = x

  def clear_snipx(self):
    self.has_snipx_ = 0
    self.snipx_ = 0

  def has_snipx(self): return self.has_snipx_

  def snipy(self): return self.snipy_

  def set_snipy(self, x):
    self.has_snipy_ = 1
    self.snipy_ = x

  def clear_snipy(self):
    self.has_snipy_ = 0
    self.snipy_ = 0

  def has_snipy(self): return self.has_snipy_

  def imagewidth(self): return self.imagewidth_

  def set_imagewidth(self, x):
    self.has_imagewidth_ = 1
    self.imagewidth_ = x

  def clear_imagewidth(self):
    self.has_imagewidth_ = 0
    self.imagewidth_ = 0

  def has_imagewidth(self): return self.has_imagewidth_

  def imageheight(self): return self.imageheight_

  def set_imageheight(self, x):
    self.has_imageheight_ = 1
    self.imageheight_ = x

  def clear_imageheight(self):
    self.has_imageheight_ = 0
    self.imageheight_ = 0

  def has_imageheight(self): return self.has_imageheight_

  def highlight_size(self): return len(self.highlight_)
  def highlight_list(self): return self.highlight_

  def highlight(self, i):
    return self.highlight_[i]

  def mutable_highlight(self, i):
    return self.highlight_[i]

  def add_highlight(self):
    x = DocCommandProto_DeprecatedMagazineInfoHighlight()
    self.highlight_.append(x)
    return x

  def clear_highlight(self):
    self.highlight_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_scantype()): self.set_scantype(x.scantype())
    if (x.has_issmall()): self.set_issmall(x.issmall())
    if (x.has_numhighlight()): self.set_numhighlight(x.numhighlight())
    if (x.has_snipx()): self.set_snipx(x.snipx())
    if (x.has_snipy()): self.set_snipy(x.snipy())
    if (x.has_imagewidth()): self.set_imagewidth(x.imagewidth())
    if (x.has_imageheight()): self.set_imageheight(x.imageheight())
    for i in xrange(x.highlight_size()): self.add_highlight().CopyFrom(x.highlight(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_scantype_ != x.has_scantype_: return 0
    if self.has_scantype_ and self.scantype_ != x.scantype_: return 0
    if self.has_issmall_ != x.has_issmall_: return 0
    if self.has_issmall_ and self.issmall_ != x.issmall_: return 0
    if self.has_numhighlight_ != x.has_numhighlight_: return 0
    if self.has_numhighlight_ and self.numhighlight_ != x.numhighlight_: return 0
    if self.has_snipx_ != x.has_snipx_: return 0
    if self.has_snipx_ and self.snipx_ != x.snipx_: return 0
    if self.has_snipy_ != x.has_snipy_: return 0
    if self.has_snipy_ and self.snipy_ != x.snipy_: return 0
    if self.has_imagewidth_ != x.has_imagewidth_: return 0
    if self.has_imagewidth_ and self.imagewidth_ != x.imagewidth_: return 0
    if self.has_imageheight_ != x.has_imageheight_: return 0
    if self.has_imageheight_ and self.imageheight_ != x.imageheight_: return 0
    if len(self.highlight_) != len(x.highlight_): return 0
    for e1, e2 in zip(self.highlight_, x.highlight_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_scantype_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: scantype not set.')
    if (not self.has_issmall_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: issmall not set.')
    if (not self.has_numhighlight_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: numhighlight not set.')
    if (not self.has_snipx_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: snipx not set.')
    if (not self.has_snipy_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: snipy not set.')
    if (not self.has_imagewidth_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: imagewidth not set.')
    if (not self.has_imageheight_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: imageheight not set.')
    for i in xrange(len(self.highlight_)):
      if (not self.highlight_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.scantype_))
    n += self.lengthVarInt64(self.issmall_)
    n += self.lengthVarInt64(self.numhighlight_)
    n += self.lengthVarInt64(self.snipx_)
    n += self.lengthVarInt64(self.snipy_)
    n += self.lengthVarInt64(self.imagewidth_)
    n += self.lengthVarInt64(self.imageheight_)
    n += 4 * len(self.highlight_)
    for i in xrange(len(self.highlight_)): n += self.highlight_[i].ByteSize()
    return n + 14

  def Clear(self):
    self.clear_scantype()
    self.clear_issmall()
    self.clear_numhighlight()
    self.clear_snipx()
    self.clear_snipy()
    self.clear_imagewidth()
    self.clear_imageheight()
    self.clear_highlight()

  def OutputUnchecked(self, out):
    out.putVarInt32(258)
    out.putPrefixedString(self.scantype_)
    out.putVarInt32(264)
    out.putVarInt32(self.issmall_)
    out.putVarInt32(272)
    out.putVarInt32(self.numhighlight_)
    out.putVarInt32(280)
    out.putVarInt32(self.snipx_)
    out.putVarInt32(288)
    out.putVarInt32(self.snipy_)
    out.putVarInt32(296)
    out.putVarInt32(self.imagewidth_)
    out.putVarInt32(304)
    out.putVarInt32(self.imageheight_)
    for i in xrange(len(self.highlight_)):
      out.putVarInt32(315)
      self.highlight_[i].OutputUnchecked(out)
      out.putVarInt32(316)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 252: break
      if tt == 258:
        self.set_scantype(d.getPrefixedString())
        continue
      if tt == 264:
        self.set_issmall(d.getVarInt32())
        continue
      if tt == 272:
        self.set_numhighlight(d.getVarInt32())
        continue
      if tt == 280:
        self.set_snipx(d.getVarInt32())
        continue
      if tt == 288:
        self.set_snipy(d.getVarInt32())
        continue
      if tt == 296:
        self.set_imagewidth(d.getVarInt32())
        continue
      if tt == 304:
        self.set_imageheight(d.getVarInt32())
        continue
      if tt == 315:
        self.add_highlight().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_scantype_: res+=prefix+("ScanType: %s\n" % self.DebugFormatString(self.scantype_))
    if self.has_issmall_: res+=prefix+("IsSmall: %s\n" % self.DebugFormatInt32(self.issmall_))
    if self.has_numhighlight_: res+=prefix+("NumHighlight: %s\n" % self.DebugFormatInt32(self.numhighlight_))
    if self.has_snipx_: res+=prefix+("SnipX: %s\n" % self.DebugFormatInt32(self.snipx_))
    if self.has_snipy_: res+=prefix+("SnipY: %s\n" % self.DebugFormatInt32(self.snipy_))
    if self.has_imagewidth_: res+=prefix+("ImageWidth: %s\n" % self.DebugFormatInt32(self.imagewidth_))
    if self.has_imageheight_: res+=prefix+("ImageHeight: %s\n" % self.DebugFormatInt32(self.imageheight_))
    cnt=0
    for e in self.highlight_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Highlight%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

class DocCommandProto_DocItem(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.docid_ = 0
    self.levelbitmap_ = 1
    self.segmentbitmap_ = 0
    self.sendpagetype_ = 0
    self.snippetoverride_ = []
    self.noodp_ = 0
    self.docversionid_ = 0
    self.mustangsegmentindex_ = -1
    self.coupleddocid_ = 0
    self.has_docid_ = 0
    self.has_levelbitmap_ = 0
    self.has_segmentbitmap_ = 0
    self.has_sendpagetype_ = 0
    self.has_noodp_ = 0
    self.has_docversionid_ = 0
    self.has_mustangsegmentindex_ = 0
    self.has_coupleddocid_ = 0
    if contents is not None: self.MergeFromString(contents)

  def docid(self): return self.docid_

  def set_docid(self, x):
    self.has_docid_ = 1
    self.docid_ = x

  def clear_docid(self):
    self.has_docid_ = 0
    self.docid_ = 0

  def has_docid(self): return self.has_docid_

  def levelbitmap(self): return self.levelbitmap_

  def set_levelbitmap(self, x):
    self.has_levelbitmap_ = 1
    self.levelbitmap_ = x

  def clear_levelbitmap(self):
    self.has_levelbitmap_ = 0
    self.levelbitmap_ = 1

  def has_levelbitmap(self): return self.has_levelbitmap_

  def segmentbitmap(self): return self.segmentbitmap_

  def set_segmentbitmap(self, x):
    self.has_segmentbitmap_ = 1
    self.segmentbitmap_ = x

  def clear_segmentbitmap(self):
    self.has_segmentbitmap_ = 0
    self.segmentbitmap_ = 0

  def has_segmentbitmap(self): return self.has_segmentbitmap_

  def sendpagetype(self): return self.sendpagetype_

  def set_sendpagetype(self, x):
    self.has_sendpagetype_ = 1
    self.sendpagetype_ = x

  def clear_sendpagetype(self):
    self.has_sendpagetype_ = 0
    self.sendpagetype_ = 0

  def has_sendpagetype(self): return self.has_sendpagetype_

  def snippetoverride_size(self): return len(self.snippetoverride_)
  def snippetoverride_list(self): return self.snippetoverride_

  def snippetoverride(self, i):
    return self.snippetoverride_[i]

  def mutable_snippetoverride(self, i):
    return self.snippetoverride_[i]

  def add_snippetoverride(self):
    x = DocCommandProto_DocItemSnippetOverride()
    self.snippetoverride_.append(x)
    return x

  def clear_snippetoverride(self):
    self.snippetoverride_ = []
  def noodp(self): return self.noodp_

  def set_noodp(self, x):
    self.has_noodp_ = 1
    self.noodp_ = x

  def clear_noodp(self):
    self.has_noodp_ = 0
    self.noodp_ = 0

  def has_noodp(self): return self.has_noodp_

  def docversionid(self): return self.docversionid_

  def set_docversionid(self, x):
    self.has_docversionid_ = 1
    self.docversionid_ = x

  def clear_docversionid(self):
    self.has_docversionid_ = 0
    self.docversionid_ = 0

  def has_docversionid(self): return self.has_docversionid_

  def mustangsegmentindex(self): return self.mustangsegmentindex_

  def set_mustangsegmentindex(self, x):
    self.has_mustangsegmentindex_ = 1
    self.mustangsegmentindex_ = x

  def clear_mustangsegmentindex(self):
    self.has_mustangsegmentindex_ = 0
    self.mustangsegmentindex_ = -1

  def has_mustangsegmentindex(self): return self.has_mustangsegmentindex_

  def coupleddocid(self): return self.coupleddocid_

  def set_coupleddocid(self, x):
    self.has_coupleddocid_ = 1
    self.coupleddocid_ = x

  def clear_coupleddocid(self):
    self.has_coupleddocid_ = 0
    self.coupleddocid_ = 0

  def has_coupleddocid(self): return self.has_coupleddocid_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_docid()): self.set_docid(x.docid())
    if (x.has_levelbitmap()): self.set_levelbitmap(x.levelbitmap())
    if (x.has_segmentbitmap()): self.set_segmentbitmap(x.segmentbitmap())
    if (x.has_sendpagetype()): self.set_sendpagetype(x.sendpagetype())
    for i in xrange(x.snippetoverride_size()): self.add_snippetoverride().CopyFrom(x.snippetoverride(i))
    if (x.has_noodp()): self.set_noodp(x.noodp())
    if (x.has_docversionid()): self.set_docversionid(x.docversionid())
    if (x.has_mustangsegmentindex()): self.set_mustangsegmentindex(x.mustangsegmentindex())
    if (x.has_coupleddocid()): self.set_coupleddocid(x.coupleddocid())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_docid_ != x.has_docid_: return 0
    if self.has_docid_ and self.docid_ != x.docid_: return 0
    if self.has_levelbitmap_ != x.has_levelbitmap_: return 0
    if self.has_levelbitmap_ and self.levelbitmap_ != x.levelbitmap_: return 0
    if self.has_segmentbitmap_ != x.has_segmentbitmap_: return 0
    if self.has_segmentbitmap_ and self.segmentbitmap_ != x.segmentbitmap_: return 0
    if self.has_sendpagetype_ != x.has_sendpagetype_: return 0
    if self.has_sendpagetype_ and self.sendpagetype_ != x.sendpagetype_: return 0
    if len(self.snippetoverride_) != len(x.snippetoverride_): return 0
    for e1, e2 in zip(self.snippetoverride_, x.snippetoverride_):
      if e1 != e2: return 0
    if self.has_noodp_ != x.has_noodp_: return 0
    if self.has_noodp_ and self.noodp_ != x.noodp_: return 0
    if self.has_docversionid_ != x.has_docversionid_: return 0
    if self.has_docversionid_ and self.docversionid_ != x.docversionid_: return 0
    if self.has_mustangsegmentindex_ != x.has_mustangsegmentindex_: return 0
    if self.has_mustangsegmentindex_ and self.mustangsegmentindex_ != x.mustangsegmentindex_: return 0
    if self.has_coupleddocid_ != x.has_coupleddocid_: return 0
    if self.has_coupleddocid_ and self.coupleddocid_ != x.coupleddocid_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_docid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: docid not set.')
    for i in xrange(len(self.snippetoverride_)):
      if (not self.snippetoverride_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.docid_)
    if (self.has_levelbitmap_): n += 5
    if (self.has_segmentbitmap_): n += 2 + self.lengthVarInt64(self.segmentbitmap_)
    if (self.has_sendpagetype_): n += 2 + self.lengthVarInt64(self.sendpagetype_)
    n += 4 * len(self.snippetoverride_)
    for i in xrange(len(self.snippetoverride_)): n += self.snippetoverride_[i].ByteSize()
    if (self.has_noodp_): n += 3
    if (self.has_docversionid_): n += 2 + self.lengthVarInt64(self.docversionid_)
    if (self.has_mustangsegmentindex_): n += 2 + self.lengthVarInt64(self.mustangsegmentindex_)
    if (self.has_coupleddocid_): n += 2 + self.lengthVarInt64(self.coupleddocid_)
    return n + 1

  def Clear(self):
    self.clear_docid()
    self.clear_levelbitmap()
    self.clear_segmentbitmap()
    self.clear_sendpagetype()
    self.clear_snippetoverride()
    self.clear_noodp()
    self.clear_docversionid()
    self.clear_mustangsegmentindex()
    self.clear_coupleddocid()

  def OutputUnchecked(self, out):
    out.putVarInt32(16)
    out.putVarUint64(self.docid_)
    if (self.has_levelbitmap_):
      out.putVarInt32(101)
      out.put32(self.levelbitmap_)
    if (self.has_segmentbitmap_):
      out.putVarInt32(152)
      out.putVarUint64(self.segmentbitmap_)
    for i in xrange(len(self.snippetoverride_)):
      out.putVarInt32(587)
      self.snippetoverride_[i].OutputUnchecked(out)
      out.putVarInt32(588)
    if (self.has_sendpagetype_):
      out.putVarInt32(624)
      out.putVarInt32(self.sendpagetype_)
    if (self.has_docversionid_):
      out.putVarInt32(632)
      out.putVarInt64(self.docversionid_)
    if (self.has_mustangsegmentindex_):
      out.putVarInt32(688)
      out.putVarInt32(self.mustangsegmentindex_)
    if (self.has_noodp_):
      out.putVarInt32(760)
      out.putBoolean(self.noodp_)
    if (self.has_coupleddocid_):
      out.putVarInt32(824)
      out.putVarUint64(self.coupleddocid_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 420: break
      if tt == 16:
        self.set_docid(d.getVarUint64())
        continue
      if tt == 101:
        self.set_levelbitmap(d.get32())
        continue
      if tt == 152:
        self.set_segmentbitmap(d.getVarUint64())
        continue
      if tt == 587:
        self.add_snippetoverride().TryMerge(d)
        continue
      if tt == 624:
        self.set_sendpagetype(d.getVarInt32())
        continue
      if tt == 632:
        self.set_docversionid(d.getVarInt64())
        continue
      if tt == 688:
        self.set_mustangsegmentindex(d.getVarInt32())
        continue
      if tt == 760:
        self.set_noodp(d.getBoolean())
        continue
      if tt == 824:
        self.set_coupleddocid(d.getVarUint64())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_docid_: res+=prefix+("Docid: %s\n" % self.DebugFormatInt64(self.docid_))
    if self.has_levelbitmap_: res+=prefix+("LevelBitmap: %s\n" % self.DebugFormatFixed32(self.levelbitmap_))
    if self.has_segmentbitmap_: res+=prefix+("SegmentBitmap: %s\n" % self.DebugFormatInt64(self.segmentbitmap_))
    if self.has_sendpagetype_: res+=prefix+("SendPageType: %s\n" % self.DebugFormatInt32(self.sendpagetype_))
    cnt=0
    for e in self.snippetoverride_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("SnippetOverride%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_noodp_: res+=prefix+("NoOdp: %s\n" % self.DebugFormatBool(self.noodp_))
    if self.has_docversionid_: res+=prefix+("DocVersionId: %s\n" % self.DebugFormatInt64(self.docversionid_))
    if self.has_mustangsegmentindex_: res+=prefix+("MustangSegmentIndex: %s\n" % self.DebugFormatInt32(self.mustangsegmentindex_))
    if self.has_coupleddocid_: res+=prefix+("CoupledDocid: %s\n" % self.DebugFormatInt64(self.coupleddocid_))
    return res

class DocCommandProto_DocItemBlob(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.docids_ = ""
    self.coupleddocids_ = ""
    self.levelbitmaps_ = ""
    self.segmentbitmaps_ = ""
    self.noodps_ = ""
    self.docversionids_ = ""
    self.mustangsegmentindices_ = ""
    self.has_docids_ = 0
    self.has_coupleddocids_ = 0
    self.has_levelbitmaps_ = 0
    self.has_segmentbitmaps_ = 0
    self.has_noodps_ = 0
    self.has_docversionids_ = 0
    self.has_mustangsegmentindices_ = 0
    if contents is not None: self.MergeFromString(contents)

  def docids(self): return self.docids_

  def set_docids(self, x):
    self.has_docids_ = 1
    self.docids_ = x

  def clear_docids(self):
    self.has_docids_ = 0
    self.docids_ = ""

  def has_docids(self): return self.has_docids_

  def coupleddocids(self): return self.coupleddocids_

  def set_coupleddocids(self, x):
    self.has_coupleddocids_ = 1
    self.coupleddocids_ = x

  def clear_coupleddocids(self):
    self.has_coupleddocids_ = 0
    self.coupleddocids_ = ""

  def has_coupleddocids(self): return self.has_coupleddocids_

  def levelbitmaps(self): return self.levelbitmaps_

  def set_levelbitmaps(self, x):
    self.has_levelbitmaps_ = 1
    self.levelbitmaps_ = x

  def clear_levelbitmaps(self):
    self.has_levelbitmaps_ = 0
    self.levelbitmaps_ = ""

  def has_levelbitmaps(self): return self.has_levelbitmaps_

  def segmentbitmaps(self): return self.segmentbitmaps_

  def set_segmentbitmaps(self, x):
    self.has_segmentbitmaps_ = 1
    self.segmentbitmaps_ = x

  def clear_segmentbitmaps(self):
    self.has_segmentbitmaps_ = 0
    self.segmentbitmaps_ = ""

  def has_segmentbitmaps(self): return self.has_segmentbitmaps_

  def noodps(self): return self.noodps_

  def set_noodps(self, x):
    self.has_noodps_ = 1
    self.noodps_ = x

  def clear_noodps(self):
    self.has_noodps_ = 0
    self.noodps_ = ""

  def has_noodps(self): return self.has_noodps_

  def docversionids(self): return self.docversionids_

  def set_docversionids(self, x):
    self.has_docversionids_ = 1
    self.docversionids_ = x

  def clear_docversionids(self):
    self.has_docversionids_ = 0
    self.docversionids_ = ""

  def has_docversionids(self): return self.has_docversionids_

  def mustangsegmentindices(self): return self.mustangsegmentindices_

  def set_mustangsegmentindices(self, x):
    self.has_mustangsegmentindices_ = 1
    self.mustangsegmentindices_ = x

  def clear_mustangsegmentindices(self):
    self.has_mustangsegmentindices_ = 0
    self.mustangsegmentindices_ = ""

  def has_mustangsegmentindices(self): return self.has_mustangsegmentindices_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_docids()): self.set_docids(x.docids())
    if (x.has_coupleddocids()): self.set_coupleddocids(x.coupleddocids())
    if (x.has_levelbitmaps()): self.set_levelbitmaps(x.levelbitmaps())
    if (x.has_segmentbitmaps()): self.set_segmentbitmaps(x.segmentbitmaps())
    if (x.has_noodps()): self.set_noodps(x.noodps())
    if (x.has_docversionids()): self.set_docversionids(x.docversionids())
    if (x.has_mustangsegmentindices()): self.set_mustangsegmentindices(x.mustangsegmentindices())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_docids_ != x.has_docids_: return 0
    if self.has_docids_ and self.docids_ != x.docids_: return 0
    if self.has_coupleddocids_ != x.has_coupleddocids_: return 0
    if self.has_coupleddocids_ and self.coupleddocids_ != x.coupleddocids_: return 0
    if self.has_levelbitmaps_ != x.has_levelbitmaps_: return 0
    if self.has_levelbitmaps_ and self.levelbitmaps_ != x.levelbitmaps_: return 0
    if self.has_segmentbitmaps_ != x.has_segmentbitmaps_: return 0
    if self.has_segmentbitmaps_ and self.segmentbitmaps_ != x.segmentbitmaps_: return 0
    if self.has_noodps_ != x.has_noodps_: return 0
    if self.has_noodps_ and self.noodps_ != x.noodps_: return 0
    if self.has_docversionids_ != x.has_docversionids_: return 0
    if self.has_docversionids_ and self.docversionids_ != x.docversionids_: return 0
    if self.has_mustangsegmentindices_ != x.has_mustangsegmentindices_: return 0
    if self.has_mustangsegmentindices_ and self.mustangsegmentindices_ != x.mustangsegmentindices_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_docids_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: docids not set.')
    if (not self.has_levelbitmaps_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: levelbitmaps not set.')
    if (not self.has_segmentbitmaps_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: segmentbitmaps not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthString(len(self.docids_))
    if (self.has_coupleddocids_): n += 2 + self.lengthString(len(self.coupleddocids_))
    n += self.lengthString(len(self.levelbitmaps_))
    n += self.lengthString(len(self.segmentbitmaps_))
    if (self.has_noodps_): n += 2 + self.lengthString(len(self.noodps_))
    if (self.has_docversionids_): n += 2 + self.lengthString(len(self.docversionids_))
    if (self.has_mustangsegmentindices_): n += 2 + self.lengthString(len(self.mustangsegmentindices_))
    return n + 6

  def Clear(self):
    self.clear_docids()
    self.clear_coupleddocids()
    self.clear_levelbitmaps()
    self.clear_segmentbitmaps()
    self.clear_noodps()
    self.clear_docversionids()
    self.clear_mustangsegmentindices()

  def OutputUnchecked(self, out):
    out.putVarInt32(554)
    out.putPrefixedString(self.docids_)
    out.putVarInt32(562)
    out.putPrefixedString(self.levelbitmaps_)
    out.putVarInt32(570)
    out.putPrefixedString(self.segmentbitmaps_)
    if (self.has_docversionids_):
      out.putVarInt32(642)
      out.putPrefixedString(self.docversionids_)
    if (self.has_mustangsegmentindices_):
      out.putVarInt32(682)
      out.putPrefixedString(self.mustangsegmentindices_)
    if (self.has_noodps_):
      out.putVarInt32(770)
      out.putPrefixedString(self.noodps_)
    if (self.has_coupleddocids_):
      out.putVarInt32(778)
      out.putPrefixedString(self.coupleddocids_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 548: break
      if tt == 554:
        self.set_docids(d.getPrefixedString())
        continue
      if tt == 562:
        self.set_levelbitmaps(d.getPrefixedString())
        continue
      if tt == 570:
        self.set_segmentbitmaps(d.getPrefixedString())
        continue
      if tt == 642:
        self.set_docversionids(d.getPrefixedString())
        continue
      if tt == 682:
        self.set_mustangsegmentindices(d.getPrefixedString())
        continue
      if tt == 770:
        self.set_noodps(d.getPrefixedString())
        continue
      if tt == 778:
        self.set_coupleddocids(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_docids_: res+=prefix+("DocIds: %s\n" % self.DebugFormatString(self.docids_))
    if self.has_coupleddocids_: res+=prefix+("CoupledDocids: %s\n" % self.DebugFormatString(self.coupleddocids_))
    if self.has_levelbitmaps_: res+=prefix+("LevelBitmaps: %s\n" % self.DebugFormatString(self.levelbitmaps_))
    if self.has_segmentbitmaps_: res+=prefix+("SegmentBitmaps: %s\n" % self.DebugFormatString(self.segmentbitmaps_))
    if self.has_noodps_: res+=prefix+("NoOdps: %s\n" % self.DebugFormatString(self.noodps_))
    if self.has_docversionids_: res+=prefix+("DocVersionIds: %s\n" % self.DebugFormatString(self.docversionids_))
    if self.has_mustangsegmentindices_: res+=prefix+("MustangSegmentIndices: %s\n" % self.DebugFormatString(self.mustangsegmentindices_))
    return res

class DocCommandProto_FroogleCatInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.catid_ = 0
    self.score_ = 0.0
    self.has_catid_ = 0
    self.has_score_ = 0
    if contents is not None: self.MergeFromString(contents)

  def catid(self): return self.catid_

  def set_catid(self, x):
    self.has_catid_ = 1
    self.catid_ = x

  def clear_catid(self):
    self.has_catid_ = 0
    self.catid_ = 0

  def has_catid(self): return self.has_catid_

  def score(self): return self.score_

  def set_score(self, x):
    self.has_score_ = 1
    self.score_ = x

  def clear_score(self):
    self.has_score_ = 0
    self.score_ = 0.0

  def has_score(self): return self.has_score_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_catid()): self.set_catid(x.catid())
    if (x.has_score()): self.set_score(x.score())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_catid_ != x.has_catid_: return 0
    if self.has_catid_ and self.catid_ != x.catid_: return 0
    if self.has_score_ != x.has_score_: return 0
    if self.has_score_ and self.score_ != x.score_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_catid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: catid not set.')
    if (not self.has_score_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: score not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.catid_)
    return n + 8

  def Clear(self):
    self.clear_catid()
    self.clear_score()

  def OutputUnchecked(self, out):
    out.putVarInt32(656)
    out.putVarInt32(self.catid_)
    out.putVarInt32(669)
    out.putFloat(self.score_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 652: break
      if tt == 656:
        self.set_catid(d.getVarInt32())
        continue
      if tt == 669:
        self.set_score(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_catid_: res+=prefix+("CatId: %s\n" % self.DebugFormatInt32(self.catid_))
    if self.has_score_: res+=prefix+("Score: %s\n" % self.DebugFormatFloat(self.score_))
    return res

class DocCommandProto(ProtocolBuffer.ProtocolMessage):

  FORMAT_ASCII =    1 
  FORMAT_PROTOCOL_BUFFER =   20 

  _DocFormat_NAMES = {
    1: "FORMAT_ASCII",
    20: "FORMAT_PROTOCOL_BUFFER",
  }

  def DocFormat_Name(cls, x): return cls._DocFormat_NAMES.get(x, "")
  DocFormat_Name = classmethod(DocFormat_Name)


  COMMAND_FETCH =    0 
  COMMAND_RESULTS =    1 
  COMMAND_REPPTR =    2 
  COMMAND_INFO =    3 

  _DocCommandName_NAMES = {
    0: "COMMAND_FETCH",
    1: "COMMAND_RESULTS",
    2: "COMMAND_REPPTR",
    3: "COMMAND_INFO",
  }

  def DocCommandName_Name(cls, x): return cls._DocCommandName_NAMES.get(x, "")
  DocCommandName_Name = classmethod(DocCommandName_Name)


  NO_PAGE      =    0 
  RAW_PAGE     =    1 
  WHOLE_PAGE   =    2 

  _PageType_NAMES = {
    0: "NO_PAGE",
    1: "RAW_PAGE",
    2: "WHOLE_PAGE",
  }

  def PageType_Name(cls, x): return cls._PageType_NAMES.get(x, "")
  PageType_Name = classmethod(PageType_Name)


  IMAGE_INFO   =    0 
  DEPRECATED_SCAN_INFO =    1 
  NUM_DOC_INFO =    2 

  _DocInfo_NAMES = {
    0: "IMAGE_INFO",
    1: "DEPRECATED_SCAN_INFO",
    2: "NUM_DOC_INFO",
  }

  def DocInfo_Name(cls, x): return cls._DocInfo_NAMES.get(x, "")
  DocInfo_Name = classmethod(DocInfo_Name)

  def __init__(self, contents=None):
    self.commandname_ = 0
    self.docitem_ = []
    self.docitemblob_ = None
    self.firstresultpos_ = 0
    self.client_ = "google"
    self.binaryresults_ = 0
    self.debuglevel_ = 0
    self.experiment_ = []
    self.hostidfilterparam_ = 0
    self.skipflags_ = 0
    self.qosstring_ = ""
    self.restrict_ = ""
    self.source_ = ""
    self.sourceuser_ = ""
    self.traceid_ = 0
    self.timeout_ = 0
    self.isimagesearch_ = 0
    self.maxtitlelen_ = 70
    self.safesearch_ = 0
    self.parsedquery_ = ""
    self.parsedqueryascachekey_ = ""
    self.querylanguage_ = ""
    self.countrycode_ = ""
    self.dataversion_ = ""
    self.outputlevel_ = 1
    self.iswhitepages_ = 0
    self.catrestrict_ = ""
    self.catnamerestrict_ = ""
    self.linkify_ = 1
    self.isimagefetch_ = 0
    self.deprecatedisscanfetch_ = 0
    self.squery_ = 0
    self.resultsinfo_ = None
    self.deprecatedmagazineinfo_ = None
    self.metatags_ = []
    self.wantallmetatags_ = 0
    self.maxsnippetdoclen_ = -1
    self.snippetexperiments_ = -1
    self.wantsitemap_ = 0
    self.wantlocalinfo_ = 0
    self.wantmanybox_ = 0
    self.wantmessagetype_ = []
    self.sendpagetype_ = 0
    self.maxlinestosend_ = 0
    self.linestoclip_ = 0
    self.alltextutf8_ = 0
    self.docinfotype_ = 0
    self.epochstart_ = 0
    self.epochend_ = 0
    self.resultsversion_ = 20
    self.numdocuments_ = 1
    self.isfrooglefallthrough_ = 0
    self.isfrooglerequest_ = 0
    self.frooglecatinfo_ = []
    self.commerciallikelihood_ = 0
    self.skiplevels_ = ""
    self.mustangsegmentinfo_ = ""
    self.mustangversion_ = -1
    self.dragonsearchlanguage_ = ""
    self.aggregation_ = None
    self.has_commandname_ = 0
    self.has_docitemblob_ = 0
    self.has_firstresultpos_ = 0
    self.has_client_ = 0
    self.has_binaryresults_ = 0
    self.has_debuglevel_ = 0
    self.has_hostidfilterparam_ = 0
    self.has_skipflags_ = 0
    self.has_qosstring_ = 0
    self.has_restrict_ = 0
    self.has_source_ = 0
    self.has_sourceuser_ = 0
    self.has_traceid_ = 0
    self.has_timeout_ = 0
    self.has_isimagesearch_ = 0
    self.has_maxtitlelen_ = 0
    self.has_safesearch_ = 0
    self.has_parsedquery_ = 0
    self.has_parsedqueryascachekey_ = 0
    self.has_querylanguage_ = 0
    self.has_countrycode_ = 0
    self.has_dataversion_ = 0
    self.has_outputlevel_ = 0
    self.has_iswhitepages_ = 0
    self.has_catrestrict_ = 0
    self.has_catnamerestrict_ = 0
    self.has_linkify_ = 0
    self.has_isimagefetch_ = 0
    self.has_deprecatedisscanfetch_ = 0
    self.has_squery_ = 0
    self.has_resultsinfo_ = 0
    self.has_deprecatedmagazineinfo_ = 0
    self.has_wantallmetatags_ = 0
    self.has_maxsnippetdoclen_ = 0
    self.has_snippetexperiments_ = 0
    self.has_wantsitemap_ = 0
    self.has_wantlocalinfo_ = 0
    self.has_wantmanybox_ = 0
    self.has_sendpagetype_ = 0
    self.has_maxlinestosend_ = 0
    self.has_linestoclip_ = 0
    self.has_alltextutf8_ = 0
    self.has_docinfotype_ = 0
    self.has_epochstart_ = 0
    self.has_epochend_ = 0
    self.has_resultsversion_ = 0
    self.has_numdocuments_ = 0
    self.has_isfrooglefallthrough_ = 0
    self.has_isfrooglerequest_ = 0
    self.has_commerciallikelihood_ = 0
    self.has_skiplevels_ = 0
    self.has_mustangsegmentinfo_ = 0
    self.has_mustangversion_ = 0
    self.has_dragonsearchlanguage_ = 0
    self.has_aggregation_ = 0
    self.lazy_init_lock_ = thread.allocate_lock()
    if contents is not None: self.MergeFromString(contents)

  def commandname(self): return self.commandname_

  def set_commandname(self, x):
    self.has_commandname_ = 1
    self.commandname_ = x

  def clear_commandname(self):
    self.has_commandname_ = 0
    self.commandname_ = 0

  def has_commandname(self): return self.has_commandname_

  def docitem_size(self): return len(self.docitem_)
  def docitem_list(self): return self.docitem_

  def docitem(self, i):
    return self.docitem_[i]

  def mutable_docitem(self, i):
    return self.docitem_[i]

  def add_docitem(self):
    x = DocCommandProto_DocItem()
    self.docitem_.append(x)
    return x

  def clear_docitem(self):
    self.docitem_ = []
  def docitemblob(self):
    if self.docitemblob_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.docitemblob_ is None: self.docitemblob_ = DocCommandProto_DocItemBlob()
      finally:
        self.lazy_init_lock_.release()
    return self.docitemblob_

  def mutable_docitemblob(self): self.has_docitemblob_ = 1; return self.docitemblob()

  def clear_docitemblob(self):
    #Warning: this method does not acquire the lock.
    self.has_docitemblob_ = 0;
    if self.docitemblob_ is not None: self.docitemblob_.Clear()

  def has_docitemblob(self): return self.has_docitemblob_

  def firstresultpos(self): return self.firstresultpos_

  def set_firstresultpos(self, x):
    self.has_firstresultpos_ = 1
    self.firstresultpos_ = x

  def clear_firstresultpos(self):
    self.has_firstresultpos_ = 0
    self.firstresultpos_ = 0

  def has_firstresultpos(self): return self.has_firstresultpos_

  def client(self): return self.client_

  def set_client(self, x):
    self.has_client_ = 1
    self.client_ = x

  def clear_client(self):
    self.has_client_ = 0
    self.client_ = "google"

  def has_client(self): return self.has_client_

  def binaryresults(self): return self.binaryresults_

  def set_binaryresults(self, x):
    self.has_binaryresults_ = 1
    self.binaryresults_ = x

  def clear_binaryresults(self):
    self.has_binaryresults_ = 0
    self.binaryresults_ = 0

  def has_binaryresults(self): return self.has_binaryresults_

  def debuglevel(self): return self.debuglevel_

  def set_debuglevel(self, x):
    self.has_debuglevel_ = 1
    self.debuglevel_ = x

  def clear_debuglevel(self):
    self.has_debuglevel_ = 0
    self.debuglevel_ = 0

  def has_debuglevel(self): return self.has_debuglevel_

  def experiment_size(self): return len(self.experiment_)
  def experiment_list(self): return self.experiment_

  def experiment(self, i):
    return self.experiment_[i]

  def set_experiment(self, i, x):
    self.experiment_[i] = x

  def add_experiment(self, x):
    self.experiment_.append(x)

  def clear_experiment(self):
    self.experiment_ = []

  def hostidfilterparam(self): return self.hostidfilterparam_

  def set_hostidfilterparam(self, x):
    self.has_hostidfilterparam_ = 1
    self.hostidfilterparam_ = x

  def clear_hostidfilterparam(self):
    self.has_hostidfilterparam_ = 0
    self.hostidfilterparam_ = 0

  def has_hostidfilterparam(self): return self.has_hostidfilterparam_

  def skipflags(self): return self.skipflags_

  def set_skipflags(self, x):
    self.has_skipflags_ = 1
    self.skipflags_ = x

  def clear_skipflags(self):
    self.has_skipflags_ = 0
    self.skipflags_ = 0

  def has_skipflags(self): return self.has_skipflags_

  def qosstring(self): return self.qosstring_

  def set_qosstring(self, x):
    self.has_qosstring_ = 1
    self.qosstring_ = x

  def clear_qosstring(self):
    self.has_qosstring_ = 0
    self.qosstring_ = ""

  def has_qosstring(self): return self.has_qosstring_

  def restrict(self): return self.restrict_

  def set_restrict(self, x):
    self.has_restrict_ = 1
    self.restrict_ = x

  def clear_restrict(self):
    self.has_restrict_ = 0
    self.restrict_ = ""

  def has_restrict(self): return self.has_restrict_

  def source(self): return self.source_

  def set_source(self, x):
    self.has_source_ = 1
    self.source_ = x

  def clear_source(self):
    self.has_source_ = 0
    self.source_ = ""

  def has_source(self): return self.has_source_

  def sourceuser(self): return self.sourceuser_

  def set_sourceuser(self, x):
    self.has_sourceuser_ = 1
    self.sourceuser_ = x

  def clear_sourceuser(self):
    self.has_sourceuser_ = 0
    self.sourceuser_ = ""

  def has_sourceuser(self): return self.has_sourceuser_

  def traceid(self): return self.traceid_

  def set_traceid(self, x):
    self.has_traceid_ = 1
    self.traceid_ = x

  def clear_traceid(self):
    self.has_traceid_ = 0
    self.traceid_ = 0

  def has_traceid(self): return self.has_traceid_

  def timeout(self): return self.timeout_

  def set_timeout(self, x):
    self.has_timeout_ = 1
    self.timeout_ = x

  def clear_timeout(self):
    self.has_timeout_ = 0
    self.timeout_ = 0

  def has_timeout(self): return self.has_timeout_

  def isimagesearch(self): return self.isimagesearch_

  def set_isimagesearch(self, x):
    self.has_isimagesearch_ = 1
    self.isimagesearch_ = x

  def clear_isimagesearch(self):
    self.has_isimagesearch_ = 0
    self.isimagesearch_ = 0

  def has_isimagesearch(self): return self.has_isimagesearch_

  def maxtitlelen(self): return self.maxtitlelen_

  def set_maxtitlelen(self, x):
    self.has_maxtitlelen_ = 1
    self.maxtitlelen_ = x

  def clear_maxtitlelen(self):
    self.has_maxtitlelen_ = 0
    self.maxtitlelen_ = 70

  def has_maxtitlelen(self): return self.has_maxtitlelen_

  def safesearch(self): return self.safesearch_

  def set_safesearch(self, x):
    self.has_safesearch_ = 1
    self.safesearch_ = x

  def clear_safesearch(self):
    self.has_safesearch_ = 0
    self.safesearch_ = 0

  def has_safesearch(self): return self.has_safesearch_

  def parsedquery(self): return self.parsedquery_

  def set_parsedquery(self, x):
    self.has_parsedquery_ = 1
    self.parsedquery_ = x

  def clear_parsedquery(self):
    self.has_parsedquery_ = 0
    self.parsedquery_ = ""

  def has_parsedquery(self): return self.has_parsedquery_

  def parsedqueryascachekey(self): return self.parsedqueryascachekey_

  def set_parsedqueryascachekey(self, x):
    self.has_parsedqueryascachekey_ = 1
    self.parsedqueryascachekey_ = x

  def clear_parsedqueryascachekey(self):
    self.has_parsedqueryascachekey_ = 0
    self.parsedqueryascachekey_ = ""

  def has_parsedqueryascachekey(self): return self.has_parsedqueryascachekey_

  def querylanguage(self): return self.querylanguage_

  def set_querylanguage(self, x):
    self.has_querylanguage_ = 1
    self.querylanguage_ = x

  def clear_querylanguage(self):
    self.has_querylanguage_ = 0
    self.querylanguage_ = ""

  def has_querylanguage(self): return self.has_querylanguage_

  def countrycode(self): return self.countrycode_

  def set_countrycode(self, x):
    self.has_countrycode_ = 1
    self.countrycode_ = x

  def clear_countrycode(self):
    self.has_countrycode_ = 0
    self.countrycode_ = ""

  def has_countrycode(self): return self.has_countrycode_

  def dataversion(self): return self.dataversion_

  def set_dataversion(self, x):
    self.has_dataversion_ = 1
    self.dataversion_ = x

  def clear_dataversion(self):
    self.has_dataversion_ = 0
    self.dataversion_ = ""

  def has_dataversion(self): return self.has_dataversion_

  def outputlevel(self): return self.outputlevel_

  def set_outputlevel(self, x):
    self.has_outputlevel_ = 1
    self.outputlevel_ = x

  def clear_outputlevel(self):
    self.has_outputlevel_ = 0
    self.outputlevel_ = 1

  def has_outputlevel(self): return self.has_outputlevel_

  def iswhitepages(self): return self.iswhitepages_

  def set_iswhitepages(self, x):
    self.has_iswhitepages_ = 1
    self.iswhitepages_ = x

  def clear_iswhitepages(self):
    self.has_iswhitepages_ = 0
    self.iswhitepages_ = 0

  def has_iswhitepages(self): return self.has_iswhitepages_

  def catrestrict(self): return self.catrestrict_

  def set_catrestrict(self, x):
    self.has_catrestrict_ = 1
    self.catrestrict_ = x

  def clear_catrestrict(self):
    self.has_catrestrict_ = 0
    self.catrestrict_ = ""

  def has_catrestrict(self): return self.has_catrestrict_

  def catnamerestrict(self): return self.catnamerestrict_

  def set_catnamerestrict(self, x):
    self.has_catnamerestrict_ = 1
    self.catnamerestrict_ = x

  def clear_catnamerestrict(self):
    self.has_catnamerestrict_ = 0
    self.catnamerestrict_ = ""

  def has_catnamerestrict(self): return self.has_catnamerestrict_

  def linkify(self): return self.linkify_

  def set_linkify(self, x):
    self.has_linkify_ = 1
    self.linkify_ = x

  def clear_linkify(self):
    self.has_linkify_ = 0
    self.linkify_ = 1

  def has_linkify(self): return self.has_linkify_

  def isimagefetch(self): return self.isimagefetch_

  def set_isimagefetch(self, x):
    self.has_isimagefetch_ = 1
    self.isimagefetch_ = x

  def clear_isimagefetch(self):
    self.has_isimagefetch_ = 0
    self.isimagefetch_ = 0

  def has_isimagefetch(self): return self.has_isimagefetch_

  def deprecatedisscanfetch(self): return self.deprecatedisscanfetch_

  def set_deprecatedisscanfetch(self, x):
    self.has_deprecatedisscanfetch_ = 1
    self.deprecatedisscanfetch_ = x

  def clear_deprecatedisscanfetch(self):
    self.has_deprecatedisscanfetch_ = 0
    self.deprecatedisscanfetch_ = 0

  def has_deprecatedisscanfetch(self): return self.has_deprecatedisscanfetch_

  def squery(self): return self.squery_

  def set_squery(self, x):
    self.has_squery_ = 1
    self.squery_ = x

  def clear_squery(self):
    self.has_squery_ = 0
    self.squery_ = 0

  def has_squery(self): return self.has_squery_

  def resultsinfo(self):
    if self.resultsinfo_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.resultsinfo_ is None: self.resultsinfo_ = DocCommandProto_ResultsInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.resultsinfo_

  def mutable_resultsinfo(self): self.has_resultsinfo_ = 1; return self.resultsinfo()

  def clear_resultsinfo(self):
    #Warning: this method does not acquire the lock.
    self.has_resultsinfo_ = 0;
    if self.resultsinfo_ is not None: self.resultsinfo_.Clear()

  def has_resultsinfo(self): return self.has_resultsinfo_

  def deprecatedmagazineinfo(self):
    if self.deprecatedmagazineinfo_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.deprecatedmagazineinfo_ is None: self.deprecatedmagazineinfo_ = DocCommandProto_DeprecatedMagazineInfo()
      finally:
        self.lazy_init_lock_.release()
    return self.deprecatedmagazineinfo_

  def mutable_deprecatedmagazineinfo(self): self.has_deprecatedmagazineinfo_ = 1; return self.deprecatedmagazineinfo()

  def clear_deprecatedmagazineinfo(self):
    #Warning: this method does not acquire the lock.
    self.has_deprecatedmagazineinfo_ = 0;
    if self.deprecatedmagazineinfo_ is not None: self.deprecatedmagazineinfo_.Clear()

  def has_deprecatedmagazineinfo(self): return self.has_deprecatedmagazineinfo_

  def metatags_size(self): return len(self.metatags_)
  def metatags_list(self): return self.metatags_

  def metatags(self, i):
    return self.metatags_[i]

  def set_metatags(self, i, x):
    self.metatags_[i] = x

  def add_metatags(self, x):
    self.metatags_.append(x)

  def clear_metatags(self):
    self.metatags_ = []

  def wantallmetatags(self): return self.wantallmetatags_

  def set_wantallmetatags(self, x):
    self.has_wantallmetatags_ = 1
    self.wantallmetatags_ = x

  def clear_wantallmetatags(self):
    self.has_wantallmetatags_ = 0
    self.wantallmetatags_ = 0

  def has_wantallmetatags(self): return self.has_wantallmetatags_

  def maxsnippetdoclen(self): return self.maxsnippetdoclen_

  def set_maxsnippetdoclen(self, x):
    self.has_maxsnippetdoclen_ = 1
    self.maxsnippetdoclen_ = x

  def clear_maxsnippetdoclen(self):
    self.has_maxsnippetdoclen_ = 0
    self.maxsnippetdoclen_ = -1

  def has_maxsnippetdoclen(self): return self.has_maxsnippetdoclen_

  def snippetexperiments(self): return self.snippetexperiments_

  def set_snippetexperiments(self, x):
    self.has_snippetexperiments_ = 1
    self.snippetexperiments_ = x

  def clear_snippetexperiments(self):
    self.has_snippetexperiments_ = 0
    self.snippetexperiments_ = -1

  def has_snippetexperiments(self): return self.has_snippetexperiments_

  def wantsitemap(self): return self.wantsitemap_

  def set_wantsitemap(self, x):
    self.has_wantsitemap_ = 1
    self.wantsitemap_ = x

  def clear_wantsitemap(self):
    self.has_wantsitemap_ = 0
    self.wantsitemap_ = 0

  def has_wantsitemap(self): return self.has_wantsitemap_

  def wantlocalinfo(self): return self.wantlocalinfo_

  def set_wantlocalinfo(self, x):
    self.has_wantlocalinfo_ = 1
    self.wantlocalinfo_ = x

  def clear_wantlocalinfo(self):
    self.has_wantlocalinfo_ = 0
    self.wantlocalinfo_ = 0

  def has_wantlocalinfo(self): return self.has_wantlocalinfo_

  def wantmanybox(self): return self.wantmanybox_

  def set_wantmanybox(self, x):
    self.has_wantmanybox_ = 1
    self.wantmanybox_ = x

  def clear_wantmanybox(self):
    self.has_wantmanybox_ = 0
    self.wantmanybox_ = 0

  def has_wantmanybox(self): return self.has_wantmanybox_

  def wantmessagetype_size(self): return len(self.wantmessagetype_)
  def wantmessagetype_list(self): return self.wantmessagetype_

  def wantmessagetype(self, i):
    return self.wantmessagetype_[i]

  def set_wantmessagetype(self, i, x):
    self.wantmessagetype_[i] = x

  def add_wantmessagetype(self, x):
    self.wantmessagetype_.append(x)

  def clear_wantmessagetype(self):
    self.wantmessagetype_ = []

  def sendpagetype(self): return self.sendpagetype_

  def set_sendpagetype(self, x):
    self.has_sendpagetype_ = 1
    self.sendpagetype_ = x

  def clear_sendpagetype(self):
    self.has_sendpagetype_ = 0
    self.sendpagetype_ = 0

  def has_sendpagetype(self): return self.has_sendpagetype_

  def maxlinestosend(self): return self.maxlinestosend_

  def set_maxlinestosend(self, x):
    self.has_maxlinestosend_ = 1
    self.maxlinestosend_ = x

  def clear_maxlinestosend(self):
    self.has_maxlinestosend_ = 0
    self.maxlinestosend_ = 0

  def has_maxlinestosend(self): return self.has_maxlinestosend_

  def linestoclip(self): return self.linestoclip_

  def set_linestoclip(self, x):
    self.has_linestoclip_ = 1
    self.linestoclip_ = x

  def clear_linestoclip(self):
    self.has_linestoclip_ = 0
    self.linestoclip_ = 0

  def has_linestoclip(self): return self.has_linestoclip_

  def alltextutf8(self): return self.alltextutf8_

  def set_alltextutf8(self, x):
    self.has_alltextutf8_ = 1
    self.alltextutf8_ = x

  def clear_alltextutf8(self):
    self.has_alltextutf8_ = 0
    self.alltextutf8_ = 0

  def has_alltextutf8(self): return self.has_alltextutf8_

  def docinfotype(self): return self.docinfotype_

  def set_docinfotype(self, x):
    self.has_docinfotype_ = 1
    self.docinfotype_ = x

  def clear_docinfotype(self):
    self.has_docinfotype_ = 0
    self.docinfotype_ = 0

  def has_docinfotype(self): return self.has_docinfotype_

  def epochstart(self): return self.epochstart_

  def set_epochstart(self, x):
    self.has_epochstart_ = 1
    self.epochstart_ = x

  def clear_epochstart(self):
    self.has_epochstart_ = 0
    self.epochstart_ = 0

  def has_epochstart(self): return self.has_epochstart_

  def epochend(self): return self.epochend_

  def set_epochend(self, x):
    self.has_epochend_ = 1
    self.epochend_ = x

  def clear_epochend(self):
    self.has_epochend_ = 0
    self.epochend_ = 0

  def has_epochend(self): return self.has_epochend_

  def resultsversion(self): return self.resultsversion_

  def set_resultsversion(self, x):
    self.has_resultsversion_ = 1
    self.resultsversion_ = x

  def clear_resultsversion(self):
    self.has_resultsversion_ = 0
    self.resultsversion_ = 20

  def has_resultsversion(self): return self.has_resultsversion_

  def numdocuments(self): return self.numdocuments_

  def set_numdocuments(self, x):
    self.has_numdocuments_ = 1
    self.numdocuments_ = x

  def clear_numdocuments(self):
    self.has_numdocuments_ = 0
    self.numdocuments_ = 1

  def has_numdocuments(self): return self.has_numdocuments_

  def isfrooglefallthrough(self): return self.isfrooglefallthrough_

  def set_isfrooglefallthrough(self, x):
    self.has_isfrooglefallthrough_ = 1
    self.isfrooglefallthrough_ = x

  def clear_isfrooglefallthrough(self):
    self.has_isfrooglefallthrough_ = 0
    self.isfrooglefallthrough_ = 0

  def has_isfrooglefallthrough(self): return self.has_isfrooglefallthrough_

  def isfrooglerequest(self): return self.isfrooglerequest_

  def set_isfrooglerequest(self, x):
    self.has_isfrooglerequest_ = 1
    self.isfrooglerequest_ = x

  def clear_isfrooglerequest(self):
    self.has_isfrooglerequest_ = 0
    self.isfrooglerequest_ = 0

  def has_isfrooglerequest(self): return self.has_isfrooglerequest_

  def frooglecatinfo_size(self): return len(self.frooglecatinfo_)
  def frooglecatinfo_list(self): return self.frooglecatinfo_

  def frooglecatinfo(self, i):
    return self.frooglecatinfo_[i]

  def mutable_frooglecatinfo(self, i):
    return self.frooglecatinfo_[i]

  def add_frooglecatinfo(self):
    x = DocCommandProto_FroogleCatInfo()
    self.frooglecatinfo_.append(x)
    return x

  def clear_frooglecatinfo(self):
    self.frooglecatinfo_ = []
  def commerciallikelihood(self): return self.commerciallikelihood_

  def set_commerciallikelihood(self, x):
    self.has_commerciallikelihood_ = 1
    self.commerciallikelihood_ = x

  def clear_commerciallikelihood(self):
    self.has_commerciallikelihood_ = 0
    self.commerciallikelihood_ = 0

  def has_commerciallikelihood(self): return self.has_commerciallikelihood_

  def skiplevels(self): return self.skiplevels_

  def set_skiplevels(self, x):
    self.has_skiplevels_ = 1
    self.skiplevels_ = x

  def clear_skiplevels(self):
    self.has_skiplevels_ = 0
    self.skiplevels_ = ""

  def has_skiplevels(self): return self.has_skiplevels_

  def mustangsegmentinfo(self): return self.mustangsegmentinfo_

  def set_mustangsegmentinfo(self, x):
    self.has_mustangsegmentinfo_ = 1
    self.mustangsegmentinfo_ = x

  def clear_mustangsegmentinfo(self):
    self.has_mustangsegmentinfo_ = 0
    self.mustangsegmentinfo_ = ""

  def has_mustangsegmentinfo(self): return self.has_mustangsegmentinfo_

  def mustangversion(self): return self.mustangversion_

  def set_mustangversion(self, x):
    self.has_mustangversion_ = 1
    self.mustangversion_ = x

  def clear_mustangversion(self):
    self.has_mustangversion_ = 0
    self.mustangversion_ = -1

  def has_mustangversion(self): return self.has_mustangversion_

  def dragonsearchlanguage(self): return self.dragonsearchlanguage_

  def set_dragonsearchlanguage(self, x):
    self.has_dragonsearchlanguage_ = 1
    self.dragonsearchlanguage_ = x

  def clear_dragonsearchlanguage(self):
    self.has_dragonsearchlanguage_ = 0
    self.dragonsearchlanguage_ = ""

  def has_dragonsearchlanguage(self): return self.has_dragonsearchlanguage_

  def aggregation(self):
    if self.aggregation_ is None:
      self.lazy_init_lock_.acquire()
      try:
        if self.aggregation_ is None: self.aggregation_ = IndexResultsAggregation()
      finally:
        self.lazy_init_lock_.release()
    return self.aggregation_

  def mutable_aggregation(self): self.has_aggregation_ = 1; return self.aggregation()

  def clear_aggregation(self):
    #Warning: this method does not acquire the lock.
    self.has_aggregation_ = 0;
    if self.aggregation_ is not None: self.aggregation_.Clear()

  def has_aggregation(self): return self.has_aggregation_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_commandname()): self.set_commandname(x.commandname())
    for i in xrange(x.docitem_size()): self.add_docitem().CopyFrom(x.docitem(i))
    if (x.has_docitemblob()): self.mutable_docitemblob().MergeFrom(x.docitemblob())
    if (x.has_firstresultpos()): self.set_firstresultpos(x.firstresultpos())
    if (x.has_client()): self.set_client(x.client())
    if (x.has_binaryresults()): self.set_binaryresults(x.binaryresults())
    if (x.has_debuglevel()): self.set_debuglevel(x.debuglevel())
    for i in xrange(x.experiment_size()): self.add_experiment(x.experiment(i))
    if (x.has_hostidfilterparam()): self.set_hostidfilterparam(x.hostidfilterparam())
    if (x.has_skipflags()): self.set_skipflags(x.skipflags())
    if (x.has_qosstring()): self.set_qosstring(x.qosstring())
    if (x.has_restrict()): self.set_restrict(x.restrict())
    if (x.has_source()): self.set_source(x.source())
    if (x.has_sourceuser()): self.set_sourceuser(x.sourceuser())
    if (x.has_traceid()): self.set_traceid(x.traceid())
    if (x.has_timeout()): self.set_timeout(x.timeout())
    if (x.has_isimagesearch()): self.set_isimagesearch(x.isimagesearch())
    if (x.has_maxtitlelen()): self.set_maxtitlelen(x.maxtitlelen())
    if (x.has_safesearch()): self.set_safesearch(x.safesearch())
    if (x.has_parsedquery()): self.set_parsedquery(x.parsedquery())
    if (x.has_parsedqueryascachekey()): self.set_parsedqueryascachekey(x.parsedqueryascachekey())
    if (x.has_querylanguage()): self.set_querylanguage(x.querylanguage())
    if (x.has_countrycode()): self.set_countrycode(x.countrycode())
    if (x.has_dataversion()): self.set_dataversion(x.dataversion())
    if (x.has_outputlevel()): self.set_outputlevel(x.outputlevel())
    if (x.has_iswhitepages()): self.set_iswhitepages(x.iswhitepages())
    if (x.has_catrestrict()): self.set_catrestrict(x.catrestrict())
    if (x.has_catnamerestrict()): self.set_catnamerestrict(x.catnamerestrict())
    if (x.has_linkify()): self.set_linkify(x.linkify())
    if (x.has_isimagefetch()): self.set_isimagefetch(x.isimagefetch())
    if (x.has_deprecatedisscanfetch()): self.set_deprecatedisscanfetch(x.deprecatedisscanfetch())
    if (x.has_squery()): self.set_squery(x.squery())
    if (x.has_resultsinfo()): self.mutable_resultsinfo().MergeFrom(x.resultsinfo())
    if (x.has_deprecatedmagazineinfo()): self.mutable_deprecatedmagazineinfo().MergeFrom(x.deprecatedmagazineinfo())
    for i in xrange(x.metatags_size()): self.add_metatags(x.metatags(i))
    if (x.has_wantallmetatags()): self.set_wantallmetatags(x.wantallmetatags())
    if (x.has_maxsnippetdoclen()): self.set_maxsnippetdoclen(x.maxsnippetdoclen())
    if (x.has_snippetexperiments()): self.set_snippetexperiments(x.snippetexperiments())
    if (x.has_wantsitemap()): self.set_wantsitemap(x.wantsitemap())
    if (x.has_wantlocalinfo()): self.set_wantlocalinfo(x.wantlocalinfo())
    if (x.has_wantmanybox()): self.set_wantmanybox(x.wantmanybox())
    for i in xrange(x.wantmessagetype_size()): self.add_wantmessagetype(x.wantmessagetype(i))
    if (x.has_sendpagetype()): self.set_sendpagetype(x.sendpagetype())
    if (x.has_maxlinestosend()): self.set_maxlinestosend(x.maxlinestosend())
    if (x.has_linestoclip()): self.set_linestoclip(x.linestoclip())
    if (x.has_alltextutf8()): self.set_alltextutf8(x.alltextutf8())
    if (x.has_docinfotype()): self.set_docinfotype(x.docinfotype())
    if (x.has_epochstart()): self.set_epochstart(x.epochstart())
    if (x.has_epochend()): self.set_epochend(x.epochend())
    if (x.has_resultsversion()): self.set_resultsversion(x.resultsversion())
    if (x.has_numdocuments()): self.set_numdocuments(x.numdocuments())
    if (x.has_isfrooglefallthrough()): self.set_isfrooglefallthrough(x.isfrooglefallthrough())
    if (x.has_isfrooglerequest()): self.set_isfrooglerequest(x.isfrooglerequest())
    for i in xrange(x.frooglecatinfo_size()): self.add_frooglecatinfo().CopyFrom(x.frooglecatinfo(i))
    if (x.has_commerciallikelihood()): self.set_commerciallikelihood(x.commerciallikelihood())
    if (x.has_skiplevels()): self.set_skiplevels(x.skiplevels())
    if (x.has_mustangsegmentinfo()): self.set_mustangsegmentinfo(x.mustangsegmentinfo())
    if (x.has_mustangversion()): self.set_mustangversion(x.mustangversion())
    if (x.has_dragonsearchlanguage()): self.set_dragonsearchlanguage(x.dragonsearchlanguage())
    if (x.has_aggregation()): self.mutable_aggregation().MergeFrom(x.aggregation())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'DocCommandProto', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'DocCommandProto')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'DocCommandProto', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'DocCommandProto', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'DocCommandProto', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_commandname_ != x.has_commandname_: return 0
    if self.has_commandname_ and self.commandname_ != x.commandname_: return 0
    if len(self.docitem_) != len(x.docitem_): return 0
    for e1, e2 in zip(self.docitem_, x.docitem_):
      if e1 != e2: return 0
    if self.has_docitemblob_ != x.has_docitemblob_: return 0
    if self.has_docitemblob_ and self.docitemblob_ != x.docitemblob_: return 0
    if self.has_firstresultpos_ != x.has_firstresultpos_: return 0
    if self.has_firstresultpos_ and self.firstresultpos_ != x.firstresultpos_: return 0
    if self.has_client_ != x.has_client_: return 0
    if self.has_client_ and self.client_ != x.client_: return 0
    if self.has_binaryresults_ != x.has_binaryresults_: return 0
    if self.has_binaryresults_ and self.binaryresults_ != x.binaryresults_: return 0
    if self.has_debuglevel_ != x.has_debuglevel_: return 0
    if self.has_debuglevel_ and self.debuglevel_ != x.debuglevel_: return 0
    if len(self.experiment_) != len(x.experiment_): return 0
    for e1, e2 in zip(self.experiment_, x.experiment_):
      if e1 != e2: return 0
    if self.has_hostidfilterparam_ != x.has_hostidfilterparam_: return 0
    if self.has_hostidfilterparam_ and self.hostidfilterparam_ != x.hostidfilterparam_: return 0
    if self.has_skipflags_ != x.has_skipflags_: return 0
    if self.has_skipflags_ and self.skipflags_ != x.skipflags_: return 0
    if self.has_qosstring_ != x.has_qosstring_: return 0
    if self.has_qosstring_ and self.qosstring_ != x.qosstring_: return 0
    if self.has_restrict_ != x.has_restrict_: return 0
    if self.has_restrict_ and self.restrict_ != x.restrict_: return 0
    if self.has_source_ != x.has_source_: return 0
    if self.has_source_ and self.source_ != x.source_: return 0
    if self.has_sourceuser_ != x.has_sourceuser_: return 0
    if self.has_sourceuser_ and self.sourceuser_ != x.sourceuser_: return 0
    if self.has_traceid_ != x.has_traceid_: return 0
    if self.has_traceid_ and self.traceid_ != x.traceid_: return 0
    if self.has_timeout_ != x.has_timeout_: return 0
    if self.has_timeout_ and self.timeout_ != x.timeout_: return 0
    if self.has_isimagesearch_ != x.has_isimagesearch_: return 0
    if self.has_isimagesearch_ and self.isimagesearch_ != x.isimagesearch_: return 0
    if self.has_maxtitlelen_ != x.has_maxtitlelen_: return 0
    if self.has_maxtitlelen_ and self.maxtitlelen_ != x.maxtitlelen_: return 0
    if self.has_safesearch_ != x.has_safesearch_: return 0
    if self.has_safesearch_ and self.safesearch_ != x.safesearch_: return 0
    if self.has_parsedquery_ != x.has_parsedquery_: return 0
    if self.has_parsedquery_ and self.parsedquery_ != x.parsedquery_: return 0
    if self.has_parsedqueryascachekey_ != x.has_parsedqueryascachekey_: return 0
    if self.has_parsedqueryascachekey_ and self.parsedqueryascachekey_ != x.parsedqueryascachekey_: return 0
    if self.has_querylanguage_ != x.has_querylanguage_: return 0
    if self.has_querylanguage_ and self.querylanguage_ != x.querylanguage_: return 0
    if self.has_countrycode_ != x.has_countrycode_: return 0
    if self.has_countrycode_ and self.countrycode_ != x.countrycode_: return 0
    if self.has_dataversion_ != x.has_dataversion_: return 0
    if self.has_dataversion_ and self.dataversion_ != x.dataversion_: return 0
    if self.has_outputlevel_ != x.has_outputlevel_: return 0
    if self.has_outputlevel_ and self.outputlevel_ != x.outputlevel_: return 0
    if self.has_iswhitepages_ != x.has_iswhitepages_: return 0
    if self.has_iswhitepages_ and self.iswhitepages_ != x.iswhitepages_: return 0
    if self.has_catrestrict_ != x.has_catrestrict_: return 0
    if self.has_catrestrict_ and self.catrestrict_ != x.catrestrict_: return 0
    if self.has_catnamerestrict_ != x.has_catnamerestrict_: return 0
    if self.has_catnamerestrict_ and self.catnamerestrict_ != x.catnamerestrict_: return 0
    if self.has_linkify_ != x.has_linkify_: return 0
    if self.has_linkify_ and self.linkify_ != x.linkify_: return 0
    if self.has_isimagefetch_ != x.has_isimagefetch_: return 0
    if self.has_isimagefetch_ and self.isimagefetch_ != x.isimagefetch_: return 0
    if self.has_deprecatedisscanfetch_ != x.has_deprecatedisscanfetch_: return 0
    if self.has_deprecatedisscanfetch_ and self.deprecatedisscanfetch_ != x.deprecatedisscanfetch_: return 0
    if self.has_squery_ != x.has_squery_: return 0
    if self.has_squery_ and self.squery_ != x.squery_: return 0
    if self.has_resultsinfo_ != x.has_resultsinfo_: return 0
    if self.has_resultsinfo_ and self.resultsinfo_ != x.resultsinfo_: return 0
    if self.has_deprecatedmagazineinfo_ != x.has_deprecatedmagazineinfo_: return 0
    if self.has_deprecatedmagazineinfo_ and self.deprecatedmagazineinfo_ != x.deprecatedmagazineinfo_: return 0
    if len(self.metatags_) != len(x.metatags_): return 0
    for e1, e2 in zip(self.metatags_, x.metatags_):
      if e1 != e2: return 0
    if self.has_wantallmetatags_ != x.has_wantallmetatags_: return 0
    if self.has_wantallmetatags_ and self.wantallmetatags_ != x.wantallmetatags_: return 0
    if self.has_maxsnippetdoclen_ != x.has_maxsnippetdoclen_: return 0
    if self.has_maxsnippetdoclen_ and self.maxsnippetdoclen_ != x.maxsnippetdoclen_: return 0
    if self.has_snippetexperiments_ != x.has_snippetexperiments_: return 0
    if self.has_snippetexperiments_ and self.snippetexperiments_ != x.snippetexperiments_: return 0
    if self.has_wantsitemap_ != x.has_wantsitemap_: return 0
    if self.has_wantsitemap_ and self.wantsitemap_ != x.wantsitemap_: return 0
    if self.has_wantlocalinfo_ != x.has_wantlocalinfo_: return 0
    if self.has_wantlocalinfo_ and self.wantlocalinfo_ != x.wantlocalinfo_: return 0
    if self.has_wantmanybox_ != x.has_wantmanybox_: return 0
    if self.has_wantmanybox_ and self.wantmanybox_ != x.wantmanybox_: return 0
    if len(self.wantmessagetype_) != len(x.wantmessagetype_): return 0
    for e1, e2 in zip(self.wantmessagetype_, x.wantmessagetype_):
      if e1 != e2: return 0
    if self.has_sendpagetype_ != x.has_sendpagetype_: return 0
    if self.has_sendpagetype_ and self.sendpagetype_ != x.sendpagetype_: return 0
    if self.has_maxlinestosend_ != x.has_maxlinestosend_: return 0
    if self.has_maxlinestosend_ and self.maxlinestosend_ != x.maxlinestosend_: return 0
    if self.has_linestoclip_ != x.has_linestoclip_: return 0
    if self.has_linestoclip_ and self.linestoclip_ != x.linestoclip_: return 0
    if self.has_alltextutf8_ != x.has_alltextutf8_: return 0
    if self.has_alltextutf8_ and self.alltextutf8_ != x.alltextutf8_: return 0
    if self.has_docinfotype_ != x.has_docinfotype_: return 0
    if self.has_docinfotype_ and self.docinfotype_ != x.docinfotype_: return 0
    if self.has_epochstart_ != x.has_epochstart_: return 0
    if self.has_epochstart_ and self.epochstart_ != x.epochstart_: return 0
    if self.has_epochend_ != x.has_epochend_: return 0
    if self.has_epochend_ and self.epochend_ != x.epochend_: return 0
    if self.has_resultsversion_ != x.has_resultsversion_: return 0
    if self.has_resultsversion_ and self.resultsversion_ != x.resultsversion_: return 0
    if self.has_numdocuments_ != x.has_numdocuments_: return 0
    if self.has_numdocuments_ and self.numdocuments_ != x.numdocuments_: return 0
    if self.has_isfrooglefallthrough_ != x.has_isfrooglefallthrough_: return 0
    if self.has_isfrooglefallthrough_ and self.isfrooglefallthrough_ != x.isfrooglefallthrough_: return 0
    if self.has_isfrooglerequest_ != x.has_isfrooglerequest_: return 0
    if self.has_isfrooglerequest_ and self.isfrooglerequest_ != x.isfrooglerequest_: return 0
    if len(self.frooglecatinfo_) != len(x.frooglecatinfo_): return 0
    for e1, e2 in zip(self.frooglecatinfo_, x.frooglecatinfo_):
      if e1 != e2: return 0
    if self.has_commerciallikelihood_ != x.has_commerciallikelihood_: return 0
    if self.has_commerciallikelihood_ and self.commerciallikelihood_ != x.commerciallikelihood_: return 0
    if self.has_skiplevels_ != x.has_skiplevels_: return 0
    if self.has_skiplevels_ and self.skiplevels_ != x.skiplevels_: return 0
    if self.has_mustangsegmentinfo_ != x.has_mustangsegmentinfo_: return 0
    if self.has_mustangsegmentinfo_ and self.mustangsegmentinfo_ != x.mustangsegmentinfo_: return 0
    if self.has_mustangversion_ != x.has_mustangversion_: return 0
    if self.has_mustangversion_ and self.mustangversion_ != x.mustangversion_: return 0
    if self.has_dragonsearchlanguage_ != x.has_dragonsearchlanguage_: return 0
    if self.has_dragonsearchlanguage_ and self.dragonsearchlanguage_ != x.dragonsearchlanguage_: return 0
    if self.has_aggregation_ != x.has_aggregation_: return 0
    if self.has_aggregation_ and self.aggregation_ != x.aggregation_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_commandname_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: commandname not set.')
    for i in xrange(len(self.docitem_)):
      if (not self.docitem_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_docitemblob_ and not self.docitemblob_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_resultsinfo_ and not self.resultsinfo_.IsInitialized(debug_strs)): initialized = 0
    if (self.has_deprecatedmagazineinfo_ and not self.deprecatedmagazineinfo_.IsInitialized(debug_strs)): initialized = 0
    for i in xrange(len(self.frooglecatinfo_)):
      if (not self.frooglecatinfo_[i].IsInitialized(debug_strs)): initialized=0
    if (self.has_aggregation_ and not self.aggregation_.IsInitialized(debug_strs)): initialized = 0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.commandname_)
    n += 4 * len(self.docitem_)
    for i in xrange(len(self.docitem_)): n += self.docitem_[i].ByteSize()
    if (self.has_docitemblob_): n += 4 + self.docitemblob_.ByteSize()
    if (self.has_firstresultpos_): n += 1 + self.lengthVarInt64(self.firstresultpos_)
    if (self.has_client_): n += 2 + self.lengthString(len(self.client_))
    if (self.has_binaryresults_): n += 2
    if (self.has_debuglevel_): n += 2 + self.lengthVarInt64(self.debuglevel_)
    n += 2 * len(self.experiment_)
    for i in xrange(len(self.experiment_)): n += self.lengthString(len(self.experiment_[i]))
    if (self.has_hostidfilterparam_): n += 1 + self.lengthVarInt64(self.hostidfilterparam_)
    if (self.has_skipflags_): n += 2 + self.lengthVarInt64(self.skipflags_)
    if (self.has_qosstring_): n += 2 + self.lengthString(len(self.qosstring_))
    if (self.has_restrict_): n += 1 + self.lengthString(len(self.restrict_))
    if (self.has_source_): n += 2 + self.lengthString(len(self.source_))
    if (self.has_sourceuser_): n += 2 + self.lengthString(len(self.sourceuser_))
    if (self.has_traceid_): n += 1 + self.lengthVarInt64(self.traceid_)
    if (self.has_timeout_): n += 2 + self.lengthVarInt64(self.timeout_)
    if (self.has_isimagesearch_): n += 3
    if (self.has_maxtitlelen_): n += 1 + self.lengthVarInt64(self.maxtitlelen_)
    if (self.has_safesearch_): n += 1 + self.lengthVarInt64(self.safesearch_)
    if (self.has_parsedquery_): n += 1 + self.lengthString(len(self.parsedquery_))
    if (self.has_parsedqueryascachekey_): n += 2 + self.lengthString(len(self.parsedqueryascachekey_))
    if (self.has_querylanguage_): n += 2 + self.lengthString(len(self.querylanguage_))
    if (self.has_countrycode_): n += 2 + self.lengthString(len(self.countrycode_))
    if (self.has_dataversion_): n += 2 + self.lengthString(len(self.dataversion_))
    if (self.has_outputlevel_): n += 2 + self.lengthVarInt64(self.outputlevel_)
    if (self.has_iswhitepages_): n += 3
    if (self.has_catrestrict_): n += 2 + self.lengthString(len(self.catrestrict_))
    if (self.has_catnamerestrict_): n += 2 + self.lengthString(len(self.catnamerestrict_))
    if (self.has_linkify_): n += 2 + self.lengthVarInt64(self.linkify_)
    if (self.has_isimagefetch_): n += 3
    if (self.has_deprecatedisscanfetch_): n += 3
    if (self.has_squery_): n += 3
    if (self.has_resultsinfo_): n += 2 + self.resultsinfo_.ByteSize()
    if (self.has_deprecatedmagazineinfo_): n += 4 + self.deprecatedmagazineinfo_.ByteSize()
    n += 2 * len(self.metatags_)
    for i in xrange(len(self.metatags_)): n += self.lengthString(len(self.metatags_[i]))
    if (self.has_wantallmetatags_): n += 3
    if (self.has_maxsnippetdoclen_): n += 2 + self.lengthVarInt64(self.maxsnippetdoclen_)
    if (self.has_snippetexperiments_): n += 2 + self.lengthVarInt64(self.snippetexperiments_)
    if (self.has_wantsitemap_): n += 3
    if (self.has_wantlocalinfo_): n += 3
    if (self.has_wantmanybox_): n += 3
    n += 2 * len(self.wantmessagetype_)
    for i in xrange(len(self.wantmessagetype_)): n += self.lengthVarInt64(self.wantmessagetype_[i])
    if (self.has_sendpagetype_): n += 2 + self.lengthVarInt64(self.sendpagetype_)
    if (self.has_maxlinestosend_): n += 2 + self.lengthVarInt64(self.maxlinestosend_)
    if (self.has_linestoclip_): n += 2 + self.lengthVarInt64(self.linestoclip_)
    if (self.has_alltextutf8_): n += 3
    if (self.has_docinfotype_): n += 2 + self.lengthVarInt64(self.docinfotype_)
    if (self.has_epochstart_): n += 2 + self.lengthVarInt64(self.epochstart_)
    if (self.has_epochend_): n += 2 + self.lengthVarInt64(self.epochend_)
    if (self.has_resultsversion_): n += 2 + self.lengthVarInt64(self.resultsversion_)
    if (self.has_numdocuments_): n += 2 + self.lengthVarInt64(self.numdocuments_)
    if (self.has_isfrooglefallthrough_): n += 3
    if (self.has_isfrooglerequest_): n += 3
    n += 4 * len(self.frooglecatinfo_)
    for i in xrange(len(self.frooglecatinfo_)): n += self.frooglecatinfo_[i].ByteSize()
    if (self.has_commerciallikelihood_): n += 2 + self.lengthVarInt64(self.commerciallikelihood_)
    if (self.has_skiplevels_): n += 2 + self.lengthString(len(self.skiplevels_))
    if (self.has_mustangsegmentinfo_): n += 2 + self.lengthString(len(self.mustangsegmentinfo_))
    if (self.has_mustangversion_): n += 2 + self.lengthVarInt64(self.mustangversion_)
    if (self.has_dragonsearchlanguage_): n += 2 + self.lengthString(len(self.dragonsearchlanguage_))
    if (self.has_aggregation_): n += 2 + self.lengthString(self.aggregation_.ByteSize())
    return n + 1

  def Clear(self):
    self.clear_commandname()
    self.clear_docitem()
    self.clear_docitemblob()
    self.clear_firstresultpos()
    self.clear_client()
    self.clear_binaryresults()
    self.clear_debuglevel()
    self.clear_experiment()
    self.clear_hostidfilterparam()
    self.clear_skipflags()
    self.clear_qosstring()
    self.clear_restrict()
    self.clear_source()
    self.clear_sourceuser()
    self.clear_traceid()
    self.clear_timeout()
    self.clear_isimagesearch()
    self.clear_maxtitlelen()
    self.clear_safesearch()
    self.clear_parsedquery()
    self.clear_parsedqueryascachekey()
    self.clear_querylanguage()
    self.clear_countrycode()
    self.clear_dataversion()
    self.clear_outputlevel()
    self.clear_iswhitepages()
    self.clear_catrestrict()
    self.clear_catnamerestrict()
    self.clear_linkify()
    self.clear_isimagefetch()
    self.clear_deprecatedisscanfetch()
    self.clear_squery()
    self.clear_resultsinfo()
    self.clear_deprecatedmagazineinfo()
    self.clear_metatags()
    self.clear_wantallmetatags()
    self.clear_maxsnippetdoclen()
    self.clear_snippetexperiments()
    self.clear_wantsitemap()
    self.clear_wantlocalinfo()
    self.clear_wantmanybox()
    self.clear_wantmessagetype()
    self.clear_sendpagetype()
    self.clear_maxlinestosend()
    self.clear_linestoclip()
    self.clear_alltextutf8()
    self.clear_docinfotype()
    self.clear_epochstart()
    self.clear_epochend()
    self.clear_resultsversion()
    self.clear_numdocuments()
    self.clear_isfrooglefallthrough()
    self.clear_isfrooglerequest()
    self.clear_frooglecatinfo()
    self.clear_commerciallikelihood()
    self.clear_skiplevels()
    self.clear_mustangsegmentinfo()
    self.clear_mustangversion()
    self.clear_dragonsearchlanguage()
    self.clear_aggregation()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.commandname_)
    if (self.has_firstresultpos_):
      out.putVarInt32(24)
      out.putVarInt32(self.firstresultpos_)
    if (self.has_binaryresults_):
      out.putVarInt32(32)
      out.putBoolean(self.binaryresults_)
    if (self.has_maxtitlelen_):
      out.putVarInt32(40)
      out.putVarInt32(self.maxtitlelen_)
    if (self.has_safesearch_):
      out.putVarInt32(48)
      out.putVarInt32(self.safesearch_)
    if (self.has_parsedquery_):
      out.putVarInt32(58)
      out.putPrefixedString(self.parsedquery_)
    if (self.has_resultsinfo_):
      out.putVarInt32(67)
      self.resultsinfo_.OutputUnchecked(out)
      out.putVarInt32(68)
    if (self.has_traceid_):
      out.putVarInt32(104)
      out.putVarInt32(self.traceid_)
    if (self.has_restrict_):
      out.putVarInt32(114)
      out.putPrefixedString(self.restrict_)
    if (self.has_hostidfilterparam_):
      out.putVarInt32(120)
      out.putVarInt32(self.hostidfilterparam_)
    if (self.has_qosstring_):
      out.putVarInt32(130)
      out.putPrefixedString(self.qosstring_)
    if (self.has_source_):
      out.putVarInt32(138)
      out.putPrefixedString(self.source_)
    if (self.has_sourceuser_):
      out.putVarInt32(146)
      out.putPrefixedString(self.sourceuser_)
    if (self.has_dataversion_):
      out.putVarInt32(170)
      out.putPrefixedString(self.dataversion_)
    if (self.has_debuglevel_):
      out.putVarInt32(176)
      out.putVarInt32(self.debuglevel_)
    if (self.has_outputlevel_):
      out.putVarInt32(184)
      out.putVarInt32(self.outputlevel_)
    if (self.has_iswhitepages_):
      out.putVarInt32(192)
      out.putBoolean(self.iswhitepages_)
    if (self.has_catrestrict_):
      out.putVarInt32(202)
      out.putPrefixedString(self.catrestrict_)
    if (self.has_client_):
      out.putVarInt32(210)
      out.putPrefixedString(self.client_)
    if (self.has_linkify_):
      out.putVarInt32(216)
      out.putVarInt32(self.linkify_)
    if (self.has_timeout_):
      out.putVarInt32(224)
      out.putVarInt32(self.timeout_)
    for i in xrange(len(self.metatags_)):
      out.putVarInt32(234)
      out.putPrefixedString(self.metatags_[i])
    if (self.has_wantallmetatags_):
      out.putVarInt32(240)
      out.putBoolean(self.wantallmetatags_)
    if (self.has_deprecatedmagazineinfo_):
      out.putVarInt32(251)
      self.deprecatedmagazineinfo_.OutputUnchecked(out)
      out.putVarInt32(252)
    if (self.has_sendpagetype_):
      out.putVarInt32(352)
      out.putVarInt32(self.sendpagetype_)
    if (self.has_maxlinestosend_):
      out.putVarInt32(360)
      out.putVarInt32(self.maxlinestosend_)
    if (self.has_linestoclip_):
      out.putVarInt32(368)
      out.putVarInt32(self.linestoclip_)
    if (self.has_docinfotype_):
      out.putVarInt32(376)
      out.putVarInt32(self.docinfotype_)
    if (self.has_catnamerestrict_):
      out.putVarInt32(386)
      out.putPrefixedString(self.catnamerestrict_)
    if (self.has_maxsnippetdoclen_):
      out.putVarInt32(392)
      out.putVarInt32(self.maxsnippetdoclen_)
    if (self.has_snippetexperiments_):
      out.putVarInt32(400)
      out.putVarInt32(self.snippetexperiments_)
    if (self.has_alltextutf8_):
      out.putVarInt32(408)
      out.putBoolean(self.alltextutf8_)
    for i in xrange(len(self.docitem_)):
      out.putVarInt32(419)
      self.docitem_[i].OutputUnchecked(out)
      out.putVarInt32(420)
    if (self.has_epochstart_):
      out.putVarInt32(424)
      out.putVarInt32(self.epochstart_)
    if (self.has_epochend_):
      out.putVarInt32(432)
      out.putVarInt32(self.epochend_)
    if (self.has_isimagefetch_):
      out.putVarInt32(440)
      out.putBoolean(self.isimagefetch_)
    if (self.has_numdocuments_):
      out.putVarInt32(448)
      out.putVarInt32(self.numdocuments_)
    if (self.has_isfrooglefallthrough_):
      out.putVarInt32(456)
      out.putBoolean(self.isfrooglefallthrough_)
    if (self.has_isfrooglerequest_):
      out.putVarInt32(464)
      out.putBoolean(self.isfrooglerequest_)
    if (self.has_squery_):
      out.putVarInt32(472)
      out.putBoolean(self.squery_)
    if (self.has_skipflags_):
      out.putVarInt32(480)
      out.putVarInt32(self.skipflags_)
    for i in xrange(len(self.experiment_)):
      out.putVarInt32(490)
      out.putPrefixedString(self.experiment_[i])
    if (self.has_deprecatedisscanfetch_):
      out.putVarInt32(528)
      out.putBoolean(self.deprecatedisscanfetch_)
    if (self.has_parsedqueryascachekey_):
      out.putVarInt32(538)
      out.putPrefixedString(self.parsedqueryascachekey_)
    if (self.has_docitemblob_):
      out.putVarInt32(547)
      self.docitemblob_.OutputUnchecked(out)
      out.putVarInt32(548)
    if (self.has_skiplevels_):
      out.putVarInt32(578)
      out.putPrefixedString(self.skiplevels_)
    if (self.has_commerciallikelihood_):
      out.putVarInt32(616)
      out.putVarInt32(self.commerciallikelihood_)
    for i in xrange(len(self.frooglecatinfo_)):
      out.putVarInt32(651)
      self.frooglecatinfo_[i].OutputUnchecked(out)
      out.putVarInt32(652)
    if (self.has_querylanguage_):
      out.putVarInt32(674)
      out.putPrefixedString(self.querylanguage_)
    if (self.has_mustangsegmentinfo_):
      out.putVarInt32(698)
      out.putPrefixedString(self.mustangsegmentinfo_)
    if (self.has_countrycode_):
      out.putVarInt32(706)
      out.putPrefixedString(self.countrycode_)
    if (self.has_mustangversion_):
      out.putVarInt32(712)
      out.putVarInt32(self.mustangversion_)
    if (self.has_wantsitemap_):
      out.putVarInt32(792)
      out.putBoolean(self.wantsitemap_)
    if (self.has_resultsversion_):
      out.putVarInt32(800)
      out.putVarInt32(self.resultsversion_)
    if (self.has_dragonsearchlanguage_):
      out.putVarInt32(810)
      out.putPrefixedString(self.dragonsearchlanguage_)
    if (self.has_wantlocalinfo_):
      out.putVarInt32(816)
      out.putBoolean(self.wantlocalinfo_)
    if (self.has_isimagesearch_):
      out.putVarInt32(832)
      out.putBoolean(self.isimagesearch_)
    if (self.has_aggregation_):
      out.putVarInt32(842)
      out.putVarInt32(self.aggregation_.ByteSize())
      self.aggregation_.OutputUnchecked(out)
    if (self.has_wantmanybox_):
      out.putVarInt32(848)
      out.putBoolean(self.wantmanybox_)
    for i in xrange(len(self.wantmessagetype_)):
      out.putVarInt32(856)
      out.putVarInt32(self.wantmessagetype_[i])

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_commandname(d.getVarInt32())
        continue
      if tt == 24:
        self.set_firstresultpos(d.getVarInt32())
        continue
      if tt == 32:
        self.set_binaryresults(d.getBoolean())
        continue
      if tt == 40:
        self.set_maxtitlelen(d.getVarInt32())
        continue
      if tt == 48:
        self.set_safesearch(d.getVarInt32())
        continue
      if tt == 58:
        self.set_parsedquery(d.getPrefixedString())
        continue
      if tt == 67:
        self.mutable_resultsinfo().TryMerge(d)
        continue
      if tt == 104:
        self.set_traceid(d.getVarInt32())
        continue
      if tt == 114:
        self.set_restrict(d.getPrefixedString())
        continue
      if tt == 120:
        self.set_hostidfilterparam(d.getVarInt32())
        continue
      if tt == 130:
        self.set_qosstring(d.getPrefixedString())
        continue
      if tt == 138:
        self.set_source(d.getPrefixedString())
        continue
      if tt == 146:
        self.set_sourceuser(d.getPrefixedString())
        continue
      if tt == 170:
        self.set_dataversion(d.getPrefixedString())
        continue
      if tt == 176:
        self.set_debuglevel(d.getVarInt32())
        continue
      if tt == 184:
        self.set_outputlevel(d.getVarInt32())
        continue
      if tt == 192:
        self.set_iswhitepages(d.getBoolean())
        continue
      if tt == 202:
        self.set_catrestrict(d.getPrefixedString())
        continue
      if tt == 210:
        self.set_client(d.getPrefixedString())
        continue
      if tt == 216:
        self.set_linkify(d.getVarInt32())
        continue
      if tt == 224:
        self.set_timeout(d.getVarInt32())
        continue
      if tt == 234:
        self.add_metatags(d.getPrefixedString())
        continue
      if tt == 240:
        self.set_wantallmetatags(d.getBoolean())
        continue
      if tt == 251:
        self.mutable_deprecatedmagazineinfo().TryMerge(d)
        continue
      if tt == 352:
        self.set_sendpagetype(d.getVarInt32())
        continue
      if tt == 360:
        self.set_maxlinestosend(d.getVarInt32())
        continue
      if tt == 368:
        self.set_linestoclip(d.getVarInt32())
        continue
      if tt == 376:
        self.set_docinfotype(d.getVarInt32())
        continue
      if tt == 386:
        self.set_catnamerestrict(d.getPrefixedString())
        continue
      if tt == 392:
        self.set_maxsnippetdoclen(d.getVarInt32())
        continue
      if tt == 400:
        self.set_snippetexperiments(d.getVarInt32())
        continue
      if tt == 408:
        self.set_alltextutf8(d.getBoolean())
        continue
      if tt == 419:
        self.add_docitem().TryMerge(d)
        continue
      if tt == 424:
        self.set_epochstart(d.getVarInt32())
        continue
      if tt == 432:
        self.set_epochend(d.getVarInt32())
        continue
      if tt == 440:
        self.set_isimagefetch(d.getBoolean())
        continue
      if tt == 448:
        self.set_numdocuments(d.getVarInt32())
        continue
      if tt == 456:
        self.set_isfrooglefallthrough(d.getBoolean())
        continue
      if tt == 464:
        self.set_isfrooglerequest(d.getBoolean())
        continue
      if tt == 472:
        self.set_squery(d.getBoolean())
        continue
      if tt == 480:
        self.set_skipflags(d.getVarInt32())
        continue
      if tt == 490:
        self.add_experiment(d.getPrefixedString())
        continue
      if tt == 528:
        self.set_deprecatedisscanfetch(d.getBoolean())
        continue
      if tt == 538:
        self.set_parsedqueryascachekey(d.getPrefixedString())
        continue
      if tt == 547:
        self.mutable_docitemblob().TryMerge(d)
        continue
      if tt == 578:
        self.set_skiplevels(d.getPrefixedString())
        continue
      if tt == 616:
        self.set_commerciallikelihood(d.getVarInt32())
        continue
      if tt == 651:
        self.add_frooglecatinfo().TryMerge(d)
        continue
      if tt == 674:
        self.set_querylanguage(d.getPrefixedString())
        continue
      if tt == 698:
        self.set_mustangsegmentinfo(d.getPrefixedString())
        continue
      if tt == 706:
        self.set_countrycode(d.getPrefixedString())
        continue
      if tt == 712:
        self.set_mustangversion(d.getVarInt32())
        continue
      if tt == 792:
        self.set_wantsitemap(d.getBoolean())
        continue
      if tt == 800:
        self.set_resultsversion(d.getVarInt32())
        continue
      if tt == 810:
        self.set_dragonsearchlanguage(d.getPrefixedString())
        continue
      if tt == 816:
        self.set_wantlocalinfo(d.getBoolean())
        continue
      if tt == 832:
        self.set_isimagesearch(d.getBoolean())
        continue
      if tt == 842:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.mutable_aggregation().TryMerge(tmp)
        continue
      if tt == 848:
        self.set_wantmanybox(d.getBoolean())
        continue
      if tt == 856:
        self.add_wantmessagetype(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_commandname_: res+=prefix+("CommandName: %s\n" % self.DebugFormatInt32(self.commandname_))
    cnt=0
    for e in self.docitem_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("DocItem%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_docitemblob_:
      res+=prefix+"DocItemBlob {\n"
      res+=self.docitemblob_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_firstresultpos_: res+=prefix+("FirstResultPos: %s\n" % self.DebugFormatInt32(self.firstresultpos_))
    if self.has_client_: res+=prefix+("Client: %s\n" % self.DebugFormatString(self.client_))
    if self.has_binaryresults_: res+=prefix+("BinaryResults: %s\n" % self.DebugFormatBool(self.binaryresults_))
    if self.has_debuglevel_: res+=prefix+("DebugLevel: %s\n" % self.DebugFormatInt32(self.debuglevel_))
    cnt=0
    for e in self.experiment_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Experiment%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_hostidfilterparam_: res+=prefix+("HostidFilterParam: %s\n" % self.DebugFormatInt32(self.hostidfilterparam_))
    if self.has_skipflags_: res+=prefix+("SkipFlags: %s\n" % self.DebugFormatInt32(self.skipflags_))
    if self.has_qosstring_: res+=prefix+("QosString: %s\n" % self.DebugFormatString(self.qosstring_))
    if self.has_restrict_: res+=prefix+("Restrict: %s\n" % self.DebugFormatString(self.restrict_))
    if self.has_source_: res+=prefix+("Source: %s\n" % self.DebugFormatString(self.source_))
    if self.has_sourceuser_: res+=prefix+("SourceUser: %s\n" % self.DebugFormatString(self.sourceuser_))
    if self.has_traceid_: res+=prefix+("TraceId: %s\n" % self.DebugFormatInt32(self.traceid_))
    if self.has_timeout_: res+=prefix+("Timeout: %s\n" % self.DebugFormatInt32(self.timeout_))
    if self.has_isimagesearch_: res+=prefix+("IsImageSearch: %s\n" % self.DebugFormatBool(self.isimagesearch_))
    if self.has_maxtitlelen_: res+=prefix+("MaxTitleLen: %s\n" % self.DebugFormatInt32(self.maxtitlelen_))
    if self.has_safesearch_: res+=prefix+("Safesearch: %s\n" % self.DebugFormatInt32(self.safesearch_))
    if self.has_parsedquery_: res+=prefix+("ParsedQuery: %s\n" % self.DebugFormatString(self.parsedquery_))
    if self.has_parsedqueryascachekey_: res+=prefix+("ParsedQueryAsCacheKey: %s\n" % self.DebugFormatString(self.parsedqueryascachekey_))
    if self.has_querylanguage_: res+=prefix+("QueryLanguage: %s\n" % self.DebugFormatString(self.querylanguage_))
    if self.has_countrycode_: res+=prefix+("CountryCode: %s\n" % self.DebugFormatString(self.countrycode_))
    if self.has_dataversion_: res+=prefix+("DataVersion: %s\n" % self.DebugFormatString(self.dataversion_))
    if self.has_outputlevel_: res+=prefix+("OutputLevel: %s\n" % self.DebugFormatInt32(self.outputlevel_))
    if self.has_iswhitepages_: res+=prefix+("IsWhitepages: %s\n" % self.DebugFormatBool(self.iswhitepages_))
    if self.has_catrestrict_: res+=prefix+("CatRestrict: %s\n" % self.DebugFormatString(self.catrestrict_))
    if self.has_catnamerestrict_: res+=prefix+("CatNameRestrict: %s\n" % self.DebugFormatString(self.catnamerestrict_))
    if self.has_linkify_: res+=prefix+("Linkify: %s\n" % self.DebugFormatInt32(self.linkify_))
    if self.has_isimagefetch_: res+=prefix+("IsImageFetch: %s\n" % self.DebugFormatBool(self.isimagefetch_))
    if self.has_deprecatedisscanfetch_: res+=prefix+("DeprecatedIsScanFetch: %s\n" % self.DebugFormatBool(self.deprecatedisscanfetch_))
    if self.has_squery_: res+=prefix+("SQuery: %s\n" % self.DebugFormatBool(self.squery_))
    if self.has_resultsinfo_:
      res+=prefix+"ResultsInfo {\n"
      res+=self.resultsinfo_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    if self.has_deprecatedmagazineinfo_:
      res+=prefix+"DeprecatedMagazineInfo {\n"
      res+=self.deprecatedmagazineinfo_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
    cnt=0
    for e in self.metatags_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Metatags%s: %s\n" % (elm, self.DebugFormatString(e)))
      cnt+=1
    if self.has_wantallmetatags_: res+=prefix+("WantAllMetatags: %s\n" % self.DebugFormatBool(self.wantallmetatags_))
    if self.has_maxsnippetdoclen_: res+=prefix+("MaxSnippetDoclen: %s\n" % self.DebugFormatInt32(self.maxsnippetdoclen_))
    if self.has_snippetexperiments_: res+=prefix+("SnippetExperiments: %s\n" % self.DebugFormatInt32(self.snippetexperiments_))
    if self.has_wantsitemap_: res+=prefix+("WantSitemap: %s\n" % self.DebugFormatBool(self.wantsitemap_))
    if self.has_wantlocalinfo_: res+=prefix+("WantLocalInfo: %s\n" % self.DebugFormatBool(self.wantlocalinfo_))
    if self.has_wantmanybox_: res+=prefix+("WantManybox: %s\n" % self.DebugFormatBool(self.wantmanybox_))
    cnt=0
    for e in self.wantmessagetype_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("WantMessageType%s: %s\n" % (elm, self.DebugFormatInt32(e)))
      cnt+=1
    if self.has_sendpagetype_: res+=prefix+("SendPageType: %s\n" % self.DebugFormatInt32(self.sendpagetype_))
    if self.has_maxlinestosend_: res+=prefix+("MaxLinesToSend: %s\n" % self.DebugFormatInt32(self.maxlinestosend_))
    if self.has_linestoclip_: res+=prefix+("LinesToClip: %s\n" % self.DebugFormatInt32(self.linestoclip_))
    if self.has_alltextutf8_: res+=prefix+("AllTextUTF8: %s\n" % self.DebugFormatBool(self.alltextutf8_))
    if self.has_docinfotype_: res+=prefix+("DocInfoType: %s\n" % self.DebugFormatInt32(self.docinfotype_))
    if self.has_epochstart_: res+=prefix+("EpochStart: %s\n" % self.DebugFormatInt32(self.epochstart_))
    if self.has_epochend_: res+=prefix+("EpochEnd: %s\n" % self.DebugFormatInt32(self.epochend_))
    if self.has_resultsversion_: res+=prefix+("ResultsVersion: %s\n" % self.DebugFormatInt32(self.resultsversion_))
    if self.has_numdocuments_: res+=prefix+("NumDocuments: %s\n" % self.DebugFormatInt32(self.numdocuments_))
    if self.has_isfrooglefallthrough_: res+=prefix+("IsFroogleFallthrough: %s\n" % self.DebugFormatBool(self.isfrooglefallthrough_))
    if self.has_isfrooglerequest_: res+=prefix+("IsFroogleRequest: %s\n" % self.DebugFormatBool(self.isfrooglerequest_))
    cnt=0
    for e in self.frooglecatinfo_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("FroogleCatInfo%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    if self.has_commerciallikelihood_: res+=prefix+("CommercialLikelihood: %s\n" % self.DebugFormatInt32(self.commerciallikelihood_))
    if self.has_skiplevels_: res+=prefix+("SkipLevels: %s\n" % self.DebugFormatString(self.skiplevels_))
    if self.has_mustangsegmentinfo_: res+=prefix+("MustangSegmentInfo: %s\n" % self.DebugFormatString(self.mustangsegmentinfo_))
    if self.has_mustangversion_: res+=prefix+("MustangVersion: %s\n" % self.DebugFormatInt32(self.mustangversion_))
    if self.has_dragonsearchlanguage_: res+=prefix+("DragonSearchLanguage: %s\n" % self.DebugFormatString(self.dragonsearchlanguage_))
    if self.has_aggregation_:
      res+=prefix+"Aggregation <\n"
      res+=self.aggregation_.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
    return res

  kCommandName = 1
  kDocItemGroup = 52
  kDocItemDocid = 2
  kDocItemLevelBitmap = 12
  kDocItemSegmentBitmap = 19
  kDocItemSendPageType = 78
  kDocItemSnippetOverrideGroup = 73
  kDocItemSnippetOverridePositionContentGroup = 74
  kDocItemSnippetOverridePositionContentPosition = 75
  kDocItemSnippetOverridePositionContentLength = 76
  kDocItemSnippetOverridelocalsearch_content_id = 90
  kDocItemSnippetOverridecontext_rejection_mask = 98
  kDocItemSnippetOverrideResultsInfoGroup = 91
  kDocItemSnippetOverrideResultsInfoSnippetCharsPerLine = 92
  kDocItemSnippetOverrideResultsInfoMaxNumSnippets = 93
  kDocItemSnippetOverrideResultsInfoMaxSnippetChars = 94
  kDocItemNoOdp = 95
  kDocItemDocVersionId = 79
  kDocItemMustangSegmentIndex = 86
  kDocItemCoupledDocid = 103
  kDocItemBlobGroup = 68
  kDocItemBlobDocIds = 69
  kDocItemBlobCoupledDocids = 97
  kDocItemBlobLevelBitmaps = 70
  kDocItemBlobSegmentBitmaps = 71
  kDocItemBlobNoOdps = 96
  kDocItemBlobDocVersionIds = 80
  kDocItemBlobMustangSegmentIndices = 85
  kFirstResultPos = 3
  kClient = 26
  kBinaryResults = 4
  kDebugLevel = 22
  kExperiment = 61
  kHostidFilterParam = 15
  kSkipFlags = 60
  kQosString = 16
  kRestrict = 14
  kSource = 17
  kSourceUser = 18
  kTraceId = 13
  kTimeout = 28
  kIsImageSearch = 104
  kMaxTitleLen = 5
  kSafesearch = 6
  kParsedQuery = 7
  kParsedQueryAsCacheKey = 67
  kQueryLanguage = 84
  kCountryCode = 88
  kDataVersion = 21
  kOutputLevel = 23
  kIsWhitepages = 24
  kCatRestrict = 25
  kCatNameRestrict = 48
  kLinkify = 27
  kIsImageFetch = 55
  kDeprecatedIsScanFetch = 66
  kSQuery = 59
  kResultsInfoGroup = 8
  kResultsInfoSnippetCharsPerLine = 9
  kResultsInfoMaxNumSnippets = 10
  kResultsInfoMaxSnippetChars = 11
  kDeprecatedMagazineInfoGroup = 31
  kDeprecatedMagazineInfoScanType = 32
  kDeprecatedMagazineInfoIsSmall = 33
  kDeprecatedMagazineInfoNumHighlight = 34
  kDeprecatedMagazineInfoSnipX = 35
  kDeprecatedMagazineInfoSnipY = 36
  kDeprecatedMagazineInfoImageWidth = 37
  kDeprecatedMagazineInfoImageHeight = 38
  kDeprecatedMagazineInfoHighlightGroup = 39
  kDeprecatedMagazineInfoHighlightLineX = 62
  kDeprecatedMagazineInfoHighlightLineY = 63
  kDeprecatedMagazineInfoHighlightLineW = 64
  kDeprecatedMagazineInfoHighlightLineH = 65
  kDeprecatedMagazineInfoHighlightWordX = 40
  kDeprecatedMagazineInfoHighlightWordY = 41
  kDeprecatedMagazineInfoHighlightWordW = 42
  kDeprecatedMagazineInfoHighlightWordH = 43
  kMetatags = 29
  kWantAllMetatags = 30
  kMaxSnippetDoclen = 49
  kSnippetExperiments = 50
  kWantSitemap = 99
  kWantLocalInfo = 102
  kWantManybox = 106
  kWantMessageType = 107
  kSendPageType = 44
  kMaxLinesToSend = 45
  kLinesToClip = 46
  kAllTextUTF8 = 51
  kDocInfoType = 47
  kEpochStart = 53
  kEpochEnd = 54
  kResultsVersion = 100
  kNumDocuments = 56
  kIsFroogleFallthrough = 57
  kIsFroogleRequest = 58
  kFroogleCatInfoGroup = 81
  kFroogleCatInfoCatId = 82
  kFroogleCatInfoScore = 83
  kCommercialLikelihood = 77
  kSkipLevels = 72
  kMustangSegmentInfo = 87
  kMustangVersion = 89
  kDragonSearchLanguage = 101
  kAggregation = 105

  _TEXT = (
   "ErrorCode",  #   0
   "CommandName",  #   1
   "Docid",  #   2
   "FirstResultPos",  #   3
   "BinaryResults",  #   4
   "MaxTitleLen",  #   5
   "Safesearch",  #   6
   "ParsedQuery",  #   7
   "ResultsInfo",  #   8
   "SnippetCharsPerLine",  #   9
   "MaxNumSnippets",  #  10
   "MaxSnippetChars",  #  11
   "LevelBitmap",  #  12
   "TraceId",  #  13
   "Restrict",  #  14
   "HostidFilterParam",  #  15
   "QosString",  #  16
   "Source",  #  17
   "SourceUser",  #  18
   "SegmentBitmap",  #  19
   None,  #  20
   "DataVersion",  #  21
   "DebugLevel",  #  22
   "OutputLevel",  #  23
   "IsWhitepages",  #  24
   "CatRestrict",  #  25
   "Client",  #  26
   "Linkify",  #  27
   "Timeout",  #  28
   "Metatags",  #  29
   "WantAllMetatags",  #  30
   "DeprecatedMagazineInfo",  #  31
   "ScanType",  #  32
   "IsSmall",  #  33
   "NumHighlight",  #  34
   "SnipX",  #  35
   "SnipY",  #  36
   "ImageWidth",  #  37
   "ImageHeight",  #  38
   "Highlight",  #  39
   "WordX",  #  40
   "WordY",  #  41
   "WordW",  #  42
   "WordH",  #  43
   "SendPageType",  #  44
   "MaxLinesToSend",  #  45
   "LinesToClip",  #  46
   "DocInfoType",  #  47
   "CatNameRestrict",  #  48
   "MaxSnippetDoclen",  #  49
   "SnippetExperiments",  #  50
   "AllTextUTF8",  #  51
   "DocItem",  #  52
   "EpochStart",  #  53
   "EpochEnd",  #  54
   "IsImageFetch",  #  55
   "NumDocuments",  #  56
   "IsFroogleFallthrough",  #  57
   "IsFroogleRequest",  #  58
   "SQuery",  #  59
   "SkipFlags",  #  60
   "Experiment",  #  61
   "LineX",  #  62
   "LineY",  #  63
   "LineW",  #  64
   "LineH",  #  65
   "DeprecatedIsScanFetch",  #  66
   "ParsedQueryAsCacheKey",  #  67
   "DocItemBlob",  #  68
   "DocIds",  #  69
   "LevelBitmaps",  #  70
   "SegmentBitmaps",  #  71
   "SkipLevels",  #  72
   "SnippetOverride",  #  73
   "PositionContent",  #  74
   "Position",  #  75
   "Length",  #  76
   "CommercialLikelihood",  #  77
   "SendPageType",  #  78
   "DocVersionId",  #  79
   "DocVersionIds",  #  80
   "FroogleCatInfo",  #  81
   "CatId",  #  82
   "Score",  #  83
   "QueryLanguage",  #  84
   "MustangSegmentIndices",  #  85
   "MustangSegmentIndex",  #  86
   "MustangSegmentInfo",  #  87
   "CountryCode",  #  88
   "MustangVersion",  #  89
   "localsearch_content_id",  #  90
   "ResultsInfo",  #  91
   "SnippetCharsPerLine",  #  92
   "MaxNumSnippets",  #  93
   "MaxSnippetChars",  #  94
   "NoOdp",  #  95
   "NoOdps",  #  96
   "CoupledDocids",  #  97
   "context_rejection_mask",  #  98
   "WantSitemap",  #  99
   "ResultsVersion",  # 100
   "DragonSearchLanguage",  # 101
   "WantLocalInfo",  # 102
   "CoupledDocid",  # 103
   "IsImageSearch",  # 104
   "Aggregation",  # 105
   "WantManybox",  # 106
   "WantMessageType",  # 107
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.STRING,  #   7

   ProtocolBuffer.Encoder.STARTGROUP,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.FLOAT,  #  12

   ProtocolBuffer.Encoder.NUMERIC,  #  13

   ProtocolBuffer.Encoder.STRING,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.STRING,  #  16

   ProtocolBuffer.Encoder.STRING,  #  17

   ProtocolBuffer.Encoder.STRING,  #  18

   ProtocolBuffer.Encoder.NUMERIC,  #  19

   ProtocolBuffer.Encoder.MAX_TYPE,  #  20

   ProtocolBuffer.Encoder.STRING,  #  21

   ProtocolBuffer.Encoder.NUMERIC,  #  22

   ProtocolBuffer.Encoder.NUMERIC,  #  23

   ProtocolBuffer.Encoder.NUMERIC,  #  24

   ProtocolBuffer.Encoder.STRING,  #  25

   ProtocolBuffer.Encoder.STRING,  #  26

   ProtocolBuffer.Encoder.NUMERIC,  #  27

   ProtocolBuffer.Encoder.NUMERIC,  #  28

   ProtocolBuffer.Encoder.STRING,  #  29

   ProtocolBuffer.Encoder.NUMERIC,  #  30

   ProtocolBuffer.Encoder.STARTGROUP,  #  31

   ProtocolBuffer.Encoder.STRING,  #  32

   ProtocolBuffer.Encoder.NUMERIC,  #  33

   ProtocolBuffer.Encoder.NUMERIC,  #  34

   ProtocolBuffer.Encoder.NUMERIC,  #  35

   ProtocolBuffer.Encoder.NUMERIC,  #  36

   ProtocolBuffer.Encoder.NUMERIC,  #  37

   ProtocolBuffer.Encoder.NUMERIC,  #  38

   ProtocolBuffer.Encoder.STARTGROUP,  #  39

   ProtocolBuffer.Encoder.NUMERIC,  #  40

   ProtocolBuffer.Encoder.NUMERIC,  #  41

   ProtocolBuffer.Encoder.NUMERIC,  #  42

   ProtocolBuffer.Encoder.NUMERIC,  #  43

   ProtocolBuffer.Encoder.NUMERIC,  #  44

   ProtocolBuffer.Encoder.NUMERIC,  #  45

   ProtocolBuffer.Encoder.NUMERIC,  #  46

   ProtocolBuffer.Encoder.NUMERIC,  #  47

   ProtocolBuffer.Encoder.STRING,  #  48

   ProtocolBuffer.Encoder.NUMERIC,  #  49

   ProtocolBuffer.Encoder.NUMERIC,  #  50

   ProtocolBuffer.Encoder.NUMERIC,  #  51

   ProtocolBuffer.Encoder.STARTGROUP,  #  52

   ProtocolBuffer.Encoder.NUMERIC,  #  53

   ProtocolBuffer.Encoder.NUMERIC,  #  54

   ProtocolBuffer.Encoder.NUMERIC,  #  55

   ProtocolBuffer.Encoder.NUMERIC,  #  56

   ProtocolBuffer.Encoder.NUMERIC,  #  57

   ProtocolBuffer.Encoder.NUMERIC,  #  58

   ProtocolBuffer.Encoder.NUMERIC,  #  59

   ProtocolBuffer.Encoder.NUMERIC,  #  60

   ProtocolBuffer.Encoder.STRING,  #  61

   ProtocolBuffer.Encoder.NUMERIC,  #  62

   ProtocolBuffer.Encoder.NUMERIC,  #  63

   ProtocolBuffer.Encoder.NUMERIC,  #  64

   ProtocolBuffer.Encoder.NUMERIC,  #  65

   ProtocolBuffer.Encoder.NUMERIC,  #  66

   ProtocolBuffer.Encoder.STRING,  #  67

   ProtocolBuffer.Encoder.STARTGROUP,  #  68

   ProtocolBuffer.Encoder.STRING,  #  69

   ProtocolBuffer.Encoder.STRING,  #  70

   ProtocolBuffer.Encoder.STRING,  #  71

   ProtocolBuffer.Encoder.STRING,  #  72

   ProtocolBuffer.Encoder.STARTGROUP,  #  73

   ProtocolBuffer.Encoder.STARTGROUP,  #  74

   ProtocolBuffer.Encoder.NUMERIC,  #  75

   ProtocolBuffer.Encoder.NUMERIC,  #  76

   ProtocolBuffer.Encoder.NUMERIC,  #  77

   ProtocolBuffer.Encoder.NUMERIC,  #  78

   ProtocolBuffer.Encoder.NUMERIC,  #  79

   ProtocolBuffer.Encoder.STRING,  #  80

   ProtocolBuffer.Encoder.STARTGROUP,  #  81

   ProtocolBuffer.Encoder.NUMERIC,  #  82

   ProtocolBuffer.Encoder.FLOAT,  #  83

   ProtocolBuffer.Encoder.STRING,  #  84

   ProtocolBuffer.Encoder.STRING,  #  85

   ProtocolBuffer.Encoder.NUMERIC,  #  86

   ProtocolBuffer.Encoder.STRING,  #  87

   ProtocolBuffer.Encoder.STRING,  #  88

   ProtocolBuffer.Encoder.NUMERIC,  #  89

   ProtocolBuffer.Encoder.NUMERIC,  #  90

   ProtocolBuffer.Encoder.STARTGROUP,  #  91

   ProtocolBuffer.Encoder.NUMERIC,  #  92

   ProtocolBuffer.Encoder.NUMERIC,  #  93

   ProtocolBuffer.Encoder.NUMERIC,  #  94

   ProtocolBuffer.Encoder.NUMERIC,  #  95

   ProtocolBuffer.Encoder.STRING,  #  96

   ProtocolBuffer.Encoder.STRING,  #  97

   ProtocolBuffer.Encoder.NUMERIC,  #  98

   ProtocolBuffer.Encoder.NUMERIC,  #  99

   ProtocolBuffer.Encoder.NUMERIC,  # 100

   ProtocolBuffer.Encoder.STRING,  # 101

   ProtocolBuffer.Encoder.NUMERIC,  # 102

   ProtocolBuffer.Encoder.NUMERIC,  # 103

   ProtocolBuffer.Encoder.NUMERIC,  # 104

   ProtocolBuffer.Encoder.STRING,  # 105

   ProtocolBuffer.Encoder.NUMERIC,  # 106

   ProtocolBuffer.Encoder.NUMERIC,  # 107

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x1f,
    0x64,
    0x6f,
    0x63,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x70,
    0x63,
    0x2f,
    0x64,
    0x6f,
    0x63,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x0f,
    0x44,
    0x6f,
    0x63,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x50,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x13,
    0x1a,
    0x0b,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x20,
    0x34,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x4c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x42,
    0x69,
    0x74,
    0x6d,
    0x61,
    0x70,
    0x20,
    0x0c,
    0x28,
    0x05,
    0x30,
    0x07,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0x60,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x65,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x42,
    0x69,
    0x74,
    0x6d,
    0x61,
    0x70,
    0x20,
    0x13,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x65,
    0x6e,
    0x64,
    0x50,
    0x61,
    0x67,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x4e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x20,
    0x49,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x27,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x4a,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x06,
    0x14,
    0x13,
    0x1a,
    0x30,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x4b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x07,
    0x14,
    0x13,
    0x1a,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x4c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x07,
    0x14,
    0x13,
    0x1a,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x5f,
    0x69,
    0x64,
    0x20,
    0x5a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x06,
    0x14,
    0x13,
    0x1a,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x5f,
    0x72,
    0x65,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x6d,
    0x61,
    0x73,
    0x6b,
    0x20,
    0x62,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x06,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x5b,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x60,
    0x06,
    0x14,
    0x13,
    0x1a,
    0x37,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x43,
    0x68,
    0x61,
    0x72,
    0x73,
    0x50,
    0x65,
    0x72,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x5c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x32,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4d,
    0x61,
    0x78,
    0x4e,
    0x75,
    0x6d,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x73,
    0x20,
    0x5d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x33,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x72,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4d,
    0x61,
    0x78,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x43,
    0x68,
    0x61,
    0x72,
    0x73,
    0x20,
    0x5e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x0c,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x4e,
    0x6f,
    0x4f,
    0x64,
    0x70,
    0x20,
    0x5f,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x49,
    0x64,
    0x20,
    0x4f,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0x60,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x4d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x53,
    0x65,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x56,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x02,
    0x2d,
    0x31,
    0x60,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x2d,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x43,
    0x6f,
    0x75,
    0x70,
    0x6c,
    0x65,
    0x64,
    0x44,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x67,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x60,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x42,
    0x6c,
    0x6f,
    0x62,
    0x20,
    0x44,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x42,
    0x6c,
    0x6f,
    0x62,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x64,
    0x73,
    0x20,
    0x45,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x42,
    0x6c,
    0x6f,
    0x62,
    0x2e,
    0x43,
    0x6f,
    0x75,
    0x70,
    0x6c,
    0x65,
    0x64,
    0x44,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x73,
    0x20,
    0x61,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x42,
    0x6c,
    0x6f,
    0x62,
    0x2e,
    0x4c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x42,
    0x69,
    0x74,
    0x6d,
    0x61,
    0x70,
    0x73,
    0x20,
    0x46,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x42,
    0x6c,
    0x6f,
    0x62,
    0x2e,
    0x53,
    0x65,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x42,
    0x69,
    0x74,
    0x6d,
    0x61,
    0x70,
    0x73,
    0x20,
    0x47,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x42,
    0x6c,
    0x6f,
    0x62,
    0x2e,
    0x4e,
    0x6f,
    0x4f,
    0x64,
    0x70,
    0x73,
    0x20,
    0x60,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x19,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x42,
    0x6c,
    0x6f,
    0x62,
    0x2e,
    0x44,
    0x6f,
    0x63,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x49,
    0x64,
    0x73,
    0x20,
    0x50,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x74,
    0x65,
    0x6d,
    0x42,
    0x6c,
    0x6f,
    0x62,
    0x2e,
    0x4d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x53,
    0x65,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x49,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x65,
    0x73,
    0x20,
    0x55,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x14,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x46,
    0x69,
    0x72,
    0x73,
    0x74,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x50,
    0x6f,
    0x73,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x43,
    0x6c,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x1a,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x42,
    0x06,
    0x67,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x08,
    0x22,
    0x67,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x22,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x42,
    0x69,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x44,
    0x65,
    0x62,
    0x75,
    0x67,
    0x4c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x20,
    0x16,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x45,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x3d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x69,
    0x64,
    0x46,
    0x69,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x50,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x53,
    0x6b,
    0x69,
    0x70,
    0x46,
    0x6c,
    0x61,
    0x67,
    0x73,
    0x20,
    0x3c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x51,
    0x6f,
    0x73,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x10,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x20,
    0x0e,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x11,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x55,
    0x73,
    0x65,
    0x72,
    0x20,
    0x12,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x54,
    0x72,
    0x61,
    0x63,
    0x65,
    0x49,
    0x64,
    0x20,
    0x0d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x1c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x49,
    0x73,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x68,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x4d,
    0x61,
    0x78,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x4c,
    0x65,
    0x6e,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x02,
    0x37,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x37,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x53,
    0x61,
    0x66,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x50,
    0x61,
    0x72,
    0x73,
    0x65,
    0x64,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x20,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x50,
    0x61,
    0x72,
    0x73,
    0x65,
    0x64,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x41,
    0x73,
    0x43,
    0x61,
    0x63,
    0x68,
    0x65,
    0x4b,
    0x65,
    0x79,
    0x20,
    0x43,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x54,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x20,
    0x58,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x44,
    0x61,
    0x74,
    0x61,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x15,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x4f,
    0x75,
    0x74,
    0x70,
    0x75,
    0x74,
    0x4c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x20,
    0x17,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x49,
    0x73,
    0x57,
    0x68,
    0x69,
    0x74,
    0x65,
    0x70,
    0x61,
    0x67,
    0x65,
    0x73,
    0x20,
    0x18,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x43,
    0x61,
    0x74,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x20,
    0x19,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x43,
    0x61,
    0x74,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x52,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x20,
    0x30,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x69,
    0x66,
    0x79,
    0x20,
    0x1b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x49,
    0x73,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x46,
    0x65,
    0x74,
    0x63,
    0x68,
    0x20,
    0x37,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x15,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x49,
    0x73,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x46,
    0x65,
    0x74,
    0x63,
    0x68,
    0x20,
    0x42,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x53,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x20,
    0x3b,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x08,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x43,
    0x68,
    0x61,
    0x72,
    0x73,
    0x50,
    0x65,
    0x72,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x39,
    0x14,
    0x13,
    0x1a,
    0x1a,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4d,
    0x61,
    0x78,
    0x4e,
    0x75,
    0x6d,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x73,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x39,
    0x14,
    0x13,
    0x1a,
    0x1b,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4d,
    0x61,
    0x78,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x43,
    0x68,
    0x61,
    0x72,
    0x73,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x39,
    0x14,
    0x13,
    0x1a,
    0x16,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x1f,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x1f,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x20,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x60,
    0x3d,
    0x14,
    0x13,
    0x1a,
    0x1e,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x73,
    0x53,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x21,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x3d,
    0x14,
    0x13,
    0x1a,
    0x23,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x4e,
    0x75,
    0x6d,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x22,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x3d,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x58,
    0x20,
    0x23,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x3d,
    0x14,
    0x13,
    0x1a,
    0x1c,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x59,
    0x20,
    0x24,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x3d,
    0x14,
    0x13,
    0x1a,
    0x21,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x57,
    0x69,
    0x64,
    0x74,
    0x68,
    0x20,
    0x25,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x3d,
    0x14,
    0x13,
    0x1a,
    0x22,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x48,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x26,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x3d,
    0x14,
    0x13,
    0x1a,
    0x20,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x27,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x60,
    0x3d,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x58,
    0x20,
    0x3e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x45,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x59,
    0x20,
    0x3f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x45,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x57,
    0x20,
    0x40,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x45,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2e,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x48,
    0x20,
    0x41,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x45,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2e,
    0x57,
    0x6f,
    0x72,
    0x64,
    0x58,
    0x20,
    0x28,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x45,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2e,
    0x57,
    0x6f,
    0x72,
    0x64,
    0x59,
    0x20,
    0x29,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x45,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2e,
    0x57,
    0x6f,
    0x72,
    0x64,
    0x57,
    0x20,
    0x2a,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x45,
    0x14,
    0x13,
    0x1a,
    0x26,
    0x44,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x48,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2e,
    0x57,
    0x6f,
    0x72,
    0x64,
    0x48,
    0x20,
    0x2b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x45,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x74,
    0x61,
    0x67,
    0x73,
    0x20,
    0x1d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x57,
    0x61,
    0x6e,
    0x74,
    0x41,
    0x6c,
    0x6c,
    0x4d,
    0x65,
    0x74,
    0x61,
    0x74,
    0x61,
    0x67,
    0x73,
    0x20,
    0x1e,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x4d,
    0x61,
    0x78,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x44,
    0x6f,
    0x63,
    0x6c,
    0x65,
    0x6e,
    0x20,
    0x31,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x02,
    0x2d,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x2d,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x53,
    0x6e,
    0x69,
    0x70,
    0x70,
    0x65,
    0x74,
    0x45,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x32,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x02,
    0x2d,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x2d,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x57,
    0x61,
    0x6e,
    0x74,
    0x53,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x20,
    0x63,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x57,
    0x61,
    0x6e,
    0x74,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x66,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x57,
    0x61,
    0x6e,
    0x74,
    0x4d,
    0x61,
    0x6e,
    0x79,
    0x62,
    0x6f,
    0x78,
    0x20,
    0x6a,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x57,
    0x61,
    0x6e,
    0x74,
    0x4d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x6b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x53,
    0x65,
    0x6e,
    0x64,
    0x50,
    0x61,
    0x67,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x2c,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x4d,
    0x61,
    0x78,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x54,
    0x6f,
    0x53,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x2d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x4c,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x54,
    0x6f,
    0x43,
    0x6c,
    0x69,
    0x70,
    0x20,
    0x2e,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x41,
    0x6c,
    0x6c,
    0x54,
    0x65,
    0x78,
    0x74,
    0x55,
    0x54,
    0x46,
    0x38,
    0x20,
    0x33,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x54,
    0x79,
    0x70,
    0x65,
    0x20,
    0x2f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x53,
    0x74,
    0x61,
    0x72,
    0x74,
    0x20,
    0x35,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x45,
    0x70,
    0x6f,
    0x63,
    0x68,
    0x45,
    0x6e,
    0x64,
    0x20,
    0x36,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x64,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x02,
    0x32,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x32,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x4e,
    0x75,
    0x6d,
    0x44,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x38,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x49,
    0x73,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x46,
    0x61,
    0x6c,
    0x6c,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x39,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x49,
    0x73,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x20,
    0x3a,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x43,
    0x61,
    0x74,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x51,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x43,
    0x61,
    0x74,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x43,
    0x61,
    0x74,
    0x49,
    0x64,
    0x20,
    0x52,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x61,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x46,
    0x72,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x43,
    0x61,
    0x74,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x53,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x60,
    0x61,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x4c,
    0x69,
    0x6b,
    0x65,
    0x6c,
    0x69,
    0x68,
    0x6f,
    0x6f,
    0x64,
    0x20,
    0x4d,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x53,
    0x6b,
    0x69,
    0x70,
    0x4c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x73,
    0x20,
    0x48,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x12,
    0x4d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x53,
    0x65,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x57,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x4d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x59,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x02,
    0x2d,
    0x31,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x2d,
    0x31,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x14,
    0x44,
    0x72,
    0x61,
    0x67,
    0x6f,
    0x6e,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x65,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x41,
    0x67,
    0x67,
    0x72,
    0x65,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x69,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x01,
    0x4a,
    0x17,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x41,
    0x67,
    0x67,
    0x72,
    0x65,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x14,
    0x73,
    0x7a,
    0x09,
    0x44,
    0x6f,
    0x63,
    0x46,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x46,
    0x4f,
    0x52,
    0x4d,
    0x41,
    0x54,
    0x5f,
    0x41,
    0x53,
    0x43,
    0x49,
    0x49,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x16,
    0x46,
    0x4f,
    0x52,
    0x4d,
    0x41,
    0x54,
    0x5f,
    0x50,
    0x52,
    0x4f,
    0x54,
    0x4f,
    0x43,
    0x4f,
    0x4c,
    0x5f,
    0x42,
    0x55,
    0x46,
    0x46,
    0x45,
    0x52,
    0x98,
    0x01,
    0x14,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0e,
    0x44,
    0x6f,
    0x63,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0d,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x41,
    0x4e,
    0x44,
    0x5f,
    0x46,
    0x45,
    0x54,
    0x43,
    0x48,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x41,
    0x4e,
    0x44,
    0x5f,
    0x52,
    0x45,
    0x53,
    0x55,
    0x4c,
    0x54,
    0x53,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0e,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x41,
    0x4e,
    0x44,
    0x5f,
    0x52,
    0x45,
    0x50,
    0x50,
    0x54,
    0x52,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x43,
    0x4f,
    0x4d,
    0x4d,
    0x41,
    0x4e,
    0x44,
    0x5f,
    0x49,
    0x4e,
    0x46,
    0x4f,
    0x98,
    0x01,
    0x03,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x08,
    0x50,
    0x61,
    0x67,
    0x65,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x07,
    0x4e,
    0x4f,
    0x5f,
    0x50,
    0x41,
    0x47,
    0x45,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x08,
    0x52,
    0x41,
    0x57,
    0x5f,
    0x50,
    0x41,
    0x47,
    0x45,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x57,
    0x48,
    0x4f,
    0x4c,
    0x45,
    0x5f,
    0x50,
    0x41,
    0x47,
    0x45,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x07,
    0x44,
    0x6f,
    0x63,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0a,
    0x49,
    0x4d,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x49,
    0x4e,
    0x46,
    0x4f,
    0x98,
    0x01,
    0x00,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x14,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x53,
    0x43,
    0x41,
    0x4e,
    0x5f,
    0x49,
    0x4e,
    0x46,
    0x4f,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0c,
    0x4e,
    0x55,
    0x4d,
    0x5f,
    0x44,
    0x4f,
    0x43,
    0x5f,
    0x49,
    0x4e,
    0x46,
    0x4f,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['DocCommandProto','DocCommandProto_DocItemSnippetOverridePositionContent','DocCommandProto_DocItemSnippetOverrideResultsInfo','DocCommandProto_DeprecatedMagazineInfoHighlight','DocCommandProto_DocItemSnippetOverride','DocCommandProto_ResultsInfo','DocCommandProto_DeprecatedMagazineInfo','DocCommandProto_DocItem','DocCommandProto_DocItemBlob','DocCommandProto_FroogleCatInfo']
