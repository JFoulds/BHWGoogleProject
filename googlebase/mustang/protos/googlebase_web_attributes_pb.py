# This file automatically generated by protocol-compiler from googlebase/mustang/protos/googlebase-web-attributes.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class GoogleBaseWebAttributes(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 3164667 

  _TypeId_NAMES = {
    3164667: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)

  def __init__(self, contents=None):
    self.attribute_ = []
    self.expiration_time_ = 0
    self.image_cache_key_ = ""
    self.has_expiration_time_ = 0
    self.has_image_cache_key_ = 0
    if contents is not None: self.MergeFromString(contents)

  def attribute_size(self): return len(self.attribute_)
  def attribute_list(self): return self.attribute_

  def attribute(self, i):
    return self.attribute_[i]

  def mutable_attribute(self, i):
    return self.attribute_[i]

  def add_attribute(self):
    x = Attribute()
    self.attribute_.append(x)
    return x

  def clear_attribute(self):
    self.attribute_ = []
  def expiration_time(self): return self.expiration_time_

  def set_expiration_time(self, x):
    self.has_expiration_time_ = 1
    self.expiration_time_ = x

  def clear_expiration_time(self):
    self.has_expiration_time_ = 0
    self.expiration_time_ = 0

  def has_expiration_time(self): return self.has_expiration_time_

  def image_cache_key(self): return self.image_cache_key_

  def set_image_cache_key(self, x):
    self.has_image_cache_key_ = 1
    self.image_cache_key_ = x

  def clear_image_cache_key(self):
    self.has_image_cache_key_ = 0
    self.image_cache_key_ = ""

  def has_image_cache_key(self): return self.has_image_cache_key_


  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.attribute_size()): self.add_attribute().CopyFrom(x.attribute(i))
    if (x.has_expiration_time()): self.set_expiration_time(x.expiration_time())
    if (x.has_image_cache_key()): self.set_image_cache_key(x.image_cache_key())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'googlebase.GoogleBaseWebAttributes', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'googlebase.GoogleBaseWebAttributes')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'googlebase.GoogleBaseWebAttributes', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'googlebase.GoogleBaseWebAttributes', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'googlebase.GoogleBaseWebAttributes', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.attribute_) != len(x.attribute_): return 0
    for e1, e2 in zip(self.attribute_, x.attribute_):
      if e1 != e2: return 0
    if self.has_expiration_time_ != x.has_expiration_time_: return 0
    if self.has_expiration_time_ and self.expiration_time_ != x.expiration_time_: return 0
    if self.has_image_cache_key_ != x.has_image_cache_key_: return 0
    if self.has_image_cache_key_ and self.image_cache_key_ != x.image_cache_key_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.attribute_)):
      if (not self.attribute_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 1 * len(self.attribute_)
    for i in xrange(len(self.attribute_)): n += self.lengthString(self.attribute_[i].ByteSize())
    if (self.has_expiration_time_): n += 1 + self.lengthVarInt64(self.expiration_time_)
    if (self.has_image_cache_key_): n += 1 + self.lengthString(len(self.image_cache_key_))
    return n + 0

  def Clear(self):
    self.clear_attribute()
    self.clear_expiration_time()
    self.clear_image_cache_key()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.attribute_)):
      out.putVarInt32(10)
      out.putVarInt32(self.attribute_[i].ByteSize())
      self.attribute_[i].OutputUnchecked(out)
    if (self.has_expiration_time_):
      out.putVarInt32(16)
      out.putVarInt32(self.expiration_time_)
    if (self.has_image_cache_key_):
      out.putVarInt32(26)
      out.putPrefixedString(self.image_cache_key_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_attribute().TryMerge(tmp)
        continue
      if tt == 16:
        self.set_expiration_time(d.getVarInt32())
        continue
      if tt == 26:
        self.set_image_cache_key(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.attribute_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("attribute%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_expiration_time_: res+=prefix+("expiration_time: %s\n" % self.DebugFormatInt32(self.expiration_time_))
    if self.has_image_cache_key_: res+=prefix+("image_cache_key: %s\n" % self.DebugFormatString(self.image_cache_key_))
    return res

  kattribute = 1
  kexpiration_time = 2
  kimage_cache_key = 3

  _TEXT = (
   "ErrorCode",  #   0
   "attribute",  #   1
   "expiration_time",  #   2
   "image_cache_key",  #   3
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x39,
    0x67,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x62,
    0x61,
    0x73,
    0x65,
    0x2f,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x73,
    0x2f,
    0x67,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x62,
    0x61,
    0x73,
    0x65,
    0x2d,
    0x77,
    0x65,
    0x62,
    0x2d,
    0x61,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x22,
    0x67,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x62,
    0x61,
    0x73,
    0x65,
    0x2e,
    0x47,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x42,
    0x61,
    0x73,
    0x65,
    0x57,
    0x65,
    0x62,
    0x41,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x73,
    0x13,
    0x1a,
    0x09,
    0x61,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x12,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x65,
    0x2e,
    0x41,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x65,
    0x78,
    0x70,
    0x69,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x5f,
    0x6b,
    0x65,
    0x79,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xfb,
    0x93,
    0xc1,
    0x01,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['GoogleBaseWebAttributes']
