# This file automatically generated by protocol-compiler from image/mustang/indexer/proto/imagelinks.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class ImageLinks(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.web_source_ = 0
    self.web_url_ = ""
    self.target_image_ = 0
    self.canonical_image_ = 0
    self.url_ = ""
    self.is_visible_ = 1
    self.priority_ = ""
    self.in_index_ = 1
    self.has_web_source_ = 0
    self.has_web_url_ = 0
    self.has_target_image_ = 0
    self.has_canonical_image_ = 0
    self.has_url_ = 0
    self.has_is_visible_ = 0
    self.has_priority_ = 0
    self.has_in_index_ = 0
    if contents is not None: self.MergeFromString(contents)

  def web_source(self): return self.web_source_

  def set_web_source(self, x):
    self.has_web_source_ = 1
    self.web_source_ = x

  def clear_web_source(self):
    self.has_web_source_ = 0
    self.web_source_ = 0

  def has_web_source(self): return self.has_web_source_

  def web_url(self): return self.web_url_

  def set_web_url(self, x):
    self.has_web_url_ = 1
    self.web_url_ = x

  def clear_web_url(self):
    self.has_web_url_ = 0
    self.web_url_ = ""

  def has_web_url(self): return self.has_web_url_

  def target_image(self): return self.target_image_

  def set_target_image(self, x):
    self.has_target_image_ = 1
    self.target_image_ = x

  def clear_target_image(self):
    self.has_target_image_ = 0
    self.target_image_ = 0

  def has_target_image(self): return self.has_target_image_

  def canonical_image(self): return self.canonical_image_

  def set_canonical_image(self, x):
    self.has_canonical_image_ = 1
    self.canonical_image_ = x

  def clear_canonical_image(self):
    self.has_canonical_image_ = 0
    self.canonical_image_ = 0

  def has_canonical_image(self): return self.has_canonical_image_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def is_visible(self): return self.is_visible_

  def set_is_visible(self, x):
    self.has_is_visible_ = 1
    self.is_visible_ = x

  def clear_is_visible(self):
    self.has_is_visible_ = 0
    self.is_visible_ = 1

  def has_is_visible(self): return self.has_is_visible_

  def priority(self): return self.priority_

  def set_priority(self, x):
    self.has_priority_ = 1
    self.priority_ = x

  def clear_priority(self):
    self.has_priority_ = 0
    self.priority_ = ""

  def has_priority(self): return self.has_priority_

  def in_index(self): return self.in_index_

  def set_in_index(self, x):
    self.has_in_index_ = 1
    self.in_index_ = x

  def clear_in_index(self):
    self.has_in_index_ = 0
    self.in_index_ = 1

  def has_in_index(self): return self.has_in_index_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_web_source()): self.set_web_source(x.web_source())
    if (x.has_web_url()): self.set_web_url(x.web_url())
    if (x.has_target_image()): self.set_target_image(x.target_image())
    if (x.has_canonical_image()): self.set_canonical_image(x.canonical_image())
    if (x.has_url()): self.set_url(x.url())
    if (x.has_is_visible()): self.set_is_visible(x.is_visible())
    if (x.has_priority()): self.set_priority(x.priority())
    if (x.has_in_index()): self.set_in_index(x.in_index())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'image_mustang.ImageLinks', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'image_mustang.ImageLinks')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'image_mustang.ImageLinks', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'image_mustang.ImageLinks', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'image_mustang.ImageLinks', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_web_source_ != x.has_web_source_: return 0
    if self.has_web_source_ and self.web_source_ != x.web_source_: return 0
    if self.has_web_url_ != x.has_web_url_: return 0
    if self.has_web_url_ and self.web_url_ != x.web_url_: return 0
    if self.has_target_image_ != x.has_target_image_: return 0
    if self.has_target_image_ and self.target_image_ != x.target_image_: return 0
    if self.has_canonical_image_ != x.has_canonical_image_: return 0
    if self.has_canonical_image_ and self.canonical_image_ != x.canonical_image_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_is_visible_ != x.has_is_visible_: return 0
    if self.has_is_visible_ and self.is_visible_ != x.is_visible_: return 0
    if self.has_priority_ != x.has_priority_: return 0
    if self.has_priority_ and self.priority_ != x.priority_: return 0
    if self.has_in_index_ != x.has_in_index_: return 0
    if self.has_in_index_ and self.in_index_ != x.in_index_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_web_source_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: web_source not set.')
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_web_url_): n += 1 + self.lengthString(len(self.web_url_))
    if (self.has_target_image_): n += 9
    if (self.has_canonical_image_): n += 9
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    if (self.has_is_visible_): n += 2
    if (self.has_priority_): n += 1 + self.lengthString(len(self.priority_))
    if (self.has_in_index_): n += 2
    return n + 9

  def Clear(self):
    self.clear_web_source()
    self.clear_web_url()
    self.clear_target_image()
    self.clear_canonical_image()
    self.clear_url()
    self.clear_is_visible()
    self.clear_priority()
    self.clear_in_index()

  def OutputUnchecked(self, out):
    out.putVarInt32(9)
    out.put64(self.web_source_)
    if (self.has_target_image_):
      out.putVarInt32(17)
      out.put64(self.target_image_)
    if (self.has_canonical_image_):
      out.putVarInt32(25)
      out.put64(self.canonical_image_)
    if (self.has_priority_):
      out.putVarInt32(34)
      out.putPrefixedString(self.priority_)
    if (self.has_url_):
      out.putVarInt32(42)
      out.putPrefixedString(self.url_)
    if (self.has_in_index_):
      out.putVarInt32(48)
      out.putBoolean(self.in_index_)
    if (self.has_web_url_):
      out.putVarInt32(58)
      out.putPrefixedString(self.web_url_)
    if (self.has_is_visible_):
      out.putVarInt32(64)
      out.putBoolean(self.is_visible_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 9:
        self.set_web_source(d.get64())
        continue
      if tt == 17:
        self.set_target_image(d.get64())
        continue
      if tt == 25:
        self.set_canonical_image(d.get64())
        continue
      if tt == 34:
        self.set_priority(d.getPrefixedString())
        continue
      if tt == 42:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 48:
        self.set_in_index(d.getBoolean())
        continue
      if tt == 58:
        self.set_web_url(d.getPrefixedString())
        continue
      if tt == 64:
        self.set_is_visible(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_web_source_: res+=prefix+("web_source: %s\n" % self.DebugFormatFixed64(self.web_source_))
    if self.has_web_url_: res+=prefix+("web_url: %s\n" % self.DebugFormatString(self.web_url_))
    if self.has_target_image_: res+=prefix+("target_image: %s\n" % self.DebugFormatFixed64(self.target_image_))
    if self.has_canonical_image_: res+=prefix+("canonical_image: %s\n" % self.DebugFormatFixed64(self.canonical_image_))
    if self.has_url_: res+=prefix+("url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_is_visible_: res+=prefix+("is_visible: %s\n" % self.DebugFormatBool(self.is_visible_))
    if self.has_priority_: res+=prefix+("priority: %s\n" % self.DebugFormatString(self.priority_))
    if self.has_in_index_: res+=prefix+("in_index: %s\n" % self.DebugFormatBool(self.in_index_))
    return res

  kweb_source = 1
  kweb_url = 7
  ktarget_image = 2
  kcanonical_image = 3
  kurl = 5
  kis_visible = 8
  kpriority = 4
  kin_index = 6

  _TEXT = (
   "ErrorCode",  #   0
   "web_source",  #   1
   "target_image",  #   2
   "canonical_image",  #   3
   "priority",  #   4
   "url",  #   5
   "in_index",  #   6
   "web_url",  #   7
   "is_visible",  #   8
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.DOUBLE,  #   1

   ProtocolBuffer.Encoder.DOUBLE,  #   2

   ProtocolBuffer.Encoder.DOUBLE,  #   3

   ProtocolBuffer.Encoder.STRING,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.STRING,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x18,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x13,
    0x1a,
    0x0a,
    0x77,
    0x65,
    0x62,
    0x5f,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x01,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x77,
    0x65,
    0x62,
    0x5f,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x5f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x20,
    0x02,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x63,
    0x61,
    0x6e,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x5f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x20,
    0x03,
    0x28,
    0x01,
    0x30,
    0x06,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x69,
    0x73,
    0x5f,
    0x76,
    0x69,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x70,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x04,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x69,
    0x6e,
    0x5f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class ImageLinkInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.docid_ = 0
    self.page_docid_ = 0
    self.is_visible_ = 1
    self.shared_path_ = 0
    self.url_ = ""
    self.has_docid_ = 0
    self.has_page_docid_ = 0
    self.has_is_visible_ = 0
    self.has_shared_path_ = 0
    self.has_url_ = 0
    if contents is not None: self.MergeFromString(contents)

  def docid(self): return self.docid_

  def set_docid(self, x):
    self.has_docid_ = 1
    self.docid_ = x

  def clear_docid(self):
    self.has_docid_ = 0
    self.docid_ = 0

  def has_docid(self): return self.has_docid_

  def page_docid(self): return self.page_docid_

  def set_page_docid(self, x):
    self.has_page_docid_ = 1
    self.page_docid_ = x

  def clear_page_docid(self):
    self.has_page_docid_ = 0
    self.page_docid_ = 0

  def has_page_docid(self): return self.has_page_docid_

  def is_visible(self): return self.is_visible_

  def set_is_visible(self, x):
    self.has_is_visible_ = 1
    self.is_visible_ = x

  def clear_is_visible(self):
    self.has_is_visible_ = 0
    self.is_visible_ = 1

  def has_is_visible(self): return self.has_is_visible_

  def shared_path(self): return self.shared_path_

  def set_shared_path(self, x):
    self.has_shared_path_ = 1
    self.shared_path_ = x

  def clear_shared_path(self):
    self.has_shared_path_ = 0
    self.shared_path_ = 0

  def has_shared_path(self): return self.has_shared_path_

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_docid()): self.set_docid(x.docid())
    if (x.has_page_docid()): self.set_page_docid(x.page_docid())
    if (x.has_is_visible()): self.set_is_visible(x.is_visible())
    if (x.has_shared_path()): self.set_shared_path(x.shared_path())
    if (x.has_url()): self.set_url(x.url())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'image_mustang.ImageLinkInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'image_mustang.ImageLinkInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'image_mustang.ImageLinkInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'image_mustang.ImageLinkInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'image_mustang.ImageLinkInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_docid_ != x.has_docid_: return 0
    if self.has_docid_ and self.docid_ != x.docid_: return 0
    if self.has_page_docid_ != x.has_page_docid_: return 0
    if self.has_page_docid_ and self.page_docid_ != x.page_docid_: return 0
    if self.has_is_visible_ != x.has_is_visible_: return 0
    if self.has_is_visible_ and self.is_visible_ != x.is_visible_: return 0
    if self.has_shared_path_ != x.has_shared_path_: return 0
    if self.has_shared_path_ and self.shared_path_ != x.shared_path_: return 0
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_docid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: docid not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.docid_)
    if (self.has_page_docid_): n += 1 + self.lengthVarInt64(self.page_docid_)
    if (self.has_is_visible_): n += 2
    if (self.has_shared_path_): n += 1 + self.lengthVarInt64(self.shared_path_)
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    return n + 1

  def Clear(self):
    self.clear_docid()
    self.clear_page_docid()
    self.clear_is_visible()
    self.clear_shared_path()
    self.clear_url()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt64(self.docid_)
    if (self.has_page_docid_):
      out.putVarInt32(16)
      out.putVarInt64(self.page_docid_)
    if (self.has_is_visible_):
      out.putVarInt32(24)
      out.putBoolean(self.is_visible_)
    if (self.has_shared_path_):
      out.putVarInt32(32)
      out.putVarInt32(self.shared_path_)
    if (self.has_url_):
      out.putVarInt32(42)
      out.putPrefixedString(self.url_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_docid(d.getVarInt64())
        continue
      if tt == 16:
        self.set_page_docid(d.getVarInt64())
        continue
      if tt == 24:
        self.set_is_visible(d.getBoolean())
        continue
      if tt == 32:
        self.set_shared_path(d.getVarInt32())
        continue
      if tt == 42:
        self.set_url(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_docid_: res+=prefix+("docid: %s\n" % self.DebugFormatInt64(self.docid_))
    if self.has_page_docid_: res+=prefix+("page_docid: %s\n" % self.DebugFormatInt64(self.page_docid_))
    if self.has_is_visible_: res+=prefix+("is_visible: %s\n" % self.DebugFormatBool(self.is_visible_))
    if self.has_shared_path_: res+=prefix+("shared_path: %s\n" % self.DebugFormatInt32(self.shared_path_))
    if self.has_url_: res+=prefix+("url: %s\n" % self.DebugFormatString(self.url_))
    return res

  kdocid = 1
  kpage_docid = 2
  kis_visible = 3
  kshared_path = 4
  kurl = 5

  _TEXT = (
   "ErrorCode",  #   0
   "docid",  #   1
   "page_docid",  #   2
   "is_visible",  #   3
   "shared_path",  #   4
   "url",  #   5
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x1b,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x05,
    0x64,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x64,
    0x6f,
    0x63,
    0x69,
    0x64,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x69,
    0x73,
    0x5f,
    0x76,
    0x69,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x04,
    0x74,
    0x72,
    0x75,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x73,
    0x68,
    0x61,
    0x72,
    0x65,
    0x64,
    0x5f,
    0x70,
    0x61,
    0x74,
    0x68,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x03,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x42,
    0x00,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x02,
    0x22,
    0x22,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class PageImageLinkInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.image_link_info_ = []
    self.is_no_index_ = 0
    self.has_is_no_index_ = 0
    if contents is not None: self.MergeFromString(contents)

  def image_link_info_size(self): return len(self.image_link_info_)
  def image_link_info_list(self): return self.image_link_info_

  def image_link_info(self, i):
    return self.image_link_info_[i]

  def mutable_image_link_info(self, i):
    return self.image_link_info_[i]

  def add_image_link_info(self):
    x = ImageLinkInfo()
    self.image_link_info_.append(x)
    return x

  def clear_image_link_info(self):
    self.image_link_info_ = []
  def is_no_index(self): return self.is_no_index_

  def set_is_no_index(self, x):
    self.has_is_no_index_ = 1
    self.is_no_index_ = x

  def clear_is_no_index(self):
    self.has_is_no_index_ = 0
    self.is_no_index_ = 0

  def has_is_no_index(self): return self.has_is_no_index_


  def MergeFrom(self, x):
    assert x is not self
    for i in xrange(x.image_link_info_size()): self.add_image_link_info().CopyFrom(x.image_link_info(i))
    if (x.has_is_no_index()): self.set_is_no_index(x.is_no_index())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'image_mustang.PageImageLinkInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'image_mustang.PageImageLinkInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'image_mustang.PageImageLinkInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'image_mustang.PageImageLinkInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'image_mustang.PageImageLinkInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if len(self.image_link_info_) != len(x.image_link_info_): return 0
    for e1, e2 in zip(self.image_link_info_, x.image_link_info_):
      if e1 != e2: return 0
    if self.has_is_no_index_ != x.has_is_no_index_: return 0
    if self.has_is_no_index_ and self.is_no_index_ != x.is_no_index_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.image_link_info_)):
      if (not self.image_link_info_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += 1 * len(self.image_link_info_)
    for i in xrange(len(self.image_link_info_)): n += self.lengthString(self.image_link_info_[i].ByteSize())
    if (self.has_is_no_index_): n += 2
    return n + 0

  def Clear(self):
    self.clear_image_link_info()
    self.clear_is_no_index()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.image_link_info_)):
      out.putVarInt32(10)
      out.putVarInt32(self.image_link_info_[i].ByteSize())
      self.image_link_info_[i].OutputUnchecked(out)
    if (self.has_is_no_index_):
      out.putVarInt32(16)
      out.putBoolean(self.is_no_index_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        length = d.getVarInt32()
        tmp = ProtocolBuffer.Decoder(d.buffer(), d.pos(), d.pos() + length)
        d.skip(length)
        self.add_image_link_info().TryMerge(tmp)
        continue
      if tt == 16:
        self.set_is_no_index(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    cnt=0
    for e in self.image_link_info_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("image_link_info%s <\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+">\n"
      cnt+=1
    if self.has_is_no_index_: res+=prefix+("is_no_index: %s\n" % self.DebugFormatBool(self.is_no_index_))
    return res

  kimage_link_info = 1
  kis_no_index = 2

  _TEXT = (
   "ErrorCode",  #   0
   "image_link_info",  #   1
   "is_no_index",  #   2
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2c,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x1f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x50,
    0x61,
    0x67,
    0x65,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x0f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x5f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x0b,
    0x38,
    0x03,
    0x4a,
    0x1b,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x67,
    0x2e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x69,
    0x73,
    0x5f,
    0x6e,
    0x6f,
    0x5f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['ImageLinks','ImageLinkInfo','PageImageLinkInfo']
