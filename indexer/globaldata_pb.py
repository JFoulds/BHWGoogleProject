# This file automatically generated by protocol-compiler from indexer/globaldata.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class GLink_Wt(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.index_ = 0
    self.weight_ = 0.0
    self.has_index_ = 0
    self.has_weight_ = 0
    if contents is not None: self.MergeFromString(contents)

  def index(self): return self.index_

  def set_index(self, x):
    self.has_index_ = 1
    self.index_ = x

  def clear_index(self):
    self.has_index_ = 0
    self.index_ = 0

  def has_index(self): return self.has_index_

  def weight(self): return self.weight_

  def set_weight(self, x):
    self.has_weight_ = 1
    self.weight_ = x

  def clear_weight(self):
    self.has_weight_ = 0
    self.weight_ = 0.0

  def has_weight(self): return self.has_weight_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_index()): self.set_index(x.index())
    if (x.has_weight()): self.set_weight(x.weight())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GLink', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GLink')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GLink', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GLink', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GLink', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_index_ != x.has_index_: return 0
    if self.has_index_ and self.index_ != x.index_: return 0
    if self.has_weight_ != x.has_weight_: return 0
    if self.has_weight_ and self.weight_ != x.weight_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_index_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: index not set.')
    if (not self.has_weight_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: weight not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.index_)
    return n + 6

  def Clear(self):
    self.clear_index()
    self.clear_weight()

  def OutputUnchecked(self, out):
    out.putVarInt32(32)
    out.putVarInt32(self.index_)
    out.putVarInt32(45)
    out.putFloat(self.weight_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 28: break
      if tt == 32:
        self.set_index(d.getVarInt32())
        continue
      if tt == 45:
        self.set_weight(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_index_: res+=prefix+("Index: %s\n" % self.DebugFormatInt32(self.index_))
    if self.has_weight_: res+=prefix+("Weight: %s\n" % self.DebugFormatFloat(self.weight_))
    return res

class GLink_EdgeInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.index_ = 0
    self.ondomain_ = 0
    self.has_index_ = 0
    self.has_ondomain_ = 0
    if contents is not None: self.MergeFromString(contents)

  def index(self): return self.index_

  def set_index(self, x):
    self.has_index_ = 1
    self.index_ = x

  def clear_index(self):
    self.has_index_ = 0
    self.index_ = 0

  def has_index(self): return self.has_index_

  def ondomain(self): return self.ondomain_

  def set_ondomain(self, x):
    self.has_ondomain_ = 1
    self.ondomain_ = x

  def clear_ondomain(self):
    self.has_ondomain_ = 0
    self.ondomain_ = 0

  def has_ondomain(self): return self.has_ondomain_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_index()): self.set_index(x.index())
    if (x.has_ondomain()): self.set_ondomain(x.ondomain())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GLink', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GLink')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GLink', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GLink', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GLink', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_index_ != x.has_index_: return 0
    if self.has_index_ and self.index_ != x.index_: return 0
    if self.has_ondomain_ != x.has_ondomain_: return 0
    if self.has_ondomain_ and self.ondomain_ != x.ondomain_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_index_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: index not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.index_)
    if (self.has_ondomain_): n += 3
    return n + 1

  def Clear(self):
    self.clear_index()
    self.clear_ondomain()

  def OutputUnchecked(self, out):
    out.putVarInt32(120)
    out.putVarInt32(self.index_)
    if (self.has_ondomain_):
      out.putVarInt32(128)
      out.putBoolean(self.ondomain_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 116: break
      if tt == 120:
        self.set_index(d.getVarInt32())
        continue
      if tt == 128:
        self.set_ondomain(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_index_: res+=prefix+("index: %s\n" % self.DebugFormatInt32(self.index_))
    if self.has_ondomain_: res+=prefix+("ondomain: %s\n" % self.DebugFormatBool(self.ondomain_))
    return res

class GLink(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.timestamp_ = 0
    self.targetfps_ = ""
    self.targethostids_ = ""
    self.targethostips_ = ""
    self.sourceip_ = 0
    self.lcasourcehostid_ = 0
    self.sourcepr_ = 0
    self.sourcefp_ = 0
    self.sourcesitefp_ = 0
    self.targetsitefps_ = ""
    self.wt_ = []
    self.edgeinfo_ = []
    self.has_timestamp_ = 0
    self.has_targetfps_ = 0
    self.has_targethostids_ = 0
    self.has_targethostips_ = 0
    self.has_sourceip_ = 0
    self.has_lcasourcehostid_ = 0
    self.has_sourcepr_ = 0
    self.has_sourcefp_ = 0
    self.has_sourcesitefp_ = 0
    self.has_targetsitefps_ = 0
    if contents is not None: self.MergeFromString(contents)

  def timestamp(self): return self.timestamp_

  def set_timestamp(self, x):
    self.has_timestamp_ = 1
    self.timestamp_ = x

  def clear_timestamp(self):
    self.has_timestamp_ = 0
    self.timestamp_ = 0

  def has_timestamp(self): return self.has_timestamp_

  def targetfps(self): return self.targetfps_

  def set_targetfps(self, x):
    self.has_targetfps_ = 1
    self.targetfps_ = x

  def clear_targetfps(self):
    self.has_targetfps_ = 0
    self.targetfps_ = ""

  def has_targetfps(self): return self.has_targetfps_

  def targethostids(self): return self.targethostids_

  def set_targethostids(self, x):
    self.has_targethostids_ = 1
    self.targethostids_ = x

  def clear_targethostids(self):
    self.has_targethostids_ = 0
    self.targethostids_ = ""

  def has_targethostids(self): return self.has_targethostids_

  def targethostips(self): return self.targethostips_

  def set_targethostips(self, x):
    self.has_targethostips_ = 1
    self.targethostips_ = x

  def clear_targethostips(self):
    self.has_targethostips_ = 0
    self.targethostips_ = ""

  def has_targethostips(self): return self.has_targethostips_

  def sourceip(self): return self.sourceip_

  def set_sourceip(self, x):
    self.has_sourceip_ = 1
    self.sourceip_ = x

  def clear_sourceip(self):
    self.has_sourceip_ = 0
    self.sourceip_ = 0

  def has_sourceip(self): return self.has_sourceip_

  def lcasourcehostid(self): return self.lcasourcehostid_

  def set_lcasourcehostid(self, x):
    self.has_lcasourcehostid_ = 1
    self.lcasourcehostid_ = x

  def clear_lcasourcehostid(self):
    self.has_lcasourcehostid_ = 0
    self.lcasourcehostid_ = 0

  def has_lcasourcehostid(self): return self.has_lcasourcehostid_

  def sourcepr(self): return self.sourcepr_

  def set_sourcepr(self, x):
    self.has_sourcepr_ = 1
    self.sourcepr_ = x

  def clear_sourcepr(self):
    self.has_sourcepr_ = 0
    self.sourcepr_ = 0

  def has_sourcepr(self): return self.has_sourcepr_

  def sourcefp(self): return self.sourcefp_

  def set_sourcefp(self, x):
    self.has_sourcefp_ = 1
    self.sourcefp_ = x

  def clear_sourcefp(self):
    self.has_sourcefp_ = 0
    self.sourcefp_ = 0

  def has_sourcefp(self): return self.has_sourcefp_

  def sourcesitefp(self): return self.sourcesitefp_

  def set_sourcesitefp(self, x):
    self.has_sourcesitefp_ = 1
    self.sourcesitefp_ = x

  def clear_sourcesitefp(self):
    self.has_sourcesitefp_ = 0
    self.sourcesitefp_ = 0

  def has_sourcesitefp(self): return self.has_sourcesitefp_

  def targetsitefps(self): return self.targetsitefps_

  def set_targetsitefps(self, x):
    self.has_targetsitefps_ = 1
    self.targetsitefps_ = x

  def clear_targetsitefps(self):
    self.has_targetsitefps_ = 0
    self.targetsitefps_ = ""

  def has_targetsitefps(self): return self.has_targetsitefps_

  def wt_size(self): return len(self.wt_)
  def wt_list(self): return self.wt_

  def wt(self, i):
    return self.wt_[i]

  def mutable_wt(self, i):
    return self.wt_[i]

  def add_wt(self):
    x = GLink_Wt()
    self.wt_.append(x)
    return x

  def clear_wt(self):
    self.wt_ = []
  def edgeinfo_size(self): return len(self.edgeinfo_)
  def edgeinfo_list(self): return self.edgeinfo_

  def edgeinfo(self, i):
    return self.edgeinfo_[i]

  def mutable_edgeinfo(self, i):
    return self.edgeinfo_[i]

  def add_edgeinfo(self):
    x = GLink_EdgeInfo()
    self.edgeinfo_.append(x)
    return x

  def clear_edgeinfo(self):
    self.edgeinfo_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_timestamp()): self.set_timestamp(x.timestamp())
    if (x.has_targetfps()): self.set_targetfps(x.targetfps())
    if (x.has_targethostids()): self.set_targethostids(x.targethostids())
    if (x.has_targethostips()): self.set_targethostips(x.targethostips())
    if (x.has_sourceip()): self.set_sourceip(x.sourceip())
    if (x.has_lcasourcehostid()): self.set_lcasourcehostid(x.lcasourcehostid())
    if (x.has_sourcepr()): self.set_sourcepr(x.sourcepr())
    if (x.has_sourcefp()): self.set_sourcefp(x.sourcefp())
    if (x.has_sourcesitefp()): self.set_sourcesitefp(x.sourcesitefp())
    if (x.has_targetsitefps()): self.set_targetsitefps(x.targetsitefps())
    for i in xrange(x.wt_size()): self.add_wt().CopyFrom(x.wt(i))
    for i in xrange(x.edgeinfo_size()): self.add_edgeinfo().CopyFrom(x.edgeinfo(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GLink', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GLink')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GLink', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GLink', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GLink', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_timestamp_ != x.has_timestamp_: return 0
    if self.has_timestamp_ and self.timestamp_ != x.timestamp_: return 0
    if self.has_targetfps_ != x.has_targetfps_: return 0
    if self.has_targetfps_ and self.targetfps_ != x.targetfps_: return 0
    if self.has_targethostids_ != x.has_targethostids_: return 0
    if self.has_targethostids_ and self.targethostids_ != x.targethostids_: return 0
    if self.has_targethostips_ != x.has_targethostips_: return 0
    if self.has_targethostips_ and self.targethostips_ != x.targethostips_: return 0
    if self.has_sourceip_ != x.has_sourceip_: return 0
    if self.has_sourceip_ and self.sourceip_ != x.sourceip_: return 0
    if self.has_lcasourcehostid_ != x.has_lcasourcehostid_: return 0
    if self.has_lcasourcehostid_ and self.lcasourcehostid_ != x.lcasourcehostid_: return 0
    if self.has_sourcepr_ != x.has_sourcepr_: return 0
    if self.has_sourcepr_ and self.sourcepr_ != x.sourcepr_: return 0
    if self.has_sourcefp_ != x.has_sourcefp_: return 0
    if self.has_sourcefp_ and self.sourcefp_ != x.sourcefp_: return 0
    if self.has_sourcesitefp_ != x.has_sourcesitefp_: return 0
    if self.has_sourcesitefp_ and self.sourcesitefp_ != x.sourcesitefp_: return 0
    if self.has_targetsitefps_ != x.has_targetsitefps_: return 0
    if self.has_targetsitefps_ and self.targetsitefps_ != x.targetsitefps_: return 0
    if len(self.wt_) != len(x.wt_): return 0
    for e1, e2 in zip(self.wt_, x.wt_):
      if e1 != e2: return 0
    if len(self.edgeinfo_) != len(x.edgeinfo_): return 0
    for e1, e2 in zip(self.edgeinfo_, x.edgeinfo_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_timestamp_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: timestamp not set.')
    if (not self.has_targetfps_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: targetfps not set.')
    for i in xrange(len(self.wt_)):
      if (not self.wt_[i].IsInitialized(debug_strs)): initialized=0
    for i in xrange(len(self.edgeinfo_)):
      if (not self.edgeinfo_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.timestamp_)
    n += self.lengthString(len(self.targetfps_))
    if (self.has_targethostids_): n += 1 + self.lengthString(len(self.targethostids_))
    if (self.has_targethostips_): n += 1 + self.lengthString(len(self.targethostips_))
    if (self.has_sourceip_): n += 1 + self.lengthVarInt64(self.sourceip_)
    if (self.has_lcasourcehostid_): n += 1 + self.lengthVarInt64(self.lcasourcehostid_)
    if (self.has_sourcepr_): n += 1 + self.lengthVarInt64(self.sourcepr_)
    if (self.has_sourcefp_): n += 1 + self.lengthVarInt64(self.sourcefp_)
    if (self.has_sourcesitefp_): n += 1 + self.lengthVarInt64(self.sourcesitefp_)
    if (self.has_targetsitefps_): n += 1 + self.lengthString(len(self.targetsitefps_))
    n += 2 * len(self.wt_)
    for i in xrange(len(self.wt_)): n += self.wt_[i].ByteSize()
    n += 2 * len(self.edgeinfo_)
    for i in xrange(len(self.edgeinfo_)): n += self.edgeinfo_[i].ByteSize()
    return n + 2

  def Clear(self):
    self.clear_timestamp()
    self.clear_targetfps()
    self.clear_targethostids()
    self.clear_targethostips()
    self.clear_sourceip()
    self.clear_lcasourcehostid()
    self.clear_sourcepr()
    self.clear_sourcefp()
    self.clear_sourcesitefp()
    self.clear_targetsitefps()
    self.clear_wt()
    self.clear_edgeinfo()

  def OutputUnchecked(self, out):
    out.putVarInt32(8)
    out.putVarInt32(self.timestamp_)
    out.putVarInt32(18)
    out.putPrefixedString(self.targetfps_)
    for i in xrange(len(self.wt_)):
      out.putVarInt32(27)
      self.wt_[i].OutputUnchecked(out)
      out.putVarInt32(28)
    if (self.has_sourceip_):
      out.putVarInt32(48)
      out.putVarInt32(self.sourceip_)
    if (self.has_sourcepr_):
      out.putVarInt32(56)
      out.putVarInt32(self.sourcepr_)
    if (self.has_targethostids_):
      out.putVarInt32(66)
      out.putPrefixedString(self.targethostids_)
    if (self.has_targethostips_):
      out.putVarInt32(74)
      out.putPrefixedString(self.targethostips_)
    if (self.has_lcasourcehostid_):
      out.putVarInt32(80)
      out.putVarUint64(self.lcasourcehostid_)
    if (self.has_sourcefp_):
      out.putVarInt32(88)
      out.putVarUint64(self.sourcefp_)
    if (self.has_sourcesitefp_):
      out.putVarInt32(96)
      out.putVarUint64(self.sourcesitefp_)
    if (self.has_targetsitefps_):
      out.putVarInt32(106)
      out.putPrefixedString(self.targetsitefps_)
    for i in xrange(len(self.edgeinfo_)):
      out.putVarInt32(115)
      self.edgeinfo_[i].OutputUnchecked(out)
      out.putVarInt32(116)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_timestamp(d.getVarInt32())
        continue
      if tt == 18:
        self.set_targetfps(d.getPrefixedString())
        continue
      if tt == 27:
        self.add_wt().TryMerge(d)
        continue
      if tt == 48:
        self.set_sourceip(d.getVarInt32())
        continue
      if tt == 56:
        self.set_sourcepr(d.getVarInt32())
        continue
      if tt == 66:
        self.set_targethostids(d.getPrefixedString())
        continue
      if tt == 74:
        self.set_targethostips(d.getPrefixedString())
        continue
      if tt == 80:
        self.set_lcasourcehostid(d.getVarUint64())
        continue
      if tt == 88:
        self.set_sourcefp(d.getVarUint64())
        continue
      if tt == 96:
        self.set_sourcesitefp(d.getVarUint64())
        continue
      if tt == 106:
        self.set_targetsitefps(d.getPrefixedString())
        continue
      if tt == 115:
        self.add_edgeinfo().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_timestamp_: res+=prefix+("Timestamp: %s\n" % self.DebugFormatInt32(self.timestamp_))
    if self.has_targetfps_: res+=prefix+("TargetFPs: %s\n" % self.DebugFormatString(self.targetfps_))
    if self.has_targethostids_: res+=prefix+("TargetHostIDs: %s\n" % self.DebugFormatString(self.targethostids_))
    if self.has_targethostips_: res+=prefix+("TargetHostIPs: %s\n" % self.DebugFormatString(self.targethostips_))
    if self.has_sourceip_: res+=prefix+("SourceIP: %s\n" % self.DebugFormatInt32(self.sourceip_))
    if self.has_lcasourcehostid_: res+=prefix+("LCASourceHostID: %s\n" % self.DebugFormatInt64(self.lcasourcehostid_))
    if self.has_sourcepr_: res+=prefix+("SourcePR: %s\n" % self.DebugFormatInt32(self.sourcepr_))
    if self.has_sourcefp_: res+=prefix+("SourceFP: %s\n" % self.DebugFormatInt64(self.sourcefp_))
    if self.has_sourcesitefp_: res+=prefix+("SourceSiteFP: %s\n" % self.DebugFormatInt64(self.sourcesitefp_))
    if self.has_targetsitefps_: res+=prefix+("TargetSiteFPs: %s\n" % self.DebugFormatString(self.targetsitefps_))
    cnt=0
    for e in self.wt_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Wt%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    cnt=0
    for e in self.edgeinfo_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("EdgeInfo%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kTimestamp = 1
  kTargetFPs = 2
  kTargetHostIDs = 8
  kTargetHostIPs = 9
  kSourceIP = 6
  kLCASourceHostID = 10
  kSourcePR = 7
  kSourceFP = 11
  kSourceSiteFP = 12
  kTargetSiteFPs = 13
  kWtGroup = 3
  kWtIndex = 4
  kWtWeight = 5
  kEdgeInfoGroup = 14
  kEdgeInfoindex = 15
  kEdgeInfoondomain = 16

  _TEXT = (
   "ErrorCode",  #   0
   "Timestamp",  #   1
   "TargetFPs",  #   2
   "Wt",  #   3
   "Index",  #   4
   "Weight",  #   5
   "SourceIP",  #   6
   "SourcePR",  #   7
   "TargetHostIDs",  #   8
   "TargetHostIPs",  #   9
   "LCASourceHostID",  #  10
   "SourceFP",  #  11
   "SourceSiteFP",  #  12
   "TargetSiteFPs",  #  13
   "EdgeInfo",  #  14
   "index",  #  15
   "ondomain",  #  16
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STARTGROUP,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.FLOAT,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.STRING,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

   ProtocolBuffer.Encoder.NUMERIC,  #  12

   ProtocolBuffer.Encoder.STRING,  #  13

   ProtocolBuffer.Encoder.STARTGROUP,  #  14

   ProtocolBuffer.Encoder.NUMERIC,  #  15

   ProtocolBuffer.Encoder.NUMERIC,  #  16

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x18,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x67,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x05,
    0x47,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x13,
    0x1a,
    0x09,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x46,
    0x50,
    0x73,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x02,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x49,
    0x44,
    0x73,
    0x20,
    0x08,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x49,
    0x50,
    0x73,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x50,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x4c,
    0x43,
    0x41,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x49,
    0x44,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x50,
    0x52,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x46,
    0x50,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x53,
    0x69,
    0x74,
    0x65,
    0x46,
    0x50,
    0x20,
    0x0c,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x53,
    0x69,
    0x74,
    0x65,
    0x46,
    0x50,
    0x73,
    0x20,
    0x0d,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x02,
    0x57,
    0x74,
    0x20,
    0x03,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x57,
    0x74,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x0a,
    0x14,
    0x13,
    0x1a,
    0x09,
    0x57,
    0x74,
    0x2e,
    0x57,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x05,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x02,
    0x60,
    0x0a,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x45,
    0x64,
    0x67,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x20,
    0x0e,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x45,
    0x64,
    0x67,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x20,
    0x0f,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x0d,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x45,
    0x64,
    0x67,
    0x65,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x6f,
    0x6e,
    0x64,
    0x6f,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x20,
    0x10,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x60,
    0x0d,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class GAnchors(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.wordtable_ = ""
    self.phrasetable_ = ""
    self.iporglangtable_ = ""
    self.sitenametable_ = ""
    self.targetdoclength_ = 0
    self.targetiporglang_ = 0
    self.srcanchors_ = ""
    self.has_wordtable_ = 0
    self.has_phrasetable_ = 0
    self.has_iporglangtable_ = 0
    self.has_sitenametable_ = 0
    self.has_targetdoclength_ = 0
    self.has_targetiporglang_ = 0
    self.has_srcanchors_ = 0
    if contents is not None: self.MergeFromString(contents)

  def wordtable(self): return self.wordtable_

  def set_wordtable(self, x):
    self.has_wordtable_ = 1
    self.wordtable_ = x

  def clear_wordtable(self):
    self.has_wordtable_ = 0
    self.wordtable_ = ""

  def has_wordtable(self): return self.has_wordtable_

  def phrasetable(self): return self.phrasetable_

  def set_phrasetable(self, x):
    self.has_phrasetable_ = 1
    self.phrasetable_ = x

  def clear_phrasetable(self):
    self.has_phrasetable_ = 0
    self.phrasetable_ = ""

  def has_phrasetable(self): return self.has_phrasetable_

  def iporglangtable(self): return self.iporglangtable_

  def set_iporglangtable(self, x):
    self.has_iporglangtable_ = 1
    self.iporglangtable_ = x

  def clear_iporglangtable(self):
    self.has_iporglangtable_ = 0
    self.iporglangtable_ = ""

  def has_iporglangtable(self): return self.has_iporglangtable_

  def sitenametable(self): return self.sitenametable_

  def set_sitenametable(self, x):
    self.has_sitenametable_ = 1
    self.sitenametable_ = x

  def clear_sitenametable(self):
    self.has_sitenametable_ = 0
    self.sitenametable_ = ""

  def has_sitenametable(self): return self.has_sitenametable_

  def targetdoclength(self): return self.targetdoclength_

  def set_targetdoclength(self, x):
    self.has_targetdoclength_ = 1
    self.targetdoclength_ = x

  def clear_targetdoclength(self):
    self.has_targetdoclength_ = 0
    self.targetdoclength_ = 0

  def has_targetdoclength(self): return self.has_targetdoclength_

  def targetiporglang(self): return self.targetiporglang_

  def set_targetiporglang(self, x):
    self.has_targetiporglang_ = 1
    self.targetiporglang_ = x

  def clear_targetiporglang(self):
    self.has_targetiporglang_ = 0
    self.targetiporglang_ = 0

  def has_targetiporglang(self): return self.has_targetiporglang_

  def srcanchors(self): return self.srcanchors_

  def set_srcanchors(self, x):
    self.has_srcanchors_ = 1
    self.srcanchors_ = x

  def clear_srcanchors(self):
    self.has_srcanchors_ = 0
    self.srcanchors_ = ""

  def has_srcanchors(self): return self.has_srcanchors_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_wordtable()): self.set_wordtable(x.wordtable())
    if (x.has_phrasetable()): self.set_phrasetable(x.phrasetable())
    if (x.has_iporglangtable()): self.set_iporglangtable(x.iporglangtable())
    if (x.has_sitenametable()): self.set_sitenametable(x.sitenametable())
    if (x.has_targetdoclength()): self.set_targetdoclength(x.targetdoclength())
    if (x.has_targetiporglang()): self.set_targetiporglang(x.targetiporglang())
    if (x.has_srcanchors()): self.set_srcanchors(x.srcanchors())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GAnchors', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GAnchors')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GAnchors', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GAnchors', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GAnchors', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_wordtable_ != x.has_wordtable_: return 0
    if self.has_wordtable_ and self.wordtable_ != x.wordtable_: return 0
    if self.has_phrasetable_ != x.has_phrasetable_: return 0
    if self.has_phrasetable_ and self.phrasetable_ != x.phrasetable_: return 0
    if self.has_iporglangtable_ != x.has_iporglangtable_: return 0
    if self.has_iporglangtable_ and self.iporglangtable_ != x.iporglangtable_: return 0
    if self.has_sitenametable_ != x.has_sitenametable_: return 0
    if self.has_sitenametable_ and self.sitenametable_ != x.sitenametable_: return 0
    if self.has_targetdoclength_ != x.has_targetdoclength_: return 0
    if self.has_targetdoclength_ and self.targetdoclength_ != x.targetdoclength_: return 0
    if self.has_targetiporglang_ != x.has_targetiporglang_: return 0
    if self.has_targetiporglang_ and self.targetiporglang_ != x.targetiporglang_: return 0
    if self.has_srcanchors_ != x.has_srcanchors_: return 0
    if self.has_srcanchors_ and self.srcanchors_ != x.srcanchors_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_wordtable_): n += 1 + self.lengthString(len(self.wordtable_))
    if (self.has_phrasetable_): n += 1 + self.lengthString(len(self.phrasetable_))
    if (self.has_iporglangtable_): n += 1 + self.lengthString(len(self.iporglangtable_))
    if (self.has_sitenametable_): n += 1 + self.lengthString(len(self.sitenametable_))
    if (self.has_targetdoclength_): n += 1 + self.lengthVarInt64(self.targetdoclength_)
    if (self.has_targetiporglang_): n += 1 + self.lengthVarInt64(self.targetiporglang_)
    if (self.has_srcanchors_): n += 1 + self.lengthString(len(self.srcanchors_))
    return n + 0

  def Clear(self):
    self.clear_wordtable()
    self.clear_phrasetable()
    self.clear_iporglangtable()
    self.clear_sitenametable()
    self.clear_targetdoclength()
    self.clear_targetiporglang()
    self.clear_srcanchors()

  def OutputUnchecked(self, out):
    if (self.has_wordtable_):
      out.putVarInt32(10)
      out.putPrefixedString(self.wordtable_)
    if (self.has_phrasetable_):
      out.putVarInt32(18)
      out.putPrefixedString(self.phrasetable_)
    if (self.has_iporglangtable_):
      out.putVarInt32(26)
      out.putPrefixedString(self.iporglangtable_)
    if (self.has_targetdoclength_):
      out.putVarInt32(32)
      out.putVarInt32(self.targetdoclength_)
    if (self.has_targetiporglang_):
      out.putVarInt32(40)
      out.putVarInt32(self.targetiporglang_)
    if (self.has_srcanchors_):
      out.putVarInt32(50)
      out.putPrefixedString(self.srcanchors_)
    if (self.has_sitenametable_):
      out.putVarInt32(58)
      out.putPrefixedString(self.sitenametable_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_wordtable(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_phrasetable(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_iporglangtable(d.getPrefixedString())
        continue
      if tt == 32:
        self.set_targetdoclength(d.getVarInt32())
        continue
      if tt == 40:
        self.set_targetiporglang(d.getVarInt32())
        continue
      if tt == 50:
        self.set_srcanchors(d.getPrefixedString())
        continue
      if tt == 58:
        self.set_sitenametable(d.getPrefixedString())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_wordtable_: res+=prefix+("WordTable: %s\n" % self.DebugFormatString(self.wordtable_))
    if self.has_phrasetable_: res+=prefix+("PhraseTable: %s\n" % self.DebugFormatString(self.phrasetable_))
    if self.has_iporglangtable_: res+=prefix+("IPOrgLangTable: %s\n" % self.DebugFormatString(self.iporglangtable_))
    if self.has_sitenametable_: res+=prefix+("SiteNameTable: %s\n" % self.DebugFormatString(self.sitenametable_))
    if self.has_targetdoclength_: res+=prefix+("TargetDocLength: %s\n" % self.DebugFormatInt32(self.targetdoclength_))
    if self.has_targetiporglang_: res+=prefix+("TargetIPOrgLang: %s\n" % self.DebugFormatInt32(self.targetiporglang_))
    if self.has_srcanchors_: res+=prefix+("SrcAnchors: %s\n" % self.DebugFormatString(self.srcanchors_))
    return res

  kWordTable = 1
  kPhraseTable = 2
  kIPOrgLangTable = 3
  kSiteNameTable = 7
  kTargetDocLength = 4
  kTargetIPOrgLang = 5
  kSrcAnchors = 6

  _TEXT = (
   "ErrorCode",  #   0
   "WordTable",  #   1
   "PhraseTable",  #   2
   "IPOrgLangTable",  #   3
   "TargetDocLength",  #   4
   "TargetIPOrgLang",  #   5
   "SrcAnchors",  #   6
   "SiteNameTable",  #   7
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.STRING,  #   7

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x18,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x67,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x08,
    0x47,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x13,
    0x1a,
    0x09,
    0x57,
    0x6f,
    0x72,
    0x64,
    0x54,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x50,
    0x68,
    0x72,
    0x61,
    0x73,
    0x65,
    0x54,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x49,
    0x50,
    0x4f,
    0x72,
    0x67,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x54,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x53,
    0x69,
    0x74,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x54,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x07,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x44,
    0x6f,
    0x63,
    0x4c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x49,
    0x50,
    0x4f,
    0x72,
    0x67,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x53,
    0x72,
    0x63,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class AnchorAttributes(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.linkhash_ = 0
    self.fontsize_ = 3
    self.demotionreason_ = 0
    self.weight_ = 127
    self.deleted_ = 0
    self.onsite_ = 0
    self.sitenameidx_ = 0
    self.indyrank_ = 0
    self.context_ = 0
    self.has_linkhash_ = 0
    self.has_fontsize_ = 0
    self.has_demotionreason_ = 0
    self.has_weight_ = 0
    self.has_deleted_ = 0
    self.has_onsite_ = 0
    self.has_sitenameidx_ = 0
    self.has_indyrank_ = 0
    self.has_context_ = 0
    if contents is not None: self.MergeFromString(contents)

  def linkhash(self): return self.linkhash_

  def set_linkhash(self, x):
    self.has_linkhash_ = 1
    self.linkhash_ = x

  def clear_linkhash(self):
    self.has_linkhash_ = 0
    self.linkhash_ = 0

  def has_linkhash(self): return self.has_linkhash_

  def fontsize(self): return self.fontsize_

  def set_fontsize(self, x):
    self.has_fontsize_ = 1
    self.fontsize_ = x

  def clear_fontsize(self):
    self.has_fontsize_ = 0
    self.fontsize_ = 3

  def has_fontsize(self): return self.has_fontsize_

  def demotionreason(self): return self.demotionreason_

  def set_demotionreason(self, x):
    self.has_demotionreason_ = 1
    self.demotionreason_ = x

  def clear_demotionreason(self):
    self.has_demotionreason_ = 0
    self.demotionreason_ = 0

  def has_demotionreason(self): return self.has_demotionreason_

  def weight(self): return self.weight_

  def set_weight(self, x):
    self.has_weight_ = 1
    self.weight_ = x

  def clear_weight(self):
    self.has_weight_ = 0
    self.weight_ = 127

  def has_weight(self): return self.has_weight_

  def deleted(self): return self.deleted_

  def set_deleted(self, x):
    self.has_deleted_ = 1
    self.deleted_ = x

  def clear_deleted(self):
    self.has_deleted_ = 0
    self.deleted_ = 0

  def has_deleted(self): return self.has_deleted_

  def onsite(self): return self.onsite_

  def set_onsite(self, x):
    self.has_onsite_ = 1
    self.onsite_ = x

  def clear_onsite(self):
    self.has_onsite_ = 0
    self.onsite_ = 0

  def has_onsite(self): return self.has_onsite_

  def sitenameidx(self): return self.sitenameidx_

  def set_sitenameidx(self, x):
    self.has_sitenameidx_ = 1
    self.sitenameidx_ = x

  def clear_sitenameidx(self):
    self.has_sitenameidx_ = 0
    self.sitenameidx_ = 0

  def has_sitenameidx(self): return self.has_sitenameidx_

  def indyrank(self): return self.indyrank_

  def set_indyrank(self, x):
    self.has_indyrank_ = 1
    self.indyrank_ = x

  def clear_indyrank(self):
    self.has_indyrank_ = 0
    self.indyrank_ = 0

  def has_indyrank(self): return self.has_indyrank_

  def context(self): return self.context_

  def set_context(self, x):
    self.has_context_ = 1
    self.context_ = x

  def clear_context(self):
    self.has_context_ = 0
    self.context_ = 0

  def has_context(self): return self.has_context_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_linkhash()): self.set_linkhash(x.linkhash())
    if (x.has_fontsize()): self.set_fontsize(x.fontsize())
    if (x.has_demotionreason()): self.set_demotionreason(x.demotionreason())
    if (x.has_weight()): self.set_weight(x.weight())
    if (x.has_deleted()): self.set_deleted(x.deleted())
    if (x.has_onsite()): self.set_onsite(x.onsite())
    if (x.has_sitenameidx()): self.set_sitenameidx(x.sitenameidx())
    if (x.has_indyrank()): self.set_indyrank(x.indyrank())
    if (x.has_context()): self.set_context(x.context())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'AnchorAttributes', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'AnchorAttributes')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'AnchorAttributes', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'AnchorAttributes', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'AnchorAttributes', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_linkhash_ != x.has_linkhash_: return 0
    if self.has_linkhash_ and self.linkhash_ != x.linkhash_: return 0
    if self.has_fontsize_ != x.has_fontsize_: return 0
    if self.has_fontsize_ and self.fontsize_ != x.fontsize_: return 0
    if self.has_demotionreason_ != x.has_demotionreason_: return 0
    if self.has_demotionreason_ and self.demotionreason_ != x.demotionreason_: return 0
    if self.has_weight_ != x.has_weight_: return 0
    if self.has_weight_ and self.weight_ != x.weight_: return 0
    if self.has_deleted_ != x.has_deleted_: return 0
    if self.has_deleted_ and self.deleted_ != x.deleted_: return 0
    if self.has_onsite_ != x.has_onsite_: return 0
    if self.has_onsite_ and self.onsite_ != x.onsite_: return 0
    if self.has_sitenameidx_ != x.has_sitenameidx_: return 0
    if self.has_sitenameidx_ and self.sitenameidx_ != x.sitenameidx_: return 0
    if self.has_indyrank_ != x.has_indyrank_: return 0
    if self.has_indyrank_ and self.indyrank_ != x.indyrank_: return 0
    if self.has_context_ != x.has_context_: return 0
    if self.has_context_ and self.context_ != x.context_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_linkhash_): n += 1 + self.lengthVarInt64(self.linkhash_)
    if (self.has_fontsize_): n += 1 + self.lengthVarInt64(self.fontsize_)
    if (self.has_demotionreason_): n += 1 + self.lengthVarInt64(self.demotionreason_)
    if (self.has_weight_): n += 1 + self.lengthVarInt64(self.weight_)
    if (self.has_deleted_): n += 2
    if (self.has_onsite_): n += 2
    if (self.has_sitenameidx_): n += 1 + self.lengthVarInt64(self.sitenameidx_)
    if (self.has_indyrank_): n += 1 + self.lengthVarInt64(self.indyrank_)
    if (self.has_context_): n += 1 + self.lengthVarInt64(self.context_)
    return n + 0

  def Clear(self):
    self.clear_linkhash()
    self.clear_fontsize()
    self.clear_demotionreason()
    self.clear_weight()
    self.clear_deleted()
    self.clear_onsite()
    self.clear_sitenameidx()
    self.clear_indyrank()
    self.clear_context()

  def OutputUnchecked(self, out):
    if (self.has_linkhash_):
      out.putVarInt32(8)
      out.putVarUint64(self.linkhash_)
    if (self.has_fontsize_):
      out.putVarInt32(16)
      out.putVarInt32(self.fontsize_)
    if (self.has_demotionreason_):
      out.putVarInt32(24)
      out.putVarInt32(self.demotionreason_)
    if (self.has_weight_):
      out.putVarInt32(32)
      out.putVarInt32(self.weight_)
    if (self.has_deleted_):
      out.putVarInt32(40)
      out.putBoolean(self.deleted_)
    if (self.has_onsite_):
      out.putVarInt32(48)
      out.putBoolean(self.onsite_)
    if (self.has_sitenameidx_):
      out.putVarInt32(56)
      out.putVarInt32(self.sitenameidx_)
    if (self.has_indyrank_):
      out.putVarInt32(64)
      out.putVarInt32(self.indyrank_)
    if (self.has_context_):
      out.putVarInt32(72)
      out.putVarInt32(self.context_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_linkhash(d.getVarUint64())
        continue
      if tt == 16:
        self.set_fontsize(d.getVarInt32())
        continue
      if tt == 24:
        self.set_demotionreason(d.getVarInt32())
        continue
      if tt == 32:
        self.set_weight(d.getVarInt32())
        continue
      if tt == 40:
        self.set_deleted(d.getBoolean())
        continue
      if tt == 48:
        self.set_onsite(d.getBoolean())
        continue
      if tt == 56:
        self.set_sitenameidx(d.getVarInt32())
        continue
      if tt == 64:
        self.set_indyrank(d.getVarInt32())
        continue
      if tt == 72:
        self.set_context(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_linkhash_: res+=prefix+("LinkHash: %s\n" % self.DebugFormatInt64(self.linkhash_))
    if self.has_fontsize_: res+=prefix+("FontSize: %s\n" % self.DebugFormatInt32(self.fontsize_))
    if self.has_demotionreason_: res+=prefix+("DemotionReason: %s\n" % self.DebugFormatInt32(self.demotionreason_))
    if self.has_weight_: res+=prefix+("Weight: %s\n" % self.DebugFormatInt32(self.weight_))
    if self.has_deleted_: res+=prefix+("Deleted: %s\n" % self.DebugFormatBool(self.deleted_))
    if self.has_onsite_: res+=prefix+("OnSite: %s\n" % self.DebugFormatBool(self.onsite_))
    if self.has_sitenameidx_: res+=prefix+("SiteNameIdx: %s\n" % self.DebugFormatInt32(self.sitenameidx_))
    if self.has_indyrank_: res+=prefix+("IndyRank: %s\n" % self.DebugFormatInt32(self.indyrank_))
    if self.has_context_: res+=prefix+("context: %s\n" % self.DebugFormatInt32(self.context_))
    return res

  kLinkHash = 1
  kFontSize = 2
  kDemotionReason = 3
  kWeight = 4
  kDeleted = 5
  kOnSite = 6
  kSiteNameIdx = 7
  kIndyRank = 8
  kcontext = 9

  _TEXT = (
   "ErrorCode",  #   0
   "LinkHash",  #   1
   "FontSize",  #   2
   "DemotionReason",  #   3
   "Weight",  #   4
   "Deleted",  #   5
   "OnSite",  #   6
   "SiteNameIdx",  #   7
   "IndyRank",  #   8
   "context",  #   9
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

   ProtocolBuffer.Encoder.NUMERIC,  #   9

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x18,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x67,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x10,
    0x41,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x41,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x73,
    0x13,
    0x1a,
    0x08,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x48,
    0x61,
    0x73,
    0x68,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x46,
    0x6f,
    0x6e,
    0x74,
    0x53,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x33,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x33,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x44,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x52,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x57,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x03,
    0x31,
    0x32,
    0x37,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x03,
    0x31,
    0x32,
    0x37,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x44,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x64,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x4f,
    0x6e,
    0x53,
    0x69,
    0x74,
    0x65,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0b,
    0x53,
    0x69,
    0x74,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x49,
    0x64,
    0x78,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x08,
    0x49,
    0x6e,
    0x64,
    0x79,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x07,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0x09,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())
class GBackLink_Link(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.sourceid_ = 0
    self.sourcepr_ = 0
    self.has_sourceid_ = 0
    self.has_sourcepr_ = 0
    if contents is not None: self.MergeFromString(contents)

  def sourceid(self): return self.sourceid_

  def set_sourceid(self, x):
    self.has_sourceid_ = 1
    self.sourceid_ = x

  def clear_sourceid(self):
    self.has_sourceid_ = 0
    self.sourceid_ = 0

  def has_sourceid(self): return self.has_sourceid_

  def sourcepr(self): return self.sourcepr_

  def set_sourcepr(self, x):
    self.has_sourcepr_ = 1
    self.sourcepr_ = x

  def clear_sourcepr(self):
    self.has_sourcepr_ = 0
    self.sourcepr_ = 0

  def has_sourcepr(self): return self.has_sourcepr_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_sourceid()): self.set_sourceid(x.sourceid())
    if (x.has_sourcepr()): self.set_sourcepr(x.sourcepr())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GBackLink', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GBackLink')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GBackLink', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GBackLink', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GBackLink', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_sourceid_ != x.has_sourceid_: return 0
    if self.has_sourceid_ and self.sourceid_ != x.sourceid_: return 0
    if self.has_sourcepr_ != x.has_sourcepr_: return 0
    if self.has_sourcepr_ and self.sourcepr_ != x.sourcepr_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    if (not self.has_sourceid_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: sourceid not set.')
    if (not self.has_sourcepr_):
      initialized = 0
      if debug_strs is not None:
        debug_strs.append('Required field: sourcepr not set.')
    return initialized

  def ByteSize(self):
    n = 0
    n += self.lengthVarInt64(self.sourceid_)
    n += self.lengthVarInt64(self.sourcepr_)
    return n + 2

  def Clear(self):
    self.clear_sourceid()
    self.clear_sourcepr()

  def OutputUnchecked(self, out):
    out.putVarInt32(24)
    out.putVarUint64(self.sourceid_)
    out.putVarInt32(32)
    out.putVarInt32(self.sourcepr_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 20: break
      if tt == 24:
        self.set_sourceid(d.getVarUint64())
        continue
      if tt == 32:
        self.set_sourcepr(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_sourceid_: res+=prefix+("SourceID: %s\n" % self.DebugFormatInt64(self.sourceid_))
    if self.has_sourcepr_: res+=prefix+("SourcePR: %s\n" % self.DebugFormatInt32(self.sourcepr_))
    return res

class GBackLink(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.totallinks_ = 0
    self.link_ = []
    self.has_totallinks_ = 0
    if contents is not None: self.MergeFromString(contents)

  def totallinks(self): return self.totallinks_

  def set_totallinks(self, x):
    self.has_totallinks_ = 1
    self.totallinks_ = x

  def clear_totallinks(self):
    self.has_totallinks_ = 0
    self.totallinks_ = 0

  def has_totallinks(self): return self.has_totallinks_

  def link_size(self): return len(self.link_)
  def link_list(self): return self.link_

  def link(self, i):
    return self.link_[i]

  def mutable_link(self, i):
    return self.link_[i]

  def add_link(self):
    x = GBackLink_Link()
    self.link_.append(x)
    return x

  def clear_link(self):
    self.link_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_totallinks()): self.set_totallinks(x.totallinks())
    for i in xrange(x.link_size()): self.add_link().CopyFrom(x.link(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'GBackLink', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'GBackLink')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'GBackLink', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'GBackLink', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'GBackLink', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_totallinks_ != x.has_totallinks_: return 0
    if self.has_totallinks_ and self.totallinks_ != x.totallinks_: return 0
    if len(self.link_) != len(x.link_): return 0
    for e1, e2 in zip(self.link_, x.link_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.link_)):
      if (not self.link_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_totallinks_): n += 1 + self.lengthVarInt64(self.totallinks_)
    n += 2 * len(self.link_)
    for i in xrange(len(self.link_)): n += self.link_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_totallinks()
    self.clear_link()

  def OutputUnchecked(self, out):
    if (self.has_totallinks_):
      out.putVarInt32(8)
      out.putVarInt64(self.totallinks_)
    for i in xrange(len(self.link_)):
      out.putVarInt32(19)
      self.link_[i].OutputUnchecked(out)
      out.putVarInt32(20)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_totallinks(d.getVarInt64())
        continue
      if tt == 19:
        self.add_link().TryMerge(d)
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_totallinks_: res+=prefix+("TotalLinks: %s\n" % self.DebugFormatInt64(self.totallinks_))
    cnt=0
    for e in self.link_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Link%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  kTotalLinks = 1
  kLinkGroup = 2
  kLinkSourceID = 3
  kLinkSourcePR = 4

  _TEXT = (
   "ErrorCode",  #   0
   "TotalLinks",  #   1
   "Link",  #   2
   "SourceID",  #   3
   "SourcePR",  #   4
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.STARTGROUP,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x18,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x65,
    0x72,
    0x2f,
    0x67,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x09,
    0x47,
    0x42,
    0x61,
    0x63,
    0x6b,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x13,
    0x1a,
    0x0a,
    0x54,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x03,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x02,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x49,
    0x44,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x02,
    0x60,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0d,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x2e,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x50,
    0x52,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x02,
    0x60,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['GLink','GLink_Wt','GLink_EdgeInfo','GAnchors','AnchorAttributes','GBackLink','GBackLink_Link']
