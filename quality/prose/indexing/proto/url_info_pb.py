# This file automatically generated by protocol-compiler from quality/prose/indexing/proto/url_info.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class CSEUrlInfo(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.cse_id_ = ""
    self.label_ = ""
    self.user_ = 0
    self.score_ = 0.0
    self.has_cse_id_ = 0
    self.has_label_ = 0
    self.has_user_ = 0
    self.has_score_ = 0
    if contents is not None: self.MergeFromString(contents)

  def cse_id(self): return self.cse_id_

  def set_cse_id(self, x):
    self.has_cse_id_ = 1
    self.cse_id_ = x

  def clear_cse_id(self):
    self.has_cse_id_ = 0
    self.cse_id_ = ""

  def has_cse_id(self): return self.has_cse_id_

  def label(self): return self.label_

  def set_label(self, x):
    self.has_label_ = 1
    self.label_ = x

  def clear_label(self):
    self.has_label_ = 0
    self.label_ = ""

  def has_label(self): return self.has_label_

  def user(self): return self.user_

  def set_user(self, x):
    self.has_user_ = 1
    self.user_ = x

  def clear_user(self):
    self.has_user_ = 0
    self.user_ = 0

  def has_user(self): return self.has_user_

  def score(self): return self.score_

  def set_score(self, x):
    self.has_score_ = 1
    self.score_ = x

  def clear_score(self):
    self.has_score_ = 0
    self.score_ = 0.0

  def has_score(self): return self.has_score_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_cse_id()): self.set_cse_id(x.cse_id())
    if (x.has_label()): self.set_label(x.label())
    if (x.has_user()): self.set_user(x.user())
    if (x.has_score()): self.set_score(x.score())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'quality_prose.CSEUrlInfo', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'quality_prose.CSEUrlInfo')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'quality_prose.CSEUrlInfo', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'quality_prose.CSEUrlInfo', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'quality_prose.CSEUrlInfo', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_cse_id_ != x.has_cse_id_: return 0
    if self.has_cse_id_ and self.cse_id_ != x.cse_id_: return 0
    if self.has_label_ != x.has_label_: return 0
    if self.has_label_ and self.label_ != x.label_: return 0
    if self.has_user_ != x.has_user_: return 0
    if self.has_user_ and self.user_ != x.user_: return 0
    if self.has_score_ != x.has_score_: return 0
    if self.has_score_ and self.score_ != x.score_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_cse_id_): n += 1 + self.lengthString(len(self.cse_id_))
    if (self.has_label_): n += 1 + self.lengthString(len(self.label_))
    if (self.has_user_): n += 1 + self.lengthVarInt64(self.user_)
    if (self.has_score_): n += 5
    return n + 0

  def Clear(self):
    self.clear_cse_id()
    self.clear_label()
    self.clear_user()
    self.clear_score()

  def OutputUnchecked(self, out):
    if (self.has_cse_id_):
      out.putVarInt32(10)
      out.putPrefixedString(self.cse_id_)
    if (self.has_label_):
      out.putVarInt32(18)
      out.putPrefixedString(self.label_)
    if (self.has_user_):
      out.putVarInt32(24)
      out.putVarUint64(self.user_)
    if (self.has_score_):
      out.putVarInt32(37)
      out.putFloat(self.score_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 10:
        self.set_cse_id(d.getPrefixedString())
        continue
      if tt == 18:
        self.set_label(d.getPrefixedString())
        continue
      if tt == 24:
        self.set_user(d.getVarUint64())
        continue
      if tt == 37:
        self.set_score(d.getFloat())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_cse_id_: res+=prefix+("cse_id: %s\n" % self.DebugFormatString(self.cse_id_))
    if self.has_label_: res+=prefix+("label: %s\n" % self.DebugFormatString(self.label_))
    if self.has_user_: res+=prefix+("user: %s\n" % self.DebugFormatInt64(self.user_))
    if self.has_score_: res+=prefix+("score: %s\n" % self.DebugFormatFloat(self.score_))
    return res

  kcse_id = 1
  klabel = 2
  kuser = 3
  kscore = 4

  _TEXT = (
   "ErrorCode",  #   0
   "cse_id",  #   1
   "label",  #   2
   "user",  #   3
   "score",  #   4
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STRING,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.FLOAT,  #   4

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x2b,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x73,
    0x65,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x69,
    0x6e,
    0x67,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x75,
    0x72,
    0x6c,
    0x5f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x18,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x5f,
    0x70,
    0x72,
    0x6f,
    0x73,
    0x65,
    0x2e,
    0x43,
    0x53,
    0x45,
    0x55,
    0x72,
    0x6c,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x13,
    0x1a,
    0x06,
    0x63,
    0x73,
    0x65,
    0x5f,
    0x69,
    0x64,
    0x20,
    0x01,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x04,
    0x75,
    0x73,
    0x65,
    0x72,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x05,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x04,
    0x28,
    0x05,
    0x30,
    0x02,
    0x38,
    0x01,
    0x14,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['CSEUrlInfo']
