# This file automatically generated by protocol-compiler from quality/rankboost/indexing/rankboost-cdoc-attachment.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class RankBoostDocAttachment(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 3803299 

  _TypeId_NAMES = {
    3803299: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)


  FORUM_ENGINE_SCORE =  120 

  _Constants_NAMES = {
    120: "FORUM_ENGINE_SCORE",
  }

  def Constants_Name(cls, x): return cls._Constants_NAMES.get(x, "")
  Constants_Name = classmethod(Constants_Name)

  def __init__(self, contents=None):
    self.link_count_ = 0
    self.offdom_link_count_ = 0
    self.paid_link_count_ = 0
    self.ppc_link_count_ = 0
    self.page_blog_score_ = 0
    self.page_wiki_score_ = 0
    self.page_forum_score_ = 0
    self.page_ppc_spam_score_ = 0
    self.has_link_count_ = 0
    self.has_offdom_link_count_ = 0
    self.has_paid_link_count_ = 0
    self.has_ppc_link_count_ = 0
    self.has_page_blog_score_ = 0
    self.has_page_wiki_score_ = 0
    self.has_page_forum_score_ = 0
    self.has_page_ppc_spam_score_ = 0
    if contents is not None: self.MergeFromString(contents)

  def link_count(self): return self.link_count_

  def set_link_count(self, x):
    self.has_link_count_ = 1
    self.link_count_ = x

  def clear_link_count(self):
    self.has_link_count_ = 0
    self.link_count_ = 0

  def has_link_count(self): return self.has_link_count_

  def offdom_link_count(self): return self.offdom_link_count_

  def set_offdom_link_count(self, x):
    self.has_offdom_link_count_ = 1
    self.offdom_link_count_ = x

  def clear_offdom_link_count(self):
    self.has_offdom_link_count_ = 0
    self.offdom_link_count_ = 0

  def has_offdom_link_count(self): return self.has_offdom_link_count_

  def paid_link_count(self): return self.paid_link_count_

  def set_paid_link_count(self, x):
    self.has_paid_link_count_ = 1
    self.paid_link_count_ = x

  def clear_paid_link_count(self):
    self.has_paid_link_count_ = 0
    self.paid_link_count_ = 0

  def has_paid_link_count(self): return self.has_paid_link_count_

  def ppc_link_count(self): return self.ppc_link_count_

  def set_ppc_link_count(self, x):
    self.has_ppc_link_count_ = 1
    self.ppc_link_count_ = x

  def clear_ppc_link_count(self):
    self.has_ppc_link_count_ = 0
    self.ppc_link_count_ = 0

  def has_ppc_link_count(self): return self.has_ppc_link_count_

  def page_blog_score(self): return self.page_blog_score_

  def set_page_blog_score(self, x):
    self.has_page_blog_score_ = 1
    self.page_blog_score_ = x

  def clear_page_blog_score(self):
    self.has_page_blog_score_ = 0
    self.page_blog_score_ = 0

  def has_page_blog_score(self): return self.has_page_blog_score_

  def page_wiki_score(self): return self.page_wiki_score_

  def set_page_wiki_score(self, x):
    self.has_page_wiki_score_ = 1
    self.page_wiki_score_ = x

  def clear_page_wiki_score(self):
    self.has_page_wiki_score_ = 0
    self.page_wiki_score_ = 0

  def has_page_wiki_score(self): return self.has_page_wiki_score_

  def page_forum_score(self): return self.page_forum_score_

  def set_page_forum_score(self, x):
    self.has_page_forum_score_ = 1
    self.page_forum_score_ = x

  def clear_page_forum_score(self):
    self.has_page_forum_score_ = 0
    self.page_forum_score_ = 0

  def has_page_forum_score(self): return self.has_page_forum_score_

  def page_ppc_spam_score(self): return self.page_ppc_spam_score_

  def set_page_ppc_spam_score(self, x):
    self.has_page_ppc_spam_score_ = 1
    self.page_ppc_spam_score_ = x

  def clear_page_ppc_spam_score(self):
    self.has_page_ppc_spam_score_ = 0
    self.page_ppc_spam_score_ = 0

  def has_page_ppc_spam_score(self): return self.has_page_ppc_spam_score_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_link_count()): self.set_link_count(x.link_count())
    if (x.has_offdom_link_count()): self.set_offdom_link_count(x.offdom_link_count())
    if (x.has_paid_link_count()): self.set_paid_link_count(x.paid_link_count())
    if (x.has_ppc_link_count()): self.set_ppc_link_count(x.ppc_link_count())
    if (x.has_page_blog_score()): self.set_page_blog_score(x.page_blog_score())
    if (x.has_page_wiki_score()): self.set_page_wiki_score(x.page_wiki_score())
    if (x.has_page_forum_score()): self.set_page_forum_score(x.page_forum_score())
    if (x.has_page_ppc_spam_score()): self.set_page_ppc_spam_score(x.page_ppc_spam_score())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'RankBoostDocAttachment', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'RankBoostDocAttachment')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'RankBoostDocAttachment', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'RankBoostDocAttachment', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'RankBoostDocAttachment', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_link_count_ != x.has_link_count_: return 0
    if self.has_link_count_ and self.link_count_ != x.link_count_: return 0
    if self.has_offdom_link_count_ != x.has_offdom_link_count_: return 0
    if self.has_offdom_link_count_ and self.offdom_link_count_ != x.offdom_link_count_: return 0
    if self.has_paid_link_count_ != x.has_paid_link_count_: return 0
    if self.has_paid_link_count_ and self.paid_link_count_ != x.paid_link_count_: return 0
    if self.has_ppc_link_count_ != x.has_ppc_link_count_: return 0
    if self.has_ppc_link_count_ and self.ppc_link_count_ != x.ppc_link_count_: return 0
    if self.has_page_blog_score_ != x.has_page_blog_score_: return 0
    if self.has_page_blog_score_ and self.page_blog_score_ != x.page_blog_score_: return 0
    if self.has_page_wiki_score_ != x.has_page_wiki_score_: return 0
    if self.has_page_wiki_score_ and self.page_wiki_score_ != x.page_wiki_score_: return 0
    if self.has_page_forum_score_ != x.has_page_forum_score_: return 0
    if self.has_page_forum_score_ and self.page_forum_score_ != x.page_forum_score_: return 0
    if self.has_page_ppc_spam_score_ != x.has_page_ppc_spam_score_: return 0
    if self.has_page_ppc_spam_score_ and self.page_ppc_spam_score_ != x.page_ppc_spam_score_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_link_count_): n += 1 + self.lengthVarInt64(self.link_count_)
    if (self.has_offdom_link_count_): n += 1 + self.lengthVarInt64(self.offdom_link_count_)
    if (self.has_paid_link_count_): n += 1 + self.lengthVarInt64(self.paid_link_count_)
    if (self.has_ppc_link_count_): n += 1 + self.lengthVarInt64(self.ppc_link_count_)
    if (self.has_page_blog_score_): n += 1 + self.lengthVarInt64(self.page_blog_score_)
    if (self.has_page_wiki_score_): n += 1 + self.lengthVarInt64(self.page_wiki_score_)
    if (self.has_page_forum_score_): n += 1 + self.lengthVarInt64(self.page_forum_score_)
    if (self.has_page_ppc_spam_score_): n += 1 + self.lengthVarInt64(self.page_ppc_spam_score_)
    return n + 0

  def Clear(self):
    self.clear_link_count()
    self.clear_offdom_link_count()
    self.clear_paid_link_count()
    self.clear_ppc_link_count()
    self.clear_page_blog_score()
    self.clear_page_wiki_score()
    self.clear_page_forum_score()
    self.clear_page_ppc_spam_score()

  def OutputUnchecked(self, out):
    if (self.has_link_count_):
      out.putVarInt32(8)
      out.putVarInt32(self.link_count_)
    if (self.has_offdom_link_count_):
      out.putVarInt32(16)
      out.putVarInt32(self.offdom_link_count_)
    if (self.has_paid_link_count_):
      out.putVarInt32(24)
      out.putVarInt32(self.paid_link_count_)
    if (self.has_ppc_link_count_):
      out.putVarInt32(32)
      out.putVarInt32(self.ppc_link_count_)
    if (self.has_page_blog_score_):
      out.putVarInt32(40)
      out.putVarInt32(self.page_blog_score_)
    if (self.has_page_wiki_score_):
      out.putVarInt32(48)
      out.putVarInt32(self.page_wiki_score_)
    if (self.has_page_forum_score_):
      out.putVarInt32(56)
      out.putVarInt32(self.page_forum_score_)
    if (self.has_page_ppc_spam_score_):
      out.putVarInt32(64)
      out.putVarInt32(self.page_ppc_spam_score_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 8:
        self.set_link_count(d.getVarInt32())
        continue
      if tt == 16:
        self.set_offdom_link_count(d.getVarInt32())
        continue
      if tt == 24:
        self.set_paid_link_count(d.getVarInt32())
        continue
      if tt == 32:
        self.set_ppc_link_count(d.getVarInt32())
        continue
      if tt == 40:
        self.set_page_blog_score(d.getVarInt32())
        continue
      if tt == 48:
        self.set_page_wiki_score(d.getVarInt32())
        continue
      if tt == 56:
        self.set_page_forum_score(d.getVarInt32())
        continue
      if tt == 64:
        self.set_page_ppc_spam_score(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_link_count_: res+=prefix+("link_count: %s\n" % self.DebugFormatInt32(self.link_count_))
    if self.has_offdom_link_count_: res+=prefix+("offdom_link_count: %s\n" % self.DebugFormatInt32(self.offdom_link_count_))
    if self.has_paid_link_count_: res+=prefix+("paid_link_count: %s\n" % self.DebugFormatInt32(self.paid_link_count_))
    if self.has_ppc_link_count_: res+=prefix+("ppc_link_count: %s\n" % self.DebugFormatInt32(self.ppc_link_count_))
    if self.has_page_blog_score_: res+=prefix+("page_blog_score: %s\n" % self.DebugFormatInt32(self.page_blog_score_))
    if self.has_page_wiki_score_: res+=prefix+("page_wiki_score: %s\n" % self.DebugFormatInt32(self.page_wiki_score_))
    if self.has_page_forum_score_: res+=prefix+("page_forum_score: %s\n" % self.DebugFormatInt32(self.page_forum_score_))
    if self.has_page_ppc_spam_score_: res+=prefix+("page_ppc_spam_score: %s\n" % self.DebugFormatInt32(self.page_ppc_spam_score_))
    return res

  klink_count = 1
  koffdom_link_count = 2
  kpaid_link_count = 3
  kppc_link_count = 4
  kpage_blog_score = 5
  kpage_wiki_score = 6
  kpage_forum_score = 7
  kpage_ppc_spam_score = 8

  _TEXT = (
   "ErrorCode",  #   0
   "link_count",  #   1
   "offdom_link_count",  #   2
   "paid_link_count",  #   3
   "ppc_link_count",  #   4
   "page_blog_score",  #   5
   "page_wiki_score",  #   6
   "page_forum_score",  #   7
   "page_ppc_spam_score",  #   8
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.NUMERIC,  #   1

   ProtocolBuffer.Encoder.NUMERIC,  #   2

   ProtocolBuffer.Encoder.NUMERIC,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.NUMERIC,  #   5

   ProtocolBuffer.Encoder.NUMERIC,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.NUMERIC,  #   8

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x3a,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x2f,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x69,
    0x6e,
    0x67,
    0x2f,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x62,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x2d,
    0x63,
    0x64,
    0x6f,
    0x63,
    0x2d,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x16,
    0x52,
    0x61,
    0x6e,
    0x6b,
    0x42,
    0x6f,
    0x6f,
    0x73,
    0x74,
    0x44,
    0x6f,
    0x63,
    0x41,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x13,
    0x1a,
    0x0a,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x01,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x11,
    0x6f,
    0x66,
    0x66,
    0x64,
    0x6f,
    0x6d,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x02,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x70,
    0x61,
    0x69,
    0x64,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x03,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0e,
    0x70,
    0x70,
    0x63,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x62,
    0x6c,
    0x6f,
    0x67,
    0x5f,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x05,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x77,
    0x69,
    0x6b,
    0x69,
    0x5f,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x06,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x10,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x66,
    0x6f,
    0x72,
    0x75,
    0x6d,
    0x5f,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x70,
    0x70,
    0x63,
    0x5f,
    0x73,
    0x70,
    0x61,
    0x6d,
    0x5f,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x08,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x30,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x01,
    0x30,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xa3,
    0x91,
    0xe8,
    0x01,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x09,
    0x43,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x12,
    0x46,
    0x4f,
    0x52,
    0x55,
    0x4d,
    0x5f,
    0x45,
    0x4e,
    0x47,
    0x49,
    0x4e,
    0x45,
    0x5f,
    0x53,
    0x43,
    0x4f,
    0x52,
    0x45,
    0x98,
    0x01,
    0x78,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['RankBoostDocAttachment']
