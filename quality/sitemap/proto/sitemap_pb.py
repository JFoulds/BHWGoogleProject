# This file automatically generated by protocol-compiler from quality/sitemap/proto/sitemap.proto
# DO NOT EDIT!

from google3.net.proto import ProtocolBuffer
import array
import thread
from google3.net.proto import _net_proto___parse__python

__pychecker__ = """maxreturns=0 maxbranches=0 no-callinit
                   unusednames=printElemNumber,debug_strs no-special"""

class Sitemap_Target(ProtocolBuffer.ProtocolMessage):
  def __init__(self, contents=None):
    self.url_ = ""
    self.score_ = 0
    self.displaytitle_ = ""
    self.deprecated_title_ = ""
    self.deprecated_anchor_ = ""
    self.deprecated_running_anchor_ = 0
    self.has_url_ = 0
    self.has_score_ = 0
    self.has_displaytitle_ = 0
    self.has_deprecated_title_ = 0
    self.has_deprecated_anchor_ = 0
    self.has_deprecated_running_anchor_ = 0
    if contents is not None: self.MergeFromString(contents)

  def url(self): return self.url_

  def set_url(self, x):
    self.has_url_ = 1
    self.url_ = x

  def clear_url(self):
    self.has_url_ = 0
    self.url_ = ""

  def has_url(self): return self.has_url_

  def score(self): return self.score_

  def set_score(self, x):
    self.has_score_ = 1
    self.score_ = x

  def clear_score(self):
    self.has_score_ = 0
    self.score_ = 0

  def has_score(self): return self.has_score_

  def displaytitle(self): return self.displaytitle_

  def set_displaytitle(self, x):
    self.has_displaytitle_ = 1
    self.displaytitle_ = x

  def clear_displaytitle(self):
    self.has_displaytitle_ = 0
    self.displaytitle_ = ""

  def has_displaytitle(self): return self.has_displaytitle_

  def deprecated_title(self): return self.deprecated_title_

  def set_deprecated_title(self, x):
    self.has_deprecated_title_ = 1
    self.deprecated_title_ = x

  def clear_deprecated_title(self):
    self.has_deprecated_title_ = 0
    self.deprecated_title_ = ""

  def has_deprecated_title(self): return self.has_deprecated_title_

  def deprecated_anchor(self): return self.deprecated_anchor_

  def set_deprecated_anchor(self, x):
    self.has_deprecated_anchor_ = 1
    self.deprecated_anchor_ = x

  def clear_deprecated_anchor(self):
    self.has_deprecated_anchor_ = 0
    self.deprecated_anchor_ = ""

  def has_deprecated_anchor(self): return self.has_deprecated_anchor_

  def deprecated_running_anchor(self): return self.deprecated_running_anchor_

  def set_deprecated_running_anchor(self, x):
    self.has_deprecated_running_anchor_ = 1
    self.deprecated_running_anchor_ = x

  def clear_deprecated_running_anchor(self):
    self.has_deprecated_running_anchor_ = 0
    self.deprecated_running_anchor_ = 0

  def has_deprecated_running_anchor(self): return self.has_deprecated_running_anchor_


  def MergeFrom(self, x):
    assert x is not self
    if (x.has_url()): self.set_url(x.url())
    if (x.has_score()): self.set_score(x.score())
    if (x.has_displaytitle()): self.set_displaytitle(x.displaytitle())
    if (x.has_deprecated_title()): self.set_deprecated_title(x.deprecated_title())
    if (x.has_deprecated_anchor()): self.set_deprecated_anchor(x.deprecated_anchor())
    if (x.has_deprecated_running_anchor()): self.set_deprecated_running_anchor(x.deprecated_running_anchor())

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'Sitemap', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'Sitemap')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'Sitemap', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'Sitemap', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'Sitemap', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_url_ != x.has_url_: return 0
    if self.has_url_ and self.url_ != x.url_: return 0
    if self.has_score_ != x.has_score_: return 0
    if self.has_score_ and self.score_ != x.score_: return 0
    if self.has_displaytitle_ != x.has_displaytitle_: return 0
    if self.has_displaytitle_ and self.displaytitle_ != x.displaytitle_: return 0
    if self.has_deprecated_title_ != x.has_deprecated_title_: return 0
    if self.has_deprecated_title_ and self.deprecated_title_ != x.deprecated_title_: return 0
    if self.has_deprecated_anchor_ != x.has_deprecated_anchor_: return 0
    if self.has_deprecated_anchor_ and self.deprecated_anchor_ != x.deprecated_anchor_: return 0
    if self.has_deprecated_running_anchor_ != x.has_deprecated_running_anchor_: return 0
    if self.has_deprecated_running_anchor_ and self.deprecated_running_anchor_ != x.deprecated_running_anchor_: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_url_): n += 1 + self.lengthString(len(self.url_))
    if (self.has_score_): n += 1 + self.lengthVarInt64(self.score_)
    if (self.has_displaytitle_): n += 1 + self.lengthString(len(self.displaytitle_))
    if (self.has_deprecated_title_): n += 1 + self.lengthString(len(self.deprecated_title_))
    if (self.has_deprecated_anchor_): n += 1 + self.lengthString(len(self.deprecated_anchor_))
    if (self.has_deprecated_running_anchor_): n += 2
    return n + 0

  def Clear(self):
    self.clear_url()
    self.clear_score()
    self.clear_displaytitle()
    self.clear_deprecated_title()
    self.clear_deprecated_anchor()
    self.clear_deprecated_running_anchor()

  def OutputUnchecked(self, out):
    if (self.has_url_):
      out.putVarInt32(18)
      out.putPrefixedString(self.url_)
    if (self.has_deprecated_title_):
      out.putVarInt32(26)
      out.putPrefixedString(self.deprecated_title_)
    if (self.has_score_):
      out.putVarInt32(32)
      out.putVarInt32(self.score_)
    if (self.has_deprecated_anchor_):
      out.putVarInt32(42)
      out.putPrefixedString(self.deprecated_anchor_)
    if (self.has_displaytitle_):
      out.putVarInt32(50)
      out.putPrefixedString(self.displaytitle_)
    if (self.has_deprecated_running_anchor_):
      out.putVarInt32(80)
      out.putBoolean(self.deprecated_running_anchor_)

  def TryMerge(self, d):
    while 1:
      tt = d.getVarInt32()
      if tt == 12: break
      if tt == 18:
        self.set_url(d.getPrefixedString())
        continue
      if tt == 26:
        self.set_deprecated_title(d.getPrefixedString())
        continue
      if tt == 32:
        self.set_score(d.getVarInt32())
        continue
      if tt == 42:
        self.set_deprecated_anchor(d.getPrefixedString())
        continue
      if tt == 50:
        self.set_displaytitle(d.getPrefixedString())
        continue
      if tt == 80:
        self.set_deprecated_running_anchor(d.getBoolean())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_url_: res+=prefix+("url: %s\n" % self.DebugFormatString(self.url_))
    if self.has_score_: res+=prefix+("score: %s\n" % self.DebugFormatInt32(self.score_))
    if self.has_displaytitle_: res+=prefix+("displaytitle: %s\n" % self.DebugFormatString(self.displaytitle_))
    if self.has_deprecated_title_: res+=prefix+("DEPRECATED_title: %s\n" % self.DebugFormatString(self.deprecated_title_))
    if self.has_deprecated_anchor_: res+=prefix+("DEPRECATED_anchor: %s\n" % self.DebugFormatString(self.deprecated_anchor_))
    if self.has_deprecated_running_anchor_: res+=prefix+("DEPRECATED_running_anchor: %s\n" % self.DebugFormatBool(self.deprecated_running_anchor_))
    return res

class Sitemap(ProtocolBuffer.ProtocolMessage):

  MESSAGE_TYPE_ID = 2342886 

  _TypeId_NAMES = {
    2342886: "MESSAGE_TYPE_ID",
  }

  def TypeId_Name(cls, x): return cls._TypeId_NAMES.get(x, "")
  TypeId_Name = classmethod(TypeId_Name)


  ORIGINAL     =    1 
  EXPANDED     =    2 
  TABLE_OF_CONTENTS =    4 

  _SitemapType_NAMES = {
    1: "ORIGINAL",
    2: "EXPANDED",
    4: "TABLE_OF_CONTENTS",
  }

  def SitemapType_Name(cls, x): return cls._SitemapType_NAMES.get(x, "")
  SitemapType_Name = classmethod(SitemapType_Name)

  def __init__(self, contents=None):
    self.source_url_ = ""
    self.deprecated_source_title_ = ""
    self.source_orgfp_ = 0
    self.sitemap_type_ = 1
    self.target_ = []
    self.has_source_url_ = 0
    self.has_deprecated_source_title_ = 0
    self.has_source_orgfp_ = 0
    self.has_sitemap_type_ = 0
    if contents is not None: self.MergeFromString(contents)

  def source_url(self): return self.source_url_

  def set_source_url(self, x):
    self.has_source_url_ = 1
    self.source_url_ = x

  def clear_source_url(self):
    self.has_source_url_ = 0
    self.source_url_ = ""

  def has_source_url(self): return self.has_source_url_

  def deprecated_source_title(self): return self.deprecated_source_title_

  def set_deprecated_source_title(self, x):
    self.has_deprecated_source_title_ = 1
    self.deprecated_source_title_ = x

  def clear_deprecated_source_title(self):
    self.has_deprecated_source_title_ = 0
    self.deprecated_source_title_ = ""

  def has_deprecated_source_title(self): return self.has_deprecated_source_title_

  def source_orgfp(self): return self.source_orgfp_

  def set_source_orgfp(self, x):
    self.has_source_orgfp_ = 1
    self.source_orgfp_ = x

  def clear_source_orgfp(self):
    self.has_source_orgfp_ = 0
    self.source_orgfp_ = 0

  def has_source_orgfp(self): return self.has_source_orgfp_

  def sitemap_type(self): return self.sitemap_type_

  def set_sitemap_type(self, x):
    self.has_sitemap_type_ = 1
    self.sitemap_type_ = x

  def clear_sitemap_type(self):
    self.has_sitemap_type_ = 0
    self.sitemap_type_ = 1

  def has_sitemap_type(self): return self.has_sitemap_type_

  def target_size(self): return len(self.target_)
  def target_list(self): return self.target_

  def target(self, i):
    return self.target_[i]

  def mutable_target(self, i):
    return self.target_[i]

  def add_target(self):
    x = Sitemap_Target()
    self.target_.append(x)
    return x

  def clear_target(self):
    self.target_ = []

  def MergeFrom(self, x):
    assert x is not self
    if (x.has_source_url()): self.set_source_url(x.source_url())
    if (x.has_deprecated_source_title()): self.set_deprecated_source_title(x.deprecated_source_title())
    if (x.has_source_orgfp()): self.set_source_orgfp(x.source_orgfp())
    if (x.has_sitemap_type()): self.set_sitemap_type(x.sitemap_type())
    for i in xrange(x.target_size()): self.add_target().CopyFrom(x.target(i))

  def _CMergeFromString(self, s):
    _net_proto___parse__python.MergeFromString(self, 'Sitemap', s)

  def _CEncode(self):
    return _net_proto___parse__python.Encode(self, 'Sitemap')

  def _CToASCII(self, output_format):
    return _net_proto___parse__python.ToASCII(self, 'Sitemap', output_format)


  def ParseASCII(self, s):
    _net_proto___parse__python.ParseASCII(self, 'Sitemap', s)


  def ParseASCIIIgnoreUnknown(self, s):
    _net_proto___parse__python.ParseASCIIIgnoreUnknown(self, 'Sitemap', s)


  def Equals(self, x):
    if x is self: return 1
    if self.has_source_url_ != x.has_source_url_: return 0
    if self.has_source_url_ and self.source_url_ != x.source_url_: return 0
    if self.has_deprecated_source_title_ != x.has_deprecated_source_title_: return 0
    if self.has_deprecated_source_title_ and self.deprecated_source_title_ != x.deprecated_source_title_: return 0
    if self.has_source_orgfp_ != x.has_source_orgfp_: return 0
    if self.has_source_orgfp_ and self.source_orgfp_ != x.source_orgfp_: return 0
    if self.has_sitemap_type_ != x.has_sitemap_type_: return 0
    if self.has_sitemap_type_ and self.sitemap_type_ != x.sitemap_type_: return 0
    if len(self.target_) != len(x.target_): return 0
    for e1, e2 in zip(self.target_, x.target_):
      if e1 != e2: return 0
    return 1

  def __eq__(self, other):
    return (other is not None) and (other.__class__ == self.__class__) and self.Equals(other)

  def __ne__(self, other):
    return not (self == other)

  def IsInitialized(self, debug_strs=None):
    initialized = 1
    for i in xrange(len(self.target_)):
      if (not self.target_[i].IsInitialized(debug_strs)): initialized=0
    return initialized

  def ByteSize(self):
    n = 0
    if (self.has_source_url_): n += 1 + self.lengthString(len(self.source_url_))
    if (self.has_deprecated_source_title_): n += 1 + self.lengthString(len(self.deprecated_source_title_))
    if (self.has_source_orgfp_): n += 1 + self.lengthVarInt64(self.source_orgfp_)
    if (self.has_sitemap_type_): n += 1 + self.lengthVarInt64(self.sitemap_type_)
    n += 2 * len(self.target_)
    for i in xrange(len(self.target_)): n += self.target_[i].ByteSize()
    return n + 0

  def Clear(self):
    self.clear_source_url()
    self.clear_deprecated_source_title()
    self.clear_source_orgfp()
    self.clear_sitemap_type()
    self.clear_target()

  def OutputUnchecked(self, out):
    for i in xrange(len(self.target_)):
      out.putVarInt32(11)
      self.target_[i].OutputUnchecked(out)
      out.putVarInt32(12)
    if (self.has_source_orgfp_):
      out.putVarInt32(56)
      out.putVarUint64(self.source_orgfp_)
    if (self.has_source_url_):
      out.putVarInt32(66)
      out.putPrefixedString(self.source_url_)
    if (self.has_deprecated_source_title_):
      out.putVarInt32(74)
      out.putPrefixedString(self.deprecated_source_title_)
    if (self.has_sitemap_type_):
      out.putVarInt32(88)
      out.putVarInt32(self.sitemap_type_)

  def TryMerge(self, d):
    while d.avail() > 0:
      tt = d.getVarInt32()
      if tt == 11:
        self.add_target().TryMerge(d)
        continue
      if tt == 56:
        self.set_source_orgfp(d.getVarUint64())
        continue
      if tt == 66:
        self.set_source_url(d.getPrefixedString())
        continue
      if tt == 74:
        self.set_deprecated_source_title(d.getPrefixedString())
        continue
      if tt == 88:
        self.set_sitemap_type(d.getVarInt32())
        continue
      # tag 0 is special: it's used to indicate an error.
      # so if we see it we raise an exception.
      if (tt == 0): raise ProtocolBuffer.ProtocolBufferDecodeError
      d.skipData(tt)


  def __str__(self, prefix="", printElemNumber=0):
    res=""
    if self.has_source_url_: res+=prefix+("source_url: %s\n" % self.DebugFormatString(self.source_url_))
    if self.has_deprecated_source_title_: res+=prefix+("DEPRECATED_source_title: %s\n" % self.DebugFormatString(self.deprecated_source_title_))
    if self.has_source_orgfp_: res+=prefix+("source_orgfp: %s\n" % self.DebugFormatInt64(self.source_orgfp_))
    if self.has_sitemap_type_: res+=prefix+("sitemap_type: %s\n" % self.DebugFormatInt32(self.sitemap_type_))
    cnt=0
    for e in self.target_:
      elm=""
      if printElemNumber: elm="(%d)" % cnt
      res+=prefix+("Target%s {\n" % elm)
      res+=e.__str__(prefix + "  ", printElemNumber)
      res+=prefix+"}\n"
      cnt+=1
    return res

  ksource_url = 8
  kDEPRECATED_source_title = 9
  ksource_orgfp = 7
  ksitemap_type = 11
  kTargetGroup = 1
  kTargeturl = 2
  kTargetscore = 4
  kTargetdisplaytitle = 6
  kTargetDEPRECATED_title = 3
  kTargetDEPRECATED_anchor = 5
  kTargetDEPRECATED_running_anchor = 10

  _TEXT = (
   "ErrorCode",  #   0
   "Target",  #   1
   "url",  #   2
   "DEPRECATED_title",  #   3
   "score",  #   4
   "DEPRECATED_anchor",  #   5
   "displaytitle",  #   6
   "source_orgfp",  #   7
   "source_url",  #   8
   "DEPRECATED_source_title",  #   9
   "DEPRECATED_running_anchor",  #  10
   "sitemap_type",  #  11
  )

  _TYPES = (
   ProtocolBuffer.Encoder.NUMERIC,  #   0
   ProtocolBuffer.Encoder.STARTGROUP,  #   1

   ProtocolBuffer.Encoder.STRING,  #   2

   ProtocolBuffer.Encoder.STRING,  #   3

   ProtocolBuffer.Encoder.NUMERIC,  #   4

   ProtocolBuffer.Encoder.STRING,  #   5

   ProtocolBuffer.Encoder.STRING,  #   6

   ProtocolBuffer.Encoder.NUMERIC,  #   7

   ProtocolBuffer.Encoder.STRING,  #   8

   ProtocolBuffer.Encoder.STRING,  #   9

   ProtocolBuffer.Encoder.NUMERIC,  #  10

   ProtocolBuffer.Encoder.NUMERIC,  #  11

  )

  # stylesheet for XML output
  _STYLE = \
   """"""
  _STYLE_CONTENT_TYPE = \
   """"""
  _SERIALIZED_DESCRIPTOR = array.array('B', [
    0x5a,
    0x23,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x2f,
    0x73,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x2f,
    0x73,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x0a,
    0x07,
    0x53,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x13,
    0x1a,
    0x0a,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x5f,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x08,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x5f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x09,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x5f,
    0x6f,
    0x72,
    0x67,
    0x66,
    0x70,
    0x20,
    0x07,
    0x28,
    0x00,
    0x30,
    0x04,
    0x38,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x73,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x5f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x0b,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x42,
    0x01,
    0x31,
    0x68,
    0x01,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x08,
    0x4f,
    0x52,
    0x49,
    0x47,
    0x49,
    0x4e,
    0x41,
    0x4c,
    0xa4,
    0x01,
    0x14,
    0x13,
    0x1a,
    0x06,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x20,
    0x01,
    0x28,
    0x03,
    0x30,
    0x0a,
    0x38,
    0x03,
    0x14,
    0x13,
    0x1a,
    0x0a,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x02,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x0c,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x04,
    0x28,
    0x00,
    0x30,
    0x05,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x13,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x06,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x17,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x03,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x18,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x05,
    0x28,
    0x02,
    0x30,
    0x09,
    0x38,
    0x01,
    0x60,
    0x04,
    0x14,
    0x13,
    0x1a,
    0x20,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x44,
    0x45,
    0x50,
    0x52,
    0x45,
    0x43,
    0x41,
    0x54,
    0x45,
    0x44,
    0x5f,
    0x72,
    0x75,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x5f,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x0a,
    0x28,
    0x00,
    0x30,
    0x08,
    0x38,
    0x01,
    0x42,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x60,
    0x04,
    0xa3,
    0x01,
    0xaa,
    0x01,
    0x07,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0xb2,
    0x01,
    0x05,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0xa4,
    0x01,
    0x14,
    0x73,
    0x7a,
    0x06,
    0x54,
    0x79,
    0x70,
    0x65,
    0x49,
    0x64,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x0f,
    0x4d,
    0x45,
    0x53,
    0x53,
    0x41,
    0x47,
    0x45,
    0x5f,
    0x54,
    0x59,
    0x50,
    0x45,
    0x5f,
    0x49,
    0x44,
    0x98,
    0x01,
    0xe6,
    0xff,
    0x8e,
    0x01,
    0x8c,
    0x01,
    0x74,
    0x73,
    0x7a,
    0x0b,
    0x53,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x54,
    0x79,
    0x70,
    0x65,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x08,
    0x4f,
    0x52,
    0x49,
    0x47,
    0x49,
    0x4e,
    0x41,
    0x4c,
    0x98,
    0x01,
    0x01,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x08,
    0x45,
    0x58,
    0x50,
    0x41,
    0x4e,
    0x44,
    0x45,
    0x44,
    0x98,
    0x01,
    0x02,
    0x8c,
    0x01,
    0x8b,
    0x01,
    0x92,
    0x01,
    0x11,
    0x54,
    0x41,
    0x42,
    0x4c,
    0x45,
    0x5f,
    0x4f,
    0x46,
    0x5f,
    0x43,
    0x4f,
    0x4e,
    0x54,
    0x45,
    0x4e,
    0x54,
    0x53,
    0x98,
    0x01,
    0x04,
    0x8c,
    0x01,
    0x74,
    ])
  _net_proto___parse__python.RegisterType(_SERIALIZED_DESCRIPTOR.tostring())

__all__ = ['Sitemap','Sitemap_Target']
